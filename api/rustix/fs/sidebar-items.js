window.SIDEBAR_ITEMS = {"constant":[["UTIME_NOW","`UTIME_NOW` for use with `utimensat`."],["UTIME_OMIT","`UTIME_OMIT` for use with `utimensat`."]],"enum":[["FileType","`S_IF*` constants. `S_IF*` constants for use with `mknodat` and `Stat`’s `st_mode` field."],["FlockOperation","`LOCK_*` constants for use with `flock`"]],"fn":[["accessat","`faccessat(dirfd, path, access, flags)`—Tests permissions for a file or directory."],["chmodat","`fchmodat(dirfd, path, mode, 0)`—Sets file or directory permissions."],["chownat","`fchownat(dirfd, path, owner, group, flags)`—Sets file or directory ownership."],["copyfile_state_alloc","`copyfile_state_alloc()`"],["copyfile_state_free","`copyfile_state_free(state)`"],["copyfile_state_get","`copyfile_state_get(state, flags, dst)`"],["copyfile_state_get_copied","`copyfile_state_get(state, COPYFILE_STATE_COPIED)`"],["cwd","`AT_FDCWD`—Returns a handle representing the current working directory."],["fallocate","`fallocate(fd, mode, offset, len)`—Adjusts file allocation."],["fchmod","`fchmod(fd)`—Sets open file or directory permissions."],["fchown","`fchown(fd)`—Sets open file or directory ownership."],["fclonefileat","`fclonefileat(src, dst_dir, dst, flags)`—Efficiently copies between files."],["fcntl_dupfd_cloexec","`fcntl(fd, F_DUPFD_CLOEXEC)`—Creates a new `OwnedFd` instance, with value at least `min`, that has `O_CLOEXEC` set and that shares the same underlying [file description] as `fd`."],["fcntl_fullfsync","`fcntl(fd, F_FULLFSYNC)`"],["fcntl_getfd","`fcntl(fd, F_GETFD)`—Returns a file descriptor’s flags."],["fcntl_getfl","`fcntl(fd, F_GETFL)`—Returns a file descriptor’s access mode and status."],["fcntl_rdadvise","`fcntl(fd, F_RDADVISE, radvisory { offset, len })`"],["fcntl_setfd","`fcntl(fd, F_SETFD, flags)`—Sets a file descriptor’s flags."],["fcntl_setfl","`fcntl(fd, F_SETFL, flags)`—Sets a file descriptor’s status."],["fcopyfile","`fcopyfile(from, to, state, flags)`"],["flock","`flock(fd, operation)`—Acquire or release an advisory lock on an open file."],["fstat","`fstat(fd)`—Queries metadata for an open file or directory."],["fstatfs","`fstatfs(fd)`—Queries filesystem statistics for an open file or directory."],["fstatvfs","`fstatvfs(fd)`—Queries filesystem statistics for an open file or directory, POSIX version."],["fsync","`fsync(fd)`—Ensures that file data and metadata is written to the underlying storage device."],["ftruncate","`ftruncate(fd, length)`—Sets the length of a file."],["futimens","`futimens(fd, times)`—Sets timestamps for an open file or directory."],["getpath","`fcntl(fd, F_GETPATH)`"],["is_file_read_write","`fcntl(fd, F_GETFL) & O_ACCMODE`"],["linkat","`linkat(old_dirfd, old_path, new_dirfd, new_path, flags)`—Creates a hard link."],["mkdirat","`mkdirat(fd, path, mode)`—Creates a directory."],["openat","`openat(dirfd, path, oflags, mode)`—Opens a file."],["readlinkat","`readlinkat(fd, path)`—Reads the contents of a symlink."],["renameat","`renameat(old_dirfd, old_path, new_dirfd, new_path)`—Renames a file or directory."],["seek","`lseek(fd, offset, whence)`—Repositions a file descriptor within a file."],["statat","`fstatat(dirfd, path, flags)`—Queries metadata for a file or directory."],["statfs","`statfs`—Queries filesystem metadata."],["statvfs","`statvfs`—Queries filesystem metadata, POSIX version."],["symlinkat","`symlinkat(old_path, new_dirfd, new_path)`—Creates a symlink."],["tell","`lseek(fd, 0, SEEK_CUR)`—Returns the current position within a file."],["unlinkat","`unlinkat(fd, path, flags)`—Unlinks a file or remove a directory."],["utimensat","`utimensat(dirfd, path, times, flags)`—Sets file or directory timestamps."]],"struct":[["Access","`*_OK` constants for use with `accessat`."],["AtFlags","`AT_*` constants for use with `openat`, `statat`, and other `*at` functions."],["CloneFlags","`CLONE_*` constants for use with `fclonefileat`."],["CopyfileFlags","`copyfile_flags_t` `COPYFILE_*` constants."],["Dir","`DIR*`"],["DirEntry","`struct dirent`"],["FallocateFlags","`FALLOC_FL_*` constants for use with `fallocate`."],["FdFlags","`FD_*` constants for use with `fcntl_getfd` and `fcntl_setfd`."],["Mode","`S_I*` constants for use with `openat`, `chmodat`, and `fchmod`."],["OFlags","`O_*` constants for use with `openat`."],["StatVfs","`struct statvfs` for use with `statvfs` and `fstatvfs`."],["StatVfsMountFlags","`ST_*` constants for use with [`StatVfs`]."],["Timestamps","Timestamps used by `utimensat` and `futimens`."],["copyfile_state_t","`copyfile_state_t` `copyfile_state_t`—State for use with `fcopyfile`."]],"trait":[["DirEntryExt","Re-export types common to POSIX-ish platforms. Unix-specific extension methods for [`fs::DirEntry`]."],["FileExt","Re-export types common to POSIX-ish platforms. Unix-specific extensions to [`fs::File`]."],["FileTypeExt","Re-export types common to POSIX-ish platforms. Unix-specific extensions for [`fs::FileType`]."],["MetadataExt","Re-export types common to POSIX-ish platforms. Unix-specific extensions to [`fs::Metadata`]."],["OpenOptionsExt","Re-export types common to POSIX-ish platforms. Unix-specific extensions to [`fs::OpenOptions`]."]],"type":[["Dev","`dev_t`"],["Nsecs","A type for the `tv_nsec` field of [`Timespec`]."],["RawMode","`mode_t`"],["Secs","A type for the `tv_sec` field of [`Timespec`]."],["Stat","`struct stat` for use with `statat` and `fstat`."],["StatFs","`struct statfs` for use with `statfs` and `fstatfs`."],["Timespec","`struct timespec`"]]};