window.SIDEBAR_ITEMS = {"enum":[["AddrSpace",""],["Attr",""],["ConstCtor",""],["ControlNodeKind",""],["DataInstKind",""],["DeclDef","Declarations (`GlobalVarDecl`, `FuncDecl`) can contain a full definition, or only be an import of a definition (e.g. from another module)."],["ExportKey","An unique identifier (e.g. a link name, or “symbol”) for a module export."],["Exportee","A definition exported out of a module (see also `ExportKey`)."],["Import","An identifier (e.g. a link name, or “symbol”) for an import declaration."],["ModuleDebugInfo",""],["ModuleDialect",""],["SelectionKind",""],["TypeCtor",""],["TypeCtorArg",""],["Value",""]],"mod":[["cfg","Control-flow graph (CFG) abstractions and utilities."],["func_at","Traversal helpers for intra-function entities."],["passes",""],["print",""],["spv",""],["transform",""],["visit",""]],"struct":[["AttrSet",""],["AttrSetDef",""],["Const",""],["ConstDef",""],["Context","Context object with global resources for SPIR-T."],["ControlNode",""],["ControlNodeDef",""],["ControlNodeOutputDecl",""],["ControlRegion",""],["ControlRegionDef","Linear chain of `ControlNode`s, describing a single-entry single-exit (SESE) control-flow “region” (subgraph) in a function’s control-flow graph (CFG)."],["ControlRegionInputDecl",""],["DataInst",""],["DataInstDef",""],["EntityDefs","Collection holding the actual definitions for `Context`-allocated entities."],["EntityList","Doubly-linked list, “intrusively” going through `E::Def`, which must be an `EntityListNode<E, _>` (to hold the “previous/next node” links)."],["EntityListIter","`EntityList<E>` iterator, but with a different API than `Iterator`."],["EntityOrientedDenseMap","Map with `K` keys and `V` values, that is:"],["Func",""],["FuncDecl",""],["FuncDefBody",""],["FuncParam",""],["GlobalVar",""],["GlobalVarDecl",""],["GlobalVarDefBody",""],["InternedStr",""],["Module",""],["OrdAssertEq",""],["Type",""],["TypeDef",""]],"trait":[["EntityOrientedMapKey","`EntityOriented*Map<Self, V>` support trait, implemented for entity types, but which can also be implemented by users for their own newtypes and other types wrapping entity types (such as finite `enum`s)."]]};