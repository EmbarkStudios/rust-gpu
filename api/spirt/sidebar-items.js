window.SIDEBAR_ITEMS = {"enum":[["AddrSpace",""],["Attr","Any semantic or non-semantic (debuginfo) decoration/modifier, that can be optionally applied to some declaration/definition."],["ConstCtor","[`Const`] “constructor”: a [`ConstDef`] wiithout any nested [`Const`]s."],["ControlNodeKind",""],["DataInstKind",""],["DeclDef","Declarations ([`GlobalVarDecl`], [`FuncDecl`]) can contain a full definition, or only be an import of a definition (e.g. from another module)."],["ExportKey","An unique identifier (e.g. a link name, or “symbol”) for a module export."],["Exportee","A definition exported out of a module (see also [`ExportKey`])."],["Import","An identifier (e.g. a link name, or “symbol”) for an import declaration."],["ModuleDebugInfo","Non-semantic details (i.e. debuginfo) of a SPIR-Y module (not tied to any declarations/definitions)."],["ModuleDialect","Semantic properties of a SPIR-T module (not tied to any declarations/definitions)."],["SelectionKind",""],["TypeCtor","[`Type`] “constructor”: a [`TypeDef`] wiithout any [`TypeCtorArg`]s ([`Type`]s/[`Const`]s)."],["TypeCtorArg",""],["Value",""]],"mod":[["cfg","Control-flow graph (CFG) abstractions and utilities."],["func_at","Traversal helpers for intra-function entities."],["passes","IR transformations (typically whole-`Module`)."],["print","Pretty-printing anything in the IR, from whole [`Module`]s to their leaves."],["spv","SPIR-V support, mainly conversions to/from SPIR-T ([`lower`]/[`lift`])."],["transform","Mutable IR traversal."],["visit","Immutable IR traversal."]],"struct":[["AttrSet","Interned handle for an `AttrSetDef` (a set of `Attr`s)."],["AttrSetDef","Definition for an [`AttrSet`]: a set of [`Attr`]s."],["Const","Interned handle for a `ConstDef` (a constant value)."],["ConstDef","Definition for a [`Const`]: a constant value."],["Context","Context object with global resources for SPIR-T."],["ControlNode","Entity handle for a `ControlNodeDef` (a control-flow operator or leaf)."],["ControlNodeDef","Definition for a [`ControlNode`]: a control-flow operator or leaf."],["ControlNodeOutputDecl",""],["ControlRegion","Entity handle for a `ControlRegionDef` (a control-flow region)."],["ControlRegionDef","Definition for a [`ControlRegion`]: a control-flow region."],["ControlRegionInputDecl",""],["DataInst","Entity handle for a `DataInstDef` (an SSA instruction)."],["DataInstDef","Definition for a [`DataInst`]: an SSA instruction."],["EntityDefs","Collection holding the actual definitions for [`Context`]-allocated entities."],["EntityList","Doubly-linked list, “intrusively” going through `E::Def`, which must be an [`EntityListNode<E, _>`] (to hold the “previous/next node” links)."],["EntityListIter","[`EntityList<E>`] iterator, but with a different API than [`Iterator`]."],["EntityOrientedDenseMap","Map with `K` keys and `V` values, that is:"],["Func","Entity handle for a `FuncDecl` (a function)."],["FuncDecl","Declaration/definition for a [`Func`]: a function."],["FuncDefBody","The body of a [`Func`] definition."],["FuncParam",""],["GlobalVar","Entity handle for a `GlobalVarDecl` (a global variable)."],["GlobalVarDecl","Declaration/definition for a [`GlobalVar`]: a global variable."],["GlobalVarDefBody","The body of a [`GlobalVar`] definition."],["InternedStr","Interned handle for a [`str`]."],["Module",""],["OrdAssertEq","Wrapper to limit `Ord` for interned index types (e.g. [`InternedStr`]) to only situations where the interned index reflects contents (i.e. equality)."],["Type","Interned handle for a `TypeDef`."],["TypeDef","Definition for a [`Type`]."]],"trait":[["EntityOrientedMapKey","`EntityOriented*Map<Self, V>` support trait, implemented for entity types, but which can also be implemented by users for their own newtypes and other types wrapping entity types (such as finite `enum`s)."]]};