var searchIndex = JSON.parse('{\
"aho_corasick":{"doc":"A library for finding occurrences of many patterns at …","t":"DDEENNDNNDDDNNSNNSDDEENNDDSDNEDNNNNNSLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLALLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMIEDDSSNNDNDSDDDSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKKKKKKKLLLLLLKLLKKKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDNNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AhoCorasick","AhoCorasickBuilder","AhoCorasickKind","Anchored","Anchored","Both","BuildError","ContiguousNFA","DFA","FindIter","FindOverlappingIter","Input","InvalidInputAnchored","InvalidInputUnanchored","LIMIT","LeftmostFirst","LeftmostLongest","MAX","Match","MatchError","MatchErrorKind","MatchKind","No","NoncontiguousNFA","PatternID","PatternIDError","SIZE","Span","Standard","StartKind","StreamFindIter","Unanchored","UnsupportedEmpty","UnsupportedOverlapping","UnsupportedStream","Yes","ZERO","anchored","as_i32","as_u32","as_u64","as_usize","ascii_case_insensitive","attempted","automaton","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","byte_classes","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","default","default","default","default","dense_depth","dfa","earliest","end","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","find","find_iter","find_overlapping","find_overlapping_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ne_bytes","from_ne_bytes_unchecked","from_u32_unchecked","get_anchored","get_earliest","get_range","get_span","hash","hash","hash","haystack","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","invalid_input_anchored","invalid_input_unanchored","is_anchored","is_done","is_empty","is_empty","is_match","kind","kind","kind","len","len","match_kind","match_kind","max_pattern_len","memory_usage","min_pattern_len","must","must","new","new","new","new","new","new","new_unchecked","next","next","next","nfa","offset","offset","one_more","packed","partial_cmp","pattern","patterns_len","prefilter","range","range","range","replace_all","replace_all_bytes","replace_all_with","replace_all_with_bytes","set_anchored","set_earliest","set_end","set_range","set_span","set_start","span","span","start","start","start","start_kind","start_kind","stream_find_iter","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_find","try_find_iter","try_find_overlapping","try_find_overlapping_iter","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_replace_all","try_replace_all_bytes","try_replace_all_with","try_replace_all_with_bytes","try_stream_find_iter","try_stream_replace_all","try_stream_replace_all_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsupported_empty","unsupported_overlapping","unsupported_stream","got","got","Automaton","Candidate","FindIter","FindOverlappingIter","LIMIT","MAX","Match","None","OverlappingState","PossibleStartOfMatch","Prefilter","SIZE","StateID","StateIDError","StreamFindIter","ZERO","as_i32","as_u32","as_u64","as_usize","attempted","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","eq","eq","equivalent","equivalent","find_in","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_ne_bytes","from_ne_bytes_unchecked","from_u32_unchecked","get_match","hash","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_option","is_dead","is_match","is_special","is_start","match_kind","match_len","match_pattern","max_pattern_len","memory_usage","min_pattern_len","must","new","new_unchecked","next","next","next","next_state","one_more","partial_cmp","pattern_len","patterns_len","prefilter","start","start_state","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_find","try_find_iter","try_find_overlapping","try_find_overlapping_iter","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_replace_all","try_replace_all_bytes","try_replace_all_with","try_replace_all_with_bytes","try_stream_find_iter","try_stream_replace_all","try_stream_replace_all_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Builder","DFA","ascii_case_insensitive","borrow","borrow","borrow_mut","borrow_mut","build","build_from_noncontiguous","builder","byte_classes","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","into","into","is_dead","is_match","is_special","is_start","match_kind","match_kind","match_len","match_pattern","max_pattern_len","memory_usage","min_pattern_len","new","new","next_state","pattern_len","patterns_len","prefilter","prefilter","start_kind","start_state","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","contiguous","noncontiguous","Builder","NFA","ascii_case_insensitive","borrow","borrow","borrow_mut","borrow_mut","build","build_from_noncontiguous","builder","byte_classes","clone","clone","clone_into","clone_into","default","dense_depth","fmt","fmt","from","from","into","into","is_dead","is_match","is_special","is_start","match_kind","match_kind","match_len","match_pattern","max_pattern_len","memory_usage","min_pattern_len","new","new","next_state","pattern_len","patterns_len","prefilter","prefilter","start_state","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Builder","NFA","ascii_case_insensitive","borrow","borrow","borrow_mut","borrow_mut","build","builder","clone","clone","clone_into","clone_into","default","dense_depth","fmt","fmt","from","from","into","into","is_dead","is_match","is_special","is_start","match_kind","match_kind","match_len","match_pattern","max_pattern_len","memory_usage","min_pattern_len","new","new","next_state","pattern_len","patterns_len","prefilter","prefilter","start_state","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Builder","Config","FindIter","LeftmostFirst","LeftmostLongest","MatchKind","Searcher","add","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","config","default","default","default","eq","equivalent","extend","find","find_in","find_iter","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","heuristic_pattern_limits","into","into","into","into","into","into_iter","len","match_kind","match_kind","memory_usage","minimum_len","minimum_len","new","new","new","next","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"aho_corasick"],[364,"aho_corasick::MatchErrorKind"],[366,"aho_corasick::automaton"],[525,"aho_corasick::dfa"],[575,"aho_corasick::nfa"],[577,"aho_corasick::nfa::contiguous"],[627,"aho_corasick::nfa::noncontiguous"],[675,"aho_corasick::packed"],[760,"core::result"],[761,"core::iter::traits::collect"],[762,"core::cmp"],[763,"core::ops::range"],[764,"core::option"],[765,"core::convert"],[766,"core::fmt"],[767,"core::fmt"],[768,"core::convert"],[769,"std::io::error"],[770,"std::io"],[771,"core::ops::range"],[772,"alloc::vec"],[773,"core::ops::function"],[774,"std::io"],[775,"std::io::error"]],"d":["An automaton for searching multiple strings in linear time.","A builder for configuring an Aho-Corasick automaton.","The type of Aho-Corasick implementation to use in an …","The type of anchored search to perform.","Support only anchored searches. Requesting an unanchored …","Support both anchored and unanchored searches.","An error that occurred during the construction of an …","Use a contiguous NFA.","Use a DFA. Warning: DFAs typically use a large amount of …","An iterator of non-overlapping matches in a particular …","An iterator of overlapping matches in a particular …","The configuration and the haystack to use for an …","An error indicating that an anchored search was requested, …","An error indicating that an unanchored search was …","The total number of values that can be represented.","Use leftmost-first match semantics, which reports leftmost …","Use leftmost-longest match semantics, which reports …","The maximum value.","A representation of a match reported by an Aho-Corasick …","An error that occurred during an Aho-Corasick search.","The underlying kind of a <code>MatchError</code>.","A knob for controlling the match semantics of an …","Run an unanchored search. This means a match may occur …","Use a noncontiguous NFA.","The identifier of a pattern in an Aho-Corasick automaton.","This error occurs when an ID could not be constructed.","The number of bytes that a single value uses in memory.","A representation of a range in a haystack.","Use standard match semantics, which support overlapping …","The kind of anchored starting configurations to support in …","An iterator that reports Aho-Corasick matches in a stream.","Support only unanchored searches. Requesting an anchored …","An error indicating that the operation requested doesn’t …","An error indicating that an overlapping search was …","An error indicating that a stream search was attempted on …","Run an anchored search. This means that a match must begin …","The zero value.","Sets the anchor mode of a search.","Return the internal value as a <code>i32</code>. This is guaranteed to …","Return the internal value as a <code>u32</code>. This is guaranteed to …","Return the internal value as a <code>u64</code>. This is guaranteed to …","Return the internal value as a <code>usize</code>. This is guaranteed to","Enable ASCII-aware case insensitive matching.","Returns the value that could not be converted to an ID.","Provides <code>Automaton</code> trait for abstracting over Aho-Corasick …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build an Aho-Corasick automaton using the configuration …","A convenience method for returning a new Aho-Corasick …","A debug settting for whether to attempt to shrink the size …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true when the given offset is contained within …","","","","","Set the limit on how many states use a dense …","Provides direct access to a DFA implementation of …","Whether to execute an “earliest” search or not.","Return the end position of this search.","The ending position of the match.","The end offset of the span, exclusive.","","","","","","","","","","","","","","","","","","","","","","Returns the location of the first match according to the …","Returns an iterator of non-overlapping matches, using the …","Returns the location of the first overlapping match in the …","Returns an iterator of overlapping matches. Stated …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Decode this value from the bytes given using the native …","Decode this value from the bytes given using the native …","Create a new value from a <code>u32</code> without checking whether the …","Return the anchored mode for this search configuration.","Return whether this search should execute in “earliest”…","Return the span as a range for this search configuration.","Return the span for this search configuration.","","","","Return a borrow of the underlying haystack as a slice of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new “invalid anchored search” error. This …","Create a new “invalid unanchored search” error. This …","Returns true if and only if this anchor mode corresponds …","Return true if this input has been exhausted, which in …","Returns true when this span is empty. That is, when …","Returns true when the span in this match is empty.","Returns true if and only if this automaton matches the …","Returns the kind of the Aho-Corasick automaton used by …","Choose the type of underlying automaton to use.","Returns a reference to the underlying error kind.","Returns the length of this span.","Returns the length of this match.","Returns the match kind used by this automaton.","Set the desired match semantics.","Returns the length of the longest pattern matched by this …","Returns the approximate total amount of heap used by this …","Returns the length of the shortest pattern matched by this …","Like <code>new</code>, but panics if the given value is not valid.","Create a new match from a pattern ID and a byte offset …","Create a new Aho-Corasick automaton using the default …","Create a new builder for configuring an Aho-Corasick …","Create a new error value with the given kind.","Create a new value that is represented by a “small index.…","Create a new search configuration for the given haystack.","Create a new match from a pattern ID and a span.","Create a new value without checking whether the given …","","","","Provides direct access to NFA implementations of …","Returns a new span with <code>offset</code> added to this span’s <code>start</code>…","Returns a new match with <code>offset</code> added to its span’s <code>start</code>…","Returns one more than this value as a usize.","Provides packed multiple substring search, principally for …","","Returns the ID of the pattern that matched.","Return the total number of patterns matched by this …","Enable heuristic prefilter optimizations.","Like <code>Input::span</code>, but accepts any range instead.","Returns this span as a range.","Returns the match span as a range.","Replace all matches with a corresponding value in the …","Replace all matches using raw bytes with a corresponding …","Replace all matches using a closure called on each match. …","Replace all matches using raw bytes with a closure called …","Set the anchor mode of a search.","Set whether the search should execute in “earliest” …","Set the ending offset for the span for this search …","Set the span for this search configuration given any range.","Set the span for this search configuration.","Set the starting offset for the span for this search …","Set the span for this search.","Returns the span for this match.","Return the start position of this search.","The starting position of the match.","The start offset of the span, inclusive.","Returns the type of starting search configuration …","Sets the starting state configuration for the automaton.","Returns an iterator of non-overlapping matches in the given","Return the underlying integer as raw bytes in native endian","","","","","","","","","","","","","","","","","","Returns the location of the first match according to the …","Returns an iterator of non-overlapping matches, using the …","Returns the location of the first overlapping match in the …","Returns an iterator of overlapping matches.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replace all matches with a corresponding value in the …","Replace all matches using raw bytes with a corresponding …","Replace all matches using a closure called on each match. …","Replace all matches using raw bytes with a closure called …","Returns an iterator of non-overlapping matches in the given","Search for and replace all matches of this automaton in …","Search the given reader and replace all matches of this …","","","","","","","","","","","","","","","","","","Create a new “unsupported empty pattern” error. This …","Create a new “unsupported overlapping search” error. …","Create a new “unsupported stream search” error. This …","The match semantics for the automaton that was used.","The match semantics for the automaton that was used.","A trait that abstracts over Aho-Corasick automata.","A candidate is the result of running a prefilter on a …","An iterator of non-overlapping matches in a particular …","An iterator of overlapping matches in a particular …","The total number of values that can be represented.","The maximum value.","A confirmed match was found. Callers do not need to …","No match was found. Since false negatives are not …","Represents the current state of an overlapping search.","The start of a possible match was found. Callers must …","A prefilter for accelerating a search.","The number of bytes that a single value uses in memory.","The identifier of a finite automaton state.","This error occurs when an ID could not be constructed.","An iterator that reports matches in a stream.","The zero value.","Return the internal value as a <code>i32</code>. This is guaranteed to …","Return the internal value as a <code>u32</code>. This is guaranteed to …","Return the internal value as a <code>u64</code>. This is guaranteed to …","Return the internal value as a <code>usize</code>. This is guaranteed to","Returns the value that could not be converted to an ID.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute a search in the haystack within the span given. If …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Decode this value from the bytes given using the native …","Decode this value from the bytes given using the native …","Create a new value from a <code>u32</code> without checking whether the …","Return the match result of the most recent search to …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Convert this candidate into an option. This is useful when …","Returns true if the given ID represents a dead state.","Returns true if the given ID represents a match state.","Returns true if the given ID represents a “special” …","Returns true if the given ID represents a start state.","Returns the match semantics that this automaton was built …","Returns the total number of matches for the given state ID.","Returns the pattern ID for the match state given by <code>sid</code> at …","Returns the length, in bytes, of the longest pattern in …","Returns the heap memory usage, in bytes, used by this …","Returns the length, in bytes, of the shortest pattern in …","Like <code>new</code>, but panics if the given value is not valid.","Create a new value that is represented by a “small index.…","Create a new value without checking whether the given …","","","","Performs a state transition from <code>sid</code> for <code>byte</code> and returns …","Returns one more than this value as a usize.","","Returns the length of the pattern for the given ID.","Returns the total number of patterns compiled into this …","Returns a prefilter, if available, that can be used to …","Create a new overlapping state that begins at the start …","Returns the starting state for the given anchor mode.","Return the underlying integer as raw bytes in native endian","","","","","","","Executes a non-overlapping search with this automaton …","Returns an iterator of non-overlapping matches with this …","Executes a overlapping search with this automaton using …","Returns an iterator of overlapping matches with this …","","","","","","","","","","","","","","","","","","","","","Replaces all non-overlapping matches in <code>haystack</code> with …","Replaces all non-overlapping matches in <code>haystack</code> with …","Replaces all non-overlapping matches in <code>haystack</code> by …","Replaces all non-overlapping matches in <code>haystack</code> by …","Returns an iterator of non-overlapping matches with this …","Replaces all non-overlapping matches in <code>rdr</code> with strings …","Replaces all non-overlapping matches in <code>rdr</code> by calling the …","","","","","","","","","A builder for configuring an Aho-Corasick DFA.","A DFA implementation of Aho-Corasick.","Enable ASCII-aware case insensitive matching.","","","","","Build an Aho-Corasick DFA from the given iterator of …","Build an Aho-Corasick DFA from the given noncontiguous NFA.","A convenience method for returning a new Aho-Corasick DFA …","A debug setting for whether to attempt to shrink the size …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Set the desired match semantics.","","","","","","Create a new Aho-Corasick DFA using the default …","Create a new builder for configuring an Aho-Corasick DFA.","","","","","Enable heuristic prefilter optimizations.","Sets the starting state configuration for the automaton.","","","","","","","","","","Provides a contiguous NFA implementation of Aho-Corasick.","Provides a noncontiguous NFA implementation of …","A builder for configuring an Aho-Corasick contiguous NFA.","A contiguous NFA implementation of Aho-Corasick.","Enable ASCII-aware case insensitive matching.","","","","","Build an Aho-Corasick contiguous NFA from the given …","Build an Aho-Corasick contiguous NFA from the given …","A convenience method for returning a new Aho-Corasick …","A debug setting for whether to attempt to shrink the size …","","","","","","Set the limit on how many states use a dense …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Set the desired match semantics.","","","","","","Create a new Aho-Corasick contiguous NFA using the default …","Create a new builder for configuring an Aho-Corasick …","","","","","Enable heuristic prefilter optimizations.","","","","","","","","","","A builder for configuring an Aho-Corasick noncontiguous …","A noncontiguous NFA implementation of Aho-Corasick.","Enable ASCII-aware case insensitive matching.","","","","","Build an Aho-Corasick noncontiguous NFA from the given …","A convenience method for returning a new Aho-Corasick …","","","","","","Set the limit on how many states use a dense …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Set the desired match semantics.","","","","","","Create a new Aho-Corasick noncontiguous NFA using the …","Create a new builder for configuring an Aho-Corasick …","","","","","Enable heuristic prefilter optimizations.","","","","","","","","","","A builder for constructing a packed searcher from a …","The configuration for a packed multiple pattern searcher.","An iterator over non-overlapping matches from a packed …","Use leftmost-first match semantics, which reports leftmost …","Use leftmost-longest match semantics, which reports …","A knob for controlling the match semantics of a packed …","A packed searcher for quickly finding occurrences of …","Add the given pattern to this set to match.","","","","","","","","","","","Build a searcher from the patterns added to this builder …","Create a packed builder from this configuration. The …","A convenience function for calling <code>Builder::new()</code>.","","","","","","","","","A convenience function for calling <code>Config::new()</code>.","","","","","","Add the given iterator of patterns to this set to match.","Return the first occurrence of any of the patterns in this …","Return the first occurrence of any of the patterns in this …","Return an iterator of non-overlapping occurrences of the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Request that heuristic limitations on the number of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the number of patterns added to this builder.","Set the match semantics for this configuration.","Returns the match kind used by this packed searcher.","Returns the approximate total amount of heap used by this …","Returns the length, in bytes, of the shortest pattern …","Returns the minimum length of a haystack that is required …","Create a new default configuration. A default …","Create a new builder for constructing a multi-pattern …","A convenience function for constructing a searcher from an …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,21,21,0,15,15,0,0,0,17,17,3,20,20,3,0,0,0,0,2,15,0,0,3,0,20,0,0,21,17,17,17,2,3,1,3,3,3,3,8,10,0,11,27,29,32,8,15,12,16,17,3,10,1,18,2,19,20,21,11,27,29,32,8,15,12,16,17,3,10,1,18,2,19,20,21,8,11,8,11,8,15,12,16,17,3,10,1,18,2,19,20,21,11,8,15,12,16,17,3,10,1,18,2,19,20,21,3,18,8,3,20,21,8,0,1,1,19,18,15,16,17,3,10,18,18,2,19,20,21,15,16,17,3,10,18,2,19,20,21,11,11,11,11,11,27,29,32,8,15,12,12,16,16,17,3,10,10,1,18,2,19,20,21,11,27,29,32,8,15,12,16,17,3,3,10,1,1,18,18,2,19,20,21,3,3,3,1,1,1,1,3,18,19,1,11,27,29,32,8,15,12,16,17,3,10,1,18,2,19,20,21,27,29,32,16,16,2,1,18,19,11,11,8,16,18,19,11,8,11,11,11,3,19,11,8,16,3,1,19,3,27,29,32,0,18,19,3,0,3,19,11,8,1,18,19,11,11,11,11,1,1,1,1,1,1,1,19,1,19,18,11,8,11,3,11,8,15,12,16,17,3,10,1,18,2,19,20,21,12,16,10,11,11,11,11,11,27,29,32,8,15,12,16,17,3,3,3,3,3,10,1,18,2,19,20,21,11,27,29,32,8,15,12,16,17,3,10,1,18,2,19,20,21,11,11,11,11,11,11,11,11,27,29,32,8,15,12,16,17,3,10,1,18,2,19,20,21,16,16,16,70,71,0,0,0,0,50,50,53,53,0,53,0,50,0,0,0,50,50,50,50,50,51,28,54,55,56,52,53,50,51,28,54,55,56,52,53,50,51,28,52,53,50,51,28,52,53,50,51,50,50,50,51,50,51,52,28,54,55,56,52,53,50,51,51,28,54,55,56,52,53,50,50,51,50,50,50,28,50,28,54,55,56,52,53,50,51,54,55,56,53,57,57,57,57,57,57,57,57,57,57,50,50,50,54,55,56,57,50,50,57,57,57,28,57,50,28,52,53,50,51,51,57,57,57,57,28,54,55,56,52,53,50,50,50,50,50,51,28,54,55,56,52,53,50,51,57,57,57,57,57,57,57,28,54,55,56,52,53,50,51,0,0,59,60,59,60,59,59,59,60,59,60,59,60,59,59,60,59,60,59,60,59,60,60,60,60,60,59,60,60,60,60,60,60,59,60,60,60,60,59,59,60,60,59,60,59,60,59,60,59,0,0,0,0,62,63,62,63,62,62,62,63,62,63,62,63,62,62,62,63,62,63,62,63,62,63,63,63,63,63,62,63,63,63,63,63,63,62,63,63,63,63,62,63,63,62,63,62,63,62,63,62,0,0,64,61,64,61,64,64,61,61,64,61,64,64,64,61,64,61,64,61,64,61,61,61,61,61,64,61,61,61,61,61,61,64,61,61,61,61,64,61,61,64,61,64,61,64,61,64,0,0,0,68,68,0,0,65,68,67,65,66,69,68,67,65,66,69,65,67,66,68,67,65,66,68,67,65,66,66,68,67,65,68,68,65,66,66,66,68,67,65,66,69,68,67,65,66,69,67,68,67,65,66,69,69,65,67,66,66,65,66,67,65,66,69,68,67,65,66,68,67,65,66,69,68,67,65,66,69,68,67,65,66,69],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[3,4],[3,5],[3,6],[3,7],[[8,9],8],[10,6],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,-1],[[13,[11,12]]],14],[[],8],[[8,9],8],[11,11],[8,8],[15,15],[12,12],[16,16],[17,17],[3,3],[10,10],[1,1],[18,18],[2,2],[19,19],[20,20],[21,21],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[3,3],23],[[18,7],9],[[],8],[[],3],[[],20],[[],21],[[8,7],8],0,[[1,9],1],[1,7],[19,7],0,[[15,15],9],[[16,16],9],[[17,17],9],[[3,3],9],[[10,10],9],[[18,[24,[7]]],9],[[18,18],9],[[2,2],9],[[19,19],9],[[20,20],9],[[21,21],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[11,-1],[[25,[19]]],[[26,[1]]]],[[11,-1],27,[[26,[1]]]],[[11,-1,28],22,[[26,[1]]]],[[11,-1],29,[[26,[1]]]],[[11,30],31],[[27,30],31],[[29,30],31],[[[32,[-1]],30],31,33],[[8,30],31],[[15,30],31],[[12,30],31],[[12,30],31],[[16,30],31],[[16,30],31],[[17,30],31],[[3,30],31],[[10,30],31],[[10,30],31],[[1,30],31],[[18,30],31],[[2,30],31],[[19,30],31],[[20,30],31],[[21,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[34,3],[-1,-1,[]],[-1,-1,[]],[-1,1,[35,[37,[[36,[34]]]]]],[-1,-1,[]],[[[24,[7]]],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[38,[34]]],[[13,[3,10]]]],[[[38,[34]]],3],[5,3],[1,2],[1,9],[1,[[24,[7]]]],[1,18],[[3,-1],22,39],[[18,-1],22,39],[[19,-1],22,39],[1,[[36,[34]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],16],[[],16],[2,9],[1,9],[18,9],[19,9],[[11,-1],9,[[26,[1]]]],[11,15],[[8,[25,[15]]],8],[16,17],[18,7],[19,7],[11,20],[[8,20],8],[11,7],[11,7],[11,7],[7,3],[[7,-1],19,[[26,[18]]]],[-1,[[13,[11,12]]],14],[[],8],[17,16],[7,[[13,[3,10]]]],[-1,1,[35,[37,[[36,[34]]]]]],[[3,-1],19,[[26,[18]]]],[7,3],[27,[[25,[19]]]],[29,[[25,[19]]]],[[[32,[-1]]],[[25,[[13,[19,40]]]]],41],0,[[18,7],18],[[19,7],19],[3,7],0,[[3,3],[[25,[23]]]],[19,3],[11,7],[[8,9],8],[[1,-1],1,[[42,[7]]]],[18,[[24,[7]]]],[19,[[24,[7]]]],[[11,43,[36,[-1]]],44,[[37,[43]]]],[[11,[36,[34]],[36,[-1]]],[[45,[34]]],[[37,[[36,[34]]]]]],[[11,43,44,-1],22,46],[[11,[36,[34]],[45,[34]],-1],22,46],[[1,2],22],[[1,9],22],[[1,7],22],[[1,-1],22,[[42,[7]]]],[[1,-1],22,[[26,[18]]]],[[1,7],22],[[1,-1],1,[[26,[18]]]],[19,18],[1,7],[19,7],0,[11,21],[[8,21],8],[[11,-1],[[32,[-1]]],41],[3,[[38,[34]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[[11,-1],[[13,[[25,[19]],16]]],[[26,[1]]]],[[11,-1],[[13,[27,16]]],[[26,[1]]]],[[11,-1,28],[[13,[22,16]]],[[26,[1]]]],[[11,-1],[[13,[29,16]]],[[26,[1]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[6,[[13,[3,10]]]],[5,[[13,[3,10]]]],[47,[[13,[3,10]]]],[-1,[[13,[-2]]],[],[]],[7,[[13,[3,10]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[[11,43,[36,[-1]]],[[13,[44,16]]],[[37,[43]]]],[[11,[36,[34]],[36,[-1]]],[[13,[[45,[34]],16]]],[[37,[[36,[34]]]]]],[[11,43,44,-1],[[13,[22,16]]],46],[[11,[36,[34]],[45,[34]],-1],[[13,[22,16]]],46],[[11,-1],[[13,[[32,[-1]],16]]],41],[[11,-1,-2,[36,[-3]]],[[13,[22,40]]],41,48,[[37,[[36,[34]]]]]],[[11,-1,-2,-3],[[13,[22,40]]],41,48,46],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[[],16],[20,16],[20,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[50,4],[50,5],[50,6],[50,7],[51,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[52,52],[53,53],[50,50],[51,51],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[50,50],23],[[],50],[[50,50],9],[[51,51],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[52,[36,[34]],18],53],[[28,30],31],[[[54,[-1]],30],31,33],[[[55,[-1]],30],31,33],[[[56,[-1,-2]],30],31,33,33],[[52,30],31],[[53,30],31],[[50,30],31],[[51,30],31],[[51,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[34,50],[-1,-1,[]],[[[38,[34]]],[[13,[50,51]]]],[[[38,[34]]],50],[5,50],[28,[[25,[19]]]],[[50,-1],22,39],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[53,[[25,[7]]]],[[-1,50],9,[]],[[-1,50],9,[]],[[-1,50],9,[]],[[-1,50],9,[]],[-1,20,[]],[[-1,50],7,[]],[[-1,50,7],3,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[7,50],[7,[[13,[50,51]]]],[7,50],[[[54,[-1]]],[[25,[19]]],57],[[[55,[-1]]],[[25,[19]]],57],[[[56,[-1,-2]]],[[25,[[58,[19]]]]],57,41],[[-1,2,50,34],50,[]],[50,7],[[50,50],[[25,[23]]]],[[-1,3],7,[]],[-1,7,[]],[-1,[[25,[52]]],[]],[[],28],[[-1,2],[[13,[50,16]]],[]],[50,[[38,[34]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[[-1,1],[[13,[[25,[19]],16]]],[]],[[-1,1],[[13,[[54,[-1]],16]]],35],[[-1,1,28],[[13,[22,16]]],[]],[[-1,1],[[13,[[55,[-1]],16]]],35],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[7,[[13,[50,51]]]],[-1,[[13,[-2]]],[],[]],[5,[[13,[50,51]]]],[6,[[13,[50,51]]]],[47,[[13,[50,51]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[[-1,43,[36,[-2]]],[[13,[44,16]]],35,[[37,[43]]]],[[-1,[36,[34]],[36,[-2]]],[[13,[[45,[34]],16]]],35,[[37,[[36,[34]]]]]],[[-1,43,44,-2],[[13,[22,16]]],35,46],[[-1,[36,[34]],[45,[34]],-2],[[13,[22,16]]],35,46],[[-1,-2],[[13,[[56,[-1,-2]],16]]],35,41],[[-1,-2,-3,[36,[-4]]],[[58,[22]]],35,41,48,[[37,[[36,[34]]]]]],[[-1,-2,-3,-4],[[58,[22]]],35,41,48,46],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],0,0,[[59,9],59],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[59,-1],[[13,[60,12]]],14],[[59,61],[[13,[60,12]]]],[[],59],[[59,9],59],[60,60],[59,59],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[],59],[[60,30],31],[[59,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[60,50],9],[[60,50],9],[[60,50],9],[[60,50],9],[60,20],[[59,20],59],[[60,50],7],[[60,50,7],3],[60,7],[60,7],[60,7],[-1,[[13,[60,12]]],14],[[],59],[[60,2,50,34],50],[[60,3],7],[60,7],[60,[[25,[52]]]],[[59,9],59],[[59,21],59],[[60,2],[[13,[50,16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],0,0,0,0,[[62,9],62],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[62,-1],[[13,[63,12]]],14],[[62,61],[[13,[63,12]]]],[[],62],[[62,9],62],[63,63],[62,62],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[],62],[[62,7],62],[[63,30],31],[[62,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[63,50],9],[[63,50],9],[[63,50],9],[[63,50],9],[63,20],[[62,20],62],[[63,50],7],[[63,50,7],3],[63,7],[63,7],[63,7],[-1,[[13,[63,12]]],14],[[],62],[[63,2,50,34],50],[[63,3],7],[63,7],[63,[[25,[52]]]],[[62,9],62],[[63,2],[[13,[50,16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],0,0,[[64,9],64],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[64,-1],[[13,[61,12]]],14],[[],64],[61,61],[64,64],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[],64],[[64,7],64],[[61,30],31],[[64,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[61,50],9],[[61,50],9],[[61,50],9],[[61,50],9],[61,20],[[64,20],64],[[61,50],7],[[61,50,7],3],[61,7],[61,7],[61,7],[-1,[[13,[61,12]]],14],[[],64],[[61,2,50,34],50],[[61,3],7],[61,7],[61,[[25,[52]]]],[[64,9],64],[[61,2],[[13,[50,16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],0,0,0,0,0,0,0,[[65,-1],65,[[37,[[36,[34]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,[[25,[66]]]],[67,65],[[],65],[68,68],[67,67],[65,65],[66,66],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[],67],[[],68],[[],67],[[],65],[[68,68],9],[[-1,-2],9,[],[]],[[65,-1],65,14],[[66,-1],[[25,[19]]],[[37,[[36,[34]]]]]],[[66,-1,18],[[25,[19]]],[[37,[[36,[34]]]]]],[[66,-1],69,[35,[37,[[36,[34]]]]]],[[68,30],31],[[67,30],31],[[65,30],31],[[66,30],31],[[69,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[67,9],67],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,7],[[67,68],67],[66,68],[66,7],[65,7],[66,7],[[],67],[[],65],[-1,[[25,[66]]],14],[69,[[25,[19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]]],"c":[],"p":[[3,"Input",0],[4,"Anchored",0],[3,"PatternID",0],[15,"i32"],[15,"u32"],[15,"u64"],[15,"usize"],[3,"AhoCorasickBuilder",0],[15,"bool"],[3,"PatternIDError",0],[3,"AhoCorasick",0],[3,"BuildError",0],[4,"Result",760],[8,"IntoIterator",761],[4,"AhoCorasickKind",0],[3,"MatchError",0],[4,"MatchErrorKind",0],[3,"Span",0],[3,"Match",0],[4,"MatchKind",0],[4,"StartKind",0],[15,"tuple"],[4,"Ordering",762],[3,"Range",763],[4,"Option",764],[8,"Into",765],[3,"FindIter",0],[3,"OverlappingState",366],[3,"FindOverlappingIter",0],[3,"Formatter",766],[6,"Result",766],[3,"StreamFindIter",0],[8,"Debug",766],[15,"u8"],[8,"Sized",767],[15,"slice"],[8,"AsRef",765],[15,"array"],[8,"Hasher",768],[3,"Error",769],[8,"Read",770],[8,"RangeBounds",763],[15,"str"],[3,"String",771],[3,"Vec",772],[8,"FnMut",773],[15,"u16"],[8,"Write",770],[3,"TypeId",774],[3,"StateID",366],[3,"StateIDError",366],[3,"Prefilter",366],[4,"Candidate",366],[3,"FindIter",366],[3,"FindOverlappingIter",366],[3,"StreamFindIter",366],[8,"Automaton",366],[6,"Result",769],[3,"Builder",525],[3,"DFA",525],[3,"NFA",627],[3,"Builder",577],[3,"NFA",577],[3,"Builder",627],[3,"Builder",675],[3,"Searcher",675],[3,"Config",675],[4,"MatchKind",675],[3,"FindIter",675],[13,"UnsupportedStream",364],[13,"UnsupportedOverlapping",364]]},\
"ar":{"doc":"A library for encoding/decoding Unix archive files.","t":"DNDNDNDDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Archive","BSD","Builder","Common","Entry","GNU","GnuBuilder","Header","Symbols","Variant","append","append","append_file","append_file","append_path","append_path","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count_entries","drop","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from","from_metadata","gid","header","identifier","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_iter","jump_to_entry","mode","mtime","new","new","new","new","next","next_entry","read","seek","set_gid","set_identifier","set_mode","set_mtime","set_size","set_uid","size","size_hint","symbols","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","variant"],"q":[[0,"ar"],[109,"std::io::error"],[110,"std::io"],[111,"std::io"],[112,"std::path"],[113,"core::convert"],[114,"std::io"],[115,"core::fmt"],[116,"std::fs"],[117,"std::io"],[118,"core::any"]],"d":["A structure for reading archives.","Used by BSD <code>ar</code> (and OS X); backwards-compatible with …","A structure for building Common or BSD-variant archives …","Used by Debian package files; allows only short filenames.","Representation of an archive entry.","Used by GNU <code>ar</code> (and Windows); incompatible with common …","A structure for building GNU-variant archives (the archive …","Representation of an archive entry header.","An iterator over the symbols in the symbol table of an …","Variants of the Unix archive format.","Adds a new entry to this archive.","Adds a new entry to this archive.","Adds a file to this archive, with the given name as its …","Adds a file to this archive, with the given name as its …","Adds a file on the local filesystem to this archive, using …","Adds a file on the local filesystem to this archive, using …","","","","","","","","","","","","","","","","","","","Scans the archive and returns the total number of entries …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a header with the given file identifier and all …","Returns the value of the group’s user ID field.","Returns the header for this archive entry.","Returns the file identifier.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwrap this archive reader, returning the underlying …","Unwrap this archive builder, returning the underlying …","Unwrap this archive builder, returning the underlying …","","Scans the archive and jumps to the entry at the given …","Returns the mode bits for this file.","Returns the last modification time in Unix time format.","Create a new archive reader with the underlying reader …","Create a new archive builder with the underlying writer …","Create a new archive builder with the underlying writer …","Creates a header with the given file identifier and size, …","","Reads the next entry from the archive, or returns None if …","","","Returns the value of the group’s user ID field.","Sets the file identifier.","Sets the mode bits for this file.","Sets the last modification time in Unix time format.","Sets the length of the file, in bytes.","Sets the value of the owner’s user ID field.","Returns the length of the file, in bytes.","","Scans the archive and returns an iterator over the symbols …","","","","","","","","","","","","","","","","","","","","","","","","Returns the value of the owner’s user ID field.","Returns which format variant this archive appears to be so …"],"i":[0,13,0,13,0,13,0,0,0,0,1,7,1,7,1,7,14,17,25,1,7,13,2,14,17,25,1,7,13,2,13,2,13,2,14,17,13,2,13,2,13,2,14,17,25,1,7,13,2,2,2,17,2,14,17,25,1,7,13,2,14,1,7,25,14,2,2,14,1,7,2,25,14,17,17,2,2,2,2,2,2,2,25,14,13,2,14,17,25,1,7,13,2,14,17,25,1,7,13,2,14,17,25,1,7,13,2,2,14],"f":[0,0,0,0,0,0,0,0,0,0,[[[1,[-1]],2,-2],[[4,[3]]],5,6],[[[7,[-1]],2,-2],[[4,[3]]],5,6],[[[1,[-1]],[9,[8]],10],[[4,[3]]],5],[[[7,[-1]],[9,[8]],10],[[4,[3]]],5],[[[1,[-1]],-2],[[4,[3]]],5,[[12,[11]]]],[[[7,[-1]],-2],[[4,[3]]],5,[[12,[11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[14,[-1]]],[[4,[15]]],[6,16]],[[[17,[-1]]],3,6],[[13,13],18],[[2,2],18],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[13,19],20],[[2,19],20],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[21,[8]],22],2],[2,23],[[[17,[-1]]],2,6],[2,[[9,[8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]]],[[4,[-1]]],6],[[[1,[-1]]],[[4,[-1]]],5],[[[7,[-1]]],[[4,[-1]]],5],[-1,-2,[],[]],[[[14,[-1]],15],[[4,[[17,[-1]]]]],[6,16]],[2,23],[2,24],[-1,[[14,[-1]]],6],[-1,[[1,[-1]]],5],[[-1,[21,[[21,[8]]]]],[[7,[-1]]],5],[[[21,[8]],24],2],[[[25,[-1]]],[[26,[[9,[8]]]]],6],[[[14,[-1]]],[[26,[[4,[[17,[-1]]]]]]],6],[[[17,[-1]],[9,[8]]],[[4,[15]]],6],[[[17,[-1]],27],[[4,[24]]],[6,16]],[[2,23],3],[[2,[21,[8]]],3],[[2,23],3],[[2,24],3],[[2,24],3],[[2,23],3],[2,24],[[[25,[-1]]],[[3,[15,[26,[15]]]]],6],[[[14,[-1]]],[[4,[[25,[-1]]]]],[6,16]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[2,23],[[[14,[-1]]],13,6]],"c":[],"p":[[3,"Builder",0],[3,"Header",0],[15,"tuple"],[6,"Result",109],[8,"Write",110],[8,"Read",110],[3,"GnuBuilder",0],[15,"u8"],[15,"slice"],[3,"File",111],[3,"Path",112],[8,"AsRef",113],[4,"Variant",0],[3,"Archive",0],[15,"usize"],[8,"Seek",110],[3,"Entry",0],[15,"bool"],[3,"Formatter",114],[6,"Result",114],[3,"Vec",115],[3,"Metadata",111],[15,"u32"],[15,"u64"],[3,"Symbols",0],[4,"Option",116],[4,"SeekFrom",110],[4,"Result",117],[3,"TypeId",118]]},\
"arrayvec":{"doc":"<strong>arrayvec</strong> provides the types <code>ArrayVec</code> and <code>ArrayString</code>:  …","t":"DDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ArrayString","ArrayVec","CapacityError","Drain","IntoIter","as_mut","as_mut_ptr","as_mut_slice","as_mut_str","as_ptr","as_ref","as_ref","as_slice","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","deref","deref","deref_mut","deref_mut","drain","drop","drop","drop","element","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","extend","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_byte_string","from_iter","from_str","ge","ge","ge","gt","gt","gt","hash","hash","insert","into","into","into","into","into","into_inner","into_inner_unchecked","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_full","is_full","le","le","le","len","len","lt","lt","lt","new","new","new","new_const","new_const","next","next","next_back","next_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","pop","pop_at","push","push","push_str","push_unchecked","remaining_capacity","remaining_capacity","remove","remove","retain","set_len","set_len","simplify","size_hint","size_hint","swap_pop","swap_remove","take","to_owned","to_owned","to_owned","to_owned","to_string","to_string","truncate","truncate","try_extend_from_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push_str","type_id","type_id","type_id","type_id","type_id","write","write_char","write_str","zero_filled"],"q":[[0,"arrayvec"],[183,"core::clone"],[184,"core::cmp"],[185,"core::cmp"],[186,"core::cmp"],[187,"std::io::error"],[188,"core::fmt"],[189,"core::fmt"],[190,"core::str::error"],[191,"core::cmp"],[192,"core::hash"],[193,"core::ops::function"],[194,"alloc::string"],[195,"core::marker"],[196,"core::fmt"]],"d":["A string with a fixed capacity.","A vector with a fixed capacity.","Error value indicating insufficient capacity","A draining iterator for <code>ArrayVec</code>.","By-value iterator for <code>ArrayVec</code>.","","Return a raw mutable pointer to the vector’s buffer.","Return a mutable slice containing all elements of the …","Return a mutable string slice of the whole <code>ArrayString</code>.","Return a raw pointer to the vector’s buffer.","","","Return a slice containing all elements of the vector.","Return a string slice of the whole <code>ArrayString</code>.","","","","","","","","","","","","","","","Return the capacity of the <code>ArrayVec</code>.","Return the capacity of the <code>ArrayString</code>.","Remove all elements in the vector.","Make the string empty.","","","","","","","","","","","","","","Return an empty array","Return an empty <code>ArrayString</code>","","","","","Create a draining iterator that removes the specified …","","","","Extract the overflowing element","","","","","","","","","Extend the <code>ArrayVec</code> with an iterator.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a <code>str</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a byte string literal.","Create an <code>ArrayVec</code> from an iterator.","","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inner fixed size array, if it is full to its …","Return the inner fixed size array.","","","","","","Returns whether the <code>ArrayVec</code> is empty.","Returns whether the string is empty.","Return true if the <code>ArrayVec</code> is completely filled to its …","Return if the <code>ArrayString</code> is completely filled.","","","","Return the number of elements in the <code>ArrayVec</code>.","Return the length of the string.","","","","Create a new empty <code>ArrayVec</code>.","Create a new empty <code>ArrayString</code>.","Create a new <code>CapacityError</code> from <code>element</code>.","Create a new empty <code>ArrayVec</code> (const fn).","Create a new empty <code>ArrayString</code> (const fn).","","","","","","","","","Remove the last element in the vector and return it.","Removes the last character from the string and returns it.","Remove the element at <code>index</code> and shift down the following …","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","Push <code>element</code> to the end of the vector without checking the …","Returns the capacity left in the <code>ArrayVec</code>.","Returns the capacity left in the <code>ArrayString</code>.","Remove the element at <code>index</code> and shift down the following …","Removes a <code>char</code> from this <code>ArrayString</code> at a byte position …","Retains only the elements specified by the predicate.","Set the vector’s length without dropping or moving out …","Set the strings’s length.","Convert into a <code>CapacityError</code> that does not carry an …","","","Remove the element at <code>index</code> and swap the last element into …","Remove the element at <code>index</code> and swap the last element into …","Returns the ArrayVec, replacing the original with a new …","","","","","","","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens this <code>ArrayString</code> to the specified length.","Copy all elements from the slice and append to the <code>ArrayVec</code>…","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","","","","","","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","","","","","","","","","Create a new <code>ArrayString</code> value fully filled with ASCII …"],"i":[0,0,0,0,0,1,1,1,3,1,1,3,1,3,1,1,8,12,3,3,9,1,1,8,12,3,3,9,1,3,1,3,1,8,3,9,1,3,1,8,3,9,1,3,9,1,3,1,3,1,3,1,1,8,12,9,1,1,3,3,9,1,3,9,1,1,1,8,3,3,9,9,1,1,8,12,3,3,9,3,1,3,1,3,3,1,3,3,1,3,1,1,8,12,3,9,1,1,1,1,1,8,12,1,3,1,3,1,3,3,1,3,1,3,3,1,3,9,1,3,8,12,8,12,1,3,3,9,1,3,1,1,3,3,1,1,3,1,3,1,1,3,9,8,12,1,1,1,1,8,3,9,3,9,1,3,1,1,1,8,12,3,3,3,9,1,1,8,12,3,9,1,3,3,1,8,12,3,9,1,3,3,3],"f":[0,0,0,0,0,[[[1,[-1]]],[[2,[-1]]],[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[[2,[-1]]],[]],[3,4],[[[1,[-1]]],[],[]],[[[1,[-1]]],[[2,[-1]]],[]],[3,4],[[[1,[-1]]],[[2,[-1]]],[]],[3,4],[-1,-2,[],[]],[[[1,[-1]]],[[2,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,4],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[2,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,4],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],5,[]],[3,5],[[[1,[-1]]],6,[]],[3,6],[[[1,[-1]]],[[1,[-1]]],7],[[[8,[-1]]],[[8,[-1]]],7],[3,3],[[[9,[-1]]],[[9,[-1]]],7],[[[1,[-1]],[1,[-1]]],6,7],[[3,3],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[1,[-1]],[1,[-1]]],10,11],[[3,3],10],[[[9,[-1]],[9,[-1]]],10,11],[[],[[1,[-1]]],[]],[[],3],[[[1,[-1]]],[],[]],[3,4],[[[1,[-1]]],[],[]],[3,4],[[[1,[-1]],-2],[[12,[-1]]],[],[[13,[5]]]],[[[1,[-1]]],6,[]],[[[8,[-1]]],6,[]],[[[12,[-1]]],6,[]],[[[9,[-1]]],-1,[]],[[[1,[-1]],[2,[-1]]],14,15],[[[1,[-1]],[1,[-1]]],14,15],[[3,4],14],[[3,3],14],[[[9,[-1]],[9,[-1]]],14,15],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[[1,[-1]],-2],6,[],16],[[[1,[17]]],[[18,[6]]]],[[[1,[-1]],19],20,21],[[[8,[-1]],19],20,21],[[3,19],20],[[3,19],20],[[[9,[-1]],19],20,[]],[[[9,[-1]],19],20,[]],[[[22,[-1]]],[[1,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,[[23,[3,[9,[4]]]]]],[-1,-1,[]],[-1,-1,[]],[[[22,[17]]],[[23,[3,24]]]],[-1,[[1,[-2]]],16,[]],[4,[[23,[3]]]],[[[1,[-1]],[1,[-1]]],14,25],[[3,4],14],[[3,3],14],[[[1,[-1]],[1,[-1]]],14,25],[[3,3],14],[[3,4],14],[[[1,[-1]],-2],6,26,27],[[3,-1],6,27],[[[1,[-1]],5,-1],6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[23,[[22,[-1]],[1,[-1]]]]],[]],[[[1,[-1]]],[[22,[-1]]],[]],[[[1,[-1]]],[[8,[-1]]],[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],14,[]],[3,14],[[[1,[-1]]],14,[]],[3,14],[[[1,[-1]],[1,[-1]]],14,25],[[3,3],14],[[3,4],14],[[[1,[-1]]],5,[]],[3,5],[[[1,[-1]],[1,[-1]]],14,25],[[3,3],14],[[3,4],14],[[],[[1,[-1]]],[]],[[],3],[-1,[[9,[-1]]],[]],[[],[[1,[-1]]],[]],[[],3],[[[8,[-1]]],28,[]],[[[12,[-1]]],28,[]],[[[8,[-1]]],28,[]],[[[12,[-1]]],28,[]],[[[1,[-1]],[1,[-1]]],[[28,[10]]],25],[[3,4],[[28,[10]]]],[[3,3],[[28,[10]]]],[[[9,[-1]],[9,[-1]]],[[28,[10]]],25],[[[1,[-1]]],[[28,[-1]]],[]],[3,[[28,[29]]]],[[[1,[-1]],5],[[28,[-1]]],[]],[[[1,[-1]],-1],6,[]],[[3,29],6],[[3,4],6],[[[1,[-1]],-1],6,[]],[[[1,[-1]]],5,[]],[3,5],[[[1,[-1]],5],-1,[]],[[3,5],29],[[[1,[-1]],-2],6,[],30],[[[1,[-1]],5],6,[]],[[3,5],6],[[[9,[-1]]],9,[]],[[[8,[-1]]],[[6,[5,[28,[5]]]]],[]],[[[12,[-1]]],[[6,[5,[28,[5]]]]],[]],[[[1,[-1]],5],[[28,[-1]]],[]],[[[1,[-1]],5],-1,[]],[[[1,[-1]]],[[1,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,31,[]],[-1,31,[]],[[[1,[-1]],5],6,[]],[[3,5],6],[[[1,[-1]],[2,[-1]]],[[23,[6,9]]],32],[[[2,[-1]]],[[23,[[1,[-1]]]]],7],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[4,[[23,[3]]]],[-1,[[23,[-2]]],[],[]],[33,[[23,[3]]]],[-1,[[23,[-2]]],[],[]],[[[1,[-1]],5,-1],[[23,[6,[9,[-1]]]]],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[[[1,[-1]],-1],[[23,[6,[9,[-1]]]]],[]],[[3,29],[[23,[6,[9,[29]]]]]],[[3,4],[[23,[6,[9,[4]]]]]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[[1,[17]],[2,[17]]],[[18,[5]]]],[[3,29],20],[[3,4],20],[[],3]],"c":[],"p":[[3,"ArrayVec",0],[15,"slice"],[3,"ArrayString",0],[15,"str"],[15,"usize"],[15,"tuple"],[8,"Clone",183],[3,"IntoIter",0],[3,"CapacityError",0],[4,"Ordering",184],[8,"Ord",184],[3,"Drain",0],[8,"RangeBounds",185],[15,"bool"],[8,"PartialEq",184],[8,"IntoIterator",186],[15,"u8"],[6,"Result",187],[3,"Formatter",188],[6,"Result",188],[8,"Debug",188],[15,"array"],[4,"Result",189],[3,"Utf8Error",190],[8,"PartialOrd",184],[8,"Hash",191],[8,"Hasher",191],[4,"Option",192],[15,"char"],[8,"FnMut",193],[3,"String",194],[8,"Copy",195],[3,"Arguments",188],[3,"TypeId",196]]},\
"bitflags":{"doc":"Generate types for C-style flags with ergonomic APIs.","t":"SCIQSSDILLOKLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLALLLLLLALLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLDIILLLLLLFLLLKLFLLLK","n":["ALL","BitFlags","Bits","Bits","EMPTY","FLAGS","Flag","Flags","all","all","bitflags","bits","borrow","borrow_mut","complement","complement","contains","contains","difference","difference","empty","empty","from","from_bits","from_bits","from_bits_retain","from_bits_truncate","from_bits_truncate","from_name","from_name","insert","insert","intersection","intersection","intersects","intersects","into","is_all","is_all","is_empty","is_empty","is_named","is_unnamed","iter","iter","iter","iter_names","iter_names","name","new","parser","remove","remove","set","set","symmetric_difference","symmetric_difference","toggle","toggle","try_from","try_into","type_id","union","union","value","Iter","IterNames","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","into_iter","into_iter","next","next","remaining","try_from","try_from","try_into","try_into","type_id","type_id","ParseError","ParseHex","WriteHex","borrow","borrow_mut","empty_flag","fmt","fmt","from","from_str","into","invalid_hex_flag","invalid_named_flag","parse_hex","to_string","to_writer","try_from","try_into","type_id","write_hex"],"q":[[0,"bitflags"],[65,"bitflags::iter"],[86,"bitflags::parser"],[106,"core::marker"],[107,"core::option"],[108,"core::result"],[109,"core::any"],[110,"core::fmt"],[111,"core::fmt"],[112,"core::fmt"]],"d":["A value with all bits set.","","A bits type that can be used as storage for a flags type.","The underlying bits type.","A value with all bits unset.","The set of defined flags.","A defined flags value that may be named or unnamed.","A set of defined flags using a bits type as storage.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Generate a flags type.","Get the underlying bits value.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether the flag is named.","Whether the flag is unnamed.","Yield the bits of a source flags value in a set of …","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Get the name of this flag.","Define a flag.","Parsing flags from text.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>Flags::insert</code> when <code>value</code> is <code>true</code> or <code>Flags::remove</code> …","Call <code>Flags::insert</code> when <code>value</code> is <code>true</code> or <code>Flags::remove</code> …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the flags value of this flag.","An iterator over flags values.","An iterator over flags values.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Get a flags value of any remaining bits that haven’t …","","","","","","","An error encountered while parsing flags from text.","Parse a value from a hex string.","Encode a value as a hex string.","","","A hex or named flag wasn’t found between separators.","","","Returns the argument unchanged.","Parse a flags value from text.","Calls <code>U::from(self)</code>.","An invalid hex flag was encountered.","A named flag that doesn’t correspond to any on the flags …","Parse the value from hex.","","Write a flags value as text.","","","","Write the value as hex."],"i":[19,0,0,11,19,11,0,0,11,11,0,11,6,6,11,11,11,11,11,11,11,11,6,11,11,11,11,11,11,11,11,11,11,11,11,11,6,11,11,11,11,6,6,0,11,11,11,11,6,6,0,11,11,11,11,11,11,11,11,6,6,6,11,11,6,0,0,7,8,7,8,7,8,7,8,7,8,7,8,8,7,8,7,8,7,8,0,0,0,12,12,12,12,12,12,0,12,12,12,20,12,0,12,12,12,21],"f":[0,0,0,0,0,0,0,0,[[],-1,[]],[[],-1,[]],0,[-1,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],1,2],[[-1,-1],1,2],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[-1,-1,[]],[[],[[3,[-1]]],[]],[[],[[3,[-1]]],[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[4,[[3,[-1]]],[]],[4,[[3,[-1]]],[]],[[-1,-1],5,2],[[-1,-1],5,2],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],1,2],[[-1,-1],1,2],[-1,-2,[],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[[6,[-1]]],1,[]],[[[6,[-1]]],1,[]],0,[-1,[[7,[-1]]],[]],[-1,[[7,[-1]]],[]],[-1,[[8,[-1]]],[]],[-1,[[8,[-1]]],[]],[[[6,[-1]]],4,[]],[[4,-1],[[6,[-1]]],[]],0,[[-1,-1],5,2],[[-1,-1],5,2],[[-1,-1,1],5,2],[[-1,-1,1],5,2],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],5,2],[[-1,-1],5,2],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[[6,[-1]]],-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[-1]]],3,11],[[[8,[-1]]],3,11],[[[8,[-1]]],-1,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],12],[[12,13],14],[[12,13],14],[-1,-1,[]],[4,[[9,[-1,12]]],11],[-1,-2,[],[]],[-1,12,15],[-1,12,15],[4,[[9,[-1,12]]],2],[-1,16,[]],[[-1,-2],[[9,[5,17]]],11,18],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[-1,-2],14,[],18]],"c":[],"p":[[15,"bool"],[8,"Sized",106],[4,"Option",107],[15,"str"],[15,"tuple"],[3,"Flag",0],[3,"Iter",65],[3,"IterNames",65],[4,"Result",108],[3,"TypeId",109],[8,"Flags",0],[3,"ParseError",86],[3,"Formatter",110],[6,"Result",110],[8,"Display",110],[3,"String",111],[3,"Error",110],[8,"Write",110],[8,"Bits",0],[8,"ParseHex",86],[8,"WriteHex",86]]},\
"bytemuck":{"doc":"This crate gives small utilities for casting between plain …","t":"NICIQSSINIEINNIIILLFFFFFFFALLFLLLFFLLLLLLOOLLLLLLLLLLFFFFFFFFLFFLFLLLLLLLLLLLFLLQIENNLLFFFFFLLLLLLFFLLKFFFFFFLFFLFL","n":["AlignmentMismatch","AnyBitPattern","CheckedBitPattern","Contiguous","Int","MAX_VALUE","MIN_VALUE","NoUninit","OutputSliceWouldHaveSlop","Pod","PodCastError","PodInOption","SizeMismatch","TargetAlignmentGreaterAndInputNotAligned","TransparentWrapper","Zeroable","ZeroableInOption","borrow","borrow_mut","bytes_of","bytes_of_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","checked","clone","eq","fill_zeroes","fmt","fmt","from","from_bytes","from_bytes_mut","from_integer","from_integer","hash","into","into_integer","into_integer","offset_of","offset_of","peel","peel","peel_mut","peel_mut","peel_ref","peel_ref","peel_slice","peel_slice","peel_slice_mut","peel_slice_mut","pod_align_to","pod_align_to_mut","pod_read_unaligned","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id","wrap","wrap","wrap_mut","wrap_mut","wrap_ref","wrap_ref","wrap_slice","wrap_slice","wrap_slice_mut","wrap_slice_mut","write_zeroes","zeroed","zeroed","Bits","CheckedBitPattern","CheckedCastError","InvalidBitPattern","PodCastError","borrow","borrow_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","clone","eq","fmt","fmt","from","from","from_bytes","from_bytes_mut","hash","into","is_valid_bit_pattern","pod_read_unaligned","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id"],"q":[[0,"bytemuck"],[80,"bytemuck::checked"],[115,"core::fmt"],[116,"core::fmt"],[117,"core::hash"],[118,"core::marker"],[119,"core::result"],[120,"core::any"]],"d":["For this type of cast the alignments must be exactly the …","Marker trait for “plain old data” types that are valid …","","A trait indicating that:","The primitive integer type with an identical …","The upper <em>inclusive</em> bound for valid instances of this type.","The lower <em>inclusive</em> bound for valid instances of this type.","Marker trait for “plain old data” types with no uninit …","If the element size changes then the output slice changes …","Marker trait for “plain old data”.","The things that can go wrong when casting between <code>Pod</code> data …","Trait for types which are Pod when wrapped in Option.","When casting a slice you can’t convert between ZST …","You tried to cast a slice to an element type with a higher …","A trait which indicates that a type is a …","Trait for types that can be safely created with <code>zeroed</code>.","Trait for types which are Zeroable when wrapped in Option.","","","Re-interprets <code>&amp;T</code> as <code>&amp;[u8]</code>.","Re-interprets <code>&amp;mut T</code> as <code>&amp;mut [u8]</code>.","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","Checked versions of the casting functions exposed in crate …","","","Fill all bytes of <code>slice</code> with zeroes (see <code>Zeroable</code>).","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","If <code>value</code> is within the range for valid instances of this …","If <code>value</code> is within the range for valid instances of this …","","Calls <code>U::from(self)</code>.","Perform the conversion from <code>C</code> into the underlying integral …","Perform the conversion from <code>C</code> into the underlying integral …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Convert the wrapper type into the inner type.","Convert the wrapper type into the inner type.","Convert a mutable reference to the wrapper type into a …","Convert a mutable reference to the wrapper type into a …","Convert a reference to the wrapper type into a reference …","Convert a reference to the wrapper type into a reference …","Convert a slice to the wrapped type into a slice to the …","Convert a slice to the wrapped type into a slice to the …","Convert a mutable slice to the wrapped type into a mutable …","Convert a mutable slice to the wrapped type into a mutable …","As <code>align_to</code>, but safe because of the <code>Pod</code> bound.","As <code>align_to_mut</code>, but safe because of the <code>Pod</code> bound.","Reads the slice into a <code>T</code> value.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.","","Convert the inner type into the wrapper type.","Convert the inner type into the wrapper type.","Convert a mutable reference to the inner type into a …","Convert a mutable reference to the inner type into a …","Convert a reference to the inner type into a reference to …","Convert a reference to the inner type into a reference to …","Convert a slice to the inner type into a slice to the …","Convert a slice to the inner type into a slice to the …","Convert a mutable slice to the inner type into a mutable …","Convert a mutable slice to the inner type into a mutable …","Fill all bytes of <code>target</code> with zeroes (see <code>Zeroable</code>).","Calls <code>zeroed</code>.","Calls <code>zeroed</code>.","<code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> …","A marker trait that allows types that have some invalid …","The things that can go wrong when casting between …","When casting to a <code>CheckedBitPattern</code> type, it is possible …","An error occurred during a true-<code>Pod</code> cast","","","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","","","","","Returns the argument unchanged.","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Calls <code>U::from(self)</code>.","If this function returns true, then it must be valid to …","Reads the slice into a <code>T</code> value.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.",""],"i":[5,0,0,0,18,18,18,0,5,0,0,0,5,5,0,0,0,5,5,0,0,0,0,0,0,0,0,5,5,0,5,5,5,0,0,18,18,5,5,18,18,0,0,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,0,0,0,5,0,0,5,0,5,19,19,19,19,19,19,19,19,19,19,0,8,8,16,0,0,17,17,17,17,0,0,0,0,0,17,17,17,17,17,17,0,0,17,17,16,0,0,0,0,0,0,17,0,0,17,0,17],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[1]]],3],[-1,[[2,[1]]],[3,4]],[-1,-2,3,4],[-1,-2,[3,4],[3,4]],[-1,-2,3,4],[[[2,[-1]]],[[2,[-2]]],3,4],[[[2,[-1]]],[[2,[-2]]],[3,4],[3,4]],0,[5,5],[[5,5],6],[[[2,[-1]]],7,8],[[5,9],10],[[5,9],10],[-1,-1,[]],[[[2,[1]]],-1,4],[[[2,[1]]],-1,[3,4]],[[],[[11,[-1]]],[]],[[],[[11,[-1]]],[]],[[5,-1],7,12],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],0,0,[-1,-2,13,13],[-1,-2,13,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],[[2,[-2]]],13,13],[[[2,[-1]]],[[2,[-2]]],13,13],[[[2,[-1]]],[[2,[-2]]],13,13],[[[2,[-1]]],[[2,[-2]]],13,13],[[[2,[-1]]],[[7,[[2,[-1]],[2,[-2]],[2,[-1]]]]],3,4],[[[2,[-1]]],[[7,[[2,[-1]],[2,[-2]],[2,[-1]]]]],[3,4],[3,4]],[[[2,[1]]],-1,4],[-1,[[14,[-2,5]]],3,4],[-1,[[14,[-2,5]]],[3,4],[3,4]],[-1,[[14,[-2,5]]],3,4],[[[2,[-1]]],[[14,[[2,[-2]],5]]],3,4],[[[2,[-1]]],[[14,[[2,[-2]],5]]],[3,4],[3,4]],[-1,[[14,[-2]]],[],[]],[[[2,[1]]],[[14,[-1,5]]],4],[[[2,[1]]],[[14,[-1,5]]],[3,4]],[-1,[[14,[-2]]],[],[]],[[[2,[1]]],[[14,[-1,5]]],4],[-1,15,[]],[-1,-2,13,13],[-1,-2,13,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],[[2,[-2]]],13,13],[[[2,[-1]]],[[2,[-2]]],13,13],[[[2,[-1]]],[[2,[-2]]],13,13],[[[2,[-1]]],[[2,[-2]]],13,13],[-1,7,8],[[],-1,[]],[[],-1,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,3,16],[-1,-2,[3,4],[3,16]],[-1,-2,3,16],[[[2,[-1]]],[[2,[-2]]],3,16],[[[2,[-1]]],[[2,[-2]]],[3,4],[3,16]],[17,17],[[17,17],6],[[17,9],10],[[17,9],10],[-1,-1,[]],[5,17],[[[2,[1]]],-1,16],[[[2,[1]]],-1,[3,16]],[[17,-1],7,12],[-1,-2,[],[]],[[],6],[[[2,[1]]],-1,16],[-1,[[14,[-2,17]]],3,16],[-1,[[14,[-2,17]]],[3,4],[16,3]],[-1,[[14,[-2,17]]],3,16],[[[2,[-1]]],[[14,[[2,[-2]],17]]],3,16],[[[2,[-1]]],[[14,[[2,[-2]],17]]],[3,4],[16,3]],[-1,[[14,[-2]]],[],[]],[[[2,[1]]],[[14,[-1,17]]],16],[[[2,[1]]],[[14,[-1,17]]],[16,3]],[-1,[[14,[-2]]],[],[]],[[[2,[1]]],[[14,[-1,17]]],16],[-1,15,[]]],"c":[],"p":[[15,"u8"],[15,"slice"],[8,"NoUninit",0],[8,"AnyBitPattern",0],[4,"PodCastError",0],[15,"bool"],[15,"tuple"],[8,"Zeroable",0],[3,"Formatter",115],[6,"Result",115],[4,"Option",116],[8,"Hasher",117],[8,"Sized",118],[4,"Result",119],[3,"TypeId",120],[8,"CheckedBitPattern",80],[4,"CheckedCastError",80],[8,"Contiguous",0],[8,"TransparentWrapper",0]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":"GEIGEGGIILLLLLLLLLLLLLLLLLLLLKLLKLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLKLLLLKLLLLLLLKLLLLKLLLLLLLKLLLLKLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLKLLLLKLLLLLKLLLLKLLLLLKLLLLKLLLLKLLLLKLLLL","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","ReadBytesExt","WriteBytesExt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32","read_f32","read_f32_into","read_f32_into","read_f32_into","read_f32_into_unchecked","read_f32_into_unchecked","read_f32_into_unchecked","read_f64","read_f64","read_f64","read_f64_into","read_f64_into","read_f64_into","read_f64_into_unchecked","read_f64_into_unchecked","read_f64_into_unchecked","read_i128","read_i128","read_i128","read_i128_into","read_i128_into","read_i128_into","read_i16","read_i16","read_i16","read_i16_into","read_i16_into","read_i16_into","read_i24","read_i24","read_i24","read_i32","read_i32","read_i32","read_i32_into","read_i32_into","read_i32_into","read_i48","read_i48","read_i48","read_i64","read_i64","read_i64","read_i64_into","read_i64_into","read_i64_into","read_i8","read_i8","read_i8_into","read_i8_into","read_int","read_int","read_int","read_int128","read_int128","read_int128","read_u128","read_u128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u24","read_u24","read_u32","read_u32","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u48","read_u48","read_u64","read_u64","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u8","read_u8","read_uint","read_uint","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","read_uint128","read_uint128","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32","write_f32","write_f32_into","write_f64","write_f64","write_f64","write_f64_into","write_i128","write_i128","write_i128","write_i128_into","write_i16","write_i16","write_i16","write_i16_into","write_i24","write_i24","write_i24","write_i32","write_i32","write_i32","write_i32_into","write_i48","write_i48","write_i48","write_i64","write_i64","write_i64","write_i64_into","write_i8","write_i8","write_i8_into","write_int","write_int","write_int","write_int128","write_int128","write_int128","write_u128","write_u128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u24","write_u24","write_u32","write_u32","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u48","write_u48","write_u64","write_u64","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_u8","write_u8","write_uint","write_uint","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128","write_uint128","write_uint128"],"q":[[0,"byteorder"],[270,"core::cmp"],[271,"core::fmt"],[272,"core::fmt"],[273,"core::option"],[274,"std::io::error"],[275,"core::result"],[276,"core::any"]],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","Extends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…","Extends <code>Write</code> with methods for writing numbers. (For …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from <code>buf</code>.","Reads a sequence of signed 128 bit integers from the …","Reads a sequence of signed 128 bit integers from the …","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a sequence of signed 16 bit integers from the …","Reads a sequence of signed 16 bit integers from the …","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a sequence of signed 32 bit integers from the …","Reads a sequence of signed 32 bit integers from the …","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a sequence of signed 64 bit integers from the …","Reads a sequence of signed 64 bit integers from the …","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads a sequence of signed 8 bit integers from the …","Reads a sequence of signed 8 bit integers from the …","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","Reads an unsigned 128 bit integer from the underlying …","Reads an unsigned 128 bit integer from the underlying …","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 128 bit integers from the …","Reads a sequence of unsigned 128 bit integers from the …","","","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 16 bit integer from the underlying …","Reads an unsigned 16 bit integer from the underlying …","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 16 bit integers from the …","Reads a sequence of unsigned 16 bit integers from the …","","","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 32 bit integer from the underlying …","Reads an unsigned 32 bit integer from the underlying …","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 32 bit integers from the …","Reads a sequence of unsigned 32 bit integers from the …","","","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 64 bit integer from the underlying …","Reads an unsigned 64 bit integer from the underlying …","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 64 bit integers from the …","Reads a sequence of unsigned 64 bit integers from the …","","","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 128 bit integer to the underlying …","Writes an unsigned 128 bit integer to the underlying …","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 16 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying writer.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 32 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying writer.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 64 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying writer.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,27,1,2,27,1,2,27,27,27,27,27,1,2,27,1,2,27,1,2,27,1,2,1,2,1,2,1,2,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,28,28,28,28,27,28,28,27,27,28,28,1,2,27,28,28,1,2,27,28,28,1,2,27,28,28,1,2,28,28,27,27,28,28,1,2,27,28,28,1,2,28,28,27,27,28,28,1,2,27,28,28,1,2,28,28,27,28,28,1,2,27,28,28,1,2,1,2,1,2,1,2,1,2,29,29,27,27,29,29,27,27,29,29,27,27,29,29,27,27,29,29,27,29,29,27,27,29,29,27,29,29,27,27,29,29,27,29,29,27,29,29,27,27,29,29,1,2,27,1,2,27,29,29,1,2,27,1,2,29,29,27,27,29,29,1,2,27,1,2,29,29,27,27,29,29,1,2,27,1,2,29,29,27,29,29,1,2,27,29,29,1,2],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,1],4],[[2,2],4],[[],1],[[],2],[[1,1],5],[[2,2],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[1,6],7],[[2,6],7],[-1,-1,[]],[-1,-1,[]],[[[9,[8]]],3],[[[9,[8]]],3],[[[9,[8]]],3],[[[9,[10]]],3],[[[9,[10]]],3],[[[9,[10]]],3],[[[9,[11]]],3],[[[9,[12]]],3],[[[9,[13]]],3],[[[9,[14]]],3],[[[9,[15]]],3],[[[9,[15]]],3],[[[9,[15]]],3],[[[9,[16]]],3],[[[9,[16]]],3],[[[9,[16]]],3],[[[9,[17]]],3],[[[9,[17]]],3],[[[9,[17]]],3],[[[9,[18]]],3],[[[9,[18]]],3],[[[9,[18]]],3],[[1,-1],3,19],[[2,-1],3,19],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[20,[4]]]],[[2,2],[[20,[4]]]],[-1,[[21,[8]]],[]],[-1,[[21,[8]]],[]],[[[9,[22]]],8],[[-1,[9,[8]]],[[21,[3]]],[]],[[-1,[9,[8]]],[[21,[3]]],[]],[[[9,[22]],[9,[8]]],3],[[-1,[9,[8]]],[[21,[3]]],[]],[[-1,[9,[8]]],[[21,[3]]],[]],[[[9,[22]],[9,[8]]],3],[-1,[[21,[10]]],[]],[-1,[[21,[10]]],[]],[[[9,[22]]],10],[[-1,[9,[10]]],[[21,[3]]],[]],[[-1,[9,[10]]],[[21,[3]]],[]],[[[9,[22]],[9,[10]]],3],[[-1,[9,[10]]],[[21,[3]]],[]],[[-1,[9,[10]]],[[21,[3]]],[]],[[[9,[22]],[9,[10]]],3],[-1,[[21,[11]]],[]],[-1,[[21,[11]]],[]],[[[9,[22]]],11],[[-1,[9,[11]]],[[21,[3]]],[]],[[-1,[9,[11]]],[[21,[3]]],[]],[[[9,[22]],[9,[11]]],3],[-1,[[21,[12]]],[]],[-1,[[21,[12]]],[]],[[[9,[22]]],12],[[-1,[9,[12]]],[[21,[3]]],[]],[[-1,[9,[12]]],[[21,[3]]],[]],[[[9,[22]],[9,[12]]],3],[-1,[[21,[13]]],[]],[-1,[[21,[13]]],[]],[[[9,[22]]],13],[-1,[[21,[13]]],[]],[-1,[[21,[13]]],[]],[[[9,[22]]],13],[[-1,[9,[13]]],[[21,[3]]],[]],[[-1,[9,[13]]],[[21,[3]]],[]],[[[9,[22]],[9,[13]]],3],[-1,[[21,[14]]],[]],[-1,[[21,[14]]],[]],[[[9,[22]]],14],[-1,[[21,[14]]],[]],[-1,[[21,[14]]],[]],[[[9,[22]]],14],[[-1,[9,[14]]],[[21,[3]]],[]],[[-1,[9,[14]]],[[21,[3]]],[]],[[[9,[22]],[9,[14]]],3],[-1,[[21,[23]]],[]],[-1,[[21,[23]]],[]],[[-1,[9,[23]]],[[21,[3]]],[]],[[-1,[9,[23]]],[[21,[3]]],[]],[[-1,24],[[21,[14]]],[]],[[-1,24],[[21,[14]]],[]],[[[9,[22]],24],14],[[-1,24],[[21,[11]]],[]],[[-1,24],[[21,[11]]],[]],[[[9,[22]],24],11],[[[9,[22]]],15],[-1,[[21,[15]]],[]],[-1,[[21,[15]]],[]],[[[9,[22]]],15],[[[9,[22]]],15],[[[9,[22]],[9,[15]]],3],[[-1,[9,[15]]],[[21,[3]]],[]],[[-1,[9,[15]]],[[21,[3]]],[]],[[[9,[22]],[9,[15]]],3],[[[9,[22]],[9,[15]]],3],[[[9,[22]]],16],[-1,[[21,[16]]],[]],[-1,[[21,[16]]],[]],[[[9,[22]]],16],[[[9,[22]]],16],[[[9,[22]],[9,[16]]],3],[[-1,[9,[16]]],[[21,[3]]],[]],[[-1,[9,[16]]],[[21,[3]]],[]],[[[9,[22]],[9,[16]]],3],[[[9,[22]],[9,[16]]],3],[-1,[[21,[17]]],[]],[-1,[[21,[17]]],[]],[[[9,[22]]],17],[[[9,[22]]],17],[-1,[[21,[17]]],[]],[-1,[[21,[17]]],[]],[[[9,[22]]],17],[[[9,[22]]],17],[[[9,[22]],[9,[17]]],3],[[-1,[9,[17]]],[[21,[3]]],[]],[[-1,[9,[17]]],[[21,[3]]],[]],[[[9,[22]],[9,[17]]],3],[[[9,[22]],[9,[17]]],3],[-1,[[21,[18]]],[]],[-1,[[21,[18]]],[]],[[[9,[22]]],18],[[[9,[22]]],18],[-1,[[21,[18]]],[]],[-1,[[21,[18]]],[]],[[[9,[22]]],18],[[[9,[22]]],18],[[[9,[22]],[9,[18]]],3],[[-1,[9,[18]]],[[21,[3]]],[]],[[-1,[9,[18]]],[[21,[3]]],[]],[[[9,[22]],[9,[18]]],3],[[[9,[22]],[9,[18]]],3],[-1,[[21,[22]]],[]],[-1,[[21,[22]]],[]],[[[9,[22]],24],18],[[-1,24],[[21,[18]]],[]],[[-1,24],[[21,[18]]],[]],[[[9,[22]],24],18],[[[9,[22]],24],18],[[[9,[22]],24],15],[[-1,24],[[21,[15]]],[]],[[-1,24],[[21,[15]]],[]],[[[9,[22]],24],15],[[[9,[22]],24],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[[-1,8],[[21,[3]]],[]],[[-1,8],[[21,[3]]],[]],[[[9,[22]],8],3],[[[9,[8]],[9,[22]]],3],[[-1,10],[[21,[3]]],[]],[[-1,10],[[21,[3]]],[]],[[[9,[22]],10],3],[[[9,[10]],[9,[22]]],3],[[-1,11],[[21,[3]]],[]],[[-1,11],[[21,[3]]],[]],[[[9,[22]],11],3],[[[9,[11]],[9,[22]]],3],[[-1,12],[[21,[3]]],[]],[[-1,12],[[21,[3]]],[]],[[[9,[22]],12],3],[[[9,[12]],[9,[22]]],3],[[-1,13],[[21,[3]]],[]],[[-1,13],[[21,[3]]],[]],[[[9,[22]],13],3],[[-1,13],[[21,[3]]],[]],[[-1,13],[[21,[3]]],[]],[[[9,[22]],13],3],[[[9,[13]],[9,[22]]],3],[[-1,14],[[21,[3]]],[]],[[-1,14],[[21,[3]]],[]],[[[9,[22]],14],3],[[-1,14],[[21,[3]]],[]],[[-1,14],[[21,[3]]],[]],[[[9,[22]],14],3],[[[9,[14]],[9,[22]]],3],[[-1,23],[[21,[3]]],[]],[[-1,23],[[21,[3]]],[]],[[[9,[23]],[9,[22]]],3],[[-1,14,24],[[21,[3]]],[]],[[-1,14,24],[[21,[3]]],[]],[[[9,[22]],14,24],3],[[-1,11,24],[[21,[3]]],[]],[[-1,11,24],[[21,[3]]],[]],[[[9,[22]],11,24],3],[[[9,[22]],15],3],[[-1,15],[[21,[3]]],[]],[[-1,15],[[21,[3]]],[]],[[[9,[22]],15],3],[[[9,[22]],15],3],[[[9,[15]],[9,[22]]],3],[[[9,[15]],[9,[22]]],3],[[[9,[15]],[9,[22]]],3],[[[9,[22]],16],3],[[-1,16],[[21,[3]]],[]],[[-1,16],[[21,[3]]],[]],[[[9,[22]],16],3],[[[9,[22]],16],3],[[[9,[16]],[9,[22]]],3],[[[9,[16]],[9,[22]]],3],[[[9,[16]],[9,[22]]],3],[[-1,17],[[21,[3]]],[]],[[-1,17],[[21,[3]]],[]],[[[9,[22]],17],3],[[[9,[22]],17],3],[[-1,17],[[21,[3]]],[]],[[-1,17],[[21,[3]]],[]],[[[9,[22]],17],3],[[[9,[22]],17],3],[[[9,[17]],[9,[22]]],3],[[[9,[17]],[9,[22]]],3],[[[9,[17]],[9,[22]]],3],[[-1,18],[[21,[3]]],[]],[[-1,18],[[21,[3]]],[]],[[[9,[22]],18],3],[[[9,[22]],18],3],[[-1,18],[[21,[3]]],[]],[[-1,18],[[21,[3]]],[]],[[[9,[22]],18],3],[[[9,[22]],18],3],[[[9,[18]],[9,[22]]],3],[[[9,[18]],[9,[22]]],3],[[[9,[18]],[9,[22]]],3],[[-1,22],[[21,[3]]],[]],[[-1,22],[[21,[3]]],[]],[[[9,[22]],18,24],3],[[-1,18,24],[[21,[3]]],[]],[[-1,18,24],[[21,[3]]],[]],[[[9,[22]],18,24],3],[[[9,[22]],18,24],3],[[[9,[22]],15,24],3],[[-1,15,24],[[21,[3]]],[]],[[-1,15,24],[[21,[3]]],[]],[[[9,[22]],15,24],3],[[[9,[22]],15,24],3]],"c":[63,64,65,72,73,74],"p":[[4,"BigEndian",0],[4,"LittleEndian",0],[15,"tuple"],[4,"Ordering",270],[15,"bool"],[3,"Formatter",271],[6,"Result",271],[15,"f32"],[15,"slice"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[8,"Hasher",272],[4,"Option",273],[6,"Result",274],[15,"u8"],[15,"i8"],[15,"usize"],[4,"Result",275],[3,"TypeId",276],[8,"ByteOrder",0],[8,"ReadBytesExt",0],[8,"WriteBytesExt",0]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[]},\
"convert_case":{"doc":"Converts to and from various cases.","t":"NNEINNDNNNNNNNNNNNNLLLLLLLLLLLLKLLLKLLLLLLLL","n":["Alternating","Camel","Case","Casing","Cobol","Flat","FromCasing","Kebab","Lower","Pascal","ScreamingSnake","Snake","Title","Toggle","Train","Upper","UpperCamel","UpperFlat","UpperSnake","all_cases","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","from","from_case","from_case","into","into","to_case","to_case","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"convert_case"],[44,"alloc::vec"],[45,"core::fmt"],[46,"core::fmt"],[47,"core::result"],[48,"core::any"]],"d":["Alternating case strings are delimited by spaces.  …","Camel case strings are lowercase, but for every word …","Defines the type of casing a string can be.","Describes items that can be converted into a case.","Cobol case strings are delimited by hyphens <code>-</code> and are all …","Flat case strings are all lowercase, with no delimiter.  …","Holds information about parsing before converting into a …","Kebab case strings are delimited by hyphens <code>-</code> and are all …","Lowercase strings are delimited by spaces and all …","Pascal case strings are lowercase, but for every word the …","Screaming snake case is an alternative name for upper …","Snake case strings are delimited by underscores <code>_</code> and are …","Title case strings are delimited by spaces. Only the …","Toggle case strings are delimited by spaces.  All …","Train case strings are delimited by hyphens <code>-</code>.  All …","Uppercase strings are delimited by spaces and all …","Upper camel case is an alternative name for Pascal case.","Upper flat case strings are all uppercase, with no …","Upper snake case strings are delimited by underscores <code>_</code> …","Returns a vector with all case enum variants.  This was …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>FromCasing</code> struct, which saves information about …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","References <code>self</code> and converts to the given case.","","","","","","","",""],"i":[1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,7,1,1,1,1,1,1,7,1,11,7,7,1,11,7,1,7,1,7,1,7,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],3,[],[]],[[1,1],4],[[-1,-2],4,[],[]],[[1,5],6],[-1,-1,[]],[-1,-1,[]],[[-1,1],7,[]],[[7,1],7],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,1],8,[]],[[7,1],8],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]]],"c":[],"p":[[4,"Case",0],[3,"Vec",44],[15,"tuple"],[15,"bool"],[3,"Formatter",45],[6,"Result",45],[3,"FromCasing",0],[3,"String",46],[4,"Result",47],[3,"TypeId",48],[8,"Casing",0]]},\
"derive_more":{"doc":"<code>derive_more</code>","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"either":{"doc":"The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","t":"ECNCNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOLLLLLL","n":["Either","Left","Left","Right","Right","all","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow_mut","cause","clone","clone_from","clone_into","cmp","collect","consume","count","deref","deref_mut","description","either","either_into","either_with","eq","equivalent","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","fill_buf","find","find_map","flip","flush","fmt","fmt","fold","for_both","for_each","from","from","hash","into","into","into_future","into_inner","into_iter","into_iter","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","len","map","map_either","map_either_with","map_left","map_right","next","next_back","nth","partial_cmp","partition","poll","position","read","read_exact","read_line","read_to_end","read_to_string","read_until","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","seek","size_hint","source","to_owned","to_string","try_from","try_into","try_left","try_right","type_id","unwrap_left","unwrap_right","write","write_all","write_fmt"],"q":[[0,"either"],[117,"core::iter::traits::iterator"],[118,"core::ops::function"],[119,"core::ffi::c_str"],[120,"core::convert"],[121,"std::path"],[122,"std::ffi::os_str"],[123,"core::pin"],[124,"core::convert"],[125,"core::option"],[126,"core::clone"],[127,"core::cmp"],[128,"core::cmp"],[129,"std::io"],[130,"core::ops::deref"],[131,"core::ops::deref"],[132,"core::iter::traits::collect"],[133,"std::io::error"],[134,"std::io"],[135,"core::hash"],[136,"core::iter::traits::exact_size"],[137,"core::iter::traits::double_ended"],[138,"core::cmp"],[139,"core::task::poll"],[140,"core::future::future"],[141,"std::io"],[142,"alloc::vec"],[143,"std::io"],[144,"core::fmt"]],"d":["The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","","A value of type <code>L</code>.","","A value of type <code>R</code>.","","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","","","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","Evaluate the provided expression for both <code>Either::Left</code> and …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …","Similar to [<code>map_either</code>], with an added context <code>ctx</code> …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","","","","","","","","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","","","","","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","Returns the left value","Returns the right value","","",""],"i":[0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1],"f":[0,0,0,0,0,[[[1,[-1,-2]],-3],2,3,3,4],[[[1,[-1,-2]],-3],2,3,3,4],[[[1,[-1,-2]]],5,[[6,[5]]],[[6,[5]]]],[[[1,[-1,-2]]],7,[[6,[7]]],[[6,[7]]]],[[[1,[-2,-3]]],[[8,[-1]]],[],[[6,[[8,[-1]]]]],[[6,[[8,[-1]]]]]],[[[1,[-1,-2]]],9,[[6,[9]]],[[6,[9]]]],[[[1,[-1,-2]]],[[1,[-1,-2]]],[],[]],[[[1,[-1,-2]]],10,[[6,[10]]],[[6,[10]]]],[[[1,[-2,-3]]],-1,[],[[6,[-1]]],[[6,[-1]]]],[[[11,[[1,[-1,-2]]]]],[[1,[[11,[-1]],[11,[-2]]]]],[],[]],[[[11,[[1,[-1,-2]]]]],[[1,[[11,[-1]],[11,[-2]]]]],[],[]],[[[1,[-1,-2]]],9,[[12,[9]]],[[12,[9]]]],[[[1,[-1,-2]]],5,[[12,[5]]],[[12,[5]]]],[[[1,[-2,-3]]],-1,[],[[12,[-1]]],[[12,[-1]]]],[[[1,[-1,-2]]],10,[[12,[10]]],[[12,[10]]]],[[[1,[-2,-3]]],[[8,[-1]]],[],[[12,[[8,[-1]]]]],[[12,[[8,[-1]]]]]],[[[1,[-1,-2]]],[[1,[-1,-2]]],[],[]],[[[1,[-1,-2]]],7,[[12,[7]]],[[12,[7]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]]],[[14,[13]]],13,13],[[[1,[-1,-2]]],[[1,[-1,-2]]],15,15],[[[1,[-1,-2]],[1,[-1,-2]]],16,15,15],[[-1,-2],16,[],[]],[[[1,[-1,-2]],[1,[-1,-2]]],17,18,18],[[[1,[-1,-2]]],-3,3,3,19],[[[1,[-1,-2]],20],16,21,21],[[[1,[-1,-2]]],20,3,3],[[[1,[-1,-2]]],[],22,22],[[[1,[-1,-2]]],[],23,23],[[[1,[-1,-2]]],9,13,13],[[[1,[-1,-2]],-3,-4],-5,[],[],24,24,[]],[[[1,[-2,-3]]],-1,[],[[25,[-1]]],[[25,[-1]]]],[[[1,[-1,-2]],-3,-4,-5],-6,[],[],[],24,24,[]],[[[1,[-1,-2]],[1,[-1,-2]]],2,26,26],[[-1,-2],2,[],[]],[[[1,[-1,-2]],9],-1,[],27],[[[1,[-1,-2]],9],-2,27,[]],[[[1,[-2,-3]],-4],16,[],[[28,[-1]]],[[28,[-1]]],29],[[[1,[[30,[-1,-2]],[30,[-3,-2]]]]],[[30,[[1,[-1,-3]],-2]]],[],[],[]],[[[1,[[16,[-1,-2]],[16,[-1,-3]]]]],[[16,[-1,[1,[-2,-3]]]]],[],[],[]],[[[1,[[14,[-1]],[14,[-2]]]]],[[14,[[1,[-1,-2]]]]],[],[]],[[[1,[[30,[-1,-2]],[30,[-1,-3]]]]],[[30,[-1,[1,[-2,-3]]]]],[],[],[]],[[[1,[[16,[-1,-2]],[16,[-3,-2]]]]],[[16,[[1,[-1,-3]],-2]]],[],[],[]],[[[1,[-1,-2]]],[[32,[[8,[31]]]]],21,21],[[[1,[-1,-2]],-3],14,3,3,4],[[[1,[-1,-2]],-3],[[14,[-4]]],3,3,4,[]],[[[1,[-1,-2]]],[[1,[-2,-1]]],[],[]],[[[1,[-1,-2]]],[[32,[16]]],33,33],[[[1,[-1,-2]],34],35,36,36],[[[1,[-1,-2]],34],35,27,27],[[[1,[-1,-2]],-3,-4],-3,3,3,[],4],0,[[[1,[-1,-2]],-3],16,3,3,4],[[[30,[-1,-2]]],[[1,[-2,-1]]],[],[]],[-1,-1,[]],[[[1,[-1,-2]],-3],16,37,37,38],[-1,-2,[],[]],[[[1,[-1,-2]]],[[30,[-2,-1]]],[],[]],[-1,[],[]],[[[1,[-1,-1]]],-1,[]],[-1,-2,[],[]],[[[1,[-1,-2]]],1,29,29],[[[1,[-1,-2]]],2,[],[]],[[[1,[-1,-2]]],2,[],[]],[[[1,[-1,-2]]],14,3,3],[[[1,[-1,-2]]],[[14,[-1]]],[],[]],[[[1,[-1,-2]],-3],[[1,[-4,-2]]],[],[],24,[]],[[[1,[-1,-2]],-1],-1,[],[]],[[[1,[-1,-2]]],-1,39,[]],[[[1,[-1,-2]],-3],-1,[],[],24],[[[1,[-1,-2]]],20,40,40],[[[1,[-1,-1]],-2],[[1,[-3,-3]]],[],24,[]],[[[1,[-1,-2]],-3,-4],[[1,[-5,-6]]],[],[],24,24,[],[]],[[[1,[-1,-2]],-3,-4,-5],[[1,[-6,-7]]],[],[],[],24,24,[],[]],[[[1,[-1,-2]],-3],[[1,[-4,-2]]],[],[],24,[]],[[[1,[-1,-2]],-3],[[1,[-1,-4]]],[],[],24,[]],[[[1,[-1,-2]]],14,3,3],[[[1,[-1,-2]]],14,41,41],[[[1,[-1,-2]],20],14,3,3],[[[1,[-1,-2]],[1,[-1,-2]]],[[14,[17]]],42,42],[[[1,[-1,-2]],-3],[[16,[-4,-4]]],3,3,4,[39,28]],[[[11,[[1,[-1,-2]]]],43],44,45,45],[[[1,[-1,-2]],-3],[[14,[20]]],3,3,4],[[[1,[-1,-2]],[8,[31]]],[[32,[20]]],46,46],[[[1,[-1,-2]],[8,[31]]],[[32,[16]]],46,46],[[[1,[-1,-2]],47],[[32,[20]]],21,21],[[[1,[-1,-2]],[48,[31]]],[[32,[20]]],46,46],[[[1,[-1,-2]],47],[[32,[20]]],46,46],[[[1,[-1,-2]],31,[48,[31]]],[[32,[20]]],21,21],[[[1,[-1,-2]],-3],14,41,41,4],[[[1,[-1,-2]],-3,-4],-3,41,41,[],4],[[[1,[-1,-2]]],[[14,[-2]]],[],[]],[[[1,[-1,-2]],-3],[[1,[-1,-4]]],[],[],24,[]],[[[1,[-1,-2]],-2],-2,[],[]],[[[1,[-1,-2]]],-2,[],39],[[[1,[-1,-2]],-3],-2,[],[],24],[[[1,[-1,-2]],49],[[32,[50]]],51,51],[[[1,[-1,-2]]],[[16,[20,[14,[20]]]]],3,3],[[[1,[-1,-2]]],[[14,[13]]],13,13],[-1,-2,[],[]],[-1,47,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],0,0,[-1,52,[]],[[[1,[-1,-2]]],-1,[],27],[[[1,[-1,-2]]],-2,27,[]],[[[1,[-1,-2]],[8,[31]]],[[32,[20]]],33,33],[[[1,[-1,-2]],[8,[31]]],[[32,[16]]],33,33],[[[1,[-1,-2]],53],[[32,[16]]],33,33]],"c":[],"p":[[4,"Either",0],[15,"bool"],[8,"Iterator",117],[8,"FnMut",118],[3,"CStr",119],[8,"AsMut",120],[3,"Path",121],[15,"slice"],[15,"str"],[3,"OsStr",122],[3,"Pin",123],[8,"AsRef",120],[8,"Error",124],[4,"Option",125],[8,"Clone",126],[15,"tuple"],[4,"Ordering",127],[8,"Ord",127],[8,"FromIterator",128],[15,"usize"],[8,"BufRead",129],[8,"Deref",130],[8,"DerefMut",130],[8,"FnOnce",118],[8,"Into",120],[8,"PartialEq",127],[8,"Debug",131],[8,"Extend",128],[8,"IntoIterator",128],[4,"Result",132],[15,"u8"],[6,"Result",133],[8,"Write",129],[3,"Formatter",131],[6,"Result",131],[8,"Display",131],[8,"Hash",134],[8,"Hasher",134],[8,"Default",135],[8,"ExactSizeIterator",136],[8,"DoubleEndedIterator",137],[8,"PartialOrd",127],[3,"Context",138],[4,"Poll",139],[8,"Future",140],[8,"Read",129],[3,"String",141],[3,"Vec",142],[4,"SeekFrom",129],[15,"u64"],[8,"Seek",129],[3,"TypeId",143],[3,"Arguments",131]]},\
"elsa":{"doc":"<em>🎵 Immutability never bothered me anyway 🎶</em>","t":"CCCCCAAAAADLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["FrozenBTreeMap","FrozenIndexMap","FrozenIndexSet","FrozenMap","FrozenVec","index_map","index_set","map","sync","vec","FrozenIndexMap","as_mut","borrow","borrow_mut","clone","clone_into","default","eq","from","from","from_iter","get","get_index","index","insert","insert_full","into","into_map","into_tuple_vec","is_empty","map_get","new","to_owned","try_from","try_into","type_id","FrozenIndexSet","as_mut","borrow","borrow_mut","clone","clone_into","default","eq","from","from","from_iter","get","get_full","get_index","index","insert","insert_full","into","into_set","new","to_owned","try_from","try_into","type_id","FrozenBTreeMap","FrozenMap","as_mut","as_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","from","from","from","from","from_iter","from_iter","get","get","get_key_value","index","index","insert","insert","into","into","into_map","into_map","into_tuple_vec","into_tuple_vec","is_empty","is_empty","len","len","map_get","map_get","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","FrozenBTreeMap","FrozenMap","FrozenVec","Iter","LockFreeFrozenVec","as_mut","as_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","drop","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_iter","get","get","get","get","get_copy","get_copy_or_insert","get_copy_or_insert_with","get_copy_or_insert_with_key","get_unchecked","index","insert","insert","insert_with","insert_with_key","into","into","into","into","into","into_iter","into_iter","into_tuple_vec","into_tuple_vec","into_vec","is_empty","is_empty","is_empty","is_empty","iter","keys_cloned","len","len","len","map_get","map_get","new","new","new","new","next","push","push","push_get","push_get_index","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","FrozenVec","Iter","as_mut","binary_search","binary_search_by","binary_search_by_key","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","eq","first","from","from","from","from_iter","get","get_copy","get_unchecked","index","into","into","into_iter","into_iter","into_vec","is_empty","iter","last","len","new","next","partition_point","push","push_get","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"elsa"],[10,"elsa::index_map"],[36,"elsa::index_set"],[60,"elsa::map"],[111,"elsa::sync"],[220,"elsa::vec"],[264,"indexmap::map"],[265,"core::clone"],[266,"core::cmp"],[267,"core::hash"],[268,"core::default"],[269,"core::cmp"],[270,"core::hash"],[271,"core::marker"],[272,"core::borrow"],[273,"stable_deref_trait"],[274,"alloc::vec"],[275,"core::ops::function"],[276,"core::result"],[277,"core::any"],[278,"indexmap::set"],[279,"std::collections::hash::map"],[280,"alloc::collections::btree::map"],[281,"core::cmp"],[282,"core::fmt"]],"d":["","","","","","","","","<strong>This module is experimental</strong>","","Append-only version of <code>indexmap::IndexMap</code> where insertion …","Get mutable access to the underlying <code>IndexMap</code>.","","","","","","","Returns the argument unchanged.","","","Returns a reference to the value corresponding to the key.","Returns a reference to the key-value mapping corresponding …","Examples","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","Calls <code>U::from(self)</code>.","","Collects the contents of this map into a vector of tuples.","Returns true if the map contains no elements.","Applies a function to the owner of the value corresponding …","","","","","","Append-only version of <code>indexmap::IndexSet</code> where insertion …","Get mutable access to the underlying <code>IndexSet</code>.","","","","","","","Returns the argument unchanged.","","","Returns a reference to the value passed as argument if …","Returns a reference to the value passed as argument if …","Returns a reference to value at the index passed as …","","If the value exists in the set, returns a reference to the …","If the key exists in the set, returns a reference to the …","Calls <code>U::from(self)</code>.","","","","","","","Append-only version of <code>std::collections::BTreeMap</code> where …","Append-only version of <code>std::collections::HashMap</code> where …","Get mutable access to the underlying <code>HashMap</code>.","Get mutable access to the underlying <code>HashMap</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns a reference to the value corresponding to the key.","Returns a reference to the value corresponding to the key.","Returns a reference to the key and value matching a …","Examples","Examples","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Collects the contents of this map into a vector of tuples.","Collects the contents of this map into a vector of tuples.","Examples","Examples","Examples","Examples","Applies a function to the owner of the value corresponding …","Applies a function to the owner of the value corresponding …","","","","","","","","","","","Append-only threadsafe version of …","Append-only threadsafe version of <code>std::collections::HashMap</code>…","Append-only threadsafe version of <code>std::vec::Vec</code> where …","Iterator over FrozenVec, obtained via <code>.iter()</code>","Append-only threadsafe version of <code>std::vec::Vec</code> where …","Get mutable access to the underlying <code>HashMap</code>.","Get mutable access to the underlying vector.","","","","","","","","","","","","","","","","","","","","","Creates an empty <code>LockFreeFrozenVec</code> that does not allocate …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns a reference to the value corresponding to the key.","","Load an element (if it exists). This operation is …","Returns a reference to the value corresponding to the key.","Returns a copy of the value corresponding to the key.","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","Load an element (if it exists). This operation is …","Examples","If the key exists in the map, returns a reference to the …","Insert a new value into the map. Does nothing if the key …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Collects the contents of this map into a vector of tuples.","Collects the contents of this map into a vector of tuples.","Returns the internal vector backing this structure","Examples","Returns <code>true</code> if the vector contains no elements.","","Examples","Returns an iterator over the vector.","","Examples","Returns the number of elements in the vector.","Examples","Applies a function to the owner of the value corresponding …","Applies a function to the owner of the value corresponding …","","","","","","","Pushes an element to the vector, potentially allocating …","Push, immediately getting a reference to the element","Push, immediately getting a an index of the element","","","","","","","","","","","","","","","","","","","","Append-only version of <code>std::vec::Vec</code> where insertion does …","Iterator over FrozenVec, obtained via <code>.iter()</code>","Get mutable access to the underlying vector.","Binary searches this sorted vector for a given element, …","Binary searches this sorted vector with a comparator …","Binary searches this sorted vector with a key extraction …","","","","","","","","","Returns the first element of the vector, or <code>None</code> if empty.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns a reference to an element.","Returns a copy of an element.","Returns a reference to an element, without doing bounds …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Converts the frozen vector into a plain vector.","Returns <code>true</code> if the vector contains no elements.","Returns an iterator over the vector.","Returns the last element of the vector, or <code>None</code> if empty.","Returns the number of elements in the vector.","Constructs a new, empty vector.","","Returns the index of the partition point according to the …","Appends an element to the back of the vector.","Push, immediately getting a reference to the element","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,23,25,25,23,25,23,25,23,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,0,0,0,0,0,28,29,28,29,30,36,32,28,29,30,36,32,28,29,30,32,28,29,30,32,28,29,30,32,30,28,29,30,32,28,29,36,32,28,29,29,30,36,32,32,32,28,29,30,32,28,28,28,28,30,32,28,32,28,28,28,29,30,36,32,29,36,28,32,29,28,29,30,32,29,28,28,29,32,28,32,28,29,30,32,36,29,30,29,29,28,29,30,32,28,29,30,36,32,28,29,30,36,32,28,29,30,36,32,0,0,37,37,37,37,37,39,37,39,37,37,37,37,37,37,37,39,37,37,37,37,37,37,39,37,39,37,37,37,37,37,37,39,37,37,37,37,37,39,37,39,37,39],"f":[0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1,-2,-3]]],[[2,[-1,-2,-3]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2,-3]]],[[1,[-1,-2,-3]]],3,3,3],[[-1,-2],4,[],[]],[[],[[1,[-1,-2,-3]]],[5,6],[],7],[[[1,[-1,-2]],[1,[-1,-2]]],8,[6,5],9],[-1,-1,[]],[[[2,[-1,-2,-3]]],[[1,[-1,-2,-3]]],[],[],[]],[-1,[[1,[-2,-3,-4]]],10,[5,6],[],[11,7]],[[[1,[-2,-3,-4]],-1],12,[6,5,13],[[14,[-1]],5,6],15,11],[[[1,[-1,-2,-3]],16],[[12,[4]]],[15,5,6],15,11],[[[1,[-2,-3,-4]],-1],[],[5,6,13],[5,6,[14,[-1]]],15,11],[[[1,[-1,-2,-3]],-1,-2],[],[5,6],15,11],[[[1,[-1,-2,-3]],-1,-2],[[4,[16]]],[5,6],15,11],[-1,-2,[],[]],[[[1,[-1,-2,-3]]],[[2,[-1,-2,-3]]],[],[],[]],[[[1,[-1,-2,-3]]],[[17,[[4,[-1,-2]]]]],[],[],[]],[[[1,[-1,-2,-3]]],8,[],[],[]],[[[1,[-2,-3,-4]],-1,-5],[[12,[-6]]],[6,5,13],[[14,[-1]],5,6],15,11,18,[]],[[],[[1,[-1,-2]]],[5,6],[]],[-1,-2,[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],0,[[[21,[-1,-2]]],[[22,[-1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[-1,-2]]],[[21,[-1,-2]]],3,3],[[-1,-2],4,[],[]],[[],[[21,[-1,-2]]],[5,6],7],[[[21,[-1,-2]],[21,[-1,-2]]],8,[6,5],11],[-1,-1,[]],[[[22,[-1,-2]]],[[21,[-1,-2]]],[],[]],[-1,[[21,[-2,-3]]],10,[5,6],[7,11]],[[[21,[-2,-3]],-1],12,[6,5,13],[[14,[-1]],5,6,15],11],[[[21,[-2,-3]],-1],[[12,[[4,[16]]]]],[6,5,13],[[14,[-1]],5,6,15],11],[[[21,[-1,-2]],16],12,[5,6,15],11],[[[21,[-1,-2]],16],[],[5,6,15],[]],[[[21,[-1,-2]],-1],[],[5,6,15],11],[[[21,[-1,-2]],-1],[[4,[16]]],[5,6,15],11],[-1,-2,[],[]],[[[21,[-1,-2]]],[[22,[-1,-2]]],[],[]],[[],[[21,[-1]]],[5,6]],[-1,-2,[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],0,0,[[[23,[-1,-2,-3]]],[[24,[-1,-2,-3]]],[],[],[]],[[[25,[-1,-2]]],[[26,[-1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1,-2,-3]]],[[23,[-1,-2,-3]]],3,3,3],[[[25,[-1,-2]]],[[25,[-1,-2]]],3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],[[23,[-1,-2,-3]]],[5,6],[],7],[[],[[25,[-1,-2]]],[3,27],15],[[[23,[-1,-2]],[23,[-1,-2]]],8,[5,6],[9,15]],[[[25,[-1,-2]],[25,[-1,-2]]],8,[5,6],[9,15]],[-1,-1,[]],[[[24,[-1,-2,-3]]],[[23,[-1,-2,-3]]],[],[],[]],[-1,-1,[]],[[[26,[-1,-2]]],[[25,[-1,-2]]],[3,27],15],[-1,[[23,[-2,-3,-4]]],10,[5,6],[],[11,7]],[-1,[[25,[-2,-3]]],10,[3,27],15],[[[23,[-2,-3,-4]],-1],12,[6,5,13],[[14,[-1]],5,6],15,11],[[[25,[-2,-3]],-1],12,[27,13],[[14,[-1]],3,27],15],[[[23,[-2,-3,-4]],-1],[[12,[4]]],[6,5,13],[[14,[-1]],5,6,15],15,11],[[[23,[-2,-3,-4]],-1],[],[5,6,13],[5,6,[14,[-1]]],15,11],[[[25,[-2,-3]],-1],[],[27,13],[3,27,[14,[-1]]],15],[[[23,[-1,-2,-3]],-1,-2],[],[5,6],15,11],[[[25,[-1,-2]],-1,-2],[],[3,27],15],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1,-2,-3]]],[[24,[-1,-2,-3]]],[],[],[]],[[[25,[-1,-2]]],[[26,[-1,-2]]],[],[]],[[[23,[-1,-2,-3]]],[[17,[[4,[-1,-2]]]]],[],[],[]],[[[25,[-1,-2]]],[[17,[[4,[-1,-2]]]]],[],[]],[[[23,[-1,-2]]],8,[5,6],[]],[[[25,[-1,-2]]],8,[3,27],15],[[[23,[-1,-2]]],16,[5,6],[]],[[[25,[-1,-2]]],16,[3,27],15],[[[23,[-2,-3,-4]],-1,-5],[[12,[-6]]],[6,5,13],[[14,[-1]],5,6],15,11,18,[]],[[[25,[-2,-3]],-1,-4],[[12,[-5]]],[27,13],[[14,[-1]],3,27],15,18,[]],[[],[[23,[-1,-2]]],[5,6],[]],[[],[[25,[-1,-2]]],[3,27],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],0,0,0,0,0,[[[28,[-1,-2]]],[[24,[-1,-2]]],[],[]],[[[29,[-1]]],[[17,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[28,[-1,-2]]],[[28,[-1,-2]]],3,3],[[[29,[-1]]],[[29,[-1]]],3],[[[30,[-1]]],[[30,[-1]]],[31,3]],[[[32,[-1,-2]]],[[32,[-1,-2]]],3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],[[28,[-1,-2]]],[],[]],[[],[[29,[-1]]],[]],[[],[[30,[-1]]],31],[[],[[32,[-1,-2]]],[3,27],15],[[[30,[-1]]],4,31],[[[28,[-1,-2]],[28,[-1,-2]]],8,[5,6],9],[[[29,[-1]],[29,[-1]]],8,9],[[[30,[-1]],[30,[-1]]],8,[31,9]],[[[32,[-1,-2]],[32,[-1,-2]]],8,9,9],[[[28,[-1,-2]],33],34,35,35],[[[29,[-1]],33],34,35],[[[36,[-1]],33],34,35],[[[32,[-1,-2]],33],34,35,35],[-1,-1,[]],[-1,-1,[]],[[[17,[-1]]],[[29,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[26,[-1,-2]]],[[32,[-1,-2]]],[3,27],15],[-1,[[32,[-2,-3]]],10,[3,27],15],[[[28,[-2,-3]],-1],12,[6,5,13],[[14,[-1]],5,6],15],[[[29,[-1]],16],12,15],[[[30,[-1]],16],[[12,[-1]]],31],[[[32,[-2,-3]],-1],12,[27,13],[[14,[-1]],3,27],15],[[[28,[-2,-3]],-1],[[12,[-3]]],[6,5,13],[[14,[-1]],5,6],31],[[[28,[-1,-2]],-1,-2],-2,[5,6],31],[[[28,[-1,-2]],-1,-3],-2,[5,6],31,18],[[[28,[-1,-2]],-1,-3],-2,[5,6],31,18],[[[30,[-1]],16],-1,31],[[[32,[-2,-3]],-1],[],[27,13],[3,27,[14,[-1]]],15],[[[28,[-1,-2]],-1,-2],[],[5,6],15],[[[32,[-1,-2]],-1,-2],[],[3,27],15],[[[28,[-1,-2]],-1,-3],[],[5,6],15,18],[[[28,[-1,-2]],-1,-3],[],[5,6],15,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[29,[-1]]],[[36,[-1]]],15],[-1,-2,[],[]],[[[28,[-1,-2]]],[[17,[[4,[-1,-2]]]]],[],[]],[[[32,[-1,-2]]],[[17,[[4,[-1,-2]]]]],[],[]],[[[29,[-1]]],[[17,[-1]]],[]],[[[28,[-1,-2]]],8,[],[]],[[[29,[-1]]],8,[]],[[[30,[-1]]],8,31],[[[32,[-1,-2]]],8,[],[]],[[[29,[-1]]],[[36,[-1]]],15],[[[28,[-1,-2]]],[[17,[-1]]],3,[]],[[[28,[-1,-2]]],16,[],[]],[[[29,[-1]]],16,[]],[[[32,[-1,-2]]],16,[],[]],[[[28,[-2,-3]],-1,-4],[[12,[-5]]],[6,5,13],[[14,[-1]],5,6],15,18,[]],[[[32,[-2,-3]],-1,-4],[[12,[-5]]],[27,13],[[14,[-1]],3,27],15,18,[]],[[],[[28,[-1,-2]]],[],[]],[[],[[29,[-1]]],15],[[],[[30,[-1]]],31],[[],[[32,[-1,-2]]],[3,27],15],[[[36,[-1]]],12,15],[[[29,[-1]],-1],4,15],[[[30,[-1]],-1],16,31],[[[29,[-1]],-1],[],15],[[[29,[-1]],-1],16,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],0,0,[[[37,[-1]]],[[17,[-1]]],[]],[[[37,[-1]]],[[19,[16,16]]],15],[[[37,[-1]],-2],[[19,[16,16]]],15,38],[[[37,[-1]],-2,-3],[[19,[16,16]]],15,27,38],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1]]],[[37,[-1]]],3],[[-1,-2],4,[],[]],[[],[[37,[-1]]],[]],[[[37,[-1]],[37,[-1]]],8,[15,9]],[[[37,[-1]]],12,15],[-1,-1,[]],[[[17,[-1]]],[[37,[-1]]],[]],[-1,-1,[]],[-1,[[37,[-2]]],10,[]],[[[37,[-1]],16],12,15],[[[37,[-1]],16],[[12,[-1]]],31],[[[37,[-1]],16],[],15],[[[37,[-1]],16],[],15],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1]]],[[39,[-1]]],15],[-1,-2,[],[]],[[[37,[-1]]],[[17,[-1]]],15],[[[37,[-1]]],8,[]],[[[37,[-1]]],[[39,[-1]]],15],[[[37,[-1]]],12,15],[[[37,[-1]]],16,[]],[[],[[37,[-1]]],[]],[[[39,[-1]]],12,15],[[[37,[-1]],-2],16,15,38],[[[37,[-1]],-1],4,[]],[[[37,[-1]],-1],[],15],[-1,-2,[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]]],"c":[],"p":[[3,"FrozenIndexMap",10],[3,"IndexMap",264],[8,"Clone",265],[15,"tuple"],[8,"Eq",266],[8,"Hash",267],[8,"Default",268],[15,"bool"],[8,"PartialEq",266],[8,"IntoIterator",269],[8,"BuildHasher",267],[4,"Option",270],[8,"Sized",271],[8,"Borrow",272],[8,"StableDeref",273],[15,"usize"],[3,"Vec",274],[8,"FnOnce",275],[4,"Result",276],[3,"TypeId",277],[3,"FrozenIndexSet",36],[3,"IndexSet",278],[3,"FrozenMap",60],[3,"HashMap",279],[3,"FrozenBTreeMap",60],[3,"BTreeMap",280],[8,"Ord",266],[3,"FrozenMap",111],[3,"FrozenVec",111],[3,"LockFreeFrozenVec",111],[8,"Copy",271],[3,"FrozenBTreeMap",111],[3,"Formatter",281],[6,"Result",281],[8,"Debug",281],[3,"Iter",111],[3,"FrozenVec",220],[8,"FnMut",275],[3,"Iter",220]]},\
"equivalent":{"doc":"<code>Equivalent</code> and <code>Comparable</code> are traits for key comparison in …","t":"IIKK","n":["Comparable","Equivalent","compare","equivalent"],"q":[[0,"equivalent"],[4,"core::cmp"]],"d":["Key ordering trait.","Key equivalence trait.","Compare self to <code>key</code> and return their ordering.","Compare self to <code>key</code> and return <code>true</code> if they are equal."],"i":[0,0,3,4],"f":[0,0,[[-1,-2],1,[],[]],[[-1,-2],2,[],[]]],"c":[],"p":[[4,"Ordering",4],[15,"bool"],[8,"Comparable",0],[8,"Equivalent",0]]},\
"errno":{"doc":"Cross-platform interface to the <code>errno</code> variable.","t":"DLLLLLLLLFLLLLLLFLLLLL","n":["Errno","borrow","borrow_mut","clone","clone_into","cmp","description","eq","equivalent","errno","fmt","fmt","from","hash","into","partial_cmp","set_errno","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"errno"],[22,"core::cmp"],[23,"core::fmt"],[24,"core::fmt"],[25,"core::option"],[26,"alloc::string"],[27,"core::result"],[28,"core::any"]],"d":["Wraps a platform-specific error code.","","","","","","","","","Returns the platform-specific value of <code>errno</code>.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Sets the platform-specific value of <code>errno</code>.","","","","",""],"i":[0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],3],[1,4],[[1,1],5],[[-1,-2],5,[],[]],[[],1],[[1,6],7],[[1,6],7],[-1,-1,[]],[[1,-1],2,8],[-1,-2,[],[]],[[1,1],[[9,[3]]]],[1,2],[-1,-2,[],[]],[-1,10,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]]],"c":[],"p":[[3,"Errno",0],[15,"tuple"],[4,"Ordering",22],[15,"str"],[15,"bool"],[3,"Formatter",23],[6,"Result",23],[8,"Hasher",24],[4,"Option",25],[3,"String",26],[4,"Result",27],[3,"TypeId",28]]},\
"fastrand":{"doc":"A simple and fast random number generator.","t":"DFLFLFLLLFLFLFLLLLFLLLFLFLLLLLFLFLFLFLFLFLLFLFLLFLFLLLLLFLFLFLFLFLFLFLL","n":["Rng","alphabetic","alphabetic","alphanumeric","alphanumeric","bool","bool","borrow","borrow_mut","char","char","choice","choice","choose_multiple","choose_multiple","clone","clone_into","default","digit","digit","eq","equivalent","f32","f32","f64","f64","fill","fmt","fork","from","get_seed","get_seed","i128","i128","i16","i16","i32","i32","i64","i64","i8","i8","into","isize","isize","lowercase","lowercase","new","seed","seed","shuffle","shuffle","to_owned","try_from","try_into","type_id","u128","u128","u16","u16","u32","u32","u64","u64","u8","u8","uppercase","uppercase","usize","usize","with_seed"],"q":[[0,"fastrand"],[71,"core::ops::range"],[72,"core::option"],[73,"core::iter::traits::collect"],[74,"alloc::vec"],[75,"core::iter::traits::iterator"],[76,"core::fmt"],[77,"core::fmt"],[78,"core::any"]],"d":["A random number generator.","Generates a random <code>char</code> in ranges a-z and A-Z.","Generates a random <code>char</code> in ranges a-z and A-Z.","Generates a random <code>char</code> in ranges a-z, A-Z and 0-9.","Generates a random <code>char</code> in ranges a-z, A-Z and 0-9.","Generates a random <code>bool</code>.","Generates a random <code>bool</code>.","","","Generates a random <code>char</code> in the given range.","Generates a random <code>char</code> in the given range.","Choose an item from an iterator at random.","Choose an item from an iterator at random.","Collects <code>amount</code> values at random from the iterator into a …","Collects <code>amount</code> values at random from the iterator into a …","Clones the generator by creating a new generator with the …","","Initialize the <code>Rng</code> from the system’s random number …","Generates a random digit in the given <code>base</code>.","Generates a random digit in the given <code>base</code>.","","","Generates a random <code>f32</code> in range <code>0..1</code>.","Generates a random <code>f32</code> in range <code>0..1</code>.","Generates a random <code>f64</code> in range <code>0..1</code>.","Generates a random <code>f64</code> in range <code>0..1</code>.","Fill a byte slice with random data.","","Clones the generator by deterministically deriving a new …","Returns the argument unchanged.","Gives back <strong>current</strong> seed that is being held by the …","Gives back <strong>current</strong> seed that is being held by this …","Generates a random <code>i128</code> in the given range.","Generates a random <code>i128</code> in the given range.","Generates a random <code>i16</code> in the given range.","Generates a random <code>i16</code> in the given range.","Generates a random <code>i32</code> in the given range.","Generates a random <code>i32</code> in the given range.","Generates a random <code>i64</code> in the given range.","Generates a random <code>i64</code> in the given range.","Generates a random <code>i8</code> in the given range.","Generates a random <code>i8</code> in the given range.","Calls <code>U::from(self)</code>.","Generates a random <code>isize</code> in the given range.","Generates a random <code>isize</code> in the given range.","Generates a random <code>char</code> in range a-z.","Generates a random <code>char</code> in range a-z.","Creates a new random number generator.","Initializes the thread-local generator with the given seed.","Initializes this generator with the given seed.","Shuffles a slice randomly.","Shuffles a slice randomly.","","","","","Generates a random <code>u128</code> in the given range.","Generates a random <code>u128</code> in the given range.","Generates a random <code>u16</code> in the given range.","Generates a random <code>u16</code> in the given range.","Generates a random <code>u32</code> in the given range.","Generates a random <code>u32</code> in the given range.","Generates a random <code>u64</code> in the given range.","Generates a random <code>u64</code> in the given range.","Generates a random <code>u8</code> in the given range.","Generates a random <code>u8</code> in the given range.","Generates a random <code>char</code> in range A-Z.","Generates a random <code>char</code> in range A-Z.","Generates a random <code>usize</code> in the given range.","Generates a random <code>usize</code> in the given range.","Creates a new random number generator with the initial …"],"i":[0,0,2,0,2,0,2,2,2,0,2,0,2,0,2,2,2,2,0,2,2,2,0,2,0,2,2,2,2,2,0,2,0,2,0,2,0,2,0,2,0,2,2,0,2,0,2,2,0,2,0,2,2,2,2,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,2],"f":[0,[[],1],[2,1],[[],1],[2,1],[[],3],[2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,1,[[4,[1]]]],[[2,-1],1,[[4,[1]]]],[-1,5,6],[[2,-1],5,6],[[-1,7],8,9],[[2,-1,7],8,9],[2,2],[[-1,-2],10,[],[]],[[],2],[11,1],[[2,11],1],[[2,2],3],[[-1,-2],3,[],[]],[[],12],[2,12],[[],13],[2,13],[[2,[15,[14]]],10],[[2,16],17],[2,2],[-1,-1,[]],[[],18],[2,18],[-1,19,[[4,[19]]]],[[2,-1],19,[[4,[19]]]],[-1,20,[[4,[20]]]],[[2,-1],20,[[4,[20]]]],[-1,21,[[4,[21]]]],[[2,-1],21,[[4,[21]]]],[-1,22,[[4,[22]]]],[[2,-1],22,[[4,[22]]]],[-1,23,[[4,[23]]]],[[2,-1],23,[[4,[23]]]],[-1,-2,[],[]],[-1,24,[[4,[24]]]],[[2,-1],24,[[4,[24]]]],[[],1],[2,1],[[],2],[18,10],[[2,18],10],[[[15,[-1]]],10,[]],[[2,[15,[-1]]],10,[]],[-1,-2,[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,26,[]],[-1,27,[[4,[27]]]],[[2,-1],27,[[4,[27]]]],[-1,28,[[4,[28]]]],[[2,-1],28,[[4,[28]]]],[-1,11,[[4,[11]]]],[[2,-1],11,[[4,[11]]]],[-1,18,[[4,[18]]]],[[2,-1],18,[[4,[18]]]],[-1,14,[[4,[14]]]],[[2,-1],14,[[4,[14]]]],[[],1],[2,1],[-1,7,[[4,[7]]]],[[2,-1],7,[[4,[7]]]],[18,2]],"c":[],"p":[[15,"char"],[3,"Rng",0],[15,"bool"],[8,"RangeBounds",71],[4,"Option",72],[8,"IntoIterator",73],[15,"usize"],[3,"Vec",74],[8,"Iterator",75],[15,"tuple"],[15,"u32"],[15,"f32"],[15,"f64"],[15,"u8"],[15,"slice"],[3,"Formatter",76],[6,"Result",76],[15,"u64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[4,"Result",77],[3,"TypeId",78],[15,"u128"],[15,"u16"]]},\
"fxhash":{"doc":"Fx Hash","t":"GGGDDDLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["FxBuildHasher","FxHashMap","FxHashSet","FxHasher","FxHasher32","FxHasher64","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","finish","finish","finish","fmt","fmt","fmt","from","from","from","hash","hash32","hash64","into","into","into","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write","write_u16","write_u16","write_u16","write_u32","write_u32","write_u32","write_u64","write_u64","write_u64","write_u8","write_u8","write_u8","write_usize","write_usize","write_usize"],"q":[[0,"fxhash"],[66,"core::fmt"],[67,"core::fmt"],[68,"core::marker"],[69,"core::result"],[70,"core::any"]],"d":["A builder for default Fx hashers.","A <code>HashMap</code> using a default Fx hasher.","A <code>HashSet</code> using a default Fx hasher.","This hashing algorithm was extracted from the Rustc …","This hashing algorithm was extracted from the Rustc …","This hashing algorithm was extracted from the Rustc …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","A convenience function for when you need a quick usize …","A convenience function for when you need a quick 32-bit …","A convenience function for when you need a quick 64-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],1],[[],2],[[],3],[1,5],[2,5],[3,5],[[1,6],7],[[2,6],7],[[3,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,8,[9,10]],[-1,11,[9,10]],[-1,5,[9,10]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[1,[15,[14]]],4],[[2,[15,[14]]],4],[[3,[15,[14]]],4],[[1,16],4],[[2,16],4],[[3,16],4],[[1,11],4],[[2,11],4],[[3,11],4],[[1,5],4],[[2,5],4],[[3,5],4],[[1,14],4],[[2,14],4],[[3,14],4],[[1,8],4],[[2,8],4],[[3,8],4]],"c":[],"p":[[3,"FxHasher",0],[3,"FxHasher64",0],[3,"FxHasher32",0],[15,"tuple"],[15,"u64"],[3,"Formatter",66],[6,"Result",66],[15,"usize"],[8,"Hash",67],[8,"Sized",68],[15,"u32"],[4,"Result",69],[3,"TypeId",70],[15,"u8"],[15,"slice"],[15,"u16"]]},\
"glam":{"doc":"glam","t":"ECCCNNNNNNALLLLLLLAALLLAALALLLLAADDDDDSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMSSSSDDSSSSSSSSSSSSSSSSSSSDDDDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDDDDDSSSSSSSSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSDDDDDDDDDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSDDDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSDDDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQIQQIQQIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKLLKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKLLLLKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKSSSSSSSSSSSSDDDSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSSSSSSSSSDDDSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["EulerRot","Vec2Swizzles","Vec3Swizzles","Vec4Swizzles","XYZ","XZY","YXZ","YZX","ZXY","ZYX","bool","borrow","borrow_mut","clone","clone_into","default","eq","equivalent","f32","f64","fmt","from","hash","i32","i64","into","swizzles","to_owned","try_from","try_into","type_id","u32","u64","BVec2","BVec3","BVec3A","BVec4","BVec4A","FALSE","FALSE","FALSE","FALSE","FALSE","TRUE","TRUE","TRUE","TRUE","TRUE","all","all","all","all","all","any","any","any","any","any","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitmask","bitmask","bitmask","bitmask","bitmask","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","new","new","new","new","new","not","not","not","not","not","set","set","set","set","set","splat","splat","splat","splat","splat","test","test","test","test","test","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","w","x","x","x","y","y","y","z","z","AXES","AXES","AXES","AXES","Affine2","Affine3A","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","INFINITY","INFINITY","INFINITY","INFINITY","MAX","MAX","MAX","MAX","MIN","MIN","MIN","MIN","Mat2","Mat3","Mat3A","Mat4","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NEG_INFINITY","NEG_INFINITY","NEG_INFINITY","NEG_INFINITY","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","NEG_Z","ONE","ONE","ONE","ONE","Quat","Vec2","Vec3","Vec3A","Vec4","W","X","X","X","X","Y","Y","Y","Y","Z","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","abs","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat3","add_mat3","add_mat4","angle_between","angle_between","angle_between","angle_between","any_orthogonal_vector","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_pair","any_orthonormal_vector","any_orthonormal_vector","as_dmat2","as_dmat3","as_dmat3","as_dmat4","as_dvec2","as_dvec3","as_dvec3","as_dvec4","as_f64","as_i64vec2","as_i64vec3","as_i64vec3","as_i64vec4","as_ivec2","as_ivec3","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_u64vec2","as_u64vec3","as_u64vec3","as_u64vec4","as_uvec2","as_uvec3","as_uvec3","as_uvec4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","ceil","ceil","clamp","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cmpne","col","col","col","col","col_mut","col_mut","col_mut","col_mut","conjugate","copysign","copysign","copysign","copysign","cross","cross","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","determinant","determinant","determinant","determinant","distance","distance","distance","distance","distance_squared","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","dot","dot","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp","extend","extend","extend","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle_translation","from_array","from_array","from_array","from_array","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat3a","from_mat3a","from_mat3a","from_mat3a","from_mat4","from_mat4","from_mat4","from_mat4","from_quat","from_quat","from_quat","from_quat","from_rotation_arc","from_rotation_arc_2d","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_slice","from_slice","from_slice","from_slice","from_slice","from_translation","from_translation","from_translation","from_translation","from_translation","from_vec4","from_xyzw","index","index","index","index","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","length","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","lerp","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_to_lh","look_to_lh","look_to_rh","look_to_rh","mat2","mat3","mat3a","mat4","matrix2","matrix3","max","max","max","max","max_element","max_element","max_element","max_element","min","min","min","min","min_element","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat3","mul_mat3","mul_mat4","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec3","mul_vec3","mul_vec3","mul_vec3a","mul_vec3a","mul_vec3a","mul_vec4","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","normalize","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","orthographic_lh","orthographic_rh","orthographic_rh_gl","perp","perp_dot","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_lh","perspective_rh","perspective_rh_gl","powf","powf","powf","powf","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","quat","recip","recip","recip","recip","reject_from","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rotate","round","round","round","round","row","row","row","row","select","select","select","select","signum","signum","signum","signum","slerp","splat","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat3","sub_mat3","sub_mat4","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_array","to_array","to_axis_angle","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_angle_translation","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point2","transform_point3","transform_point3","transform_point3a","transform_point3a","transform_vector2","transform_vector2","transform_vector2","transform_vector3","transform_vector3","transform_vector3a","transform_vector3a","translation","translation","transpose","transpose","transpose","transpose","trunc","trunc","trunc","trunc","truncate","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","try_normalize","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec2","vec3","vec3a","vec4","w_axis","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x_axis","x_axis","x_axis","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxy","xxxz","xxxz","xxxz","xxy","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyy","xxyz","xxyz","xxyz","xxz","xxz","xxz","xxzw","xxzx","xxzx","xxzx","xxzy","xxzy","xxzy","xxzz","xxzz","xxzz","xy","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxy","xyxz","xyxz","xyxz","xyy","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyy","xyyz","xyyz","xyyz","xyz","xyz","xyz","xyz","xyzw","xyzx","xyzx","xyzx","xyzy","xyzy","xyzy","xyzz","xyzz","xyzz","xz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzx","xzxw","xzxx","xzxx","xzxx","xzxy","xzxy","xzxy","xzxz","xzxz","xzxz","xzy","xzy","xzy","xzyw","xzyx","xzyx","xzyx","xzyy","xzyy","xzyy","xzyz","xzyz","xzyz","xzz","xzz","xzz","xzzw","xzzx","xzzx","xzzx","xzzy","xzzy","xzzy","xzzz","xzzz","xzzz","y","y","y_axis","y_axis","y_axis","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxy","yxxz","yxxz","yxxz","yxy","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyy","yxyz","yxyz","yxyz","yxz","yxz","yxz","yxzw","yxzx","yxzx","yxzx","yxzy","yxzy","yxzy","yxzz","yxzz","yxzz","yy","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxy","yyxz","yyxz","yyxz","yyy","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyy","yyyz","yyyz","yyyz","yyz","yyz","yyz","yyzw","yyzx","yyzx","yyzx","yyzy","yyzy","yyzy","yyzz","yyzz","yyzz","yz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzx","yzxw","yzxx","yzxx","yzxx","yzxy","yzxy","yzxy","yzxz","yzxz","yzxz","yzy","yzy","yzy","yzyw","yzyx","yzyx","yzyx","yzyy","yzyy","yzyy","yzyz","yzyz","yzyz","yzz","yzz","yzz","yzzw","yzzx","yzzx","yzzx","yzzy","yzzy","yzzy","yzzz","yzzz","yzzz","z","z_axis","z_axis","z_axis","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxx","zxxw","zxxx","zxxx","zxxx","zxxy","zxxy","zxxy","zxxz","zxxz","zxxz","zxy","zxy","zxy","zxyw","zxyx","zxyx","zxyx","zxyy","zxyy","zxyy","zxyz","zxyz","zxyz","zxz","zxz","zxz","zxzw","zxzx","zxzx","zxzx","zxzy","zxzy","zxzy","zxzz","zxzz","zxzz","zy","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyx","zyxw","zyxx","zyxx","zyxx","zyxy","zyxy","zyxy","zyxz","zyxz","zyxz","zyy","zyy","zyy","zyyw","zyyx","zyyx","zyyx","zyyy","zyyy","zyyy","zyyz","zyyz","zyyz","zyz","zyz","zyz","zyzw","zyzx","zyzx","zyzx","zyzy","zyzy","zyzy","zyzz","zyzz","zyzz","zz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzx","zzxw","zzxx","zzxx","zzxx","zzxy","zzxy","zzxy","zzxz","zzxz","zzxz","zzy","zzy","zzy","zzyw","zzyx","zzyx","zzyx","zzyy","zzyy","zzyy","zzyz","zzyz","zzyz","zzz","zzz","zzz","zzzw","zzzx","zzzx","zzzx","zzzy","zzzy","zzzy","zzzz","zzzz","zzzz","AXES","AXES","AXES","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","INFINITY","INFINITY","INFINITY","MAX","MAX","MAX","MIN","MIN","MIN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NEG_INFINITY","NEG_INFINITY","NEG_INFINITY","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","ONE","ONE","ONE","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat3","add_mat4","angle_between","angle_between","angle_between","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_vector","as_f32","as_i64vec2","as_i64vec3","as_i64vec4","as_ivec2","as_ivec3","as_ivec4","as_mat2","as_mat3","as_mat4","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_u64vec2","as_u64vec3","as_u64vec4","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","ceil","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","col","col","col","col_mut","col_mut","col_mut","conjugate","copysign","copysign","copysign","cross","default","default","default","default","default","default","default","default","default","deref","deref","deref_mut","deref_mut","determinant","determinant","determinant","distance","distance","distance","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","dmat2","dmat3","dmat4","dot","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","dquat","dvec2","dvec3","dvec4","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","extend","extend","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_angle","from_angle","from_angle","from_angle","from_angle_translation","from_array","from_array","from_array","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat4","from_mat4","from_mat4","from_quat","from_quat","from_quat","from_rotation_arc","from_rotation_arc_2d","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_slice","from_slice","from_slice","from_slice","from_translation","from_translation","from_translation","from_translation","from_vec4","from_xyzw","index","index","index","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_normalized","is_normalized","is_normalized","is_normalized","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_to_lh","look_to_lh","look_to_rh","look_to_rh","matrix2","matrix3","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat3","mul_mat4","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec3","mul_vec3","mul_vec4","neg","neg","neg","neg","neg","neg","neg","new","new","new","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","orthographic_lh","orthographic_rh","orthographic_rh_gl","perp","perp_dot","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_lh","perspective_rh","perspective_rh_gl","powf","powf","powf","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","recip","recip","recip","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rotate","round","round","round","row","row","row","select","select","select","signum","signum","signum","slerp","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat3","sub_mat4","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_array","to_axis_angle","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_angle_translation","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point3","transform_point3","transform_vector2","transform_vector2","transform_vector3","transform_vector3","translation","translation","transpose","transpose","transpose","trunc","trunc","trunc","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","w","w","w_axis","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","x","x_axis","x_axis","x_axis","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","y","y_axis","y_axis","y_axis","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","z","z_axis","z_axis","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","IVec2","IVec3","IVec4","MAX","MAX","MAX","MIN","MIN","MIN","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","ONE","ONE","ONE","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","abs","abs","abs","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_i64vec2","as_i64vec3","as_i64vec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_u64vec2","as_u64vec3","as_u64vec4","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","into","into","into","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","ivec2","ivec3","ivec4","length_squared","length_squared","length_squared","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new","new","not","not","not","perp","perp_dot","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rotate","saturating_add","saturating_add","saturating_add","saturating_div","saturating_div","saturating_div","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","select","select","select","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","signum","signum","signum","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","w","wrapping_add","wrapping_add","wrapping_add","wrapping_div","wrapping_div","wrapping_div","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_sub","wrapping_sub","wrapping_sub","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","I64Vec2","I64Vec3","I64Vec4","MAX","MAX","MAX","MIN","MIN","MIN","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","ONE","ONE","ONE","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","abs","abs","abs","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_ivec2","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_u64vec2","as_u64vec3","as_u64vec4","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","i64vec2","i64vec3","i64vec4","index","index","index","index_mut","index_mut","index_mut","into","into","into","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","length_squared","length_squared","length_squared","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new","new","not","not","not","perp","perp_dot","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rotate","saturating_add","saturating_add","saturating_add","saturating_div","saturating_div","saturating_div","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","select","select","select","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","signum","signum","signum","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","w","wrapping_add","wrapping_add","wrapping_add","wrapping_div","wrapping_div","wrapping_div","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_sub","wrapping_sub","wrapping_sub","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3Swizzles","Vec4","Vec4","Vec4Swizzles","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyz","xyzw","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","MAX","MAX","MAX","MIN","MIN","MIN","ONE","ONE","ONE","UVec2","UVec3","UVec4","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_i64vec2","as_i64vec3","as_i64vec4","as_ivec2","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_u64vec2","as_u64vec3","as_u64vec4","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","into","into","into","length_squared","length_squared","length_squared","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","new","new","new","not","not","not","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","saturating_add","saturating_add","saturating_add","saturating_div","saturating_div","saturating_div","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","select","select","select","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uvec2","uvec3","uvec4","w","wrapping_add","wrapping_add","wrapping_add","wrapping_div","wrapping_div","wrapping_div","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_sub","wrapping_sub","wrapping_sub","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","MAX","MAX","MAX","MIN","MIN","MIN","ONE","ONE","ONE","U64Vec2","U64Vec3","U64Vec4","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_i64vec2","as_i64vec3","as_i64vec4","as_ivec2","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","into","into","into","length_squared","length_squared","length_squared","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","new","new","new","not","not","not","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","saturating_add","saturating_add","saturating_add","saturating_div","saturating_div","saturating_div","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","select","select","select","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u64vec2","u64vec3","u64vec4","w","wrapping_add","wrapping_add","wrapping_add","wrapping_div","wrapping_div","wrapping_div","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_sub","wrapping_sub","wrapping_sub","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz"],"q":[[0,"glam"],[33,"glam::bool"],[212,"glam::f32"],[1859,"glam::f64"],[3169,"glam::i32"],[4069,"glam::i64"],[4966,"glam::swizzles"],[5459,"glam::u32"],[6323,"glam::u64"],[7184,"core::fmt"],[7185,"core::fmt"],[7186,"core::result"],[7187,"core::any"],[7188,"alloc::string"],[7189,"core::core_arch::x86"],[7190,"core::iter::traits::iterator"],[7191,"core::option"]],"d":["Rotation Helper  Euler rotation sequences.","","","","Intrinsic three-axis rotation XYZ","Intrinsic three-axis rotation XZY","Intrinsic three-axis rotation YXZ","Intrinsic three-axis rotation YZX","Intrinsic three-axis rotation ZXY","Intrinsic three-axis rotation ZYX","<code>bool</code> vector mask types. ","","","","","Default <code>YXZ</code> as yaw (y-axis), pitch (x-axis), roll (z-axis).","","","<code>f32</code> vector, quaternion and matrix types. ","<code>f64</code> vector, quaternion and matrix types. ","","Returns the argument unchanged.","","<code>i32</code> vector types. ","<code>i64</code> vector types. ","Calls <code>U::from(self)</code>.","Traits adding swizzle methods to all vector types. ","","","","","<code>u32</code> vector types. ","<code>u64</code> vector types. ","A 2-dimensional <code>bool</code> vector mask.","A 3-dimensional <code>bool</code> vector mask.","A 3-dimensional SIMD vector mask.","A 4-dimensional <code>bool</code> vector mask.","A 4-dimensional SIMD vector mask.","All false.","All false.","All false.","All false.","All false.","All true.","All true.","All true.","All true.","All true.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","","","","","","","","","","","Returns a bitmask with the lowest 2 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","","","","","","Sets the element at <code>index</code>.","Sets the element at <code>index</code>.","Sets the element at <code>index</code>.","Sets the element at <code>index</code>.","Sets the element at <code>index</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Tests the value at <code>index</code>.","Tests the value at <code>index</code>.","Tests the value at <code>index</code>.","Tests the value at <code>index</code>.","Tests the value at <code>index</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The unit axes.","The unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","The identity transform.","The identity transform.","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","All <code>f32::INFINITY</code>.","All <code>f32::INFINITY</code>.","All <code>f32::INFINITY</code>.","All <code>f32::INFINITY</code>.","All <code>f32::MAX</code>.","All <code>f32::MAX</code>.","All <code>f32::MAX</code>.","All <code>f32::MAX</code>.","All <code>f32::MIN</code>.","All <code>f32::MIN</code>.","All <code>f32::MIN</code>.","All <code>f32::MIN</code>.","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","All NAN:s.","All NAN:s.","All NAN:s.","All <code>f32::NAN</code>.","All <code>f32::NAN</code>.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All <code>f32::NAN</code>.","All <code>f32::NAN</code>.","All <code>f32::NEG_INFINITY</code>.","All <code>f32::NEG_INFINITY</code>.","All <code>f32::NEG_INFINITY</code>.","All <code>f32::NEG_INFINITY</code>.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","A unit vector pointing along the negative W axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Z axis.","A unit vector pointing along the negative Z axis.","A unit vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","All ones.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","The degenerate zero transform.","The degenerate zero transform.","A 3x3 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","","","","","","Adds two quaternions.","","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Returns the angle (in radians) between <code>self</code> and <code>rhs</code> in the …","Returns the angle (in radians) between two vectors.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between two vectors.","Returns some vector that is orthogonal to the given one.","Returns some vector that is orthogonal to the given one.","Given a unit vector return two other vectors that together …","Given a unit vector return two other vectors that together …","Returns any unit vector that is orthogonal to the given …","Returns any unit vector that is orthogonal to the given …","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Creates a <code>Vec3A</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code> …","","","","","","Returns the argument unchanged.","","","","","","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 2D rotation …","Creates a new vector from an array.","Creates a new vector from an array.","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 4x4 matrix from four column vectors.","Creates an affine transform from a <code>[f32; 6]</code> array stored …","Creates an affine transform from a <code>[f32; 12]</code> array stored …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 2x2 matrix from a <code>[f32; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f32; 16]</code> array stored in …","Creates an affine transform from a <code>[[f32; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f32; 3]; 4]</code> 3D array …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 2x2 matrix from a <code>[[f32; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f32; 4]; 4]</code> 4D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3D rotation matrix from the given euler rotation …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>Mat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>Mat3A</code> must be an affine transform,","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 SIMD aligned rotation …","The given <code>Mat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians around …","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a rotation quaternion from a slice.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 4x4 matrix from four column vectors.","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies a quaternion and a 3D vector, returning the …","","Multiplies two quaternions. If they each represent a …","Multiplies a quaternion by a scalar value.","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","","","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies a 3x3 matrix by a scalar.","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Transforms a 2D vector.","Transforms a 3D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a <code>Vec3A</code>.","Transforms a <code>Vec3A</code>.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with […","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","","","","","","","","","","","","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Transforms the given 3D vector as a point, applying …","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","","","","","","","","","","","","","","","","","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Performs a spherical linear interpolation between <code>self</code> and …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis (normalized) and angle (in …","Creates a <code>[f32; 6]</code> array storing data in column major …","Creates a <code>[f32; 12]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 4]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 16]</code> array storing data in column major …","Creates a <code>[[f32; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 4]; 4]</code> 4D array storing data in column …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","","","Extracts <code>scale</code>, <code>angle</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","","","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given <code>Vec3A</code>, applying shear, scale, …","Transforms the given <code>Vec3A</code> as 3D point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","Transforms the given <code>Vec3A</code>, applying shear, scale and …","Transforms the give <code>Vec3A</code> as 3D vector.","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns a vector containing the integer part each element …","Returns a vector containing the integer part each element …","Returns a vector containing the integer part each element …","Returns a vector containing the integer part each element …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …eturns the vector part of the quaternionhe unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","The identity transform.","The identity transform.","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","All <code>f64::INFINITY</code>.","All <code>f64::INFINITY</code>.","All <code>f64::INFINITY</code>.","All <code>f64::MAX</code>.","All <code>f64::MAX</code>.","All <code>f64::MAX</code>.","All <code>f64::MIN</code>.","All <code>f64::MIN</code>.","All <code>f64::MIN</code>.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All <code>f64::NAN</code>.","All <code>f64::NAN</code>.","All <code>f64::NAN</code>.","All <code>f64::NEG_INFINITY</code>.","All <code>f64::NEG_INFINITY</code>.","All <code>f64::NEG_INFINITY</code>.","All negative ones.","All negative ones.","All negative ones.","A unit vector pointing along the negative W axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Z axis.","A unit vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","The degenerate zero transform.","The degenerate zero transform.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","Adds two quaternions.","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between <code>self</code> and <code>rhs</code> in the …","Returns the angle (in radians) between two vectors.","Returns some vector that is orthogonal to the given one.","Given a unit vector return two other vectors that together …","Returns any unit vector that is orthogonal to the given …","","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 4x4 matrix from four column vectors.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates an affine transform from the given 2D rotation …","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 4x4 matrix from four column vectors.","Creates an affine transform from a <code>[f64; 6]</code> array stored …","Creates an affine transform from a <code>[f64; 12]</code> array stored …","Creates a 2x2 matrix from a <code>[f64; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f64; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f64; 16]</code> array stored in …","Creates an affine transform from a <code>[[f64; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f64; 3]; 4]</code> 3D array …","Creates a 2x2 matrix from a <code>[[f64; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f64; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f64; 4]; 4]</code> 4D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>DMat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>DMat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians around …","Creates a rotation quaternion from a slice.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","Multiplies a quaternion and a 3D vector, returning the …","Multiplies a quaternion by a scalar value.","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Transforms a 2D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with […","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","","","","","","","","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Transforms the given 3D vector as a point, applying …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","","","","","","","","","","","","","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Performs a spherical linear interpolation between <code>self</code> and …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","","","","","","","","","","","","","","","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis (normalized) and angle (in …","Creates a <code>[f64; 6]</code> array storing data in column major …","Creates a <code>[f64; 12]</code> array storing data in column major …","Creates a <code>[f64; 4]</code> array storing data in column major …","Creates a <code>[f64; 9]</code> array storing data in column major …","Creates a <code>[f64; 16]</code> array storing data in column major …","Creates a <code>[[f64; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f64; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f64; 4]; 4]</code> 4D array storing data in column …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","Extracts <code>scale</code>, <code>angle</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns a vector containing the integer part each element …","Returns a vector containing the integer part each element …","Returns a vector containing the integer part each element …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","","","","","","","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …eturns the vector part of the quaternionhe unit axes.","The unit axes.","The unit axes.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","All <code>i32::MAX</code>.","All <code>i32::MAX</code>.","All <code>i32::MAX</code>.","All <code>i32::MIN</code>.","All <code>i32::MIN</code>.","All <code>i32::MIN</code>.","All negative ones.","All negative ones.","All negative ones.","A unit vector pointing along the negative W axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Z axis.","A unit vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","","","","","","","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","","","","","","","","","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","","","","","","","","","","","","","","","","","","","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The unit axes.","The unit axes.","The unit axes.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","All <code>i64::MAX</code>.","All <code>i64::MAX</code>.","All <code>i64::MAX</code>.","All <code>i64::MIN</code>.","All <code>i64::MIN</code>.","All <code>i64::MIN</code>.","All negative ones.","All negative ones.","All negative ones.","A unit vector pointing along the negative W axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Z axis.","A unit vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>i64::clamp</code>.","Component-wise clamping of values, similar to <code>i64::clamp</code>.","Component-wise clamping of values, similar to <code>i64::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","","","","","","","","","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","","","","","","","","","","","","","","","","","","","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …he unit axes.","The unit axes.","The unit axes.","All <code>u32::MAX</code>.","All <code>u32::MAX</code>.","All <code>u32::MAX</code>.","All <code>u32::MIN</code>.","All <code>u32::MIN</code>.","All <code>u32::MIN</code>.","All ones.","All ones.","All ones.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …he unit axes.","The unit axes.","The unit axes.","All <code>u64::MAX</code>.","All <code>u64::MAX</code>.","All <code>u64::MAX</code>.","All <code>u64::MIN</code>.","All <code>u64::MIN</code>.","All <code>u64::MIN</code>.","All ones.","All ones.","All ones.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>u64::clamp</code>.","Component-wise clamping of values, similar to <code>u64::clamp</code>.","Component-wise clamping of values, similar to <code>u64::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …if":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[],1],[[1,1],3],[[-1,-2],3,[],[]],0,0,[[1,4],5],[-1,-1,[]],[[1,-1],2,6],0,0,[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,3],[10,3],[11,3],[12,3],[13,3],[9,3],[10,3],[11,3],[12,3],[13,3],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[9,9],2],[[10,10],2],[[11,11],2],[[12,12],2],[[13,13],2],[9,14],[10,14],[11,14],[12,14],[13,14],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[9,9],2],[[10,10],2],[[11,11],2],[[12,12],2],[[13,13],2],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[9,9],2],[[10,10],2],[[11,11],2],[[12,12],2],[[13,13],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[10,10],[11,11],[12,12],[13,13],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],9],[[],10],[[],11],[[],12],[[],13],[[9,9],3],[[10,10],3],[[11,11],3],[[12,12],3],[[13,13],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[9,4],5],[[9,4],5],[[10,4],5],[[10,4],5],[[11,4],5],[[11,4],5],[[12,4],5],[[12,4],5],[[13,4],5],[[13,4],5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[9,-1],2,6],[[10,-1],2,6],[[11,-1],2,6],[[12,-1],2,6],[[13,-1],2,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,3],9],[[3,3,3],10],[[3,3,3,3],11],[[3,3,3],12],[[3,3,3,3],13],[9,9],[10,10],[11,11],[12,12],[13,13],[[9,15,3],2],[[10,15,3],2],[[11,15,3],2],[[12,15,3],2],[[13,15,3],2],[3,9],[3,10],[3,11],[3,12],[3,13],[[9,15],3],[[10,15],3],[[11,15],3],[[12,15],3],[[13,15],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[17,17],[18,18],[19,19],[20,20],[[21,21,22],3],[[23,23,22],3],[[24,24,22],3],[[17,17,22],3],[[18,18,22],3],[[25,25,22],3],[[26,26,22],3],[[27,27,22],3],[[28,28,22],3],[[19,19,22],3],[[20,20,22],3],[[24,24]],[[17,22],17],[[17,17],17],[[18,22],18],[[18,18],18],[[25,25]],[[26,26]],[[27,27]],[[28,28],28],[[19,19],19],[[19,22],19],[[20,20],20],[[20,22],20],[[24,24],2],[[17,17],2],[[17,22],2],[[18,18],2],[[18,22],2],[[25,25],2],[[26,26],2],[[27,27],2],[[19,22],2],[[19,19],2],[[20,20],2],[[20,22],2],[[25,25],25],[[24,24],24],[[26,26],26],[[27,27],27],[[17,17],22],[[18,18],22],[[28,28],22],[[19,19],22],[18,18],[19,19],[18,[[2,[18,18]]]],[19,[[2,[19,19]]]],[18,18],[19,19],[25,29],[24,30],[26,30],[27,31],[17,32],[18,33],[19,33],[20,34],[28,35],[17,36],[18,37],[19,37],[20,38],[17,39],[18,40],[19,40],[20,41],[24,[[42,[22]]]],[17,[[42,[22]]]],[18,[[42,[22]]]],[25,[[42,[22]]]],[27,[[42,[22]]]],[19,[[42,[22]]]],[20,[[42,[22]]]],[24,[[42,[22]]]],[17,[[42,[22]]]],[18,[[42,[22]]]],[25,[[42,[22]]]],[27,[[42,[22]]]],[28,[[42,[22]]]],[19,[[42,[22]]]],[20,[[42,[22]]]],[17,43],[18,44],[19,44],[20,45],[17,46],[18,47],[19,47],[20,48],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,17],[18,18],[19,19],[20,20],[[17,17,17],17],[[18,18,18],18],[[19,19,19],19],[[20,20,20],20],[[17,22,22],17],[[18,22,22],18],[[19,22,22],19],[[20,22,22],20],[[17,22],17],[[18,22],18],[[19,22],19],[[20,22],20],[[17,22],17],[[18,22],18],[[19,22],19],[[20,22],20],[21,21],[23,23],[24,24],[17,17],[18,18],[25,25],[26,26],[27,27],[28,28],[19,19],[20,20],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[17,17],9],[[18,18],10],[[19,19],12],[[20,20],13],[[17,17],9],[[18,18],10],[[19,19],12],[[20,20],13],[[17,17],9],[[18,18],10],[[19,19],12],[[20,20],13],[[17,17],9],[[18,18],10],[[19,19],12],[[20,20],13],[[17,17],9],[[18,18],10],[[19,19],12],[[20,20],13],[[17,17],9],[[18,18],10],[[19,19],12],[[20,20],13],[[24,15],18],[[25,15],17],[[26,15],19],[[27,15],20],[[24,15],18],[[25,15],17],[[26,15],19],[[27,15],20],[28,28],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[18,18],18],[[19,19],19],[[],21],[[],23],[[],24],[[],17],[[],18],[[],25],[[],26],[[],27],[[],28],[[],19],[[],20],[21],[23],[25],[28],[19],[20],[21],[23],[25],[28],[19],[20],[24,22],[25,22],[26,22],[27,22],[[17,17],22],[[18,18],22],[[19,19],22],[[20,20],22],[[17,17],22],[[18,18],22],[[19,19],22],[[20,20],22],[[17,17],17],[[17,22],17],[[18,18],18],[[18,22],18],[[28,22],28],[[19,22],19],[[19,19],19],[[20,20],20],[[20,22],20],[[17,22],2],[[17,17],2],[[18,22],2],[[18,18],2],[[19,22],2],[[19,19],2],[[20,20],2],[[20,22],2],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[17,17],22],[[18,18],22],[[28,28],22],[[19,19],22],[[20,20],22],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],3],[[23,23],3],[[24,24],3],[[17,17],3],[[18,18],3],[[25,25],3],[[26,26],3],[[27,27],3],[[28,28],3],[[19,19],3],[[20,20],3],[17,17],[18,18],[19,19],[20,20],[[17,22],18],[[18,22],20],[[19,22],20],[17,17],[18,18],[19,19],[20,20],[[21,4],5],[[21,4],5],[[23,4],5],[[23,4],5],[[24,4],5],[[24,4],5],[[17,4],5],[[17,4],5],[[18,4],5],[[18,4],5],[[25,4],5],[[25,4],5],[[26,4],5],[[26,4],5],[[27,4],5],[[27,4],5],[[28,4],5],[[28,4],5],[[19,4],5],[[19,4],5],[[20,4],5],[[20,4],5],[17,17],[18,18],[19,19],[20,20],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[21,24],[26,24],[[[42,[22]]],17],[-1,-1,[]],[[[2,[22,22]]],17],[19,18],[[[2,[17,22]]],18],[[[42,[22]]],18],[-1,-1,[]],[[[2,[22,22,22]]],18],[-1,-1,[]],[24,26],[-1,-1,[]],[21,26],[-1,-1,[]],[23,27],[-1,-1,[]],[49,19],[[[42,[22]]],19],[[[2,[22,22,22]]],19],[-1,-1,[]],[20,19],[[[2,[17,22]]],19],[18,19],[[[2,[18,22]]],20],[49,20],[[[2,[22,18]]],20],[-1,-1,[]],[[[42,[22]]],20],[[[2,[19,22]]],20],[[[2,[22,22,22,22]]],20],[28,20],[[[2,[17,22,22]]],20],[[[2,[17,17]]],20],[[[2,[22,19]]],20],[23,28],[22,21],[22,24],[22,17],[22,25],[22,26],[[22,17],21],[[[42,[22]]],17],[[[42,[22]]],18],[[[42,[22]]],28],[[[42,[22]]],19],[[[42,[22]]],20],[[18,22],23],[[18,22],24],[[18,22],26],[[18,22],27],[[18,22],28],[[17,17,17],21],[[19,19,19,19],23],[[18,18,18],24],[[17,17],25],[[19,19,19],26],[[20,20,20,20],27],[[[42,[22]]],21],[[[42,[22]]],23],[[[42,[22]]],24],[[[42,[22]]],25],[[[42,[22]]],26],[[[42,[22]]],27],[[[42,[[42,[22]]]]],21],[[[42,[[42,[22]]]]],23],[[[42,[[42,[22]]]]],24],[[[42,[[42,[22]]]]],25],[[[42,[[42,[22]]]]],26],[[[42,[[42,[22]]]]],27],[[[50,[22]]],21],[[[50,[22]]],23],[[[50,[22]]],24],[[[50,[22]]],25],[[[50,[22]]],26],[[[50,[22]]],27],[18,24],[17,25],[18,26],[20,27],[[1,22,22,22],24],[[1,22,22,22],26],[[1,22,22,22],27],[[1,22,22,22],28],[25,21],[25,24],[25,26],[[25,17],21],[24,21],[24,23],[24,25],[24,27],[24,28],[[24,18],23],[26,21],[26,25],[26,27],[26,28],[27,23],[27,24],[27,26],[27,28],[28,23],[28,24],[28,26],[28,27],[[18,18],28],[[17,17],28],[[18,18],28],[[28,18],23],[[28,18],27],[22,23],[22,24],[22,26],[22,27],[22,28],[22,23],[22,24],[22,26],[22,27],[22,28],[22,23],[22,24],[22,26],[22,27],[22,28],[17,21],[18,23],[17,24],[17,26],[18,27],[[17,22],25],[[17,22,17],21],[[17,22,17],24],[[17,22,17],26],[[18,28,18],23],[[18,28,18],27],[18,28],[[[50,[22]]],17],[[[50,[22]]],18],[[[50,[22]]],28],[[[50,[22]]],19],[[[50,[22]]],20],[17,21],[18,23],[17,24],[17,26],[18,27],[20,28],[[22,22,22,22],28],[[17,15]],[[18,15]],[[19,15]],[[20,15]],[[17,15]],[[18,15]],[[19,15]],[[20,15]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[21,3],[23,3],[24,3],[17,3],[18,3],[25,3],[26,3],[27,3],[28,3],[19,3],[20,3],[21,3],[23,3],[24,3],[17,3],[18,3],[25,3],[26,3],[27,3],[28,3],[19,3],[20,3],[17,9],[18,10],[19,12],[20,13],[28,3],[17,14],[18,14],[19,14],[20,14],[17,3],[18,3],[28,3],[19,3],[20,3],[17,22],[18,22],[28,22],[19,22],[20,22],[17,22],[18,22],[28,22],[19,22],[20,22],[17,22],[18,22],[28,22],[19,22],[20,22],[[17,17,22],17],[[18,18,22],18],[[28,28,22],28],[[19,19,22],19],[[20,20,22],20],[[18,18,18],23],[[18,18,18],27],[[18,18,18],23],[[18,18,18],27],[[18,18,18],23],[[18,18,18],27],[[18,18,18],23],[[18,18,18],27],[[17,17],25],[[18,18,18],24],[[19,19,19],26],[[20,20,20,20],27],0,0,[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[17,22],[18,22],[19,22],[20,22],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[17,22],[18,22],[19,22],[20,22],[[21,26]],[[21,24]],[[21,21]],[[23,27]],[[23,23]],[[24,18]],[[24,22]],[[24,19],19],[[24,24]],[[24,21]],[[17,17],17],[[17,22],17],[[18,18],18],[[18,22],18],[[25,25]],[[25,17]],[[25,22]],[[26,21]],[[26,18],18],[[26,22]],[[26,19]],[[26,26]],[[27,23]],[[27,20]],[[27,27]],[[27,22]],[[28,18]],[[28,19]],[[28,28],28],[[28,22],28],[[19,19],19],[[19,22],19],[[20,22],20],[[20,20],20],[[17,17,17],17],[[18,18,18],18],[[19,19,19],19],[[20,20,20],20],[[21,21],2],[[23,23],2],[[24,24],2],[[24,22],2],[[17,22],2],[[17,17],2],[[18,18],2],[[18,22],2],[[25,25],2],[[25,22],2],[[26,22],2],[[26,26],2],[[27,22],2],[[27,27],2],[[28,28],2],[[19,22],2],[[19,19],2],[[20,20],2],[[20,22],2],[[25,25],25],[[24,24],24],[[26,26],26],[[27,27],27],[[28,28],28],[[24,22],24],[[25,22],25],[[26,22],26],[[27,22],27],[[25,17],17],[[24,18],18],[[26,18],18],[[28,18],18],[[24,19],19],[[26,19],19],[[28,19],19],[[27,20],20],[24],[17,17],[18,18],[25],[26],[27],[28,28],[19,19],[20,20],[[22,22],17],[[22,22,22],18],[[22,22,22],19],[[22,22,22,22],20],[17,17],[18,18],[28,28],[19,19],[20,20],[17,17],[18,18],[19,19],[20,20],[[22,22,22,22,22,22],27],[[22,22,22,22,22,22],27],[[22,22,22,22,22,22],27],[17,17],[[17,17],22],[[22,22,22],27],[[22,22,22],27],[[22,22,22],27],[[22,22,22],27],[[22,22,22,22],27],[[22,22,22,22],27],[[22,22,22,22],27],[[17,22],17],[[18,22],18],[[19,22],19],[[20,22],20],[-1,21,51],[-1,23,51],[-1,24,51],[-1,24,51],[-1,17,51],[-1,17,51],[-1,18,51],[-1,18,51],[-1,25,51],[-1,25,51],[-1,26,51],[-1,26,51],[-1,27,51],[-1,27,51],[-1,28,51],[-1,28,51],[-1,19,51],[-1,19,51],[-1,20,51],[-1,20,51],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[27,18],18],[[22,22,22,22],28],[17,17],[18,18],[19,19],[20,20],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[17,17],17],[[17,22],17],[[18,22],18],[[18,18],18],[[19,19],19],[[19,22],19],[[20,22],20],[[20,20],20],[[17,17],2],[[17,22],2],[[18,22],2],[[18,18],2],[[19,22],2],[[19,19],2],[[20,22],2],[[20,20],2],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[17,17],17],[17,17],[18,18],[19,19],[20,20],[[24,15],18],[[25,15],17],[[26,15],19],[[27,15],20],[[9,17,17],17],[[10,18,18],18],[[12,19,19],19],[[13,20,20],20],[17,17],[18,18],[19,19],[20,20],[[28,28,22],28],[22,17],[22,18],[22,19],[22,20],[[24,24]],[[17,22],17],[[17,17],17],[[18,22],18],[[18,18],18],[[25,25]],[[26,26]],[[27,27]],[[28,28],28],[[19,22],19],[[19,19],19],[[20,22],20],[[20,20],20],[[24,24],2],[[17,22],2],[[17,17],2],[[18,18],2],[[18,22],2],[[25,25],2],[[26,26],2],[[27,27],2],[[19,22],2],[[19,19],2],[[20,22],2],[[20,20],2],[[25,25],25],[[24,24],24],[[26,26],26],[[27,27],27],[-1,24,51],[-1,24,51],[-1,17,51],[-1,17,51],[-1,18,51],[-1,18,51],[-1,25,51],[-1,25,51],[-1,26,51],[-1,26,51],[-1,27,51],[-1,27,51],[-1,28,51],[-1,28,51],[-1,19,51],[-1,19,51],[-1,20,51],[-1,20,51],[17,[[42,[22]]]],[18,[[42,[22]]]],[28,[[42,[22]]]],[19,[[42,[22]]]],[20,[[42,[22]]]],[28,[[2,[18,22]]]],[21,[[42,[22]]]],[23,[[42,[22]]]],[24,[[42,[22]]]],[25,[[42,[22]]]],[26,[[42,[22]]]],[27,[[42,[22]]]],[21,[[42,[[42,[22]]]]]],[23,[[42,[[42,[22]]]]]],[24,[[42,[[42,[22]]]]]],[25,[[42,[[42,[22]]]]]],[26,[[42,[[42,[22]]]]]],[27,[[42,[[42,[22]]]]]],[[28,1],[[2,[22,22,22]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,[[2,[17,22,17]]]],[23,[[2,[18,28,18]]]],[27,[[2,[18,28,18]]]],[28,18],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[[21,17],17],[[24,17],17],[[26,17],17],[[23,18],18],[[27,18],18],[[23,19],19],[[27,19],19],[[21,17],17],[[24,17],17],[[26,17],17],[[23,18],18],[[27,18],18],[[23,19],19],[[27,19],19],0,0,[24,24],[25,25],[26,26],[27,27],[17,17],[18,18],[19,19],[20,20],[18,17],[19,17],[20,18],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[17,[[52,[17]]]],[18,[[52,[18]]]],[19,[[52,[19]]]],[20,[[52,[20]]]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[[22,22],17],[[22,22,22],18],[[22,22,22],19],[[22,22,22,22],20],0,[[21,[50,[22]]],2],[[23,[50,[22]]],2],[[24,[50,[22]]],2],[[25,[50,[22]]],2],[[26,[50,[22]]],2],[[27,[50,[22]]],2],[[17,[50,[22]]],2],[[18,[50,[22]]],2],[[28,[50,[22]]],2],[[19,[50,[22]]],2],[[20,[50,[22]]],2],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],0,0,0,0,0,[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[17,17],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[17,17],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[28,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],0,0,0,0,0,[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[17,17],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[17,17],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],0,0,0,0,[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[32,32],[33,33],[34,34],[[53,53,54],3],[[55,55,54],3],[[29,29,54],3],[[30,30,54],3],[[31,31,54],3],[[35,35,54],3],[[32,32,54],3],[[33,33,54],3],[[34,34,54],3],[[29,29]],[[30,30]],[[31,31]],[[35,35],35],[[32,32],32],[[32,54],32],[[33,54],33],[[33,33],33],[[34,34],34],[[34,54],34],[[29,29],2],[[30,30],2],[[31,31],2],[[32,54],2],[[32,32],2],[[33,54],2],[[33,33],2],[[34,34],2],[[34,54],2],[[29,29],29],[[30,30],30],[[31,31],31],[[35,35],54],[[32,32],54],[[33,33],54],[33,33],[33,[[2,[33,33]]]],[33,33],[35,28],[32,36],[33,37],[34,38],[32,39],[33,40],[34,41],[29,25],[30,24],[31,27],[29,[[42,[54]]]],[30,[[42,[54]]]],[31,[[42,[54]]]],[32,[[42,[54]]]],[33,[[42,[54]]]],[34,[[42,[54]]]],[29,[[42,[54]]]],[30,[[42,[54]]]],[31,[[42,[54]]]],[35,[[42,[54]]]],[32,[[42,[54]]]],[33,[[42,[54]]]],[34,[[42,[54]]]],[32,43],[33,44],[34,45],[32,46],[33,47],[34,48],[32,17],[33,18],[33,19],[34,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[32,32],[33,33],[34,34],[[32,32,32],32],[[33,33,33],33],[[34,34,34],34],[[32,54,54],32],[[33,54,54],33],[[34,54,54],34],[[32,54],32],[[33,54],33],[[34,54],34],[[32,54],32],[[33,54],33],[[34,54],34],[53,53],[55,55],[29,29],[30,30],[31,31],[35,35],[32,32],[33,33],[34,34],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[32,32],9],[[33,33],10],[[34,34],11],[[32,32],9],[[33,33],10],[[34,34],11],[[32,32],9],[[33,33],10],[[34,34],11],[[32,32],9],[[33,33],10],[[34,34],11],[[32,32],9],[[33,33],10],[[34,34],11],[[32,32],9],[[33,33],10],[[34,34],11],[[29,15],32],[[30,15],33],[[31,15],34],[[29,15],32],[[30,15],33],[[31,15],34],[35,35],[[32,32],32],[[33,33],33],[[34,34],34],[[33,33],33],[[],53],[[],55],[[],29],[[],30],[[],31],[[],35],[[],32],[[],33],[[],34],[53],[55],[53],[55],[29,54],[30,54],[31,54],[[32,32],54],[[33,33],54],[[34,34],54],[[32,32],54],[[33,33],54],[[34,34],54],[[35,54],35],[[32,54],32],[[32,32],32],[[33,54],33],[[33,33],33],[[34,34],34],[[34,54],34],[[32,32],2],[[32,54],2],[[33,33],2],[[33,54],2],[[34,54],2],[[34,34],2],[[32,32],32],[[33,33],33],[[34,34],34],[[32,32],29],[[33,33,33],30],[[34,34,34,34],31],[[35,35],54],[[32,32],54],[[33,33],54],[[34,34],54],[[32,32],32],[[33,33],33],[[34,34],34],[[54,54,54,54],35],[[54,54],32],[[54,54,54],33],[[54,54,54,54],34],[[53,53],3],[[55,55],3],[[29,29],3],[[30,30],3],[[31,31],3],[[35,35],3],[[32,32],3],[[33,33],3],[[34,34],3],[32,32],[33,33],[34,34],[[32,54],33],[[33,54],34],[32,32],[33,33],[34,34],[[53,4],5],[[53,4],5],[[55,4],5],[[55,4],5],[[29,4],5],[[29,4],5],[[30,4],5],[[30,4],5],[[31,4],5],[[31,4],5],[[35,4],5],[[35,4],5],[[32,4],5],[[32,4],5],[[33,4],5],[[33,4],5],[[34,4],5],[[34,4],5],[32,32],[33,33],[34,34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[53,30],[-1,-1,[]],[55,31],[-1,-1,[]],[-1,-1,[]],[[[42,[54]]],32],[46,32],[17,32],[39,32],[-1,-1,[]],[[[2,[54,54]]],32],[18,33],[[[2,[32,54]]],33],[-1,-1,[]],[[[2,[54,54,54]]],33],[40,33],[47,33],[[[42,[54]]],33],[20,34],[35,34],[48,34],[[[2,[32,32]]],34],[[[2,[54,33]]],34],[[[42,[54]]],34],[41,34],[[[2,[33,54]]],34],[-1,-1,[]],[[[2,[32,54,54]]],34],[[[2,[54,54,54,54]]],34],[55,35],[54,53],[54,29],[54,30],[54,32],[[54,32],53],[[[42,[54]]],35],[[[42,[54]]],32],[[[42,[54]]],33],[[[42,[54]]],34],[[33,54],55],[[33,54],30],[[33,54],31],[[33,54],35],[[32,32,32],53],[[33,33,33,33],55],[[32,32],29],[[33,33,33],30],[[34,34,34,34],31],[[[42,[54]]],53],[[[42,[54]]],55],[[[42,[54]]],29],[[[42,[54]]],30],[[[42,[54]]],31],[[[42,[[42,[54]]]]],53],[[[42,[[42,[54]]]]],55],[[[42,[[42,[54]]]]],29],[[[42,[[42,[54]]]]],30],[[[42,[[42,[54]]]]],31],[[[50,[54]]],53],[[[50,[54]]],55],[[[50,[54]]],29],[[[50,[54]]],30],[[[50,[54]]],31],[32,29],[33,30],[34,31],[[1,54,54,54],30],[[1,54,54,54],31],[[1,54,54,54],35],[29,53],[29,30],[[29,32],53],[30,53],[30,55],[30,29],[30,31],[30,35],[[30,33],55],[31,55],[31,30],[31,35],[35,55],[35,30],[35,31],[[33,33],35],[[32,32],35],[[33,33],35],[[35,33],55],[[35,33],31],[54,55],[54,30],[54,31],[54,35],[54,55],[54,30],[54,31],[54,35],[54,55],[54,30],[54,31],[54,35],[32,53],[33,55],[32,30],[33,31],[[32,54],29],[[32,54,32],53],[[32,54,32],30],[[33,35,33],55],[[33,35,33],31],[33,35],[[[50,[54]]],35],[[[50,[54]]],32],[[[50,[54]]],33],[[[50,[54]]],34],[32,53],[33,55],[32,30],[33,31],[34,35],[[54,54,54,54],35],[[32,15]],[[33,15]],[[34,15]],[[32,15]],[[33,15]],[[34,15]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[53,53],[55,55],[29,29],[30,30],[31,31],[35,35],[53,3],[55,3],[29,3],[30,3],[31,3],[35,3],[32,3],[33,3],[34,3],[53,3],[55,3],[29,3],[30,3],[31,3],[35,3],[32,3],[33,3],[34,3],[32,9],[33,10],[34,11],[35,3],[32,14],[33,14],[34,14],[35,3],[32,3],[33,3],[34,3],[35,54],[32,54],[33,54],[34,54],[35,54],[32,54],[33,54],[34,54],[35,54],[32,54],[33,54],[34,54],[[35,35,54],35],[[32,32,54],32],[[33,33,54],33],[[34,34,54],34],[[33,33,33],55],[[33,33,33],31],[[33,33,33],55],[[33,33,33],31],[[33,33,33],55],[[33,33,33],31],[[33,33,33],55],[[33,33,33],31],0,0,[[32,32],32],[[33,33],33],[[34,34],34],[32,54],[33,54],[34,54],[[32,32],32],[[33,33],33],[[34,34],34],[32,54],[33,54],[34,54],[[53,53]],[[53,30]],[[55,31]],[[55,55]],[[29,32]],[[29,29]],[[29,54]],[[30,33]],[[30,53]],[[30,54]],[[30,30]],[[31,54]],[[31,34]],[[31,55]],[[31,31]],[[35,35],35],[[35,33]],[[35,54],35],[[32,54],32],[[32,32],32],[[33,33],33],[[33,54],33],[[34,34],34],[[34,54],34],[[32,32,32],32],[[33,33,33],33],[[34,34,34],34],[[53,53],2],[[55,55],2],[[29,29],2],[[29,54],2],[[30,30],2],[[30,54],2],[[31,54],2],[[31,31],2],[[35,35],2],[[32,54],2],[[32,32],2],[[33,54],2],[[33,33],2],[[34,54],2],[[34,34],2],[[29,29],29],[[30,30],30],[[31,31],31],[[35,35],35],[[29,54],29],[[30,54],30],[[31,54],31],[[29,32],32],[[30,33],33],[[35,33],33],[[31,34],34],[29],[30],[31],[35,35],[32,32],[33,33],[34,34],[[54,54],32],[[54,54,54],33],[[54,54,54,54],34],[35,35],[32,32],[33,33],[34,34],[32,32],[33,33],[34,34],[[54,54,54,54,54,54],31],[[54,54,54,54,54,54],31],[[54,54,54,54,54,54],31],[32,32],[[32,32],54],[[54,54,54],31],[[54,54,54],31],[[54,54,54],31],[[54,54,54],31],[[54,54,54,54],31],[[54,54,54,54],31],[[54,54,54,54],31],[[32,54],32],[[33,54],33],[[34,54],34],[-1,53,51],[-1,55,51],[-1,29,51],[-1,29,51],[-1,30,51],[-1,30,51],[-1,31,51],[-1,31,51],[-1,35,51],[-1,35,51],[-1,32,51],[-1,32,51],[-1,33,51],[-1,33,51],[-1,34,51],[-1,34,51],[[32,32],32],[[33,33],33],[[34,34],34],[[32,32],32],[[33,33],33],[[34,34],34],[[31,33],33],[32,32],[33,33],[34,34],[[32,32],32],[[33,33],33],[[34,34],34],[[32,32],32],[[33,33],33],[[34,34],34],[[32,54],32],[[32,32],32],[[33,33],33],[[33,54],33],[[34,54],34],[[34,34],34],[[32,32],2],[[32,54],2],[[33,33],2],[[33,54],2],[[34,34],2],[[34,54],2],[[32,32],32],[[33,33],33],[[34,34],34],[[32,32],32],[32,32],[33,33],[34,34],[[29,15],32],[[30,15],33],[[31,15],34],[[9,32,32],32],[[10,33,33],33],[[11,34,34],34],[32,32],[33,33],[34,34],[[35,35,54],35],[54,32],[54,33],[54,34],[[29,29]],[[30,30]],[[31,31]],[[35,35],35],[[32,54],32],[[32,32],32],[[33,54],33],[[33,33],33],[[34,34],34],[[34,54],34],[[29,29],2],[[30,30],2],[[31,31],2],[[32,32],2],[[32,54],2],[[33,54],2],[[33,33],2],[[34,54],2],[[34,34],2],[[29,29],29],[[30,30],30],[[31,31],31],[-1,29,51],[-1,29,51],[-1,30,51],[-1,30,51],[-1,31,51],[-1,31,51],[-1,35,51],[-1,35,51],[-1,32,51],[-1,32,51],[-1,33,51],[-1,33,51],[-1,34,51],[-1,34,51],[35,[[42,[54]]]],[32,[[42,[54]]]],[33,[[42,[54]]]],[34,[[42,[54]]]],[35,[[2,[33,54]]]],[53,[[42,[54]]]],[55,[[42,[54]]]],[29,[[42,[54]]]],[30,[[42,[54]]]],[31,[[42,[54]]]],[53,[[42,[[42,[54]]]]]],[55,[[42,[[42,[54]]]]]],[29,[[42,[[42,[54]]]]]],[30,[[42,[[42,[54]]]]]],[31,[[42,[[42,[54]]]]]],[[35,1],[[2,[54,54,54]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[53,[[2,[32,54,32]]]],[55,[[2,[33,35,33]]]],[31,[[2,[33,35,33]]]],[35,33],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[[53,32],32],[[30,32],32],[[55,33],33],[[31,33],33],[[53,32],32],[[30,32],32],[[55,33],33],[[31,33],33],0,0,[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[33,32],[34,33],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[32,[[52,[32]]]],[33,[[52,[33]]]],[34,[[52,[34]]]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],0,0,0,[[53,[50,[54]]],2],[[55,[50,[54]]],2],[[29,[50,[54]]],2],[[30,[50,[54]]],2],[[31,[50,[54]]],2],[[35,[50,[54]]],2],[[32,[50,[54]]],2],[[33,[50,[54]]],2],[[34,[50,[54]]],2],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],0,0,0,0,0,0,0,[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[32,32],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[32,32],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[35,33],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],0,0,0,0,0,0,0,[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[32,32],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[32,32],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],0,0,0,0,0,[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[39,39],[40,40],[41,41],[[39,39],39],[[39,56],39],[[40,56],40],[[40,40],40],[[41,56],41],[[41,41],41],[[39,56],2],[[39,39],2],[[40,40],2],[[40,56],2],[[41,56],2],[[41,41],2],[39,32],[40,33],[41,34],[39,36],[40,37],[41,38],[39,[[42,[56]]]],[40,[[42,[56]]]],[41,[[42,[56]]]],[39,[[42,[56]]]],[40,[[42,[56]]]],[41,[[42,[56]]]],[39,43],[40,44],[41,45],[39,46],[40,47],[41,48],[39,17],[40,18],[40,19],[41,20],[[39,56]],[[39,39]],[[40,40]],[[40,56]],[[41,56]],[[41,41]],[[39,39]],[[39,56]],[[40,56]],[[40,40]],[[41,41]],[[41,56]],[[39,56]],[[39,39]],[[40,40]],[[40,56]],[[41,41]],[[41,56]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[39,39,39],39],[[40,40,40],40],[[41,41,41],41],[39,39],[40,40],[41,41],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[39,39],9],[[40,40],10],[[41,41],11],[[39,39],9],[[40,40],10],[[41,41],11],[[39,39],9],[[40,40],10],[[41,41],11],[[39,39],9],[[40,40],10],[[41,41],11],[[39,39],9],[[40,40],10],[[41,41],11],[[39,39],9],[[40,40],10],[[41,41],11],[[40,40],40],[[],39],[[],40],[[],41],[[39,39],56],[[40,40],56],[[41,41],56],[[39,56],39],[[39,39],39],[[40,56],40],[[40,40],40],[[41,56],41],[[41,41],41],[[39,56],2],[[39,39],2],[[40,40],2],[[40,56],2],[[41,56],2],[[41,41],2],[[39,39],39],[[40,40],40],[[41,41],41],[[39,39],56],[[40,40],56],[[41,41],56],[[39,39],39],[[40,40],40],[[41,41],41],[[39,39],3],[[40,40],3],[[41,41],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[39,56],40],[[40,56],41],[[39,4],5],[[39,4],5],[[40,4],5],[[40,4],5],[[41,4],5],[[41,4],5],[[[42,[56]]],39],[[[2,[56,56]]],39],[-1,-1,[]],[[[2,[39,56]]],40],[-1,-1,[]],[[[42,[56]]],40],[[[2,[56,56,56]]],40],[[[2,[56,40]]],41],[[[42,[56]]],41],[[[2,[39,56,56]]],41],[[[2,[56,56,56,56]]],41],[[[2,[40,56]]],41],[-1,-1,[]],[[[2,[39,39]]],41],[[[42,[56]]],39],[[[42,[56]]],40],[[[42,[56]]],41],[[[50,[56]]],39],[[[50,[56]]],40],[[[50,[56]]],41],[[39,-1],2,6],[[40,-1],2,6],[[41,-1],2,6],[[39,15]],[[40,15]],[[41,15]],[[39,15]],[[40,15]],[[41,15]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[39,14],[40,14],[41,14],[[56,56],39],[[56,56,56],40],[[56,56,56,56],41],[39,56],[40,56],[41,56],[[39,39],39],[[40,40],40],[[41,41],41],[39,56],[40,56],[41,56],[[39,39],39],[[40,40],40],[[41,41],41],[39,56],[40,56],[41,56],[[39,56],39],[[39,39],39],[[40,40],40],[[40,56],40],[[41,41],41],[[41,56],41],[[39,39],2],[[39,56],2],[[40,40],2],[[40,56],2],[[41,41],2],[[41,56],2],[39,39],[40,40],[41,41],[[56,56],39],[[56,56,56],40],[[56,56,56,56],41],[39],[40],[41],[39,39],[[39,39],56],[-1,39,51],[-1,39,51],[-1,40,51],[-1,40,51],[-1,41,51],[-1,41,51],[[39,56],39],[[39,39],39],[[40,56],40],[[40,40],40],[[41,56],41],[[41,41],41],[[39,39],2],[[39,56],2],[[40,40],2],[[40,56],2],[[41,56],2],[[41,41],2],[[39,39],39],[[40,40],40],[[41,41],41],[[39,39],39],[[39,39],39],[[40,40],40],[[41,41],41],[[39,39],39],[[40,40],40],[[41,41],41],[[39,39],39],[[40,40],40],[[41,41],41],[[39,39],39],[[40,40],40],[[41,41],41],[[9,39,39],39],[[10,40,40],40],[[11,41,41],41],[[39,57]],[[39,58]],[[39,14]],[[39,46]],[[39,59]],[[39,60]],[[39,61]],[[39,62]],[[39,39]],[[39,56]],[[40,61]],[[40,56]],[[40,62]],[[40,58]],[[40,47]],[[40,40]],[[40,59]],[[40,60]],[[40,14]],[[40,57]],[[41,48]],[[41,56]],[[41,57]],[[41,58]],[[41,59]],[[41,60]],[[41,41]],[[41,61]],[[41,14]],[[41,62]],[[39,62]],[[39,56]],[[39,58]],[[39,57]],[[39,60]],[[39,46]],[[39,39]],[[39,59]],[[39,14]],[[39,61]],[[40,14]],[[40,47]],[[40,59]],[[40,60]],[[40,40]],[[40,62]],[[40,61]],[[40,56]],[[40,58]],[[40,57]],[[41,62]],[[41,41]],[[41,57]],[[41,14]],[[41,60]],[[41,48]],[[41,61]],[[41,59]],[[41,56]],[[41,58]],[39,39],[40,40],[41,41],[56,39],[56,40],[56,41],[[39,39],39],[[39,56],39],[[40,40],40],[[40,56],40],[[41,41],41],[[41,56],41],[[39,56],2],[[39,39],2],[[40,56],2],[[40,40],2],[[41,56],2],[[41,41],2],[-1,39,51],[-1,39,51],[-1,40,51],[-1,40,51],[-1,41,51],[-1,41,51],[39,[[42,[56]]]],[40,[[42,[56]]]],[41,[[42,[56]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[40,39],[41,40],[43,[[7,[39]]]],[-1,[[7,[-2]]],[],[]],[46,[[7,[39]]]],[36,[[7,[39]]]],[47,[[7,[40]]]],[44,[[7,[40]]]],[-1,[[7,[-2]]],[],[]],[37,[[7,[40]]]],[-1,[[7,[-2]]],[],[]],[38,[[7,[41]]]],[48,[[7,[41]]]],[45,[[7,[41]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],0,[[39,39],39],[[40,40],40],[[41,41],41],[[39,39],39],[[40,40],40],[[41,41],41],[[39,39],39],[[40,40],40],[[41,41],41],[[39,39],39],[[40,40],40],[[41,41],41],[[39,[50,[56]]],2],[[40,[50,[56]]],2],[[41,[50,[56]]],2],[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],0,0,0,[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[39,39],[40,39],[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[39,40],[40,40],[41,40],[41,41],[39,41],[40,41],[41,41],[39,41],[40,41],[41,41],[40,41],[41,41],[39,40],[40,40],[41,40],[41,41],[39,41],[40,41],[41,41],[39,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[39,39],[40,39],[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[39,40],[40,40],[41,40],[41,41],[39,41],[40,41],[41,41],[39,41],[40,41],[41,41],[40,41],[41,41],[39,40],[40,40],[41,40],[41,41],[39,41],[40,41],[41,41],[39,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,39],[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],0,0,0,[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[39,39],[40,39],[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[39,40],[40,40],[41,40],[41,41],[39,41],[40,41],[41,41],[39,41],[40,41],[41,41],[40,41],[41,41],[39,40],[40,40],[41,40],[41,41],[39,41],[40,41],[41,41],[39,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[39,39],[40,39],[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[39,40],[40,40],[41,40],[41,41],[39,41],[40,41],[41,41],[39,41],[40,41],[41,41],[40,41],[41,41],[39,40],[40,40],[41,40],[41,41],[39,41],[40,41],[41,41],[39,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,39],[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],0,0,[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[41,40],[41,41],[41,41],[41,41],[41,41],[40,39],[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,39],[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,39],[41,39],[41,40],[41,41],[41,41],[41,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],[40,40],[41,40],[41,41],[40,41],[41,41],[40,41],[41,41],[40,41],[41,41],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[36,36],[37,37],[38,38],[[36,57],36],[[36,36],36],[[37,57],37],[[37,37],37],[[38,57],38],[[38,38],38],[[36,57],2],[[36,36],2],[[37,37],2],[[37,57],2],[[38,38],2],[[38,57],2],[36,32],[37,33],[38,34],[36,39],[37,40],[38,41],[36,[[42,[57]]]],[37,[[42,[57]]]],[38,[[42,[57]]]],[36,[[42,[57]]]],[37,[[42,[57]]]],[38,[[42,[57]]]],[36,43],[37,44],[38,45],[36,46],[37,47],[38,48],[36,17],[37,18],[37,19],[38,20],[[36,36]],[[36,57]],[[37,57]],[[37,37]],[[38,38]],[[38,57]],[[36,36]],[[36,57]],[[37,37]],[[37,57]],[[38,57]],[[38,38]],[[36,36]],[[36,57]],[[37,37]],[[37,57]],[[38,57]],[[38,38]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[36,36,36],36],[[37,37,37],37],[[38,38,38],38],[36,36],[37,37],[38,38],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[36,36],9],[[37,37],10],[[38,38],11],[[36,36],9],[[37,37],10],[[38,38],11],[[36,36],9],[[37,37],10],[[38,38],11],[[36,36],9],[[37,37],10],[[38,38],11],[[36,36],9],[[37,37],10],[[38,38],11],[[36,36],9],[[37,37],10],[[38,38],11],[[37,37],37],[[],36],[[],37],[[],38],[[36,36],57],[[37,37],57],[[38,38],57],[[36,36],36],[[36,57],36],[[37,57],37],[[37,37],37],[[38,57],38],[[38,38],38],[[36,36],2],[[36,57],2],[[37,57],2],[[37,37],2],[[38,57],2],[[38,38],2],[[36,36],36],[[37,37],37],[[38,38],38],[[36,36],57],[[37,37],57],[[38,38],57],[[36,36],36],[[37,37],37],[[38,38],38],[[36,36],3],[[37,37],3],[[38,38],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[36,57],37],[[37,57],38],[[36,4],5],[[36,4],5],[[37,4],5],[[37,4],5],[[38,4],5],[[38,4],5],[39,36],[[[42,[57]]],36],[[[2,[57,57]]],36],[-1,-1,[]],[[[42,[57]]],37],[40,37],[[[2,[57,57,57]]],37],[[[2,[36,57]]],37],[-1,-1,[]],[-1,-1,[]],[[[2,[57,37]]],38],[[[2,[37,57]]],38],[[[2,[36,57,57]]],38],[[[2,[57,57,57,57]]],38],[[[2,[36,36]]],38],[[[42,[57]]],38],[41,38],[[[42,[57]]],36],[[[42,[57]]],37],[[[42,[57]]],38],[[[50,[57]]],36],[[[50,[57]]],37],[[[50,[57]]],38],[[36,-1],2,6],[[37,-1],2,6],[[38,-1],2,6],[[57,57],36],[[57,57,57],37],[[57,57,57,57],38],[[36,15]],[[37,15]],[[38,15]],[[36,15]],[[37,15]],[[38,15]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,14],[37,14],[38,14],[36,57],[37,57],[38,57],[[36,36],36],[[37,37],37],[[38,38],38],[36,57],[37,57],[38,57],[[36,36],36],[[37,37],37],[[38,38],38],[36,57],[37,57],[38,57],[[36,36],36],[[36,57],36],[[37,37],37],[[37,57],37],[[38,38],38],[[38,57],38],[[36,36],2],[[36,57],2],[[37,37],2],[[37,57],2],[[38,38],2],[[38,57],2],[36,36],[37,37],[38,38],[[57,57],36],[[57,57,57],37],[[57,57,57,57],38],[36],[37],[38],[36,36],[[36,36],57],[-1,36,51],[-1,36,51],[-1,37,51],[-1,37,51],[-1,38,51],[-1,38,51],[[36,36],36],[[36,57],36],[[37,57],37],[[37,37],37],[[38,38],38],[[38,57],38],[[36,36],2],[[36,57],2],[[37,57],2],[[37,37],2],[[38,57],2],[[38,38],2],[[36,36],36],[[37,37],37],[[38,38],38],[[36,36],36],[[36,36],36],[[37,37],37],[[38,38],38],[[36,36],36],[[37,37],37],[[38,38],38],[[36,36],36],[[37,37],37],[[38,38],38],[[36,36],36],[[37,37],37],[[38,38],38],[[9,36,36],36],[[10,37,37],37],[[11,38,38],38],[[36,14]],[[36,46]],[[36,39]],[[36,59]],[[36,61]],[[36,56]],[[36,62]],[[36,60]],[[36,57]],[[36,58]],[[37,40]],[[37,59]],[[37,47]],[[37,56]],[[37,61]],[[37,57]],[[37,14]],[[37,58]],[[37,62]],[[37,60]],[[38,61]],[[38,57]],[[38,59]],[[38,41]],[[38,60]],[[38,62]],[[38,56]],[[38,48]],[[38,14]],[[38,58]],[[36,39]],[[36,59]],[[36,56]],[[36,46]],[[36,61]],[[36,58]],[[36,57]],[[36,14]],[[36,60]],[[36,62]],[[37,47]],[[37,14]],[[37,56]],[[37,58]],[[37,60]],[[37,61]],[[37,40]],[[37,57]],[[37,62]],[[37,59]],[[38,57]],[[38,41]],[[38,56]],[[38,62]],[[38,60]],[[38,14]],[[38,58]],[[38,48]],[[38,61]],[[38,59]],[36,36],[37,37],[38,38],[57,36],[57,37],[57,38],[[36,36],36],[[36,57],36],[[37,37],37],[[37,57],37],[[38,57],38],[[38,38],38],[[36,57],2],[[36,36],2],[[37,57],2],[[37,37],2],[[38,57],2],[[38,38],2],[-1,36,51],[-1,36,51],[-1,37,51],[-1,37,51],[-1,38,51],[-1,38,51],[36,[[42,[57]]]],[37,[[42,[57]]]],[38,[[42,[57]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[37,36],[38,37],[43,[[7,[36]]]],[-1,[[7,[-2]]],[],[]],[44,[[7,[37]]]],[-1,[[7,[-2]]],[],[]],[45,[[7,[38]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],0,[[36,36],36],[[37,37],37],[[38,38],38],[[36,36],36],[[37,37],37],[[38,38],38],[[36,36],36],[[37,37],37],[[38,38],38],[[36,36],36],[[37,37],37],[[38,38],38],[[36,[50,[57]]],2],[[37,[50,[57]]],2],[[38,[50,[57]]],2],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],0,0,0,[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[36,36],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[36,36],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],0,0,0,[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[36,36],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[36,36],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],0,0,[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],0,0,0,0,0,0,0,0,0,[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[46,46],46],[[46,14],46],[[47,47],47],[[47,14],47],[[48,48],48],[[48,14],48],[[46,14],2],[[46,46],2],[[47,14],2],[[47,47],2],[[48,48],2],[[48,14],2],[46,32],[47,33],[48,34],[46,36],[47,37],[48,38],[46,39],[47,40],[48,41],[46,[[42,[14]]]],[47,[[42,[14]]]],[48,[[42,[14]]]],[46,[[42,[14]]]],[47,[[42,[14]]]],[48,[[42,[14]]]],[46,43],[47,44],[48,45],[46,17],[47,18],[47,19],[48,20],[[46,46]],[[46,14]],[[47,14]],[[47,47]],[[48,48]],[[48,14]],[[46,14]],[[46,46]],[[47,47]],[[47,14]],[[48,48]],[[48,14]],[[46,46]],[[46,14]],[[47,47]],[[47,14]],[[48,48]],[[48,14]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[46,46,46],46],[[47,47,47],47],[[48,48,48],48],[46,46],[47,47],[48,48],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[46,46],9],[[47,47],10],[[48,48],11],[[46,46],9],[[47,47],10],[[48,48],11],[[46,46],9],[[47,47],10],[[48,48],11],[[46,46],9],[[47,47],10],[[48,48],11],[[46,46],9],[[47,47],10],[[48,48],11],[[46,46],9],[[47,47],10],[[48,48],11],[[47,47],47],[[],46],[[],47],[[],48],[[46,14],46],[[46,46],46],[[47,14],47],[[47,47],47],[[48,48],48],[[48,14],48],[[46,14],2],[[46,46],2],[[47,47],2],[[47,14],2],[[48,14],2],[[48,48],2],[[46,46],14],[[47,47],14],[[48,48],14],[[46,46],46],[[47,47],47],[[48,48],48],[[46,46],3],[[47,47],3],[[48,48],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[46,14],47],[[47,14],48],[[46,4],5],[[46,4],5],[[47,4],5],[[47,4],5],[[48,4],5],[[48,4],5],[-1,-1,[]],[[[42,[14]]],46],[[[2,[14,14]]],46],[[[42,[14]]],47],[[[2,[46,14]]],47],[-1,-1,[]],[[[2,[14,14,14]]],47],[[[2,[46,46]]],48],[[[2,[14,14,14,14]]],48],[-1,-1,[]],[[[2,[47,14]]],48],[[[2,[46,14,14]]],48],[[[42,[14]]],48],[[[2,[14,47]]],48],[[[42,[14]]],46],[[[42,[14]]],47],[[[42,[14]]],48],[[[50,[14]]],46],[[[50,[14]]],47],[[[50,[14]]],48],[[46,-1],2,6],[[47,-1],2,6],[[48,-1],2,6],[[46,15]],[[47,15]],[[48,15]],[[46,15]],[[47,15]],[[48,15]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[46,14],[47,14],[48,14],[[46,46],46],[[47,47],47],[[48,48],48],[46,14],[47,14],[48,14],[[46,46],46],[[47,47],47],[[48,48],48],[46,14],[47,14],[48,14],[[46,46],46],[[46,14],46],[[47,47],47],[[47,14],47],[[48,14],48],[[48,48],48],[[46,46],2],[[46,14],2],[[47,47],2],[[47,14],2],[[48,48],2],[[48,14],2],[[14,14],46],[[14,14,14],47],[[14,14,14,14],48],[46],[47],[48],[-1,46,51],[-1,46,51],[-1,47,51],[-1,47,51],[-1,48,51],[-1,48,51],[[46,14],46],[[46,46],46],[[47,14],47],[[47,47],47],[[48,48],48],[[48,14],48],[[46,14],2],[[46,46],2],[[47,47],2],[[47,14],2],[[48,14],2],[[48,48],2],[[46,46],46],[[47,47],47],[[48,48],48],[[46,46],46],[[47,47],47],[[48,48],48],[[46,46],46],[[47,47],47],[[48,48],48],[[46,46],46],[[47,47],47],[[48,48],48],[[9,46,46],46],[[10,47,47],47],[[11,48,48],48],[[46,59]],[[46,14]],[[46,39]],[[46,58]],[[46,61]],[[46,56]],[[46,62]],[[46,46]],[[46,57]],[[46,60]],[[47,58]],[[47,62]],[[47,40]],[[47,47]],[[47,14]],[[47,59]],[[47,57]],[[47,61]],[[47,60]],[[47,56]],[[48,59]],[[48,57]],[[48,60]],[[48,61]],[[48,41]],[[48,62]],[[48,58]],[[48,48]],[[48,56]],[[48,14]],[[46,57]],[[46,62]],[[46,58]],[[46,60]],[[46,59]],[[46,61]],[[46,39]],[[46,56]],[[46,14]],[[46,46]],[[47,60]],[[47,47]],[[47,40]],[[47,56]],[[47,59]],[[47,57]],[[47,62]],[[47,14]],[[47,58]],[[47,61]],[[48,61]],[[48,57]],[[48,62]],[[48,48]],[[48,60]],[[48,41]],[[48,59]],[[48,56]],[[48,58]],[[48,14]],[14,46],[14,47],[14,48],[[46,46],46],[[46,14],46],[[47,14],47],[[47,47],47],[[48,48],48],[[48,14],48],[[46,46],2],[[46,14],2],[[47,47],2],[[47,14],2],[[48,14],2],[[48,48],2],[-1,46,51],[-1,46,51],[-1,47,51],[-1,47,51],[-1,48,51],[-1,48,51],[46,[[42,[14]]]],[47,[[42,[14]]]],[48,[[42,[14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[47,46],[48,47],[36,[[7,[46]]]],[-1,[[7,[-2]]],[],[]],[39,[[7,[46]]]],[43,[[7,[46]]]],[40,[[7,[47]]]],[37,[[7,[47]]]],[-1,[[7,[-2]]],[],[]],[44,[[7,[47]]]],[38,[[7,[48]]]],[-1,[[7,[-2]]],[],[]],[41,[[7,[48]]]],[45,[[7,[48]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[[14,14],46],[[14,14,14],47],[[14,14,14,14],48],0,[[46,46],46],[[47,47],47],[[48,48],48],[[46,46],46],[[47,47],47],[[48,48],48],[[46,46],46],[[47,47],47],[[48,48],48],[[46,46],46],[[47,47],47],[[48,48],48],[[46,[50,[14]]],2],[[47,[50,[14]]],2],[[48,[50,[14]]],2],[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],0,0,0,[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[46,46],[47,46],[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[46,47],[47,47],[48,47],[48,48],[46,48],[47,48],[48,48],[46,48],[47,48],[48,48],[47,48],[48,48],[46,47],[47,47],[48,47],[48,48],[46,48],[47,48],[48,48],[46,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[46,46],[47,46],[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[46,47],[47,47],[48,47],[48,48],[46,48],[47,48],[48,48],[46,48],[47,48],[48,48],[47,48],[48,48],[46,47],[47,47],[48,47],[48,48],[46,48],[47,48],[48,48],[46,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,46],[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],0,0,0,[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[46,46],[47,46],[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[46,47],[47,47],[48,47],[48,48],[46,48],[47,48],[48,48],[46,48],[47,48],[48,48],[47,48],[48,48],[46,47],[47,47],[48,47],[48,48],[46,48],[47,48],[48,48],[46,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[46,46],[47,46],[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[46,47],[47,47],[48,47],[48,48],[46,48],[47,48],[48,48],[46,48],[47,48],[48,48],[47,48],[48,48],[46,47],[47,47],[48,47],[48,48],[46,48],[47,48],[48,48],[46,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,46],[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],0,0,[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[48,47],[48,48],[48,48],[48,48],[48,48],[47,46],[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,46],[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,46],[48,46],[48,47],[48,48],[48,48],[48,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],[47,47],[48,47],[48,48],[47,48],[48,48],[47,48],[48,48],[47,48],[48,48],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[43,43],43],[[43,59],43],[[44,44],44],[[44,59],44],[[45,59],45],[[45,45],45],[[43,59],2],[[43,43],2],[[44,44],2],[[44,59],2],[[45,45],2],[[45,59],2],[43,32],[44,33],[45,34],[43,36],[44,37],[45,38],[43,39],[44,40],[45,41],[43,[[42,[59]]]],[44,[[42,[59]]]],[45,[[42,[59]]]],[43,[[42,[59]]]],[44,[[42,[59]]]],[45,[[42,[59]]]],[43,46],[44,47],[45,48],[43,17],[44,18],[44,19],[45,20],[[43,59]],[[43,43]],[[44,59]],[[44,44]],[[45,45]],[[45,59]],[[43,43]],[[43,59]],[[44,59]],[[44,44]],[[45,59]],[[45,45]],[[43,59]],[[43,43]],[[44,44]],[[44,59]],[[45,45]],[[45,59]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[43,43,43],43],[[44,44,44],44],[[45,45,45],45],[43,43],[44,44],[45,45],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[43,43],9],[[44,44],10],[[45,45],11],[[43,43],9],[[44,44],10],[[45,45],11],[[43,43],9],[[44,44],10],[[45,45],11],[[43,43],9],[[44,44],10],[[45,45],11],[[43,43],9],[[44,44],10],[[45,45],11],[[43,43],9],[[44,44],10],[[45,45],11],[[44,44],44],[[],43],[[],44],[[],45],[[43,59],43],[[43,43],43],[[44,59],44],[[44,44],44],[[45,45],45],[[45,59],45],[[43,59],2],[[43,43],2],[[44,59],2],[[44,44],2],[[45,59],2],[[45,45],2],[[43,43],59],[[44,44],59],[[45,45],59],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],3],[[44,44],3],[[45,45],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[43,59],44],[[44,59],45],[[43,4],5],[[43,4],5],[[44,4],5],[[44,4],5],[[45,4],5],[[45,4],5],[[[42,[59]]],43],[46,43],[-1,-1,[]],[[[2,[59,59]]],43],[47,44],[-1,-1,[]],[[[2,[59,59,59]]],44],[[[42,[59]]],44],[[[2,[43,59]]],44],[48,45],[[[2,[43,59,59]]],45],[[[42,[59]]],45],[[[2,[59,59,59,59]]],45],[[[2,[59,44]]],45],[-1,-1,[]],[[[2,[44,59]]],45],[[[2,[43,43]]],45],[[[42,[59]]],43],[[[42,[59]]],44],[[[42,[59]]],45],[[[50,[59]]],43],[[[50,[59]]],44],[[[50,[59]]],45],[[43,-1],2,6],[[44,-1],2,6],[[45,-1],2,6],[[43,15]],[[44,15]],[[45,15]],[[43,15]],[[44,15]],[[45,15]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[43,59],[44,59],[45,59],[[43,43],43],[[44,44],44],[[45,45],45],[43,59],[44,59],[45,59],[[43,43],43],[[44,44],44],[[45,45],45],[43,59],[44,59],[45,59],[[43,43],43],[[43,59],43],[[44,59],44],[[44,44],44],[[45,45],45],[[45,59],45],[[43,59],2],[[43,43],2],[[44,44],2],[[44,59],2],[[45,45],2],[[45,59],2],[[59,59],43],[[59,59,59],44],[[59,59,59,59],45],[43],[44],[45],[-1,43,51],[-1,43,51],[-1,44,51],[-1,44,51],[-1,45,51],[-1,45,51],[[43,59],43],[[43,43],43],[[44,44],44],[[44,59],44],[[45,59],45],[[45,45],45],[[43,43],2],[[43,59],2],[[44,59],2],[[44,44],2],[[45,59],2],[[45,45],2],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],43],[[44,44],44],[[45,45],45],[[9,43,43],43],[[10,44,44],44],[[11,45,45],45],[[43,59]],[[43,57]],[[43,46]],[[43,14]],[[43,58]],[[43,56]],[[43,62]],[[43,39]],[[43,60]],[[43,61]],[[44,57]],[[44,47]],[[44,58]],[[44,61]],[[44,60]],[[44,59]],[[44,56]],[[44,14]],[[44,40]],[[44,62]],[[45,48]],[[45,61]],[[45,14]],[[45,58]],[[45,59]],[[45,60]],[[45,62]],[[45,41]],[[45,56]],[[45,57]],[[43,62]],[[43,14]],[[43,58]],[[43,59]],[[43,56]],[[43,46]],[[43,57]],[[43,61]],[[43,60]],[[43,39]],[[44,14]],[[44,61]],[[44,56]],[[44,58]],[[44,57]],[[44,47]],[[44,60]],[[44,59]],[[44,62]],[[44,40]],[[45,48]],[[45,57]],[[45,59]],[[45,62]],[[45,41]],[[45,14]],[[45,56]],[[45,60]],[[45,58]],[[45,61]],[59,43],[59,44],[59,45],[[43,43],43],[[43,59],43],[[44,59],44],[[44,44],44],[[45,45],45],[[45,59],45],[[43,59],2],[[43,43],2],[[44,59],2],[[44,44],2],[[45,59],2],[[45,45],2],[-1,43,51],[-1,43,51],[-1,44,51],[-1,44,51],[-1,45,51],[-1,45,51],[43,[[42,[59]]]],[44,[[42,[59]]]],[45,[[42,[59]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[44,43],[45,44],[-1,[[7,[-2]]],[],[]],[36,[[7,[43]]]],[37,[[7,[44]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[38,[[7,[45]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[[59,59],43],[[59,59,59],44],[[59,59,59,59],45],0,[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],43],[[44,44],44],[[45,45],45],[[43,[50,[59]]],2],[[44,[50,[59]]],2],[[45,[50,[59]]],2],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],0,0,0,[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[43,43],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[43,43],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],0,0,0,[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[43,43],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[43,43],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],0,0,[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45]],"c":[],"p":[[4,"EulerRot",0],[15,"tuple"],[15,"bool"],[3,"Formatter",7184],[6,"Result",7184],[8,"Hasher",7185],[4,"Result",7186],[3,"TypeId",7187],[3,"BVec2",33],[3,"BVec3",33],[3,"BVec4",33],[3,"BVec3A",33],[3,"BVec4A",33],[15,"u32"],[15,"usize"],[3,"String",7188],[3,"Vec2",212],[3,"Vec3",212],[3,"Vec3A",212],[3,"Vec4",212],[3,"Affine2",212],[15,"f32"],[3,"Affine3A",212],[3,"Mat3",212],[3,"Mat2",212],[3,"Mat3A",212],[3,"Mat4",212],[3,"Quat",212],[3,"DMat2",1859],[3,"DMat3",1859],[3,"DMat4",1859],[3,"DVec2",1859],[3,"DVec3",1859],[3,"DVec4",1859],[3,"DQuat",1859],[3,"I64Vec2",4069],[3,"I64Vec3",4069],[3,"I64Vec4",4069],[3,"IVec2",3169],[3,"IVec3",3169],[3,"IVec4",3169],[15,"array"],[3,"U64Vec2",6323],[3,"U64Vec3",6323],[3,"U64Vec4",6323],[3,"UVec2",5459],[3,"UVec3",5459],[3,"UVec4",5459],[3,"__m128",7189],[15,"slice"],[8,"Iterator",7190],[4,"Option",7191],[3,"DAffine2",1859],[15,"f64"],[3,"DAffine3",1859],[15,"i32"],[15,"i64"],[15,"i16"],[15,"u64"],[15,"u16"],[15,"i8"],[15,"u8"],[8,"Vec3Swizzles",4966],[8,"Vec4Swizzles",4966],[8,"Vec2Swizzles",4966]],"a":{"cross":[978,2459,3413,4316],"determinant":[978,2459,3413,4316],"magnitude":[828,829,830,831,832,2347,2348,2349,2350],"magnitude2":[838,839,840,841,842,2355,2356,2357,2358,3376,3377,3378,4279,4280,4281,5639,5640,5641,6506,6507,6508],"mix":[843,844,845,846,847,2359,2360,2361,2362],"scale":[692,693,694,695,2239,2240,2241],"wedge":[978,2459,3413,4316]}},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","t":"NNIDDDELLLLLKLLLAAALALLLLMEDEEDDDDDDDDNNNDDDDDEDDNNNDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLDDEDDDDDNDDDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDEDDDDDNDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AllocError","CapacityOverflow","Equivalent","HashMap","HashSet","HashTable","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","fmt","from","hash_map","hash_set","hash_table","into","raw","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","Entry","EntryRef","ExtractIf","HashMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","Occupied","Occupied","OccupiedEntry","OccupiedEntryRef","OccupiedError","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","Vacant","VacantEntry","VacantEntryRef","Values","ValuesMut","allocator","and_modify","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","entry","entry","entry_ref","eq","equivalent","extend","extend","extend","extract_if","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_many_key_value_mut","get_many_key_value_unchecked_mut","get_many_mut","get_many_unchecked_mut","get_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_unique_unchecked","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key","into_key_value","into_keys","into_mut","into_mut","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","next","next","or_default","or_default","or_insert","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with","or_insert_with_key","or_insert_with_key","raw_entry","raw_entry_mut","raw_table","raw_table_mut","remove","remove","remove","remove","remove_entry","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry","replace_entry_with","replace_entry_with","replace_entry_with","replace_key","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","Difference","Drain","Entry","ExtractIf","HashSet","Intersection","IntoIter","Iter","Occupied","OccupiedEntry","SymmetricDifference","Union","Vacant","VacantEntry","allocator","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","entry","eq","equivalent","extend","extend","extract_if","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","insert","insert","insert_unique_unchecked","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_value","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","next","next","next","next","next","next","next","next","or_insert","raw_table","raw_table_mut","remove","remove","replace","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sub","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","AbsentEntry","Drain","Entry","ExtractIf","HashTable","IntoIter","Iter","IterMut","Occupied","OccupiedEntry","Vacant","VacantEntry","allocator","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","default","drain","entry","extract_if","find","find_entry","find_mut","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","get","get_many_mut","get_many_unchecked_mut","get_mut","insert","insert","insert_unique","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","into_table","into_table","into_table","is_empty","iter","iter_mut","len","len","len","len","len","new","new_in","next","next","next","next","next","or_insert","or_insert_with","remove","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in","Bucket","InsertSlot","RawDrain","RawIntoIter","RawIter","RawIterHash","RawTable","allocation_info","allocator","as_mut","as_ptr","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","bucket_index","buckets","capacity","clear","clear_no_drop","clone","clone","clone","clone_from","clone_from_with_hasher","clone_into","clone_into","clone_into","copy_from_nonoverlapping","data_end","data_start","default","drain","drain_iter_from","drop","drop","drop","erase","erase_entry","find","find_or_find_insert_slot","fold","from","from","from","from","from","from","from","get","get_many_mut","get_many_unchecked_mut","get_mut","insert","insert_entry","insert_in_slot","insert_no_grow","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter_from","is_bucket_full","is_empty","iter","iter","iter","iter_hash","len","new","new_in","next","next","next","next","reflect_insert","reflect_remove","remove","remove_entry","replace_bucket_with","reserve","shrink_to","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert_no_grow","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_with_capacity","try_with_capacity_in","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in"],"q":[[0,"hashbrown"],[25,"hashbrown::TryReserveError"],[26,"hashbrown::hash_map"],[436,"hashbrown::hash_set"],[658,"hashbrown::hash_table"],[812,"hashbrown::raw"],[947,"core::fmt"],[948,"core::fmt"],[949,"core::any"],[950,"core::ops::function"],[951,"core::marker"],[952,"core::clone"],[953,"core::cmp"],[954,"core::hash"],[955,"core::hash"],[956,"core::cmp"],[957,"core::ops::function"],[958,"core::option"],[959,"core::convert"],[960,"core::ops::function"],[961,"alloc::borrow"],[962,"core::ptr::non_null"],[963,"core::alloc::layout"]],"d":["The memory allocator returned an error","Error due to the computed capacity exceeding the collection…","Key equivalence trait.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","Low-level hash table with explicit hashing.","The error type for <code>try_reserve</code> methods.","","","","","","Checks if this value is equivalent to the given key.","","","Returns the argument unchanged.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A hash table implemented with quadratic probing and SIMD …","Calls <code>U::from(self)</code>.","Experimental and unsafe <code>RawTable</code> API. This module is only …","","","","","The layout of the allocation request that failed.","Dummy default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code> in …","A view into a single entry in a map, which may either be …","A view into a single entry in a map, which may either be …","A draining iterator over entries of a <code>HashMap</code> which don’…","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code> in …","An owning iterator over the keys of a <code>HashMap</code> in arbitrary …","An owning iterator over the values of a <code>HashMap</code> in …","An iterator over the entries of a <code>HashMap</code> in arbitrary …","A mutable iterator over the entries of a <code>HashMap</code> in …","An iterator over the keys of a <code>HashMap</code> in arbitrary order. …","An occupied entry.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","A builder for computing where in a <code>HashMap</code> a key-value …","A builder for computing where in a <code>HashMap</code> a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A vacant entry.","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","An iterator over the values of a <code>HashMap</code> in arbitrary …","A mutable iterator over the values of a <code>HashMap</code> in …","Returns a reference to the underlying allocator.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the specified …","Creates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …","Clears the map, returning all key-value pairs as an …","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","Gets the given key’s corresponding entry by reference in …","","","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","Drains elements which are true under the given predicate, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>RawEntryMut</code> from the given hash and matching …","Access an immutable entry by hash and matching function.","","Creates a <code>RawEntryMut</code> from the given key.","Access an immutable entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an immutable entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the entry.","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntryRef’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s old …","Insert a key-value pair into the map without checking if …","Set the value of an entry with a custom hasher function.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a consuming iterator, that is, one that moves each …","Creates an iterator over the entries of a <code>HashMap</code> in …","Creates an iterator over the entries of a <code>HashMap</code> in …","","","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to the …","Creates a consuming iterator visiting all the keys in …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntryRef into a mutable reference to …","Creates a consuming iterator visiting all the values in …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Returns a reference to the <code>RawTable</code> used underneath <code>HashMap</code>…","Returns a mutable reference to the <code>RawTable</code> used …","Removes a key from the map, returning the value at the key …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it. Keeps …","Takes the value out of the entry, and returns it. Keeps …","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map. …","Take the ownership of the key and value from the map. …","Replaces the entry, returning the old key and value. The …","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate. …","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary order.","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> which will use the given hash …","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A view into a single entry in a set, which may either be …","A draining iterator over entries of a <code>HashSet</code> which don’…","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","An occupied entry.","A view into an occupied entry in a <code>HashSet</code>. It is part of …","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","A vacant entry.","A view into a vacant entry in a <code>HashSet</code>. It is part of the …","Returns a reference to the underlying allocator.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Gets the given value’s corresponding entry in the set …","","","","","Drains elements which are true under the given predicate, …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value in the set, if any, that …","Returns a reference to this entry’s value.","Gets a reference to the value in the entry.","Gets a reference to the value that would be used when …","Inserts the given <code>value</code> into the set if it is not present, …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry with the VacantEntry’s value.","Insert a value the set without checking if the value …","Visits the values representing the intersection, i.e., the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","Take ownership of the value.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","","","","","","","","","Ensures a value is in the entry by inserting if it was …","Returns a reference to the <code>RawTable</code> used underneath <code>HashSet</code>…","Returns a mutable reference to the <code>RawTable</code> used …","Removes a value from the set. Returns whether the value was","Takes the value out of the entry, and returns it. Keeps …","Adds a value to the set, replacing the existing value, if …","Replaces the entry, returning the old value. The new value …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates a new empty hash set which will use the given …","Creates a new empty hash set which will use the given …","Type representing the absence of an entry, as returned by …","A draining iterator over the items of a <code>HashTable</code>.","A view into a single entry in a table, which may either be …","A draining iterator over entries of a <code>HashTable</code> which don…","Low-level hash table with explicit hashing.","An owning iterator over the entries of a <code>HashTable</code> in …","An iterator over the entries of a <code>HashTable</code> in arbitrary …","A mutable iterator over the entries of a <code>HashTable</code> in …","An occupied entry.","A view into an occupied entry in a <code>HashTable</code>. It is part …","A vacant entry.","A view into a vacant entry in a <code>HashTable</code>. It is part of …","Returns a reference to the underlying allocator.","Provides in-place mutable access to an occupied entry …","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the table can hold without …","Clears the table, removing all values.","","","","Clears the set, returning all elements in an iterator.","Returns an <code>Entry</code> for an entry in the table with the given …","Drains elements which are true under the given predicate, …","Returns a reference to an entry in the table with the …","Returns an <code>OccupiedEntry</code> for an entry in the table with …","Returns a mutable reference to an entry in the table with …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the value in the entry.","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Gets a mutable reference to the value in the entry.","Sets the value of the entry, replacing any existing value …","Inserts a new element into the table with the hash that …","Inserts an element into the <code>HashTable</code> with the given hash …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Converts the VacantEntry into a mutable reference to the …","Converts the AbsentEntry into a mutable reference to the …","Returns <code>true</code> if the set contains no elements.","An iterator visiting all elements in arbitrary order. The …","An iterator visiting all elements in arbitrary order, with …","Returns the number of elements in the table.","","","","","Creates an empty <code>HashTable</code>.","Creates an empty <code>HashTable</code> using the given allocator.","","","","","","Ensures a value is in the entry by inserting if it was …","Ensures a value is in the entry by inserting the result of …","Takes the value out of the entry, and returns it along …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the table with a lower limit. It …","Shrinks the capacity of the table as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","Creates an empty <code>HashTable</code> with the specified capacity.","Creates an empty <code>HashTable</code> with the specified capacity …","A reference to a hash table bucket containing a <code>T</code>.","A reference to an empty bucket into which an can be …","Iterator which consumes elements without freeing the table …","Iterator which consumes a table and returns elements.","Iterator which returns a raw pointer to every full bucket …","Iterator over occupied buckets that could match a given …","A raw hash table with an unsafe API.","Return the information about memory allocated by the table.","Returns a reference to the underlying allocator.","Returns a unique mutable reference to the <code>value</code>.","Acquires the underlying raw pointer <code>*mut T</code> to <code>data</code>.","Returns a shared immutable reference to the <code>value</code>.","","","","","","","","","","","","","","","Returns a pointer to an element in the table.","Returns the index of a bucket from a <code>Bucket</code>.","Returns the number of buckets in the table.","Returns the number of elements the map can hold without …","Removes all elements from the table without freeing the …","Marks all table buckets as empty without dropping their …","","","","","Variant of <code>clone_from</code> to use when a hasher is available.","","","","Copies <code>size_of&lt;T&gt;</code> bytes from <code>other</code> to <code>self</code>. The source and …","Returns pointer to one past last <code>data</code> element in the the …","Returns pointer to start of data table.","","Returns an iterator which removes all elements from the …","Returns an iterator which removes all elements from the …","","","","Erases an element from the table, dropping it in place.","Finds and erases an element from the table, dropping it in …","Searches for an element in the table.","Searches for an element in the table. If the element is …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to an element in the table.","Attempts to get mutable references to <code>N</code> entries in the …","","Gets a mutable reference to an element in the table.","Inserts a new element into the table, and returns its raw …","Inserts a new element into the table, and returns a …","Inserts a new element into the table in the given slot, …","Inserts a new element into the table, without growing the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns an iterator which consumes all elements from the …","Checks whether the bucket at <code>index</code> is full.","Returns <code>true</code> if the table contains no elements.","Returns an iterator over every element in the table. It is …","","","Returns an iterator over occupied buckets that could match …","Returns the number of elements in the table.","Creates a new empty hash table without allocating any …","Creates a new empty hash table without allocating any …","","","","","Refresh the iterator so that it reflects an insertion into …","Refresh the iterator so that it reflects a removal from …","Removes an element from the table, returning it.","Finds and removes an element from the table, returning it.","Temporary removes a bucket, applying the given function to …","Ensures that at least <code>additional</code> items can be inserted …","Shrinks the table to fit <code>max(self.len(), min_size)</code> …","","","","","","","","","","","","","","Attempts to insert a new element without growing the table …","","","","","","","","Tries to ensure that at least <code>additional</code> items can be …","Attempts to allocate a new hash table with at least enough …","Attempts to allocate a new hash table using the given …","","","","","","","","Allocates a new hash table with at least enough capacity …","Allocates a new hash table using the given allocator, with …"],"i":[1,1,0,0,0,0,0,1,1,1,1,1,22,1,1,1,0,0,0,1,0,1,1,1,1,85,0,0,0,0,0,0,0,0,0,0,0,0,9,11,12,0,0,0,0,0,0,0,0,9,11,12,0,0,0,0,8,9,11,12,9,11,12,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,8,8,8,16,17,18,8,8,16,17,18,8,8,8,8,45,8,8,8,8,8,8,8,8,16,31,32,33,34,17,18,24,35,36,9,37,38,39,11,40,41,12,43,44,45,45,16,31,32,33,34,17,18,24,35,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,36,39,8,36,39,36,39,8,37,40,43,8,37,8,37,8,8,8,8,8,37,40,43,8,8,8,9,37,38,11,40,41,12,43,44,38,37,8,38,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,8,8,8,16,31,32,33,34,17,18,24,28,35,37,41,44,37,8,37,40,43,8,8,8,8,37,11,40,41,12,43,44,37,8,8,16,31,32,33,34,17,18,24,35,16,31,32,33,34,17,18,24,28,35,11,12,9,11,12,9,11,12,11,12,8,8,8,8,8,37,40,43,8,37,40,43,40,43,37,40,43,40,43,8,8,8,8,16,31,32,33,34,17,18,24,28,35,8,16,17,18,45,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,8,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,8,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,45,8,8,8,8,8,8,0,0,0,0,0,0,0,0,60,0,0,0,60,0,53,53,53,53,53,54,62,59,61,55,56,57,58,60,63,64,53,54,62,59,61,55,56,57,58,60,63,64,53,53,53,54,55,56,57,58,53,53,54,55,56,57,58,53,53,53,53,53,53,53,53,53,53,53,54,62,59,55,56,57,58,60,63,64,54,62,59,55,56,57,58,53,53,54,62,59,61,55,56,57,58,60,63,64,53,53,60,63,64,53,53,53,53,53,60,64,53,53,53,54,62,59,61,55,56,57,58,60,63,64,53,53,54,62,59,61,55,56,57,58,64,53,53,53,53,53,53,54,62,59,54,62,59,61,55,56,57,58,60,53,53,53,63,53,63,53,53,53,53,54,62,59,61,55,56,57,58,53,53,53,53,54,55,56,57,58,53,54,62,59,61,55,56,57,58,60,63,64,53,54,62,59,61,55,56,57,58,60,63,64,53,53,54,62,59,61,55,56,57,58,60,63,64,53,53,53,53,53,0,0,0,0,0,0,0,0,67,0,67,0,66,67,66,67,70,72,71,73,74,75,68,69,66,67,70,72,71,73,74,75,68,69,66,66,66,66,66,66,66,66,66,66,66,66,67,70,72,71,68,73,74,75,66,67,70,72,71,73,74,75,68,69,70,66,66,70,67,72,66,66,67,70,72,71,73,74,75,68,69,66,66,66,73,74,75,68,69,70,70,72,71,66,66,66,66,73,74,75,68,66,66,73,74,75,68,69,67,67,70,66,66,66,66,73,74,75,68,69,66,66,67,70,72,71,73,74,75,68,69,66,67,70,72,71,73,74,75,68,69,66,66,67,70,72,71,73,74,75,68,69,66,66,0,0,0,0,0,0,0,51,51,79,79,79,83,79,51,80,82,81,84,83,79,51,80,82,81,84,51,51,51,51,51,51,79,51,80,51,51,79,51,80,79,51,51,51,51,51,51,82,81,51,51,51,51,80,83,79,51,80,82,81,84,51,51,51,51,51,51,51,51,83,79,51,80,82,81,84,51,80,82,81,84,51,51,51,51,82,81,51,51,51,51,80,82,81,84,80,80,51,51,51,51,51,80,82,81,79,51,80,83,79,51,80,82,81,84,51,83,79,51,80,82,81,84,51,51,51,83,79,51,80,82,81,84,51,51],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,4],5],[-1,-1,[]],0,0,0,[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[8,[-1,-2,-3,-4]]],-4,[],[],[],0],[[[9,[-1,-2,-3,-4]],-5],[[9,[-1,-2,-3,-4]]],[],[],[],0,10],[[[11,[-1,-2,-3,-4]],-5],[[11,[-1,-2,-3,-4]]],[],[],[],0,10],[[[12,[-1,-2,-3,-4,-5]],-6],[[12,[-1,-2,-3,-4,-5]]],[],13,[],[],0,10],[[[9,[-1,-2,-3,-4]],-5],[[9,[-1,-2,-3,-4]]],[],[],[],0,10],[[[11,[-1,-2,-3,-4]],-5],[[11,[-1,-2,-3,-4]]],[],[],[],0,10],[[[12,[-1,-2,-3,-4,-5]],-6],[[12,[-1,-2,-3,-4,-5]]],[],13,[],[],0,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1,-2,-3,-4]]],14,[],[],[],0],[[[8,[-1,-2,-3,-4]]],2,[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[8,[-1,-2,-3,-4]]],15,15,15,[0,15]],[[[16,[-1,-2]]],[[16,[-1,-2]]],[],[]],[[[17,[-1,-2]]],[[17,[-1,-2]]],[],[]],[[[18,[-1,-2]]],[[18,[-1,-2]]],[],[]],[[[8,[-1,-2,-3,-4]],[8,[-1,-2,-3,-4]]],2,15,15,15,[0,15]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[8,[-1,-2,-3,-4]],-5],3,[19,20],[],21,0,[20,[22,[-1]],13]],[[],[[8,[-1,-2,-3,-4]]],[],[],23,[23,0]],[[[8,[-1,-2,-3,-4]]],[[24,[-1,-2,-4]]],[],[],[],0],[[[8,[-1,-2,-3,-4]],-1],[[11,[-1,-2,-3,-4]]],[19,20],[],21,0],0,[[[8,[-1,-2,-3,-4]],-5],[[12,[-1,-5,-2,-3,-4]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],[8,[-1,-2,-3,-4]]],3,[19,20],25,21,0],[[-1,-2],3,[],[]],[[[8,[-1,-2,-3,-4]],-5],2,[19,20,26],26,21,0,27],[[[8,[-1,-2,-3,-4]],-5],2,[19,20,26],26,21,0,27],[[[8,[-1,-2,-3,-4]],-5],2,[19,20],[],21,0,27],[[[8,[-1,-2,-3,-4]],-5],[[28,[-1,-2,-5,-4]]],[],[],[],0,29],[[[8,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[16,[-1,-2]],4],5,30,30],[[[31,[-1,-2]],4],5,30,30],[[[32,[-1,-2,-3]],4],5,30,30,0],[[[33,[-1,-2,-3]],4],5,30,30,0],[[[34,[-1,-2,-3]],4],5,[],30,0],[[[17,[-1,-2]],4],5,30,[]],[[[18,[-1,-2]],4],5,[],30],[[[24,[-1,-2,-3]],4],5,30,30,0],[[[35,[-1,-2]],4],5,[],30],[[[36,[-1,-2,-3,-4]],4],5,[],[],[],0],[[[9,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[37,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[38,[-1,-2,-3,-4]],4],5,[],[],[],0],[[[39,[-1,-2,-3,-4]],4],5,[],[],[],0],[[[11,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[40,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[41,[-1,-2,-3,-4]],4],5,30,[],[],0],[[[12,[-2,-1,-3,-4,-5]],4],5,[13,30],[[42,[-1]]],30,[],0],[[[43,[-2,-1,-3,-4,-5]],4],5,[13,30],[[42,[-1]]],30,[],0],[[[44,[-2,-1,-3,-4,-5]],4],5,[13,30],[[42,[-1]]],[],[],0],[[[45,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[45,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[16,[-1,-2]],-3,-4],-3,[],[],[],29],[[[31,[-1,-2]],-3,-4],-3,[],[],[],29],[[[32,[-1,-2,-3]],-4,-5],-4,[],[],0,[],29],[[[33,[-1,-2,-3]],-4,-5],-4,[],[],0,[],29],[[[34,[-1,-2,-3]],-4,-5],-4,[],[],0,[],29],[[[17,[-1,-2]],-3,-4],-3,[],[],[],29],[[[18,[-1,-2]],-3,-4],-3,[],[],[],29],[[[24,[-1,-2,-3]],-4,-5],-4,[],[],0,[],29],[[[35,[-1,-2]],-3,-4],-3,[],[],[],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[36,[-1,-2,-3,-4]],46,-5],[[9,[-1,-2,-3,-4]]],[],[],[],0,29],[[[39,[-1,-2,-3,-4]],46,-5],[[47,[[2,[-1,-2]]]]],[],[],[],0,29],[-1,[[8,[-2,-3,-4,-5]]],27,[19,20],[],[21,23],[23,0]],[[[36,[-1,-2,-3,-4]],-5],[[9,[-1,-2,-3,-4]]],[],[],21,0,[20,[22,[-1]],13]],[[[39,[-1,-2,-3,-4]],-5],[[47,[[2,[-1,-2]]]]],[],[],21,0,[20,[22,[-1]],13]],[[[36,[-1,-2,-3,-4]],46,-5],[[9,[-1,-2,-3,-4]]],[],[],[],0,[[22,[-1]],13]],[[[39,[-1,-2,-3,-4]],46,-5],[[47,[[2,[-1,-2]]]]],[],[],[],0,[[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],-5],[[47,[-2]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[37,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[40,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[43,[-1,-2,-3,-4,-5]]],-3,[],13,[],[],0],[[[8,[-1,-2,-3,-4]],-5],[[47,[[2,[-1,-2]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[37,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]],-5],[[47,[[2,[-1,-2]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[37,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]],[48,[-5]]],[[47,[[48,[[2,[-1,-2]]]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],[48,[-5]]],[[47,[[48,[[2,[-1,-2]]]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],[48,[-5]]],[[47,[[48,[-2]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],[48,[-5]]],[[47,[[48,[-2]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],-5],[[47,[-2]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[37,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[40,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[43,[-1,-2,-3,-4,-5]]],-3,[],13,[],[],0],[[[8,[-1,-2,-3,-4]]],-3,[],[],[],0],[[[8,[-1,-2,-3,-4]],-5],-2,[19,20],[],21,0,[20,[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],-1,-2],[[47,[-2]]],[19,20],[],21,0],[[[9,[-1,-2,-3,-4]],-1,-2],[[37,[-1,-2,-3,-4]]],20,[],21,0],[[[37,[-1,-2,-3,-4]],-2],-2,[],[],[],0],[[[38,[-1,-2,-3,-4]],-1,-2],[[2,[-1,-2]]],20,[],21,0],[[[11,[-1,-2,-3,-4]],-2],[[40,[-1,-2,-3,-4]]],20,[],21,0],[[[40,[-1,-2,-3,-4]],-2],-2,[],[],[],0],[[[41,[-1,-2,-3,-4]],-2],-2,20,[],21,0],[[[12,[-2,-1,-3,-4,-5]],-3],[[43,[-2,-1,-3,-4,-5]]],13,[20,[49,[-1]]],[],21,0],[[[43,[-1,-2,-3,-4,-5]],-3],-3,[],13,[],[],0],[[[44,[-2,-1,-3,-4,-5]],-3],-3,13,[20,[49,[-1]]],[],21,0],[[[38,[-1,-2,-3,-4]],46,-1,-2],[[2,[-1,-2]]],20,[],21,0],[[[37,[-1,-2,-3,-4]],-1],-1,[],[],[],0],[[[8,[-1,-2,-3,-4]],-1,-2],[[2,[-1,-2]]],[19,20],[],21,0],[[[38,[-1,-2,-3,-4]],46,-1,-2,-5],[[2,[-1,-2]]],[],[],[],0,50],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1,-2,-3,-4]]],[[32,[-1,-2,-4]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[16,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[31,[-1,-2]]],[],[],[],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[41,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[44,[-2,-1,-3,-4,-5]]],-2,13,[[49,[-1]]],[],[],0],[[[37,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[33,[-1,-2,-4]]],[],[],[],0],[[[37,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[40,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[43,[-1,-2,-3,-4,-5]]],-3,[],13,[],[],0],[[[8,[-1,-2,-3,-4]]],[[34,[-1,-2,-4]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],3,[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[16,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[31,[-1,-2]]],[],[],[],0],[[[37,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[11,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[40,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[41,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[12,[-2,-1,-3,-4,-5]]],-1,13,[[42,[-1]]],[],[],0],[[[43,[-1,-2,-3,-4,-5]]],-1,[],13,[],[],0],[[[44,[-2,-1,-3,-4,-5]]],-1,13,[[42,[-1]]],[],[],0],[[[37,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[17,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],14,[],[],[],0],[[[16,[-1,-2]]],14,[],[]],[[[31,[-1,-2]]],14,[],[]],[[[32,[-1,-2,-3]]],14,[],[],0],[[[33,[-1,-2,-3]]],14,[],[],0],[[[34,[-1,-2,-3]]],14,[],[],0],[[[17,[-1,-2]]],14,[],[]],[[[18,[-1,-2]]],14,[],[]],[[[24,[-1,-2,-3]]],14,[],[],0],[[[35,[-1,-2]]],14,[],[]],[[[16,[-1,-2]]],[[47,[[2,[-1,-2]]]]],[],[]],[[[31,[-1,-2]]],[[47,[[2,[-1,-2]]]]],[],[]],[[[32,[-1,-2,-3]]],[[47,[[2,[-1,-2]]]]],[],[],0],[[[33,[-1,-2,-3]]],[[47,[-1]]],[],[],0],[[[34,[-1,-2,-3]]],[[47,[-2]]],[],[],0],[[[17,[-1,-2]]],[[47,[-1]]],[],[]],[[[18,[-1,-2]]],[[47,[-2]]],[],[]],[[[24,[-1,-2,-3]]],[[47,[[2,[-1,-2]]]]],[],[],0],[[[28,[-1,-2,-3,-4]]],47,[],[],29,0],[[[35,[-1,-2]]],[[47,[-2]]],[],[]],[[[11,[-1,-2,-3,-4]]],-2,20,23,21,0],[[[12,[-2,-1,-3,-4,-5]]],-3,13,[20,[49,[-1]]],23,21,0],[[[9,[-1,-2,-3,-4]],-1,-2],[[2,[-1,-2]]],20,[],21,0],[[[11,[-1,-2,-3,-4]],-2],-2,20,[],21,0],[[[12,[-2,-1,-3,-4,-5]],-3],-3,13,[20,[49,[-1]]],[],21,0],[[[9,[-1,-2,-3,-4]],-5],[[2,[-1,-2]]],20,[],21,0,10],[[[11,[-1,-2,-3,-4]],-5],-2,20,[],21,0,10],[[[12,[-2,-1,-3,-4,-5]],-6],-3,13,[20,[49,[-1]]],[],21,0,10],[[[11,[-1,-2,-3,-4]],-5],-2,20,[],21,0,10],[[[12,[-2,-1,-3,-4,-5]],-6],-3,13,[20,[42,[-1]],[49,[-1]]],[],21,0,10],[[[8,[-1,-2,-3,-4]]],[[39,[-1,-2,-3,-4]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[36,[-1,-2,-3,-4]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[51,[[2,[-1,-2]],-4]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[51,[[2,[-1,-2]],-4]]],[],[],[],0],[[[8,[-1,-2,-3,-4]],-5],[[47,[-2]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[37,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[40,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[43,[-1,-2,-3,-4,-5]]],-3,[],13,[],[],0],[[[8,[-1,-2,-3,-4]],-5],[[47,[[2,[-1,-2]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[37,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],0],[[[40,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],0],[[[43,[-1,-2,-3,-4,-5]]],[[2,[-1,-3]]],[],13,[],[],0],[[[40,[-1,-2,-3,-4]],-2],[[2,[-1,-2]]],[],[],[],0],[[[43,[-2,-1,-3,-4,-5]],-3],[[2,[-2,-3]]],13,[[49,[-1]]],[],[],0],[[[37,[-1,-2,-3,-4]],-5],[[9,[-1,-2,-3,-4]]],[],[],[],0,10],[[[40,[-1,-2,-3,-4]],-5],[[11,[-1,-2,-3,-4]]],[],[],[],0,10],[[[43,[-1,-2,-3,-4,-5]],-6],[[12,[-1,-2,-3,-4,-5]]],[],13,[],[],0,10],[[[40,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[43,[-2,-1,-3,-4,-5]]],-2,13,[[49,[-1]]],[],[],0],[[[8,[-1,-2,-3,-4]],14],2,[19,20],[],21,0],[[[8,[-1,-2,-3,-4]],-5],2,[],[],[],0,29],[[[8,[-1,-2,-3,-4]],14],2,[19,20],[],21,0],[[[8,[-1,-2,-3,-4]]],2,[19,20],[],21,0],[[[16,[-1,-2]]],[[2,[14,[47,[14]]]]],[],[]],[[[31,[-1,-2]]],[[2,[14,[47,[14]]]]],[],[]],[[[32,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[],[],0],[[[33,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[],[],0],[[[34,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[],[],0],[[[17,[-1,-2]]],[[2,[14,[47,[14]]]]],[],[]],[[[18,[-1,-2]]],[[2,[14,[47,[14]]]]],[],[]],[[[24,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[],[],0],[[[28,[-1,-2,-3,-4]]],[[2,[14,[47,[14]]]]],[],[],29,0],[[[35,[-1,-2]]],[[2,[14,[47,[14]]]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,52,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[8,[-1,-2,-3,-4]],-1,-2],[[6,[-2,[45,[-1,-2,-3,-4]]]]],[19,20],[],21,0],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[8,[-1,-2,-3,-4]],14],[[6,[2,1]]],[19,20],[],21,0],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],0,[[[8,[-1,-2,-3,-4]]],[[18,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[35,[-1,-2]]],[],[],[],0],[[14,-1],[[8,[-2,-3,-1]]],[],[],[]],[[14,-1,-2],[[8,[-3,-4,-1,-2]]],[],0,[],[]],[-1,[[8,[-2,-3,-1]]],[],[],[]],[[-1,-2],[[8,[-3,-4,-1,-2]]],[],0,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[53,[-1,-2,-3]]],-3,[],[],0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],[[53,[-1,-2]]],[19,20,15],[21,23],0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],[[53,[-1,-2]]],[19,20,15],[21,23],0],[[[53,[-1,-2]],[53,[-1,-2]]],[[53,[-1,-2]]],[19,20,15],[21,23]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1,-2,-3]]],14,[],[],0],[[[53,[-1,-2,-3]]],2,[],[],0],[[[53,[-1,-2,-3]]],[[53,[-1,-2,-3]]],15,15,[0,15]],[[[54,[-1]]],[[54,[-1]]],[]],[[[55,[-1,-2,-3]]],[[55,[-1,-2,-3]]],[],[],0],[[[56,[-1,-2,-3]]],[[56,[-1,-2,-3]]],[],[],0],[[[57,[-1,-2,-3]]],[[57,[-1,-2,-3]]],[],[],0],[[[58,[-1,-2,-3]]],[[58,[-1,-2,-3]]],[],[],0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],2,15,15,[0,15]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[53,[-1,-2,-3]],-4],3,[19,20],21,0,[20,[22,[-1]],13]],[[],[[53,[-1,-2,-3]]],[],23,[23,0]],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],[[56,[-1,-2,-3]]],[19,20],21,0],[[[53,[-1,-2,-3]]],[[59,[-1,-3]]],[],[],0],[[[53,[-1,-2,-3]],-1],[[60,[-1,-2,-3]]],[19,20],21,0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],3,[19,20],21,0],[[-1,-2],3,[],[]],[[[53,[-1,-2,-3]],-4],2,[19,20,26],21,0,27],[[[53,[-1,-2,-3]],-4],2,[19,20],21,0,27],[[[53,[-1,-2,-3]],-4],[[61,[-1,-4,-3]]],[],[],0,29],[[[53,[-1,-2,-3]],4],5,30,[],0],[[[54,[-1]],4],5,30],[[[62,[-1,-2]],4],5,30,0],[[[59,[-1,-2]],4],5,30,0],[[[55,[-1,-2,-3]],4],5,[30,19,20],21,0],[[[56,[-1,-2,-3]],4],5,[30,19,20],21,0],[[[57,[-1,-2,-3]],4],5,[30,19,20],21,0],[[[58,[-1,-2,-3]],4],5,[30,19,20],21,0],[[[60,[-1,-2,-3]],4],5,30,[],0],[[[63,[-1,-2,-3]],4],5,30,[],0],[[[64,[-1,-2,-3]],4],5,30,[],0],[[[54,[-1]],-2,-3],-2,[],[],29],[[[62,[-1,-2]],-3,-4],-3,[],0,[],29],[[[59,[-1,-2]],-3,-4],-3,[],0,[],29],[[[55,[-1,-2,-3]],-4,-5],-4,[19,20],21,0,[],29],[[[56,[-1,-2,-3]],-4,-5],-4,[19,20],21,0,[],29],[[[57,[-1,-2,-3]],-4,-5],-4,[19,20],21,0,[],29],[[[58,[-1,-2,-3]],-4,-5],-4,[19,20],21,0,[],29],[-1,-1,[]],[[[8,[-1,2,-2,-3]]],[[53,[-1,-2,-3]]],[],[],0],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[53,[-2,-3,-4]]],27,[19,20],[21,23],[23,0]],[[[53,[-1,-2,-3]],-4],[[47,[-1]]],[19,20],21,0,[20,[22,[-1]],13]],[[[60,[-1,-2,-3]]],-1,[],[],0],[[[63,[-1,-2,-3]]],-1,[],[],0],[[[64,[-1,-2,-3]]],-1,[],[],0],[[[53,[-1,-2,-3]],-1],-1,[19,20],21,0],[[[53,[-1,-2,-3]],-4],-1,[19,20],21,0,[20,[22,[-1]],65,13]],[[[53,[-1,-2,-3]],-4,-5],-1,[19,20],21,0,[20,[22,[-1]],13],10],[[[53,[-1,-2,-3]]],-2,[],[],0],[[[53,[-1,-2,-3]],-1],3,[19,20],21,0],[[[60,[-1,-2,-3]]],[[63,[-1,-2,-3]]],20,21,0],[[[64,[-1,-2,-3]]],2,20,21,0],[[[53,[-1,-2,-3]],-1],-1,[19,20],21,0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],[[55,[-1,-2,-3]]],[19,20],21,0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1,-2,-3]]],[[54,[-1]]],[],[],0],[[[53,[-1,-2,-3]]],[[62,[-1,-3]]],[],[],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[64,[-1,-2,-3]]],-1,[],[],0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],3,[19,20],21,0],[[[53,[-1,-2,-3]]],3,[],[],0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],3,[19,20],21,0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],3,[19,20],21,0],[[[53,[-1,-2,-3]]],[[54,[-1]]],[],[],0],[[[53,[-1,-2,-3]]],14,[],[],0],[[[54,[-1]]],14,[]],[[[62,[-1,-2]]],14,[],0],[[[59,[-1,-2]]],14,[],0],[[[54,[-1]]],[[47,[-1]]],[]],[[[62,[-1,-2]]],[[47,[-1]]],[],0],[[[59,[-1,-2]]],[[47,[-1]]],[],0],[[[61,[-1,-2,-3]]],47,[],29,0],[[[55,[-1,-2,-3]]],[[47,[-1]]],[19,20],21,0],[[[56,[-1,-2,-3]]],[[47,[-1]]],[19,20],21,0],[[[57,[-1,-2,-3]]],[[47,[-1]]],[19,20],21,0],[[[58,[-1,-2,-3]]],[[47,[-1]]],[19,20],21,0],[[[60,[-1,-2,-3]]],2,20,21,0],[[[53,[-1,-2,-3]]],[[51,[[2,[-1,2]],-3]]],[],[],0],[[[53,[-1,-2,-3]]],[[51,[[2,[-1,2]],-3]]],[],[],0],[[[53,[-1,-2,-3]],-4],3,[19,20],21,0,[20,[22,[-1]],13]],[[[63,[-1,-2,-3]]],-1,[],[],0],[[[53,[-1,-2,-3]],-1],[[47,[-1]]],[19,20],21,0],[[[63,[-1,-2,-3]]],-1,[],[],0],[[[53,[-1,-2,-3]],14],2,[19,20],21,0],[[[53,[-1,-2,-3]],-4],2,[],[],0,29],[[[53,[-1,-2,-3]],14],2,[19,20],21,0],[[[53,[-1,-2,-3]]],2,[19,20],21,0],[[[54,[-1]]],[[2,[14,[47,[14]]]]],[]],[[[62,[-1,-2]]],[[2,[14,[47,[14]]]]],[],0],[[[59,[-1,-2]]],[[2,[14,[47,[14]]]]],[],0],[[[61,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[],29,0],[[[55,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[19,20],21,0],[[[56,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[19,20],21,0],[[[57,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[19,20],21,0],[[[58,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[19,20],21,0],[[[53,[-1,-2]],[53,[-1,-2]]],[[53,[-1,-2]]],[19,20,15],[21,23]],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],[[57,[-1,-2,-3]]],[19,20],21,0],[[[53,[-1,-2,-3]],-4],[[47,[-1]]],[19,20],21,0,[20,[22,[-1]],13]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[53,[-1,-2,-3]],14],[[6,[2,1]]],[19,20],21,0],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],[[58,[-1,-2,-3]]],[19,20],21,0],[[14,-1],[[53,[-2,-1,0]]],[],[]],[[14,-1,-2],[[53,[-3,-1,-2]]],[],0,[]],[-1,[[53,[-2,-1,0]]],[],[]],[[-1,-2],[[53,[-3,-1,-2]]],[],0,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[[66,[-1,-2]]],-2,[],0],[[[67,[-1,-2]],-3],[[67,[-1,-2]]],[],0,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[66,[-1,-2]]],14,[],0],[[[66,[-1,-2]]],2,[],0],[[[66,[-1,-2]]],[[66,[-1,-2]]],15,[0,15]],[[-1,-2],2,[],[]],[[],[[66,[-1,-2]]],[],[0,23]],[[[66,[-1,-2]]],[[68,[-1,-2]]],[],0],[[[66,[-1,-2]],46,-3,-4],[[67,[-1,-2]]],[],0,29,50],[[[66,[-1,-2]],-3],[[69,[-1,-3,-2]]],[],0,29],[[[66,[-1,-2]],46,-3],[[47,[-1]]],[],0,29],[[[66,[-1,-2]],46,-3],[[6,[[70,[-1,-2]],[71,[-1,-2]]]]],[],0,29],[[[66,[-1,-2]],46,-3],[[47,[-1]]],[],0,29],[[[66,[-1,-2]],4],5,30,0],[[[67,[-1,-2]],4],5,30,0],[[[70,[-1,-2]],4],5,30,0],[[[72,[-1,-2]],4],5,30,0],[[[71,[-1,-2]],4],5,30,0],[[[68,[-1,-2]],4],5,30,0],[[[73,[-1]],-2,-3],-2,[],[],29],[[[74,[-1]],-2,-3],-2,[],[],29],[[[75,[-1,-2]],-3,-4],-3,[],0,[],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[70,[-1,-2]]],-1,[],0],[[[66,[-1,-2]],[48,[46]],-3],[[47,[[48,[-1]]]]],[],0,29],[[[66,[-1,-2]],[48,[46]],-3],[[47,[[48,[-1]]]]],[],0,29],[[[70,[-1,-2]]],-1,[],0],[[[67,[-1,-2]],-1],[[70,[-1,-2]]],[],0],[[[72,[-1,-2]],-1],[[70,[-1,-2]]],[],0],[[[66,[-1,-2]],46,-1,-3],[[70,[-1,-2]]],[],0,50],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[66,[-1,-2]]],[[74,[-1]]],[],0],[[[66,[-1,-2]]],[[73,[-1]]],[],0],[[[66,[-1,-2]]],[[75,[-1,-2]]],[],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[70,[-1,-2]]],-1,[],0],[[[70,[-1,-2]]],[[66,[-1,-2]]],[],0],[[[72,[-1,-2]]],[[66,[-1,-2]]],[],0],[[[71,[-1,-2]]],[[66,[-1,-2]]],[],0],[[[66,[-1,-2]]],3,[],0],[[[66,[-1,-2]]],[[73,[-1]]],[],0],[[[66,[-1,-2]]],[[74,[-1]]],[],0],[[[66,[-1,-2]]],14,[],0],[[[73,[-1]]],14,[]],[[[74,[-1]]],14,[]],[[[75,[-1,-2]]],14,[],0],[[[68,[-1,-2]]],14,[],0],[[],[[66,[-1,0]]],[]],[-1,[[66,[-2,-1]]],0,[]],[[[73,[-1]]],47,[]],[[[74,[-1]]],47,[]],[[[75,[-1,-2]]],47,[],0],[[[68,[-1,-2]]],[[47,[-1]]],[],0],[[[69,[-1,-2,-3]]],47,[],29,0],[[[67,[-1,-2]],-1],[[70,[-1,-2]]],[],0],[[[67,[-1,-2]],-3],[[70,[-1,-2]]],[],0,10],[[[70,[-1,-2]]],[[2,[-1,[72,[-1,-2]]]]],[],0],[[[66,[-1,-2]],14,-3],2,[],0,50],[[[66,[-1,-2]],-3],2,[],0,29],[[[66,[-1,-2]],14,-3],2,[],0,50],[[[66,[-1,-2]],-3],2,[],0,50],[[[73,[-1]]],[[2,[14,[47,[14]]]]],[]],[[[74,[-1]]],[[2,[14,[47,[14]]]]],[]],[[[75,[-1,-2]]],[[2,[14,[47,[14]]]]],[],0],[[[68,[-1,-2]]],[[2,[14,[47,[14]]]]],[],0],[[[69,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[],29,0],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[66,[-1,-2]],14,-3],[[6,[2,1]]],[],0,50],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[14,[[66,[-1,0]]],[]],[[14,-1],[[66,[-2,-1]]],0,[]],0,0,0,0,0,0,0,[[[51,[-1,-2]]],[[2,[[77,[76]],78]]],[],0],[[[51,[-1,-2]]],-2,[],0],[[[79,[-1]]],-1,[]],[[[79,[-1]]],[],[]],[[[79,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1,-2]],14],[[79,[-1]]],[],0],[[[51,[-1,-2]],[79,[-1]]],14,[],0],[[[51,[-1,-2]]],14,[],0],[[[51,[-1,-2]]],14,[],0],[[[51,[-1,-2]]],2,[],0],[[[51,[-1,-2]]],2,[],0],[[[79,[-1]]],[[79,[-1]]],[]],[[[51,[-1,-2]]],[[51,[-1,-2]]],15,[0,15]],[[[80,[-1]]],[[80,[-1]]],[]],[[[51,[-1,-2]],[51,[-1,-2]]],2,15,[0,15]],[[[51,[-1,-2]],[51,[-1,-2]],-3],2,15,[0,15],50],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[79,[-1]],[79,[-1]]],2,[]],[[[51,[-1,-2]]],[[77,[-1]]],[],0],[[[51,[-1,-2]]],[[77,[-1]]],[],0],[[],[[51,[-1,-2]]],[],[0,23]],[[[51,[-1,-2]]],[[81,[-1,-2]]],[],0],[[[51,[-1,-2]],[80,[-1]]],[[81,[-1,-2]]],[],0],[[[51,[-1,-2]]],2,[],0],[[[82,[-1,-2]]],2,[],0],[[[81,[-1,-2]]],2,[],0],[[[51,[-1,-2]],[79,[-1]]],2,[],0],[[[51,[-1,-2]],46,-3],3,[],0,29],[[[51,[-1,-2]],46,-3],[[47,[[79,[-1]]]]],[],0,29],[[[51,[-1,-2]],46,-3,-4],[[6,[[79,[-1]],83]]],[],0,29,50],[[[80,[-1]],-2,-3],-2,[],[],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[51,[-1,-2]],46,-3],[[47,[-1]]],[],0,29],[[[51,[-1,-2]],[48,[46]],-3],[[47,[[48,[-1]]]]],[],0,29],[[[51,[-1,-2]],[48,[46]],-3],[[47,[[48,[-1]]]]],[],0,29],[[[51,[-1,-2]],46,-3],[[47,[-1]]],[],0,29],[[[51,[-1,-2]],46,-1,-3],[[79,[-1]]],[],0,50],[[[51,[-1,-2]],46,-1,-3],-1,[],0,50],[[[51,[-1,-2]],46,83,-1],[[79,[-1]]],[],0],[[[51,[-1,-2]],46,-1],[[79,[-1]]],[],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1,-2]]],[[82,[-1,-2]]],[],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1,-2]],[80,[-1]]],[[82,[-1,-2]]],[],0],[[[51,[-1,-2]],14],3,[],0],[[[51,[-1,-2]]],3,[],0],[[[51,[-1,-2]]],[[80,[-1]]],[],0],[[[82,[-1,-2]]],[[80,[-1]]],[],0],[[[81,[-1,-2]]],[[80,[-1]]],[],0],[[[51,[-1,-2]],46],[[84,[-1]]],[],0],[[[51,[-1,-2]]],14,[],0],[[],[[51,[-1,0]]],[]],[-1,[[51,[-2,-1]]],0,[]],[[[80,[-1]]],[[47,[[79,[-1]]]]],[]],[[[82,[-1,-2]]],[[47,[-1]]],[],0],[[[81,[-1,-2]]],[[47,[-1]]],[],0],[[[84,[-1]]],[[47,[[79,[-1]]]]],[]],[[[80,[-1]],[79,[-1]]],2,[]],[[[80,[-1]],[79,[-1]]],2,[]],[[[51,[-1,-2]],[79,[-1]]],[[2,[-1,83]]],[],0],[[[51,[-1,-2]],46,-3],[[47,[-1]]],[],0,29],[[[51,[-1,-2]],[79,[-1]],-3],3,[],0,10],[[[51,[-1,-2]],14,-3],2,[],0,50],[[[51,[-1,-2]],14,-3],2,[],0,50],[[[80,[-1]]],[[2,[14,[47,[14]]]]],[]],[[[82,[-1,-2]]],[[2,[14,[47,[14]]]]],[],0],[[[81,[-1,-2]]],[[2,[14,[47,[14]]]]],[],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[51,[-1,-2]],46,-1],[[6,[[79,[-1]],-1]]],[],0],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[51,[-1,-2]],14,-3],[[6,[2,1]]],[],0,50],[14,[[6,[[51,[-1,0]],1]]],[]],[[14,-1],[[6,[[51,[-2,-1]],1]]],0,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[14,[[51,[-1,0]]],[]],[[14,-1],[[51,[-2,-1]]],0,[]]],"c":[],"p":[[4,"TryReserveError",0],[15,"tuple"],[15,"bool"],[3,"Formatter",947],[6,"Result",947],[4,"Result",948],[3,"TypeId",949],[3,"HashMap",26],[4,"RawEntryMut",26],[8,"FnOnce",950],[4,"Entry",26],[4,"EntryRef",26],[8,"Sized",951],[15,"usize"],[8,"Clone",952],[3,"Iter",26],[3,"Keys",26],[3,"Values",26],[8,"Eq",953],[8,"Hash",954],[8,"BuildHasher",954],[8,"Equivalent",0],[8,"Default",955],[3,"Drain",26],[8,"PartialEq",953],[8,"Copy",951],[8,"IntoIterator",956],[3,"ExtractIf",26],[8,"FnMut",950],[8,"Debug",947],[3,"IterMut",26],[3,"IntoIter",26],[3,"IntoKeys",26],[3,"IntoValues",26],[3,"ValuesMut",26],[3,"RawEntryBuilderMut",26],[3,"RawOccupiedEntryMut",26],[3,"RawVacantEntryMut",26],[3,"RawEntryBuilder",26],[3,"OccupiedEntry",26],[3,"VacantEntry",26],[8,"Borrow",957],[3,"OccupiedEntryRef",26],[3,"VacantEntryRef",26],[3,"OccupiedError",26],[15,"u64"],[4,"Option",958],[15,"array"],[8,"From",959],[8,"Fn",950],[3,"RawTable",812],[3,"String",960],[3,"HashSet",436],[3,"Iter",436],[3,"Intersection",436],[3,"Difference",436],[3,"SymmetricDifference",436],[3,"Union",436],[3,"Drain",436],[4,"Entry",436],[3,"ExtractIf",436],[3,"IntoIter",436],[3,"OccupiedEntry",436],[3,"VacantEntry",436],[8,"ToOwned",961],[3,"HashTable",658],[4,"Entry",658],[3,"Drain",658],[3,"ExtractIf",658],[3,"OccupiedEntry",658],[3,"AbsentEntry",658],[3,"VacantEntry",658],[3,"Iter",658],[3,"IterMut",658],[3,"IntoIter",658],[15,"u8"],[3,"NonNull",962],[3,"Layout",963],[3,"Bucket",812],[3,"RawIter",812],[3,"RawDrain",812],[3,"RawIntoIter",812],[3,"InsertSlot",812],[3,"RawIterHash",812],[13,"AllocError",25],[4,"DefaultHashBuilder",26]]},\
"indexmap":{"doc":"<code>IndexMap</code> is a hash table where the iteration order of the …","t":"ICCDLLLLLKLLLLLLOOLAALLLLLDEDDDDDDQDINDDNDQDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Equivalent","IndexMap","IndexSet","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","indexmap","indexset","into","map","set","to_owned","to_string","try_from","try_into","type_id","Drain","Entry","IndexMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Key","Keys","MutableKeys","Occupied","OccupiedEntry","Slice","Vacant","VacantEntry","Value","Values","ValuesMut","and_modify","as_mut_slice","as_mut_slice","as_slice","as_slice","as_slice","as_slice","as_slice","binary_search_by","binary_search_by","binary_search_by_key","binary_search_by_key","binary_search_keys","binary_search_keys","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","cmp","collect","collect","collect","collect","collect","collect","collect","collect","collect","compare","contains_key","count","count","count","count","count","count","count","count","count","default","default","default","default","default","default","default","default","default","default","default","drain","entry","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","first","first","first_mut","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_full","get_full_mut","get_full_mut2","get_full_mut2","get_index","get_index","get_index_mut","get_index_mut","get_index_mut2","get_index_mut2","get_index_of","get_key_value","get_mut","get_mut","get_range","get_range","get_range_mut","get_range_mut","hash","hasher","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert","insert","insert_full","into","into","into","into","into","into","into","into","into","into","into","into","into","into_boxed_slice","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_keys","into_keys","into_mut","into_slice","into_values","into_values","is_empty","is_empty","iter","iter","iter_mut","iter_mut","key","key","key","keys","keys","last","last","last","last","last","last","last","last","last","last","last","last_mut","last_mut","len","len","len","len","len","len","len","len","len","len","len","move_index","new","new","new_mut","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","or_default","or_insert","or_insert_with","or_insert_with_key","partial_cmp","partition_point","partition_point","pop","remove","remove","remove_entry","remove_entry","reserve","reserve_exact","retain","retain2","retain2","reverse","shift_remove","shift_remove","shift_remove_entry","shift_remove_entry","shift_remove_full","shift_remove_index","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort_by","sort_by_cached_key","sort_keys","sort_unstable_by","sort_unstable_keys","sorted_by","sorted_unstable_by","split_at","split_at_mut","split_first","split_first_mut","split_last","split_last_mut","split_off","swap_indices","swap_remove","swap_remove","swap_remove_entry","swap_remove_entry","swap_remove_full","swap_remove_index","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values","values_mut","values_mut","with_capacity","with_capacity_and_hasher","with_hasher","Difference","Drain","IndexSet","Intersection","IntoIter","Iter","Slice","SymmetricDifference","Union","as_slice","as_slice","as_slice","as_slice","binary_search","binary_search","binary_search_by","binary_search_by","binary_search_by_key","binary_search_by_key","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","collect","collect","collect","compare","contains","count","count","count","default","default","default","default","difference","drain","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","first","first","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","from","from","from","from_iter","get","get_full","get_index","get_index","get_index_of","get_range","get_range","hash","hasher","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","insert","insert_full","intersection","into","into","into","into","into","into","into","into","into_boxed_slice","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_empty","is_subset","is_superset","iter","iter","last","last","last","last","last","len","len","len","len","len","move_index","new","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth_back","nth_back","nth_back","partial_cmp","partition_point","partition_point","pop","remove","replace","replace_full","reserve","reserve_exact","retain","reverse","rfold","rfold","shift_remove","shift_remove_full","shift_remove_index","shift_take","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort","sort_by","sort_by_cached_key","sort_unstable","sort_unstable_by","sorted_by","sorted_unstable_by","split_at","split_first","split_last","split_off","sub","swap_indices","swap_remove","swap_remove_full","swap_remove_index","swap_take","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_hasher"],"q":[[0,"indexmap"],[26,"indexmap::map"],[458,"indexmap::set"],[731,"core::fmt"],[732,"core::fmt"],[733,"core::result"],[734,"core::any"],[735,"core::ops::function"],[736,"core::ops::function"],[737,"core::cmp"],[738,"core::hash"],[739,"core::cmp"],[740,"core::marker"],[741,"core::default"],[742,"core::ops::range"],[743,"core::cmp"],[744,"core::fmt"],[745,"core::hash"],[746,"core::cmp"]],"d":["Key equivalence trait.","","","The error type for <code>try_reserve</code> methods.","","","","","","Compare self to <code>key</code> and return <code>true</code> if they are equal.","","","","","","Returns the argument unchanged.","Create an <code>IndexMap</code> from a list of key-value pairs","Create an <code>IndexSet</code> from a list of values","Calls <code>U::from(self)</code>.","<code>IndexMap</code> is a hash table where the iteration order of the …","A hash set implemented using <code>IndexMap</code>","","","","","","A draining iterator over the entries of a <code>IndexMap</code>.","Entry for an existing key-value pair or a vacant location …","A hash table where the iteration order of the key-value …","An owning iterator over the entries of a <code>IndexMap</code>.","An owning iterator over the keys of a <code>IndexMap</code>.","An owning iterator over the values of a <code>IndexMap</code>.","An iterator over the entries of a <code>IndexMap</code>.","A mutable iterator over the entries of a <code>IndexMap</code>.","","An iterator over the keys of a <code>IndexMap</code>.","Opt-in mutable access to keys.","Existing slot with equivalent key.","A view into an occupied entry in a <code>IndexMap</code>. It is part of …","A dynamically-sized slice of key-value pairs in an <code>IndexMap</code>…","Vacant slot (no equivalent key in the map).","A view into a vacant entry in a <code>IndexMap</code>. It is part of …","","An iterator over the values of a <code>IndexMap</code>.","A mutable iterator over the values of a <code>IndexMap</code>.","Modifies the entry if it is occupied.","Returns a mutable slice of the remaining entries in the …","Returns a mutable slice of all the key-value pairs in the …","Returns a slice of the remaining entries in the iterator.","Returns a slice of the remaining entries in the iterator.","Returns a slice of the remaining entries in the iterator.","Returns a slice of the remaining entries in the iterator.","Returns a slice of all the key-value pairs in the map.","Search over a sorted map with a comparator function.","Search over a sorted map with a comparator function.","Search over a sorted map with an extraction function.","Search over a sorted map with an extraction function.","Search over a sorted map for a key.","Search over a sorted map for a key.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the number of elements the map can hold without …","Remove all key-value pairs in the map, while preserving …","","","","","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>key</code> exists in the map.","","","","","","","","","","","","","","","","","","","","Return an empty <code>IndexMap</code>","Clears the <code>IndexMap</code> in the given index range, returning …","Get the given key’s corresponding entry in the map for …","","","","","","","","","Extend the map with all key-value pairs in the iterable.","Extend the map with all key-value pairs in the iterable.","Get the first key-value pair.","Get the first key-value pair","Get the first key-value pair, with mutable access to the …","Get the first key-value pair, with mutable access to the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Create an <code>IndexMap</code> from the sequence of key-value pairs in …","Gets a reference to the entry’s value in the map.","Return a reference to the value stored for <code>key</code>, if it is …","Return item index, key and value","","Return item index, mutable reference to key and value","","Get a key-value pair by index.","Get a key-value pair by index","Get a key-value pair by index, with mutable access to the …","Get a key-value pair by index","Return mutable reference to key and value at an index.","","Return item index, if it exists in the map","Return references to the key-value pair stored for <code>key</code>, if …","Gets a mutable reference to the entry’s value in the map.","","Returns a slice of key-value pairs in the given range of …","Returns a slice of key-value pairs in the given range of …","Returns a mutable slice of key-value pairs in the given …","Returns a mutable slice of key-value pairs in the given …","","Return a reference to the map’s <code>BuildHasher</code>.","Return the index of the key-value pair","Return the index where the key-value pair exists or will …","Return the index where the key-value pair will be inserted.","","","","","","","","","","","Returns a reference to the value corresponding to the …","","","","","","Returns a reference to the value at the supplied <code>index</code>.","","","","","","","","","","","","","","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value at the supplied …","","","Sets the value of the entry to <code>value</code>, and returns the entry…","Inserts the entry’s key and the given value into the …","Insert a key-value pair in the map.","Insert a key-value pair in the map, and get their index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts into a boxed slice of all the key-value pairs in …","","","","","","","","","","","","","","","Takes ownership of the key, leaving the entry vacant.","Return an owning iterator over the keys of the map slice.","Return an owning iterator over the keys of the map, in …","Converts into a mutable reference to the entry’s value …","Returns a mutable slice of the remaining entries in the …","Return an owning iterator over the values of the map slice.","Return an owning iterator over the values of the map, in …","Returns true if the map slice contains no elements.","Returns true if the map contains no elements.","Return an iterator over the key-value pairs of the map …","Return an iterator over the key-value pairs of the map, in …","Return an iterator over the key-value pairs of the map …","Return an iterator over the key-value pairs of the map, in …","Gets a reference to the entry’s key in the map.","Gets a reference to the entry’s key, either within the …","Gets a reference to the key that was used to find the …","Return an iterator over the keys of the map slice.","Return an iterator over the keys of the map, in their order","","","","","","","","","","Get the last key-value pair.","Get the last key-value pair","Get the last key-value pair, with mutable access to the …","Get the last key-value pair, with mutable access to the …","","","","","","","","","","Return the number of key-value pairs in the map slice.","Return the number of key-value pairs in the map.","Moves the position of a key-value pair from one index to …","Returns an empty slice.","Create a new map. (Does not allocate.)","Returns an empty mutable slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts a default-constructed value in the entry if it is …","Inserts the given default value in the entry if it is …","Inserts the result of the <code>call</code> function in the entry if it …","Inserts the result of the <code>call</code> function with a reference …","","Returns the index of the partition point of a sorted map …","Returns the index of the partition point of a sorted map …","Remove the last key-value pair","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Reserve capacity for <code>additional</code> more key-value pairs.","Reserve capacity for <code>additional</code> more key-value pairs, …","Scan through each key-value pair in the map and keep those …","Scan through each key-value pair in the map and keep those …","","Reverses the order of the map’s key-value pairs in place.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","Shrink the capacity of the map with a lower limit.","Shrink the capacity of the map as much as possible.","","","","","","","","","","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs in place using a sort-key …","Sort the map’s key-value pairs by the default ordering …","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the key-value pairs of the map and return a by-value …","Sort the key-value pairs of the map and return a by-value …","Divides one slice into two at an index.","Divides one mutable slice into two at an index.","Returns the first key-value pair and the rest of the slice,","Returns the first key-value pair and the rest of the slice,","Returns the last key-value pair and the rest of the slice, …","Returns the last key-value pair and the rest of the slice, …","Splits the collection into two at the given index.","Swaps the position of two key-value pairs in the map.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","","","","","Shortens the map, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to reserve capacity for <code>additional</code> more key-value …","Try to reserve capacity for <code>additional</code> more key-value …","","","","","","","","","","","","","","","Return an iterator over the values of the map slice.","Return an iterator over the values of the map, in their …","Return an iterator over mutable references to the the …","Return an iterator over mutable references to the values …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with <code>hash_builder</code>.","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>IndexSet</code>.","A hash set where the iteration order of the values is …","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>IndexSet</code>.","An iterator over the items of a <code>IndexSet</code>.","A dynamically-sized slice of values in an <code>IndexSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>IndexSet</code>…","Returns a slice of the remaining entries in the iterator.","Returns a slice of the remaining entries in the iterator.","Returns a slice of the remaining entries in the iterator.","Returns a slice of all the values in the set.","Search over a sorted set for a value.","Search over a sorted set for a value.","Search over a sorted set with a comparator function.","Search over a sorted set with a comparator function.","Search over a sorted set with an extraction function.","Search over a sorted set with an extraction function.","Returns the set intersection, cloned into a new set.","Returns the set union, cloned into a new set.","Returns the set symmetric-difference, cloned into a new …","","","","","","","","","","","","","","","","","","","Return the number of elements the set can hold without …","Remove all elements in the set, while preserving its …","","","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>value</code> exists in the set.","","","","","","","Return an empty <code>IndexSet</code>","Return an iterator over the values that are in <code>self</code> but …","Clears the <code>IndexSet</code> in the given index range, returning …","","","","","","","","","","","Get the first value.","Get the first value","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Examples","Returns the argument unchanged.","","Return a reference to the value stored in the set, if it …","Return item index and value","Get a value by index.","Get a value by index","Return item index, if it exists in the set","Returns a slice of values in the given range of indices.","Returns a slice of values in the given range of indices.","","Return a reference to the set’s <code>BuildHasher</code>.","","","","","","","","","","","","","Returns a reference to the value at the supplied <code>index</code>.","","","","Insert the value into the set.","Insert the value into the set, and get its index.","Return an iterator over the values that are in both <code>self</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts into a boxed slice of all the values in the set.","","","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.","Returns true if the set slice contains no elements.","Returns true if the set contains no elements.","Returns <code>true</code> if all elements of <code>self</code> are contained in <code>other</code>…","Returns <code>true</code> if all elements of <code>other</code> are contained in <code>self</code>…","Return an iterator over the values of the set slice.","Return an iterator over the values of the set, in their …","","","","Get the last value.","Get the last value","","","","Return the number of elements in the set slice.","Return the number of elements in the set.","Moves the position of a value from one index to another by …","Returns an empty slice.","Create a new set. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","","Returns the index of the partition point of a sorted set …","Returns the index of the partition point of a sorted set …","Remove the last value","Remove the value from the set, and return <code>true</code> if it was …","Adds a value to the set, replacing the existing value, if …","Adds a value to the set, replacing the existing value, if …","Reserve capacity for <code>additional</code> more values.","Reserve capacity for <code>additional</code> more values, without …","Scan through each value in the set and keep those where the","Reverses the order of the set’s values in place.","","","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Shrink the capacity of the set with a lower limit.","Shrink the capacity of the set as much as possible.","","","","","","","","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the set’s values in place using a key extraction …","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the values of the set and return a by-value iterator …","Sort the values of the set and return a by-value iterator …","Divides one slice into two at an index.","Returns the first value and the rest of the slice, or <code>None</code> …","Returns the last value and the rest of the slice, or <code>None</code> …","Splits the collection into two at the given index.","Returns the set difference, cloned into a new set.","Swaps the position of two values in the set.","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Return an iterator over the values that are in <code>self</code> or …","Removes and returns the value in the set, if any, that is …","","","","","","","Shortens the set, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","Try to reserve capacity for <code>additional</code> more values.","Try to reserve capacity for <code>additional</code> more values, …","","","","","","","","","","Return an iterator over all values that are in <code>self</code> or …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with <code>hash_builder</code>."],"i":[0,0,0,0,1,1,1,1,1,31,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,63,0,0,9,0,0,9,0,63,0,0,9,11,13,14,15,11,16,13,12,13,12,13,12,13,39,9,41,14,15,11,16,23,28,24,29,30,12,13,39,9,41,14,15,11,16,23,28,24,29,30,12,13,13,13,14,23,24,13,13,14,23,24,13,12,14,15,11,16,23,28,24,29,30,12,13,14,15,11,16,23,28,24,29,30,14,15,11,23,28,24,29,30,12,12,13,13,13,12,13,12,12,12,13,13,13,13,13,12,13,12,13,39,9,41,14,15,11,16,23,28,24,29,30,12,13,39,9,41,14,15,11,16,23,28,24,29,30,13,13,13,39,13,13,13,63,13,12,13,12,13,63,13,13,13,39,13,12,13,12,13,12,13,39,9,41,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,39,41,13,13,39,9,41,14,15,11,16,23,28,24,29,30,13,13,14,15,11,16,23,28,24,29,30,12,12,13,13,13,41,12,13,39,15,12,13,12,13,12,13,12,13,39,9,41,12,13,14,15,11,16,23,28,24,29,30,12,13,12,13,14,15,11,16,23,28,24,29,30,12,13,13,12,13,12,14,15,11,16,23,28,24,29,30,14,15,11,16,23,28,24,29,30,14,15,11,16,23,28,24,29,30,14,15,11,16,23,28,24,29,30,9,9,9,9,12,12,13,13,39,13,39,13,13,13,13,63,13,13,39,13,39,13,13,13,13,13,14,15,11,16,23,28,24,29,30,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,39,13,39,13,13,13,14,23,24,13,13,39,9,41,14,15,11,16,23,28,24,29,30,13,39,9,41,14,15,11,16,23,28,24,29,30,13,13,13,39,9,41,14,15,11,16,23,28,24,29,30,12,13,12,13,12,13,13,13,13,0,0,0,0,0,0,0,0,0,54,56,57,58,55,58,55,58,55,58,58,58,58,54,56,57,59,60,61,62,55,58,54,56,57,59,60,61,62,55,58,58,58,54,59,60,61,62,58,58,54,59,60,61,62,58,55,54,56,57,55,58,54,56,57,54,56,55,58,58,58,55,58,55,55,55,58,58,58,58,58,55,58,54,56,57,59,60,61,62,55,58,61,62,54,56,57,59,60,61,62,58,58,58,58,58,55,58,58,55,58,55,58,55,55,55,55,55,55,55,55,58,58,58,58,58,58,58,58,58,58,58,54,56,57,59,60,61,62,58,58,54,56,57,59,60,61,62,55,58,58,58,55,58,58,58,55,58,54,56,57,55,58,54,56,57,55,58,58,55,58,54,56,57,59,60,61,62,54,56,57,59,60,61,62,54,56,57,54,56,57,55,55,58,58,58,58,58,58,58,58,58,61,62,58,58,58,58,58,58,54,56,57,59,60,61,62,58,58,58,58,58,58,58,55,55,55,58,58,58,58,58,58,58,58,58,54,59,60,61,62,58,58,54,56,57,59,60,61,62,58,54,56,57,59,60,61,62,58,58,58,54,56,57,59,60,61,62,55,58,58,58,58,58],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,4],5],[[1,4],5],[-1,-1,[]],0,0,[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,6,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[9,[-1,-2]],-3],[[9,[-1,-2]]],[],[],10],[[[11,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[12,[-1,-2]]],[],[],[]],[[[14,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[15,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[11,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[16,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[12,[-1,-2]]],[],[],[]],[[[12,[-1,-2]],-3],[[7,[17,17]]],[],[],18],[[[13,[-1,-2,-3]],-4],[[7,[17,17]]],[19,20],[],21,18],[[[12,[-1,-2]],-3,-4],[[7,[17,17]]],[],[],22,18],[[[13,[-1,-2,-3]],-4,-5],[[7,[17,17]]],[19,20],[],21,22,18],[[[12,[-1,-2]],-1],[[7,[17,17]]],22,[]],[[[13,[-1,-2,-3]],-1],[[7,[17,17]]],[22,19,20],[],21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2,-3]]],17,[],[],[]],[[[13,[-1,-2,-3]]],2,[],[],[]],[[[14,[-1,-2]]],[[14,[-1,-2]]],[],[]],[[[23,[-1,-2]]],[[23,[-1,-2]]],[],[]],[[[24,[-1,-2]]],[[24,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[13,[-1,-2,-3]]],25,25,25],[[[13,[-1,-2,-3]],[13,[-1,-2,-3]]],2,25,25,25],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[12,[-1,-2]],[12,[-1,-2]]],26,22,22],[[[14,[-1,-2]]],-3,[],[],27],[[[15,[-1,-2]]],-3,[],[],27],[[[11,[-1,-2]]],-3,[],[],27],[[[16,[-1,-2]]],-3,[],[],27],[[[23,[-1,-2]]],-3,[],[],27],[[[28,[-1,-2]]],-3,[],[],27],[[[24,[-1,-2]]],-3,[],[],27],[[[29,[-1,-2]]],-3,[],[],27],[[[30,[-1,-2]]],-3,[],[],27],[[-1,-2],26,[],[]],[[[13,[-1,-2,-3]],-4],3,[19,20],[],21,[19,[31,[-1]],32]],[[[14,[-1,-2]]],17,[],[]],[[[15,[-1,-2]]],17,[],[]],[[[11,[-1,-2]]],17,[],[]],[[[16,[-1,-2]]],17,[],[]],[[[23,[-1,-2]]],17,[],[]],[[[28,[-1,-2]]],17,[],[]],[[[24,[-1,-2]]],17,[],[]],[[[29,[-1,-2]]],17,[],[]],[[[30,[-1,-2]]],17,[],[]],[[],[[14,[-1,-2]]],[],[]],[[],[[15,[-1,-2]]],[],[]],[[],[[11,[-1,-2]]],[],[]],[[],[[23,[-1,-2]]],[],[]],[[],[[28,[-1,-2]]],[],[]],[[],[[24,[-1,-2]]],[],[]],[[],[[29,[-1,-2]]],[],[]],[[],[[30,[-1,-2]]],[],[]],[[],[[12,[-1,-2]]],[],[]],[[],[[12,[-1,-2]]],[],[]],[[],[[13,[-1,-2,-3]]],[],[],33],[[[13,[-1,-2,-3]],-4],[[16,[-1,-2]]],[],[],[],[[34,[17]]]],[[[13,[-1,-2,-3]],-1],[[9,[-1,-2]]],[19,20],[],21],[[[12,[-1,-2]],[12,[-1,-2]]],3,35,35],[[[13,[-1,-3,-4]],[13,[-1,-2,-5]]],3,[19,20],[],[[35,[-2]]],21,21],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[13,[-1,-2,-3]],-4],2,[19,20],[],21,36],[[[13,[-1,-2,-3]],-4],2,[19,20,37],37,21,36],[[[12,[-1,-2]]],[[38,[[2,[-1,-2]]]]],[],[]],[[[13,[-1,-2,-3]]],[[38,[[2,[-1,-2]]]]],[],[],[]],[[[12,[-1,-2]]],[[38,[[2,[-1,-2]]]]],[],[]],[[[13,[-1,-2,-3]]],[[38,[[2,[-1,-2]]]]],[],[],[]],[[[39,[-1,-2]],4],5,40,40],[[[9,[-1,-2]],4],5,40,40],[[[41,[-1,-2]],4],5,40,[]],[[[14,[-1,-2]],4],5,40,40],[[[15,[-1,-2]],4],5,40,40],[[[11,[-1,-2]],4],5,40,40],[[[16,[-1,-2]],4],5,40,40],[[[23,[-1,-2]],4],5,40,[]],[[[28,[-1,-2]],4],5,40,[]],[[[24,[-1,-2]],4],5,[],40],[[[29,[-1,-2]],4],5,[],40],[[[30,[-1,-2]],4],5,[],40],[[[12,[-1,-2]],4],5,40,40],[[[13,[-1,-2,-3]],4],5,40,40,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[42,[[2,[-1,-2]]]]],[[13,[-1,-2,43]]],[19,20],[]],[-1,-1,[]],[-1,[[13,[-2,-3,-4]]],36,[19,20],[],[21,33]],[[[39,[-1,-2]]],-2,[],[]],[[[13,[-1,-2,-3]],-4],[[38,[-2]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[17,-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[17,-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[-1,-2],[[38,[[2,[17]]]]],[],[19,31,32]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[17,-1,-2]]]]],[20,19],[],21,[19,[31,[-1]],32]],[[[12,[-1,-2]],17],[[38,[[2,[-1,-2]]]]],[],[]],[[[13,[-1,-2,-3]],17],[[38,[[2,[-1,-2]]]]],[],[],[]],[[[12,[-1,-2]],17],[[38,[[2,[-1,-2]]]]],[],[]],[[[13,[-1,-2,-3]],17],[[38,[[2,[-1,-2]]]]],[],[],[]],[[-1,17],[[38,[2]]],[]],[[[13,[-1,-2,-3]],17],[[38,[[2,[-1,-2]]]]],[20,19],[],21],[[[13,[-1,-2,-3]],-4],[[38,[17]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[39,[-1,-2]]],-2,[],[]],[[[13,[-1,-2,-3]],-4],[[38,[-2]]],[19,20],[],21,[19,[31,[-1]],32]],[[[12,[-1,-2]],-3],[[38,[[12,[-1,-2]]]]],[],[],[[34,[17]]]],[[[13,[-1,-2,-3]],-4],[[38,[[12,[-1,-2]]]]],[],[],[],[[34,[17]]]],[[[12,[-1,-2]],-3],[[38,[[12,[-1,-2]]]]],[],[],[[34,[17]]]],[[[13,[-1,-2,-3]],-4],[[38,[[12,[-1,-2]]]]],[],[],[],[[34,[17]]]],[[[12,[-1,-2]],-3],2,19,19,44],[[[13,[-1,-2,-3]]],-3,[],[],[]],[[[39,[-1,-2]]],17,[],[]],[[[9,[-1,-2]]],17,[],[]],[[[41,[-1,-2]]],17,[],[]],[[[12,[-1,-2]],[45,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],46],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[2,[[47,[17]],[47,[17]]]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[48,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],17],-2,[],[]],[[[12,[-1,-2]],[49,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[50,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[51,[17]]],[[12,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]],[48,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],[2,[[47,[17]],[47,[17]]]]],[],[],[],[]],[[[13,[-1,-2,-3]],-4],-2,[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],[50,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],[49,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],[45,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],46],[],[],[],[]],[[[13,[-1,-2,-3]],[51,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],17],-2,[],[],[]],[[[12,[-1,-2]],[2,[[47,[17]],[47,[17]]]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[45,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],17],-2,[],[]],[[[12,[-1,-2]],[48,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[51,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[49,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],46],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[50,[17]]],[[12,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]],[48,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],[45,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],[50,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],[51,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],46],[],[],[],[]],[[[13,[-1,-2,-3]],-4],-2,[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],17],-2,[],[],[]],[[[13,[-1,-2,-3]],[2,[[47,[17]],[47,[17]]]]],[],[],[],[]],[[[13,[-1,-2,-3]],[49,[17]]],[],[],[],[]],[[[39,[-1,-2]],-2],-2,[],[]],[[[41,[-1,-2]],-2],-2,[],[]],[[[13,[-1,-2,-3]],-1,-2],[[38,[-2]]],[19,20],[],21],[[[13,[-1,-2,-3]],-1,-2],[[2,[17,[38,[-2]]]]],[19,20],[],21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2,-3]]],[[52,[[12,[-1,-2]]]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1,-2]]],[],[],[]],[[[12,[-1,-2]]],[],[],[]],[[[13,[-1,-2,-3]]],[],[],[],[]],[[[13,[-1,-2,-3]]],[],[],[],[]],[[[13,[-1,-2,-3]]],[],[],[],[]],[[[41,[-1,-2]]],-1,[],[]],[[[52,[[12,[-1,-2]]]]],[[28,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[28,[-1,-2]]],[],[],[]],[[[39,[-1,-2]]],-2,[],[]],[[[15,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[52,[[12,[-1,-2]]]]],[[30,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[30,[-1,-2]]],[],[],[]],[[[12,[-1,-2]]],3,[],[]],[[[13,[-1,-2,-3]]],3,[],[],[]],[[[12,[-1,-2]]],[[14,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[14,[-1,-2]]],[],[],[]],[[[12,[-1,-2]]],[[15,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[15,[-1,-2]]],[],[],[]],[[[39,[-1,-2]]],-1,[],[]],[[[9,[-1,-2]]],-1,[],[]],[[[41,[-1,-2]]],-1,[],[]],[[[12,[-1,-2]]],[[23,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[23,[-1,-2]]],[],[],[]],[[[14,[-1,-2]]],38,[],[]],[[[15,[-1,-2]]],38,[],[]],[[[11,[-1,-2]]],38,[],[]],[[[16,[-1,-2]]],38,[],[]],[[[23,[-1,-2]]],38,[],[]],[[[28,[-1,-2]]],38,[],[]],[[[24,[-1,-2]]],38,[],[]],[[[29,[-1,-2]]],38,[],[]],[[[30,[-1,-2]]],38,[],[]],[[[12,[-1,-2]]],[[38,[[2,[-1,-2]]]]],[],[]],[[[13,[-1,-2,-3]]],[[38,[[2,[-1,-2]]]]],[],[],[]],[[[12,[-1,-2]]],[[38,[[2,[-1,-2]]]]],[],[]],[[[13,[-1,-2,-3]]],[[38,[[2,[-1,-2]]]]],[],[],[]],[[[14,[-1,-2]]],17,[],[]],[[[15,[-1,-2]]],17,[],[]],[[[11,[-1,-2]]],17,[],[]],[[[16,[-1,-2]]],17,[],[]],[[[23,[-1,-2]]],17,[],[]],[[[28,[-1,-2]]],17,[],[]],[[[24,[-1,-2]]],17,[],[]],[[[29,[-1,-2]]],17,[],[]],[[[30,[-1,-2]]],17,[],[]],[[[12,[-1,-2]]],17,[],[]],[[[13,[-1,-2,-3]]],17,[],[],[]],[[[13,[-1,-2,-3]],17,17],2,[],[],[]],[[],[[12,[-1,-2]]],[],[]],[[],[[13,[-1,-2]]],[],[]],[[],[[12,[-1,-2]]],[],[]],[[[14,[-1,-2]]],38,[],[]],[[[15,[-1,-2]]],38,[],[]],[[[11,[-1,-2]]],38,[],[]],[[[16,[-1,-2]]],38,[],[]],[[[23,[-1,-2]]],38,[],[]],[[[28,[-1,-2]]],38,[],[]],[[[24,[-1,-2]]],38,[],[]],[[[29,[-1,-2]]],38,[],[]],[[[30,[-1,-2]]],38,[],[]],[[[14,[-1,-2]]],38,[],[]],[[[15,[-1,-2]]],38,[],[]],[[[11,[-1,-2]]],38,[],[]],[[[16,[-1,-2]]],38,[],[]],[[[23,[-1,-2]]],38,[],[]],[[[28,[-1,-2]]],38,[],[]],[[[24,[-1,-2]]],38,[],[]],[[[29,[-1,-2]]],38,[],[]],[[[30,[-1,-2]]],38,[],[]],[[[14,[-1,-2]],17],38,[],[]],[[[15,[-1,-2]],17],38,[],[]],[[[11,[-1,-2]],17],38,[],[]],[[[16,[-1,-2]],17],38,[],[]],[[[23,[-1,-2]],17],38,[],[]],[[[28,[-1,-2]],17],38,[],[]],[[[24,[-1,-2]],17],38,[],[]],[[[29,[-1,-2]],17],38,[],[]],[[[30,[-1,-2]],17],38,[],[]],[[[14,[-1,-2]],17],38,[],[]],[[[15,[-1,-2]],17],38,[],[]],[[[11,[-1,-2]],17],38,[],[]],[[[16,[-1,-2]],17],38,[],[]],[[[23,[-1,-2]],17],38,[],[]],[[[28,[-1,-2]],17],38,[],[]],[[[24,[-1,-2]],17],38,[],[]],[[[29,[-1,-2]],17],38,[],[]],[[[30,[-1,-2]],17],38,[],[]],[[[9,[-1,-2]]],-2,[],33],[[[9,[-1,-2]],-2],-2,[],[]],[[[9,[-1,-2]],-3],-2,[],[],10],[[[9,[-1,-2]],-3],-2,[],[],10],[[[12,[-1,-2]],[12,[-1,-2]]],[[38,[26]]],53,53],[[[12,[-1,-2]],-3],17,[],[],18],[[[13,[-1,-2,-3]],-4],17,[19,20],[],21,18],[[[13,[-1,-2,-3]]],[[38,[[2,[-1,-2]]]]],[19,20],[],21],[[[39,[-1,-2]]],-2,[],[]],[[[13,[-1,-2,-3]],-4],[[38,[-2]]],[19,20],[],21,[19,[31,[-1]],32]],[[[39,[-1,-2]]],[[2,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],17],2,[19,20],[],21],[[[13,[-1,-2,-3]],17],2,[19,20],[],21],[[[13,[-1,-2,-3]],-4],2,[19,20],[],21,18],[[-1,-2],2,[],18],[[[13,[-1,-2,-3]],-4],2,[20,19],[],21,18],[[[13,[-1,-2,-3]]],2,[19,20],[],21],[[[39,[-1,-2]]],-2,[],[]],[[[13,[-1,-2,-3]],-4],[[38,[-2]]],[19,20],[],21,[19,[31,[-1]],32]],[[[39,[-1,-2]]],[[2,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[17,-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],17],[[38,[[2,[-1,-2]]]]],[],[],[]],[[[13,[-1,-2,-3]],17],2,[19,20],[],21],[[[13,[-1,-2,-3]]],2,[19,20],[],21],[[[14,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[15,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[11,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[16,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[23,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[28,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[24,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[29,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[30,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[13,[-1,-2,-3]],-4],2,[19,20],[],21,18],[[[13,[-1,-2,-3]],-4],2,[19,20],[],21,18],[[[13,[-1,-2,-3]]],2,[22,19,20],[],21],[[[13,[-1,-2,-3]],-4],2,[19,20],[],21,18],[[[13,[-1,-2,-3]]],2,[22,19,20],[],21],[[[13,[-1,-2,-3]],-4],[[11,[-1,-2]]],[19,20],[],21,18],[[[13,[-1,-2,-3]],-4],[[11,[-1,-2]]],[19,20],[],21,18],[[[12,[-1,-2]],17],[[2,[[12,[-1,-2]],[12,[-1,-2]]]]],[],[]],[[[12,[-1,-2]],17],[[2,[[12,[-1,-2]],[12,[-1,-2]]]]],[],[]],[[[12,[-1,-2]]],[[38,[[2,[[2,[-1,-2]],[12,[-1,-2]]]]]]],[],[]],[[[12,[-1,-2]]],[[38,[[2,[[2,[-1,-2]],[12,[-1,-2]]]]]]],[],[]],[[[12,[-1,-2]]],[[38,[[2,[[2,[-1,-2]],[12,[-1,-2]]]]]]],[],[]],[[[12,[-1,-2]]],[[38,[[2,[[2,[-1,-2]],[12,[-1,-2]]]]]]],[],[]],[[[13,[-1,-2,-3]],17],[[13,[-1,-2,-3]]],[],[],25],[[[13,[-1,-2,-3]],17,17],2,[],[],[]],[[[39,[-1,-2]]],-2,[],[]],[[[13,[-1,-2,-3]],-4],[[38,[-2]]],[19,20],[],21,[19,[31,[-1]],32]],[[[39,[-1,-2]]],[[2,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[17,-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],17],[[38,[[2,[-1,-2]]]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2,-3]],17],2,[],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[[[13,[-1,-2,-3]],17],[[7,[2,1]]],[19,20],[],21],[[[13,[-1,-2,-3]],17],[[7,[2,1]]],[19,20],[],21],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[[[12,[-1,-2]]],[[24,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[24,[-1,-2]]],[],[],[]],[[[12,[-1,-2]]],[[29,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[29,[-1,-2]]],[],[],[]],[17,[[13,[-1,-2]]],[],[]],[[17,-1],[[13,[-2,-3,-1]]],[],[],[]],[-1,[[13,[-2,-3,-1]]],[],[],[]],0,0,0,0,0,0,0,0,0,[[[54,[-1]]],[[55,[-1]]],[]],[[[56,[-1]]],[[55,[-1]]],[]],[[[57,[-1]]],[[55,[-1]]],[]],[[[58,[-1,-2]]],[[55,[-1]]],[],[]],[[[55,[-1]],-1],[[7,[17,17]]],22],[[[58,[-1,-2]],-1],[[7,[17,17]]],[22,19,20],21],[[[55,[-1]],-2],[[7,[17,17]]],[],18],[[[58,[-1,-2]],-3],[[7,[17,17]]],[19,20],21,18],[[[55,[-1]],-2,-3],[[7,[17,17]]],[],22,18],[[[58,[-1,-2]],-3,-4],[[7,[17,17]]],[19,20],21,22,18],[[[58,[-1,-2]],[58,[-1,-3]]],[],[20,19,25],[21,33],21],[[[58,[-1,-2]],[58,[-1,-3]]],[],[20,19,25],[21,33],21],[[[58,[-1,-2]],[58,[-1,-3]]],[],[20,19,25],[21,33],21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[58,[-1,-2]]],17,[],[]],[[[58,[-1,-2]]],2,[],[]],[[[54,[-1]]],[[54,[-1]]],[]],[[[59,[-1,-2]]],[[59,[-1,-2]]],[],[]],[[[60,[-1,-2]]],[[60,[-1,-2]]],[],[]],[[[61,[-1,-2,-3]]],[[61,[-1,-2,-3]]],[],[],[]],[[[62,[-1,-2]]],[[62,[-1,-2]]],[],[]],[[[58,[-1,-2]]],[[58,[-1,-2]]],25,25],[[[58,[-1,-2]],[58,[-1,-2]]],2,25,25],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[55,[-1]],[55,[-1]]],26,22],[[[54,[-1]]],-2,[],27],[[[56,[-1]]],-2,[],27],[[[57,[-1]]],-2,[],27],[[-1,-2],26,[],[]],[[[58,[-1,-2]],-3],3,[19,20],21,[19,[31,[-1]],32]],[[[54,[-1]]],17,[]],[[[56,[-1]]],17,[]],[[[57,[-1]]],17,[]],[[],[[54,[-1]]],[]],[[],[[56,[-1]]],[]],[[],[[55,[-1]]],[]],[[],[[58,[-1,-2]]],[],33],[[[58,[-1,-2]],[58,[-1,-3]]],[[59,[-1,-3]]],[19,20],21,21],[[[58,[-1,-2]],-3],[[57,[-1]]],[],[],[[34,[17]]]],[[[55,[-1]],[55,[-1]]],3,35],[[[58,[-1,-2]],[58,[-1,-3]]],3,[19,20],21,21],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[58,[-1,-2]],-3],2,[19,20],21,36],[[[58,[-1,-2]],-3],2,[19,20,37],21,36],[[[55,[-1]]],[[38,[-1]]],[]],[[[58,[-1,-2]]],[[38,[-1]]],[],[]],[[[54,[-1]],4],5,40],[[[56,[-1]],4],5,40],[[[57,[-1]],4],5,40],[[[59,[-1,-2]],4],5,[40,20,19],21],[[[60,[-1,-2]],4],5,[40,20,19],21],[[[61,[-1,-2,-3]],4],5,[40,20,19],21,21],[[[62,[-1,-2]],4],5,[40,20,19],21],[[[55,[-1]],4],5,40],[[[58,[-1,-2]],4],5,40,[]],[[[61,[-1,-2,-3]],-4,-5],-4,[20,19],21,21,[],18],[[[62,[-1,-2]],-3,-4],-3,[20,19],21,[],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[42,[-1]]],[[58,[-1,43]]],[20,19]],[-1,-1,[]],[-1,[[58,[-2,-3]]],36,[19,20],[21,33]],[[[58,[-1,-2]],-3],[[38,[-1]]],[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],-3],[[38,[[2,[17,-1]]]]],[19,20],21,[19,[31,[-1]],32]],[[[55,[-1]],17],[[38,[-1]]],[]],[[[58,[-1,-2]],17],[[38,[-1]]],[],[]],[[[58,[-1,-2]],-3],[[38,[17]]],[19,20],21,[19,[31,[-1]],32]],[[[55,[-1]],-2],[[38,[[55,[-1]]]]],[],[[34,[17]]]],[[[58,[-1,-2]],-3],[[38,[[55,[-1]]]]],[],[],[[34,[17]]]],[[[55,[-1]],-2],2,19,44],[[[58,[-1,-2]]],-2,[],[]],[[[55,[-1]],[49,[17]]],[],[]],[[[55,[-1]],[2,[[47,[17]],[47,[17]]]]],[],[]],[[[55,[-1]],[50,[17]]],[],[]],[[[55,[-1]],[48,[17]]],[],[]],[[[55,[-1]],[45,[17]]],[],[]],[[[55,[-1]],46],[],[]],[[[55,[-1]],17],[],[]],[[[55,[-1]],[51,[17]]],[],[]],[[[58,[-1,-2]],[2,[[47,[17]],[47,[17]]]]],[],[],[]],[[[58,[-1,-2]],46],[],[],[]],[[[58,[-1,-2]],[48,[17]]],[],[],[]],[[[58,[-1,-2]],[45,[17]]],[],[],[]],[[[58,[-1,-2]],17],-1,[],[]],[[[58,[-1,-2]],[51,[17]]],[],[],[]],[[[58,[-1,-2]],[49,[17]]],[],[],[]],[[[58,[-1,-2]],[50,[17]]],[],[],[]],[[[58,[-1,-2]],-1],3,[19,20],21],[[[58,[-1,-2]],-1],[[2,[17,3]]],[19,20],21],[[[58,[-1,-2]],[58,[-1,-3]]],[[60,[-1,-3]]],[19,20],21,21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[58,[-1,-2]]],[[52,[[55,[-1]]]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[55,[-1]]],[],[]],[[[58,[-1,-2]]],[],[],[]],[[[58,[-1,-2]]],[],[],[]],[[[58,[-1,-2]],[58,[-1,-3]]],3,[20,19],21,21],[[[55,[-1]]],3,[]],[[[58,[-1,-2]]],3,[],[]],[[[58,[-1,-2]],[58,[-1,-3]]],3,[20,19],21,21],[[[58,[-1,-2]],[58,[-1,-3]]],3,[20,19],21,21],[[[55,[-1]]],[[54,[-1]]],[]],[[[58,[-1,-2]]],[[54,[-1]]],[],[]],[[[54,[-1]]],38,[]],[[[56,[-1]]],38,[]],[[[57,[-1]]],38,[]],[[[55,[-1]]],[[38,[-1]]],[]],[[[58,[-1,-2]]],[[38,[-1]]],[],[]],[[[54,[-1]]],17,[]],[[[56,[-1]]],17,[]],[[[57,[-1]]],17,[]],[[[55,[-1]]],17,[]],[[[58,[-1,-2]]],17,[],[]],[[[58,[-1,-2]],17,17],2,[],[]],[[],[[55,[-1]]],[]],[[],[[58,[-1]]],[]],[[[54,[-1]]],38,[]],[[[56,[-1]]],38,[]],[[[57,[-1]]],38,[]],[[[59,[-1,-2]]],38,[20,19],21],[[[60,[-1,-2]]],38,[20,19],21],[[[61,[-1,-2,-3]]],38,[20,19],21,21],[[[62,[-1,-2]]],38,[20,19],21],[[[54,[-1]]],38,[]],[[[56,[-1]]],38,[]],[[[57,[-1]]],38,[]],[[[59,[-1,-2]]],38,[20,19],21],[[[60,[-1,-2]]],38,[20,19],21],[[[61,[-1,-2,-3]]],38,[20,19],21,21],[[[62,[-1,-2]]],38,[20,19],21],[[[54,[-1]],17],38,[]],[[[56,[-1]],17],38,[]],[[[57,[-1]],17],38,[]],[[[54,[-1]],17],38,[]],[[[56,[-1]],17],38,[]],[[[57,[-1]],17],38,[]],[[[55,[-1]],[55,[-1]]],[[38,[26]]],53],[[[55,[-1]],-2],17,[],18],[[[58,[-1,-2]],-3],17,[19,20],21,18],[[[58,[-1,-2]]],[[38,[-1]]],[19,20],21],[[[58,[-1,-2]],-3],3,[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],-1],[[38,[-1]]],[19,20],21],[[[58,[-1,-2]],-1],[[2,[17,[38,[-1]]]]],[19,20],21],[[[58,[-1,-2]],17],2,[19,20],21],[[[58,[-1,-2]],17],2,[19,20],21],[[[58,[-1,-2]],-3],2,[19,20],21,18],[[[58,[-1,-2]]],2,[19,20],21],[[[61,[-1,-2,-3]],-4,-5],-4,[20,19],21,21,[],18],[[[62,[-1,-2]],-3,-4],-3,[20,19],21,[],18],[[[58,[-1,-2]],-3],3,[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],-3],[[38,[[2,[17,-1]]]]],[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],17],[[38,[-1]]],[],[]],[[[58,[-1,-2]],-3],[[38,[-1]]],[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],17],2,[19,20],21],[[[58,[-1,-2]]],2,[19,20],21],[[[54,[-1]]],[[2,[17,[38,[17]]]]],[]],[[[56,[-1]]],[[2,[17,[38,[17]]]]],[]],[[[57,[-1]]],[[2,[17,[38,[17]]]]],[]],[[[59,[-1,-2]]],[[2,[17,[38,[17]]]]],[20,19],21],[[[60,[-1,-2]]],[[2,[17,[38,[17]]]]],[20,19],21],[[[61,[-1,-2,-3]]],[[2,[17,[38,[17]]]]],[20,19],21,21],[[[62,[-1,-2]]],[[2,[17,[38,[17]]]]],[20,19],21],[[[58,[-1,-2]]],2,[22,19,20],21],[[[58,[-1,-2]],-3],2,[19,20],21,18],[[[58,[-1,-2]],-3],2,[19,20],21,18],[[[58,[-1,-2]]],2,[22,19,20],21],[[[58,[-1,-2]],-3],2,[19,20],21,18],[[[58,[-1,-2]],-3],[[56,[-1]]],[19,20],21,18],[[[58,[-1,-2]],-3],[[56,[-1]]],[19,20],21,18],[[[55,[-1]],17],[[2,[[55,[-1]],[55,[-1]]]]],[]],[[[55,[-1]]],[[38,[[2,[-1,[55,[-1]]]]]]],[]],[[[55,[-1]]],[[38,[[2,[-1,[55,[-1]]]]]]],[]],[[[58,[-1,-2]],17],[[58,[-1,-2]]],[],25],[[[58,[-1,-2]],[58,[-1,-3]]],[],[20,19,25],[21,33],21],[[[58,[-1,-2]],17,17],2,[],[]],[[[58,[-1,-2]],-3],3,[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],-3],[[38,[[2,[17,-1]]]]],[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],17],[[38,[-1]]],[],[]],[[[58,[-1,-2]],-3],[[38,[-1]]],[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],[58,[-1,-3]]],[[61,[-1,-2,-3]]],[19,20],21,21],[[[58,[-1,-2]],-3],[[38,[-1]]],[19,20],21,[19,[31,[-1]],32]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[58,[-1,-2]],17],2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[[[58,[-1,-2]],17],[[7,[2,1]]],[19,20],21],[[[58,[-1,-2]],17],[[7,[2,1]]],[19,20],21],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[[[58,[-1,-2]],[58,[-1,-3]]],[[62,[-1,-2]]],[19,20],21,21],[17,[[58,[-1]]],[]],[[17,-1],[[58,[-2,-1]]],[],[]],[-1,[[58,[-2,-1]]],[],[]]],"c":[],"p":[[3,"TryReserveError",0],[15,"tuple"],[15,"bool"],[3,"Formatter",731],[6,"Result",731],[3,"String",732],[4,"Result",733],[3,"TypeId",734],[4,"Entry",26],[8,"FnOnce",735],[3,"IntoIter",26],[3,"Slice",26],[3,"IndexMap",26],[3,"Iter",26],[3,"IterMut",26],[3,"Drain",26],[15,"usize"],[8,"FnMut",735],[8,"Hash",736],[8,"Eq",737],[8,"BuildHasher",736],[8,"Ord",737],[3,"Keys",26],[3,"Values",26],[8,"Clone",738],[4,"Ordering",737],[8,"FromIterator",739],[3,"IntoKeys",26],[3,"ValuesMut",26],[3,"IntoValues",26],[8,"Equivalent",0],[8,"Sized",740],[8,"Default",741],[8,"RangeBounds",742],[8,"PartialEq",737],[8,"IntoIterator",739],[8,"Copy",740],[4,"Option",743],[3,"OccupiedEntry",26],[8,"Debug",731],[3,"VacantEntry",26],[15,"array"],[3,"RandomState",744],[8,"Hasher",736],[3,"RangeTo",742],[3,"RangeFull",742],[4,"Bound",742],[3,"Range",742],[3,"RangeToInclusive",742],[3,"RangeFrom",742],[3,"RangeInclusive",742],[3,"Box",745],[8,"PartialOrd",737],[3,"Iter",458],[3,"Slice",458],[3,"IntoIter",458],[3,"Drain",458],[3,"IndexSet",458],[3,"Difference",458],[3,"Intersection",458],[3,"SymmetricDifference",458],[3,"Union",458],[8,"MutableKeys",26]]},\
"internal_iterator":{"doc":"Internal iterator equivalent of <code>std::iter::Iterator</code>.","t":"DDDDDDDDDIDDIIQQQIDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BreakValue","Chain","Cloned","Copied","Enumerate","Filter","FilterMap","FlatMap","FromFn","FromInternalIterator","Inspect","Internal","InternalIterator","IntoInternalIterator","IntoIter","Item","Item","IteratorExt","Map","Skip","Take","all","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","collect","copied","count","count","count","count","enumerate","filter","filter_map","find","find_map","flat_map","fold","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fn","from_iter","inspect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_internal","into_internal_iter","into_internal_iter","into_internal_iter","into_internal_iter","into_internal_iter","into_internal_iter","into_internal_iter","into_internal_iter","into_internal_iter","into_internal_iter","into_internal_iter","into_internal_iter","into_internal_iter","into_internal_iter","last","last","last","last","map","max","max_by","max_by_key","min","min_by","min_by_key","next","nth","nth","nth","nth","position","skip","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_for_each","try_for_each","try_for_each","try_for_each","try_for_each","try_for_each","try_for_each","try_for_each","try_for_each","try_for_each","try_for_each","try_for_each","try_for_each","try_for_each","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"internal_iterator"],[224,"core::ops::function"],[225,"core::clone"],[226,"core::iter::traits::iterator"],[227,"core::option"],[228,"core::ops::function"],[229,"core::ops::control_flow"],[230,"core::result"],[231,"core::any"]],"d":["A helper type used in <code>from_fn</code>.","An iterator that links two iterators together, in a chain.","An iterator that clones the elements of an underlying …","An iterator that copies the elements of an underlying …","An iterator that yields the current count and the element …","An iterator that filters the elements of <code>iter</code> with …","An iterator that uses <code>f</code> to both filter and map elements …","An iterator that maps each element to an iterator, and …","An iterator returned by <code>from_fn</code>.","Conversion from an <code>InternalIterator</code>.","An iterator that calls a function with a reference to each …","A wrapper type to convert <code>std::iter::Iterator</code> to …","Internal iterator over a collection.","Conversion to an <code>InternalIterator</code>.","Concrete iterator type returned by the conversion.","Type of items yielded by the iterator.","The type of the elements being iterated over.","Extension trait to add conversion to <code>InternalIterator</code> for …","An iterator that maps the values of <code>iter</code> with <code>f</code>.","An iterator that skips over <code>n</code> elements of <code>iter</code>.","An iterator that only iterates over the first <code>n</code> iterations …","Tests if every element of the iterator matches the …","Tests if any element of the iterator matches the predicate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes two iterators and returns an iterator that first …","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator yields cloned elements of the original …","Transforms the iterator into a collection.","Creates an iterator yields copied elements of the original …","Returns the number of elements yielded by the iterator.","","","","Creates an iterator that adds the index to every value of …","Creates an iterator which only yields elements matching …","A combination of <code>InternalIterator::filter</code> and …","Returns the first element of the iterator that matches the …","Applies function to the elements of iterator and returns …","Creates and iterator which maps over the elements and …","Folds every element into an accumulator by applying an …","Run the closure on each element.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an internal iterator from provided closure.","Convert from an iterator.","Run the closure on each element, while passing that …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert an <code>std::iter::Iterator</code> to an <code>InternalIterator</code>.","Convert this type to an internal iterator.","","","","","","","","","","","","","","Returns the last element.","","","","Transform each element in the iterator.","Returns the maximum element of an iterator.","Returns the maximum element of an iterator using a custom …","Returns the element that gives the maximum value from the …","Returns the minimum element of an iterator.","Returns the minimum element of an iterator using a custom …","Returns the element that gives the minimum value from the …","Returns the first element of the iterator.","Returns the <code>n</code>th element of the iterator.","","","","Returns the index of the first element matching the …","Skip first <code>n</code> elements of the iterator.","Take first <code>n</code> elements of the iterator, disregarding the …","","","","","","","","","","","","","Applies function each elements of the iterator. Stops …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,18,4,0,0,0,0,18,18,23,29,3,6,7,8,9,10,11,12,13,14,15,16,23,29,3,6,7,8,9,10,11,12,13,14,15,16,18,3,6,7,8,9,10,11,12,13,14,15,16,3,6,7,8,9,10,11,12,13,14,15,16,18,18,18,18,7,8,16,18,18,18,18,18,18,18,18,23,29,3,6,7,8,9,10,11,12,13,14,15,16,0,19,18,23,29,3,6,7,8,9,10,11,12,13,14,15,16,30,4,23,3,6,7,8,9,10,11,12,13,14,15,16,18,3,7,16,18,18,18,18,18,18,18,18,18,7,8,16,18,18,18,3,6,7,8,9,10,11,12,13,14,15,16,18,23,3,6,7,8,9,10,11,12,13,14,15,16,23,29,3,6,7,8,9,10,11,12,13,14,15,16,23,29,3,6,7,8,9,10,11,12,13,14,15,16,23,29,3,6,7,8,9,10,11,12,13,14,15,16],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],1,[],2],[[-1,-2],1,[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[3,[-1]]],[],4],[[[3,[-1,-2]]],[[3,[-1,-2]]],5,5],[[[6,[-1]]],[[6,[-1]]],5],[[[7,[-1]]],[[7,[-1]]],5],[[[8,[-1]]],[[8,[-1]]],5],[[[9,[-1,-2]]],[[9,[-1,-2]]],5,5],[[[10,[-1,-2]]],[[10,[-1,-2]]],5,5],[[[11,[-1,-2]]],[[11,[-1,-2]]],5,5],[[[12,[-1,-2]]],[[12,[-1,-2]]],5,5],[[[13,[-1,-2]]],[[13,[-1,-2]]],5,5],[[[14,[-1]]],[[14,[-1]]],5],[[[15,[-1]]],[[15,[-1]]],5],[[[16,[-1]]],[[16,[-1]]],5],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[-1,[[6,[-1]]],18],[-1,-2,[],19],[-1,[[7,[-1]]],18],[-1,20,[]],[[[7,[-1]]],20,18],[[[8,[-1]]],20,18],[[[16,[-1]]],20,21],[-1,[[8,[-1]]],[]],[[-1,-2],[[9,[-1,-2]]],[],2],[[-1,-2],[[10,[-1,-2]]],[],2],[[-1,-2],22,[],2],[[-1,-2],[[22,[-3]]],[],2,[]],[[-1,-2],[[11,[-1,-2]]],[],2],[[-1,-2,-3],-2,[],[],2],[[-1,-2],17,[],2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[23,[-1,-2]]],24,[]],[-1,-2,4,[]],[[-1,-2],[[12,[-1,-2]]],[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,25],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,22,[]],[[[3,[-1,-2]]],22,18,18],[[[7,[-1]]],22,18],[[[16,[-1]]],22,21],[[-1,-2],[[13,[-1,-2]]],[],2],[-1,22,[]],[[-1,-2],22,[],2],[[-1,-2],22,[],2],[-1,22,[]],[[-1,-2],22,[],2],[[-1,-2],22,[],2],[-1,22,[]],[[-1,20],22,[]],[[[7,[-1]],20],22,18],[[[8,[-1]],20],22,18],[[[16,[-1]],20],22,21],[[-1,-2],[[22,[20]]],[],2],[[-1,20],[[14,[-1]]],[]],[[-1,20],[[15,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[26,[-3]]],[],2,[]],[[[23,[-1,-2]],-3],[[26,[-4]]],24,[],2,[]],[[[3,[-1,-2]],-3],[[26,[-4]]],18,18,2,[]],[[[6,[-1]],-2],[[26,[-3]]],18,2,[]],[[[7,[-1]],-2],[[26,[-3]]],18,2,[]],[[[8,[-1]],-2],[[26,[-3]]],18,2,[]],[[[9,[-1,-2]],-3],[[26,[-4]]],18,2,2,[]],[[[10,[-1,-2]],-3],[[26,[-4]]],18,2,2,[]],[[[11,[-1,-2]],-3],[[26,[-4]]],18,2,2,[]],[[[12,[-1,-2]],-3],[[26,[-4]]],18,2,2,[]],[[[13,[-1,-2]],-3],[[26,[-4]]],18,2,2,[]],[[[14,[-1]],-2],[[26,[-3]]],18,2,[]],[[[15,[-1]],-2],[[26,[-3]]],18,2,[]],[[[16,[-1]],-2],[[26,[-3]]],21,2,[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]]],"c":[],"p":[[15,"bool"],[8,"FnMut",224],[3,"Chain",0],[8,"IntoInternalIterator",0],[8,"Clone",225],[3,"Cloned",0],[3,"Copied",0],[3,"Enumerate",0],[3,"Filter",0],[3,"FilterMap",0],[3,"FlatMap",0],[3,"Inspect",0],[3,"Map",0],[3,"Skip",0],[3,"Take",0],[3,"Internal",0],[15,"tuple"],[8,"InternalIterator",0],[8,"FromInternalIterator",0],[15,"usize"],[8,"Iterator",226],[4,"Option",227],[3,"FromFn",0],[8,"FnOnce",224],[8,"Sized",228],[4,"ControlFlow",229],[4,"Result",230],[3,"TypeId",231],[3,"BreakValue",0],[8,"IteratorExt",0]]},\
"itertools":{"doc":"Extra iterator adaptors, functions and macros.","t":"NNENEENNEINNNNNNEINNNIENNNFLLLFLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLFOLLLLLLLLLLLLLFLLLLLLLFLFLLLLLLLLLLLLFLLLLLLLFLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLFLLFLFLLLLLLLLLLLLLLLLLLLLOLLLLLLFOFLLFLFLLLLLLLLLLLLLLLLLLLLLFLLLFLLFLFLLLLLLLFLFKLLLLLLLLLLLLLLFLLLLLLLLLFLLLFKLLLLLLLLLLLLLLLFLFFFLLLLLLLFFFLLLLLLLLLLLLFLLLLLLLLLALLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLFFLLDDDDGDDDGGGGGGDDDDDDDDDGDDDGDDDGDGGGGDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLI","n":["Both","Continue","Diff","Done","Either","EitherOrBoth","First","FirstMismatch","FoldWhile","Itertools","Last","Left","Left","Longer","Middle","MinMax","MinMaxResult","MultiUnzip","NoElements","OneElement","Only","PeekingNext","Position","Right","Right","Shorter","all","all","all_equal","all_unique","any","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","assert_equal","at_most_one","batching","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","both","cartesian_product","cause","chain","chain","chunks","circular_tuple_windows","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","coalesce","collect","collect_tuple","collect_vec","combinations","combinations_with_replacement","concat","concat","cons_tuples","consume","contains","count","counts","counts_by","dedup","dedup_by","dedup_by_with_count","dedup_with_count","deref","deref_mut","description","diff_with","dropping","dropping_back","duplicates","duplicates_by","either","either_into","either_with","enumerate","eq","eq","eq","eq","eq","equal","equivalent","equivalent","equivalent","exactly_one","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","fill_buf","filter_map_ok","filter_ok","find","find_map","find_or_first","find_or_last","find_position","flatten_ok","flip","flip","flush","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold1","fold_ok","fold_options","fold_results","fold_while","for_each","foreach","format","format_with","from","from","from","from","from","from","from","group_by","has_left","has_right","hash","hash","interleave","interleave","interleave_shortest","intersperse","intersperse","intersperse_with","intersperse_with","into","into","into","into","into","into","into","into","into_future","into_group_map","into_group_map_by","into_grouping_map","into_grouping_map_by","into_inner","into_inner","into_inner","into_iter","into_iter","into_option","iproduct","is_both","is_done","is_left","is_left","is_right","is_right","iterate","izip","join","join","k_smallest","kmerge","kmerge","kmerge_by","kmerge_by","last","left","left","left_and_then","left_and_then","left_or","left_or_default","left_or_else","len","map","map_any","map_either","map_either_with","map_into","map_left","map_left","map_ok","map_results","map_right","map_right","max","max_set","max_set_by","max_set_by_key","merge","merge","merge_by","merge_join_by","merge_join_by","min","min_set","min_set_by","min_set_by_key","minmax","minmax_by","minmax_by_key","multi_cartesian_product","multipeek","multipeek","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multizip","next","next_back","next_tuple","nth","or","or_default","or_else","pad_using","partial_cmp","partition","partition","partition_map","partition_result","peek_nth","peeking_next","peeking_take_while","permutations","poll","position","position_max","position_max_by","position_max_by_key","position_min","position_min_by","position_min_by_key","position_minmax","position_minmax_by","position_minmax_by_key","positions","powerset","process_results","product1","put_back","put_back_n","rciter","read","read_exact","read_line","read_to_end","read_to_string","read_until","reduce","repeat_call","repeat_n","rev","rfind","rfold","right","right","right_and_then","right_and_then","right_or","right_or_default","right_or_else","seek","set_from","size_hint","sorted","sorted","sorted_by","sorted_by_cached_key","sorted_by_key","sorted_unstable","sorted_unstable_by","sorted_unstable_by_key","source","step","structs","sum1","take_while_ref","tee","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","traits","tree_fold1","try_collect","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tuple_combinations","tuple_windows","tuples","type_id","type_id","type_id","type_id","type_id","type_id","unfold","unique","unique_by","unwrap_left","unwrap_right","update","while_some","with_position","write","write_all","write_fmt","zip","zip_eq","zip_eq","zip_longest","Batching","Chunk","Chunks","CircularTupleWindows","Coalesce","Combinations","CombinationsWithReplacement","ConsTuples","Dedup","DedupBy","DedupByWithCount","DedupWithCount","Duplicates","DuplicatesBy","ExactlyOneError","FilterMapOk","FilterOk","FlattenOk","Format","FormatWith","Group","GroupBy","GroupingMap","GroupingMapBy","Groups","Interleave","InterleaveShortest","Intersperse","IntersperseWith","IntoChunks","Iterate","KMerge","KMergeBy","MapInto","MapOk","MapResults","Merge","MergeBy","MergeJoinBy","MultiPeek","MultiProduct","PadUsing","PeekNth","PeekingTakeWhile","Permutations","Positions","Powerset","ProcessResults","Product","PutBack","PutBackN","RcIter","RepeatCall","RepeatN","Step","TakeWhileRef","Tee","TupleBuffer","TupleCombinations","TupleWindows","Tuples","Unfold","Unique","UniqueBy","Update","WhileSome","WithPosition","Zip","ZipEq","ZipLongest","aggregate","all","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","count","count","count","count","count","count","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_first","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffer","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_parts","k","last","last","last","max","max_by","max_by_key","min","min_by","min_by_key","minmax","minmax_by","minmax_by_key","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","n","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","peek","peek","peek_nth","peeking_next","peeking_next","peeking_next","peeking_next","product","put_back","put_back","rciter","reset_peek","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","state","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_value","HomogeneousTuple"],"q":[[0,"itertools"],[388,"itertools::structs"],[1779,"itertools::traits"],[1780,"core::iter::traits::collect"],[1781,"core::ops::function"],[1782,"core::iter::traits::iterator"],[1783,"core::marker"],[1784,"core::convert"],[1785,"core::ffi::c_str"],[1786,"std::ffi::os_str"],[1787,"std::path"],[1788,"core::pin"],[1789,"core::convert"],[1790,"core::result"],[1791,"core::error"],[1792,"core::iter::adapters::chain"],[1793,"core::clone"],[1794,"core::iter::traits::exact_size"],[1795,"core::iter::adapters::cloned"],[1796,"core::cmp"],[1797,"core::cmp"],[1798,"std::io"],[1799,"core::cmp"],[1800,"core::cmp"],[1801,"core::ops::deref"],[1802,"core::ops::deref"],[1803,"core::ops::function"],[1804,"core::fmt"],[1805,"core::iter::traits::collect"],[1806,"std::io"],[1807,"alloc::vec::into_iter"],[1808,"core::default"],[1809,"core::task::wake"],[1810,"core::task::poll"],[1811,"core::future::future"],[1812,"core::iter::traits::accum"],[1813,"std::io"],[1814,"core::iter::adapters::rev"],[1815,"std::io"],[1816,"core::fmt"]],"d":["Both values are present.","Continue folding with this value","A type returned by the <code>diff_with</code> function.","Fold is complete and will return this value","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Value that either holds a single A or B, or both.","This is the first element.","The index of the first non-matching element along with …","An enum used for controlling the execution of <code>fold_while</code>.","An <code>Iterator</code> blanket implementation that provides extra …","This is the last element.","A value of type <code>L</code>.","Only the left value of type <code>A</code> is present.","The total number of elements that were in <code>I</code> along with the …","This is neither the first nor the last element.","More than one element in the iterator, the first element …","<code>MinMaxResult</code> is an enum returned by <code>minmax</code>.","An iterator that can be unzipped into multiple collections.","Empty iterator","Iterator with one element, so the minimum and maximum are …","This is the only element.","An iterator that allows peeking at an element before …","A value yielded by <code>WithPosition</code>. Indicates the position of …","A value of type <code>R</code>.","Only the right value of type <code>B</code> is present.","The total number of elements that were in <code>J</code> along with the …","Test whether the predicate holds for all elements in the …","","Check whether all elements compare equal.","Check whether all elements are unique (non equal).","Test whether the predicate holds for any elements in the …","","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","Converts from <code>&amp;mut EitherOrBoth&lt;A, B&gt;</code> to …","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","Converts from <code>&amp;EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;&amp;A, &amp;B&gt;</code>.","Assert that two iterables produce equal sequences, with …","If the iterator yields no elements, Ok(None) will be …","A “meta iterator adaptor”. Its closure receives a …","","","","","","","","","","","","","If Both, return <code>Some</code> tuple containing left and right.","Return an iterator adaptor that iterates over the …","","Takes two iterables and creates a new iterator over both …","Chain zero or more iterators together into one sequence.","Return an <em>iterable</em> that can chunk the iterator.","Return an iterator over all windows, wrapping back to the …","","","","","","","","","","","","Create an iterator that clones each element from &amp;T to T","","Return an iterator adaptor that uses the passed-in closure …","","Collects all items from the iterator into a tuple of a …","<code>.collect_vec()</code> is simply a type specialization of …","Return an iterator adaptor that iterates over the <code>k</code>-length …","Return an iterator that iterates over the <code>k</code>-length …","Combine all an iterator’s elements into one element by …","Combine all an iterator’s elements into one element by …","Create an iterator that maps for example iterators of …","","Returns <code>true</code> if the given item is present in this iterator.","","Collect the items in this iterator and return a <code>HashMap</code> …","Collect the items in this iterator and return a <code>HashMap</code> …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","","","","Compares every element yielded by both <code>i</code> and <code>j</code> with the …","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, and …","Return an iterator adaptor that produces elements that …","Return an iterator adaptor that produces elements that …","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","Iterate <code>iterable</code> with a running index.","","","","","","Return <code>true</code> if both iterables produce equal sequences …","","","","If the iterator yields exactly one element, that element …","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","Return an iterator adaptor that filters and transforms …","Return an iterator adaptor that filters every <code>Result::Ok</code> …","","","Find the value of the first element satisfying a predicate …","Find the value of the first element satisfying a predicate …","Find the position and value of the first element …","Return an iterator adaptor that flattens every <code>Result::Ok</code> …","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","Convert <code>EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;B, A&gt;</code>.","","","","","","","","Perform a fold operation over the iterable.","","Accumulator of the elements in the iterator.","Fold <code>Result</code> values from an iterator.","Fold <code>Option</code> values from an iterator.","See <code>.fold_ok()</code>.","An iterator method that applies a function, producing a …","","Run the closure <code>f</code> eagerly on each element of the iterator.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return an <em>iterable</em> that can group iterator elements. …","If <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.","If <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.","","","Create an iterator that interleaves elements in <code>i</code> and <code>j</code>.","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","Iterate <code>iterable</code> with a particular value inserted between …","An iterator adaptor to insert a particular value between …","Iterate <code>iterable</code> with a particular value created by a …","An iterator adaptor to insert a particular value created …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …","Return an <code>Iterator</code> on a <code>HashMap</code>. Keys mapped to <code>Vec</code>s of …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Extract the value of an either over two equivalent types.","Return the inner value.","Return the value in the continue or done.","","Convert the inner value to an iterator.","<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The returned …","Create an iterator over the “cartesian product” of …","If Right, return true otherwise, return false. Equivalent …","Return true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.","Return true if the value is the <code>Left</code> variant.","If Left, return true otherwise, return false. Exclusive …","Return true if the value is the <code>Right</code> variant.","If Right, return true otherwise, return false. Exclusive …","Creates a new iterator that infinitely applies function to …","Create an iterator running multiple iterators in lockstep.","Combine all iterator elements into one String, separated …","Combine all iterator elements into one String, separated …","Sort the k smallest elements into a new iterator, in …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","If <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …","Apply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …","Similar to [<code>map_either</code>], with an added context <code>ctx</code> …","Convert each item of the iterator using the <code>Into</code> trait.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return an iterator adaptor that applies the provided …","See <code>.map_ok()</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return the maximum value of the iterable.","Return all maximum elements of an iterator.","Return all maximum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Create an iterator that merges elements in <code>i</code> and <code>j</code>.","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merge-joins items from the …","Create an iterator that merges items from both this and …","Return the minimum value of the iterable.","Return all minimum elements of an iterator.","Return all minimum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Return an iterator adaptor that iterates over the …","An iterator adaptor that allows the user to peek at …","An iterator adaptor that allows the user to peek at …","Converts an iterator of tuples into a tuple of containers.","Unzip this iterator into multiple collections.","","","","","","","","","","","","","","Converts an iterator of tuples into a tuple of containers.","An iterator that generalizes <em>.zip()</em> and allows running …","","","Advances the iterator and returns the next items grouped …","","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Return an iterator adaptor that pads the sequence to a …","","Partition a sequence using predicate <code>pred</code> so that elements …","","Collect all iterator elements into one of two partitions. …","Partition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>…","A drop-in replacement for <code>std::iter::Peekable</code> which adds a …","Pass a reference to the next iterator element to the …","Return an iterator adaptor that borrows from this iterator …","Return an iterator adaptor that iterates over all …","","","Return the position of the maximum element in the iterator.","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the minimum element in the iterator.","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the positions of the minimum and maximum elements in","Return the postions of the minimum and maximum elements of …","Return the postions of the minimum and maximum elements of …","Return an iterator adaptor that yields the indices of all …","Return an iterator that iterates through the powerset of …","“Lift” a function of the values of an iterator so that …","Iterate over the entire iterator and multiply all the …","Create an iterator where you can put back a single item","Create an iterator where you can put back multiple values …","Return an iterator inside a <code>Rc&lt;RefCell&lt;_&gt;&gt;</code> wrapper.","","","","","","","Return either value of left, right, or the product of <code>f</code> …","An iterator source that produces elements indefinitely by …","Create an iterator that produces <code>n</code> repetitions of <code>element</code>.","Iterate <code>iterable</code> in reverse.","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","If <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","","Return an iterator adaptor that steps <code>n</code> elements in the …","The concrete iterator types.","Iterate over the entire iterator and add all the elements.","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Split into an iterator pair that both yield all elements …","","","","","","","Traits helpful for using certain <code>Itertools</code> methods in …","Accumulate the elements in the iterator in a tree-like …","<code>.try_collect()</code> is more convenient way of writing …","","","","","","","","","","","","","Return an iterator adaptor that iterates over the …","Return an iterator over all contiguous windows producing …","Return an iterator that groups the items in tuples of a …","","","","","","","Creates a new unfold source with the specified closure as …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Returns the left value","Returns the right value","Return an iterator adaptor that applies a mutating function","Return an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","Return an iterator adaptor that wraps each element in a …","","","","Converts the arguments to iterators and zips them.","Iterate <code>i</code> and <code>j</code> in lock step.","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","A “meta iterator adaptor”. Its closure receives a …","An iterator for the elements in a single chunk.","An iterator that yields the Chunk iterators.","An iterator over all windows,wrapping back to the first …","An iterator adaptor that may join together adjacent …","An iterator to iterate through all the <code>k</code>-length …","An iterator to iterate through all the <code>n</code>-length …","An iterator that maps an iterator of tuples like …","An iterator adaptor that removes repeated duplicates.","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter for duplicate elements.","Iterator returned for the error case of …","An iterator adapter to filter and apply a transformation …","An iterator adapter to filter values within a nested …","An iterator adaptor that flattens <code>Result::Ok</code> values and …","Format all iterator elements lazily, separated by <code>sep</code>.","Format all iterator elements lazily, separated by <code>sep</code>.","An iterator for the elements in a single group.","<code>GroupBy</code> is the storage for the lazy grouping operation.","<code>GroupingMap</code> is an intermediate struct for efficient …","<code>GroupingMapBy</code> is an intermediate struct for efficient …","An iterator that yields the Group iterators.","An iterator adaptor that alternates elements from two …","An iterator adaptor that alternates elements from the two …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","<code>ChunkLazy</code> is the storage for a lazy chunking operation.","An iterator that infinitely applies function to value and …","An iterator adaptor that merges an abitrary number of base …","An iterator adaptor that merges an abitrary number of base …","An iterator adapter to apply <code>Into</code> conversion to each …","An iterator adapter to apply a transformation within a …","See <code>MapOk</code>.","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merge-joins items from the two …","See <code>multipeek()</code> for more information.","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that pads a sequence to a minimum …","See <code>peek_nth()</code> for more information.","An iterator adaptor that takes items while a closure …","An iterator adaptor that iterates through all the <code>k</code>…","An iterator adapter to get the positions of each element …","An iterator to iterate through the powerset of the …","An iterator that produces only the <code>T</code> values as long as the …","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that allows putting back a single item …","An iterator adaptor that allows putting multiple items in …","A wrapper for <code>Rc&lt;RefCell&lt;I&gt;&gt;</code>, that implements the <code>Iterator</code> …","See <code>repeat_call</code> for more information.","An iterator that produces <em>n</em> repetitions of an element.","An iterator adaptor that steps a number elements in the …","An iterator adaptor that borrows from a <code>Clone</code>-able iterator","One half of an iterator pair where both return the same …","An iterator over a incomplete tuple.","An iterator to iterate through all combinations in a <code>Clone</code>…","An iterator over all contiguous windows that produces …","An iterator that groups the items in tuples of a specific …","See <code>unfold</code> for more information.","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter out duplicate elements.","An iterator adapter to apply a mutating function to each …","An iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","An iterator adaptor that wraps each element in an <code>Position</code>.","See <code>multizip</code> for more information.","An iterator which iterates two other iterators …","An iterator which iterates two other iterators …","This is the generic way to perform any operation on a …roups elements from the <code>GroupingMap</code> source by key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","","","Groups elements from the <code>GroupingMap</code> source by key and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a buffer with the produced items that was not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Split the <code>PutBack</code> into its parts.","Returns the length of a combination produced by this …","","","","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …eturns the (current) length of the pool from which …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Works exactly like <code>.next()</code> with the only difference that …","Works exactly like the <code>peek</code> method in <code>std::iter::Peekable</code>","Returns a reference to the <code>nth</code> value without advancing the …","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","Put back a single value to the front of the iterator.","Puts x in front of the iterator. The values are yielded in …","The boxed iterator.","Reset the peeking “cursor”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal state that will be passed to the closure on the …","Groups elements from the <code>GroupingMap</code> source by key and …put back value <code>value</code> (builder method)","Implemented for homogeneous tuples of size up to 12."],"i":[13,31,0,31,0,0,30,53,0,0,30,4,13,53,30,29,0,0,29,29,30,0,0,4,13,53,0,4,144,144,0,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,13,0,144,144,4,53,13,29,30,31,4,53,13,29,30,31,13,144,4,0,0,144,144,4,13,29,30,31,4,4,13,29,30,31,0,4,144,4,144,144,144,144,0,144,0,4,144,4,144,144,144,144,144,144,4,4,4,0,144,144,144,144,4,4,4,0,4,13,29,30,31,0,4,13,31,144,4,4,4,4,4,4,4,4,4,144,144,4,4,144,144,144,144,4,13,4,4,4,13,29,30,31,0,4,144,144,144,144,144,4,144,144,144,4,4,53,13,29,30,31,144,13,13,4,13,0,144,144,0,144,0,144,4,4,53,13,13,29,30,31,4,144,144,144,144,4,30,31,4,4,29,0,13,31,4,13,4,13,0,0,0,144,144,0,144,0,144,4,4,13,4,13,4,4,4,4,4,13,4,4,144,4,13,144,144,4,13,0,144,144,144,0,144,144,0,144,0,144,144,144,144,144,144,144,0,144,0,96,4,4,4,4,4,4,4,4,4,4,4,4,4,144,0,4,4,144,4,13,13,13,144,4,0,4,144,144,0,101,144,144,4,4,144,144,144,144,144,144,144,144,144,144,144,0,144,0,0,0,4,4,4,4,4,4,13,0,0,0,4,4,4,13,4,13,4,4,4,4,144,4,0,144,144,144,144,144,144,144,4,144,0,144,144,144,4,13,29,30,31,4,0,144,144,4,53,13,29,30,31,4,53,13,29,30,31,144,144,144,4,53,13,29,30,31,0,144,144,4,4,144,144,144,4,4,4,0,0,144,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,109,92,122,65,39,67,75,142,139,25,143,140,87,93,100,102,107,133,94,77,78,109,21,20,120,132,124,66,106,131,41,40,18,74,73,81,80,95,98,99,141,110,111,115,114,128,83,123,138,126,125,26,130,129,136,137,97,92,122,65,39,67,75,142,139,25,143,140,87,93,100,102,107,133,94,77,78,109,21,20,120,132,124,66,106,131,41,40,18,74,73,81,80,95,98,99,141,110,111,115,114,128,83,123,138,126,125,26,130,129,136,137,97,92,39,67,87,93,102,107,133,94,77,78,109,21,20,120,132,124,66,106,131,41,40,18,74,73,81,80,95,98,99,110,111,115,114,128,83,138,126,125,130,129,136,137,97,92,39,67,87,102,107,133,94,77,78,109,21,20,120,132,124,66,106,131,41,40,18,74,73,81,80,95,98,99,110,111,115,114,128,83,138,126,125,130,129,136,137,97,65,66,131,81,93,102,94,109,130,129,139,140,92,122,65,39,67,87,93,100,102,107,94,77,78,109,21,20,120,132,124,66,106,131,41,40,18,18,74,73,73,73,73,73,73,73,73,73,81,80,95,98,99,141,110,111,115,114,128,83,123,138,126,125,26,130,129,136,137,97,65,109,21,66,131,41,41,41,41,41,41,41,41,41,41,81,80,141,81,92,122,65,39,67,75,142,139,25,143,140,87,93,100,102,107,133,94,77,78,109,21,20,120,132,124,66,106,131,41,40,18,74,73,81,80,95,98,99,141,110,111,115,114,128,83,123,138,126,125,26,130,129,136,137,97,97,97,97,97,97,97,97,97,97,97,97,97,92,122,65,39,67,75,142,139,25,143,140,87,93,100,102,107,133,94,77,78,109,21,20,120,132,124,66,106,131,41,40,18,74,73,81,80,95,98,99,141,110,111,115,114,128,83,123,138,126,125,26,130,129,136,137,97,126,92,122,65,39,67,75,142,139,25,143,140,87,93,100,102,107,133,94,77,78,109,21,20,120,132,124,66,106,131,41,40,18,80,95,98,99,141,110,111,111,115,114,128,83,123,138,126,125,26,130,129,136,137,97,109,39,93,94,109,81,81,81,81,81,81,81,81,81,92,92,92,92,92,92,92,92,92,92,92,92,92,122,122,122,122,122,122,122,122,122,122,122,122,122,142,139,139,139,139,139,139,139,139,139,139,139,139,139,140,140,140,140,140,140,140,140,140,140,140,140,140,87,87,87,87,87,87,87,87,87,87,87,87,87,100,100,100,100,100,100,100,100,100,100,100,100,100,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,78,78,78,109,109,109,109,109,109,109,109,109,109,109,109,109,21,20,20,20,20,20,20,20,20,20,20,20,20,20,120,120,120,120,120,120,120,120,120,120,120,120,120,132,132,132,132,132,132,132,132,132,132,132,132,132,124,124,124,124,124,124,124,124,124,124,124,124,124,131,131,131,131,131,131,131,131,131,131,131,131,131,41,41,41,41,41,41,41,41,41,41,41,41,41,18,18,18,18,18,18,18,18,18,18,18,18,18,80,80,80,80,80,80,80,80,80,80,80,80,80,95,95,95,95,95,95,95,95,95,95,95,95,95,98,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,99,141,141,141,141,141,141,141,141,141,141,141,141,141,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,115,115,115,115,115,115,115,115,115,115,115,115,115,114,114,114,114,114,114,114,114,114,114,114,114,114,128,128,128,128,128,128,128,128,128,128,128,128,128,83,83,83,83,83,83,83,83,83,83,83,83,83,123,123,123,123,123,123,123,123,123,123,123,123,123,138,138,138,138,138,138,138,138,138,138,138,138,138,126,126,126,126,126,126,126,126,126,126,126,126,126,26,26,26,26,26,26,26,26,26,26,26,26,26,130,130,130,130,130,130,130,130,130,130,130,130,130,129,129,129,129,129,129,129,129,129,129,129,129,129,136,97,97,97,97,97,97,97,97,97,97,97,97,97,39,92,122,65,39,67,142,139,143,140,87,93,100,102,107,133,94,77,78,109,21,20,120,132,124,66,106,131,41,41,41,41,41,41,41,41,41,41,40,18,80,95,98,99,141,110,111,115,114,128,83,123,138,126,125,26,130,129,136,137,97,97,97,97,97,97,97,97,97,97,97,97,67,106,131,41,41,41,41,41,41,41,41,41,41,98,111,115,130,129,137,97,97,97,97,97,97,97,97,97,97,97,97,93,109,95,99,99,109,95,99,110,81,109,110,111,95,92,122,65,67,87,93,100,102,107,133,94,77,78,109,21,120,132,66,106,131,41,41,41,41,41,41,41,41,41,41,18,80,95,98,99,141,110,111,115,114,83,123,138,130,129,136,137,97,97,97,97,97,97,97,97,97,97,97,97,128,81,92,39,67,87,102,107,133,94,77,78,109,21,20,120,132,124,66,106,131,41,40,18,74,73,81,80,95,98,99,110,111,115,114,128,83,138,126,125,130,129,136,137,97,18,74,73,92,122,65,39,67,75,142,139,25,143,140,87,93,100,102,107,133,94,77,78,109,21,20,120,132,124,66,106,131,41,40,18,74,73,81,80,95,98,99,141,110,111,115,114,128,83,123,138,126,125,26,130,129,136,137,97,92,122,65,39,67,75,142,139,25,143,140,87,93,100,102,107,133,94,77,78,109,21,20,120,132,124,66,106,131,41,40,18,74,73,81,80,95,98,99,141,110,111,115,114,128,83,123,138,126,125,26,130,129,136,137,97,92,122,65,39,67,75,142,139,25,143,140,87,93,100,102,107,133,94,77,78,109,21,20,120,132,124,66,106,131,41,40,18,74,73,81,80,95,98,99,141,110,111,115,114,128,83,123,138,126,125,26,130,129,136,137,97,109,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],1,2,3],[[[4,[-1,-2]],-3],1,5,5,3],[-1,1,6],[-1,1,6],[[-1,-2],1,2,3],[[[4,[-1,-2]],-3],1,5,5,3],[[[4,[-2,-3]]],[[7,[-1]]],[],[[8,[[7,[-1]]]]],[[8,[[7,[-1]]]]]],[[[4,[-1,-2]]],9,[[8,[9]]],[[8,[9]]]],[[[4,[-1,-2]]],10,[[8,[10]]],[[8,[10]]]],[[[4,[-2,-3]]],-1,[],[[8,[-1]]],[[8,[-1]]]],[[[4,[-1,-2]]],11,[[8,[11]]],[[8,[11]]]],[[[4,[-1,-2]]],[[4,[-1,-2]]],[],[]],[[[4,[-1,-2]]],12,[[8,[12]]],[[8,[12]]]],[[[13,[-1,-2]]],[[13,[-1,-2]]],[],[]],[[[14,[[4,[-1,-2]]]]],[[4,[[14,[-1]],[14,[-2]]]]],[],[]],[[[14,[[4,[-1,-2]]]]],[[4,[[14,[-1]],[14,[-2]]]]],[],[]],[[[4,[-1,-2]]],12,[[15,[12]]],[[15,[12]]]],[[[4,[-2,-3]]],[[7,[-1]]],[],[[15,[[7,[-1]]]]],[[15,[[7,[-1]]]]]],[[[4,[-1,-2]]],9,[[15,[9]]],[[15,[9]]]],[[[4,[-1,-2]]],10,[[15,[10]]],[[15,[10]]]],[[[4,[-1,-2]]],[[4,[-1,-2]]],[],[]],[[[4,[-1,-2]]],11,[[15,[11]]],[[15,[11]]]],[[[4,[-2,-3]]],-1,[],[[15,[-1]]],[[15,[-1]]]],[[[13,[-1,-2]]],[[13,[-1,-2]]],[],[]],[[-1,-2],16,2,2],[-1,[[19,[17,[18,[-1]]]]],6],[[-1,-2],[[20,[-1,-2]]],6,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2]]],[[17,[[16,[-1,-2]]]]],[],[]],[[-1,-2],[[21,[-1]]],6,2],[[[4,[-1,-2]]],[[17,[22]]],22,22],[[-1,-2],23,2,2],0,[[-1,24],[[25,[-1]]],6],[-1,[[26,[-1,-2]]],[6,27,5,28],[0,27]],[[[4,[-1,-2]]],[[4,[-1,-2]]],27,27],[[[13,[-1,-2]]],[[13,[-1,-2]]],27,27],[[[29,[-1]]],[[29,[-1]]],27],[[[30,[-1]]],[[30,[-1]]],27],[[[31,[-1]]],[[31,[-1]]],27],[[[4,[-1,-2]],[4,[-1,-2]]],16,27,27],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[-1,32,2],[[[4,[-1,-2]],[4,[-1,-2]]],33,34,34],[[-1,-2],[[35,[-1,-2]]],6,3],[[[4,[-1,-2]]],-3,5,5,36],[-1,[[17,[-2]]],[6,5],37],[-1,38,6],[[-1,24],[[39,[-1]]],6],[[-1,24],[[40,[-1]]],6],[-1,[],2],[-1,[],6],[-1,[[41,[-2]]],2,[]],[[[4,[-1,-2]],24],16,42,42],[[-1,-2],1,6,43],[[[4,[-1,-2]]],24,5,5],[-1,[[44,[24]]],6],[[-1,-2],[[44,[-3,24]]],6,3,[45,46]],[-1,[[47,[-1]]],6],[[-1,-2],[[48,[-1,-2]]],6,3],[[-1,-2],[[49,[-1,-2]]],6,3],[-1,[[50,[-1]]],6],[[[4,[-1,-2]]],[],51,51],[[[4,[-1,-2]]],[],52,52],[[[4,[-1,-2]]],10,22,22],[[-1,-2,-3],[[17,[53]]],2,2,54],[[-1,24],-1,6],[[-1,24],-1,[6,55]],[-1,[[56,[-1]]],6],[[-1,-2],[[57,[-1,-3,-2]]],6,3,[45,46]],[[[4,[-1,-2]],-3,-4],-5,[],[],58,58,[]],[[[4,[-2,-3]]],-1,[],[[59,[-1]]],[[59,[-1]]]],[[[4,[-1,-2]],-3,-4,-5],-6,[],[],[],58,58,[]],[-1,60,2],[[[4,[-1,-2]],[4,[-1,-2]]],1,[],[]],[[[13,[-1,-2]],[13,[-1,-2]]],1,43,43],[[[29,[-1]],[29,[-1]]],1,43],[[[30,[-1]],[30,[-1]]],1,43],[[[31,[-1]],[31,[-1]]],1,43],[[-1,-2],1,2,2],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[-1,[[19,[[18,[-1]]]]],6],[[[4,[-1,-2]],10],-1,[],61],[[[4,[-1,-2]],10],-2,61,[]],[[[4,[-2,-3]],-4],16,[],[[62,[-1]]],[[62,[-1]]],2],[[[4,[[19,[-1,-2]],[19,[-3,-2]]]]],[[19,[[4,[-1,-3]],-2]]],[],[],[]],[[[4,[[16,[-1,-2]],[16,[-1,-3]]]]],[[16,[-1,[4,[-2,-3]]]]],[],[],[]],[[[4,[[17,[-1]],[17,[-2]]]]],[[17,[[4,[-1,-2]]]]],[],[]],[[[4,[[19,[-1,-2]],[19,[-1,-3]]]]],[[19,[-1,[4,[-2,-3]]]]],[],[],[]],[[[4,[[16,[-1,-2]],[16,[-3,-2]]]]],[[16,[[4,[-1,-3]],-2]]],[],[],[]],[[[4,[-1,-2]]],[[19,[[7,[63]],64]]],42,42],[[-1,-2],[[65,[-1,-2]]],[5,6],3],[[-1,-2],[[66,[-1,-2]]],[5,6],3],[[[4,[-1,-2]],-3],17,5,5,3],[[[4,[-1,-2]],-3],[[17,[-4]]],5,5,3,[]],[[-1,-2],17,6,3],[[-1,-2],17,6,3],[[-1,-2],[[17,[[16,[24]]]]],[],3],[-1,[[67,[-1,-2,-3]]],[5,6],2,[]],[[[4,[-1,-2]]],[[4,[-2,-1]]],[],[]],[[[13,[-1,-2]]],[[13,[-2,-1]]],[],[]],[[[4,[-1,-2]]],[[19,[16,64]]],68,68],[[[4,[-1,-2]],69],[[19,[16,70]]],61,61],[[[4,[-1,-2]],69],[[19,[16,70]]],71,71],[[[13,[-1,-2]],69],72,61,61],[[[29,[-1]],69],72,61],[[[30,[-1]],69],72,61],[[[31,[-1]],69],72,61],[[-1,-2,-3],-2,2,[],3],[[[4,[-1,-2]],-3,-4],-3,5,5,[],3],[[-1,-2],17,6,3],[[-1,-2,-3],[[19,[-2,-4]]],5,[],3,[]],[[-1,-2,-3],[[17,[-2]]],5,[],3],[[-1,-2,-3],[[19,[-2,-4]]],5,[],3,[]],[[-1,-2,-3],[[31,[-2]]],6,[],3],[[[4,[-1,-2]],-3],16,5,5,3],[[-1,-2],16,6,3],[[-1,10],[[73,[-1]]],6],[[-1,10,-2],[[74,[-1,-2]]],6,3],[-1,-1,[]],[[[19,[-1,-2]]],[[4,[-2,-1]]],[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[75,[-3,-1,-2]]],6,3,43],[[[13,[-1,-2]]],1,[],[]],[[[13,[-1,-2]]],1,[],[]],[[[4,[-1,-2]],-3],16,46,46,76],[[[13,[-1,-2]],-3],16,46,46,76],[[-1,-2],77,2,2],[[-1,-2],[[77,[-1]]],6,2],[[-1,-2],[[78,[-1]]],6,2],[-1,79,2],[-1,[[79,[-1]]],6],[[-1,-2],[[80,[-2]]],2,3],[[-1,-2],[[80,[-1,-2]]],6,3],[[[4,[-1,-2]]],[[19,[-2,-1]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2]]],[[17,[[4,[-1,-2]]]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[[44,[-2,[38,[-3]]]]],[5,6],[46,45],[]],[[-1,-2],[[44,[-3,[38,[-4]]]]],[5,6],54,[46,45],[]],[-1,[[81,[-1]]],[5,6]],[[-1,-2],[[82,[-1,-2]]],[5,6],3],[[[4,[-1,-1]]],-1,[]],[[[30,[-1]]],-1,[]],[[[31,[-1]]],-1,[]],[-1,-2,[],[]],[[[4,[-1,-2]]],4,2,2],[[[29,[-1]]],[[17,[[16,[-1,-1]]]]],27],0,[[[13,[-1,-2]]],1,[],[]],[[[31,[-1]]],1,[]],[[[4,[-1,-2]]],1,[],[]],[[[13,[-1,-2]]],1,[],[]],[[[4,[-1,-2]]],1,[],[]],[[[13,[-1,-2]]],1,[],[]],[[-1,-2],[[83,[-1,-2]]],[],3],0,[[-1,10],84,2],[[-1,10],84,[]],[[-1,24],85,6],[-1,86,2],[-1,86,6],[[-1,-2],[[87,[-2]]],2,0],[[-1,-2],[[87,[-2]]],6,3],[[[4,[-1,-2]]],17,5,5],[[[4,[-1,-2]]],[[17,[-1]]],[],[]],[[[13,[-1,-2]]],[[17,[-1]]],[],[]],[[[4,[-1,-2]],-3],[[4,[-4,-2]]],[],[],58,[]],[[[13,[-1,-2]],-3],[[13,[-4,-2]]],[],[],58,[]],[[[4,[-1,-2]],-1],-1,[],[]],[[[4,[-1,-2]]],-1,88,[]],[[[4,[-1,-2]],-3],-1,[],[],58],[[[4,[-1,-2]]],24,28,28],[[[4,[-1,-1]],-2],[[4,[-3,-3]]],[],58,[]],[[[13,[-1,-2]],-3,-4],[[13,[-5,-6]]],[],[],58,58,[],[]],[[[4,[-1,-2]],-3,-4],[[4,[-5,-6]]],[],[],58,58,[],[]],[[[4,[-1,-2]],-3,-4,-5],[[4,[-6,-7]]],[],[],[],58,58,[],[]],[-1,[[89,[-1,-2]]],6,[]],[[[4,[-1,-2]],-3],[[4,[-4,-2]]],[],[],58,[]],[[[13,[-1,-2]],-3],[[13,[-4,-2]]],[],[],58,[]],[[-1,-2],[[90,[-1,-2]]],[5,6],3],[[-1,-2],[[90,[-1,-2]]],[5,6],3],[[[4,[-1,-2]],-3],[[4,[-1,-4]]],[],[],58,[]],[[[13,[-1,-2]],-3],[[13,[-1,-4]]],[],[],58,[]],[-1,17,2],[-1,38,6],[[-1,-2],38,6,3],[[-1,-2],38,6,3],[[-1,-2],91,2,2],[[-1,-2],[[91,[-1]]],6,2],[[-1,-2,-3],[[92,[-1,-3]]],6,2,3],[[-1,-2,-3],[[93,[-3]]],2,2,3],[[-1,-2,-3],[[93,[-1,-3]]],6,2,3],[-1,17,2],[-1,38,6],[[-1,-2],38,6,3],[[-1,-2],38,6,3],[-1,29,6],[[-1,-2],29,6,3],[[-1,-2],29,6,3],[-1,94,6],[-1,95,2],[-1,[[95,[-1]]],6],[-1,-2,2,[]],[-1,-2,[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-2,-1,[],[6,[96,[-1]]]],[-1,[[97,[-2]]],[],[]],[[[4,[-1,-2]]],17,5,5],[[[4,[-1,-2]]],17,55,55],[-1,[[17,[-2]]],[6,5],37],[[[4,[-1,-2]],24],17,5,5],[[[13,[-1,-2]],-1,-2],[[16,[-1,-2]]],[],[]],[[[13,[-1,-2]]],[[16,[-1,-2]]],88,88],[[[13,[-1,-2]],-3,-4],[[16,[-1,-2]]],[],[],58,58],[[-1,24,-2],[[98,[-1,-2]]],6,3],[[[4,[-1,-2]],[4,[-1,-2]]],[[17,[33]]],[],[]],[[-1,-2],24,2,3],[[[4,[-1,-2]],-3],[[16,[-4,-4]]],5,5,3,[88,62]],[[-1,-2],[[16,[-4,-6]]],6,3,[],[88,[62,[-3]]],[],[88,[62,[-5]]]],[-1,[[16,[-3,-5]]],[5,6],[],[88,[62,[-2]]],[],[88,[62,[-4]]]],[-1,99,2],[[-1,-2],17,[],58],[[-1,-2],[[100,[-1,-2]]],[6,101],3],[[-1,24],[[102,[-1]]],6],[[[14,[[4,[-1,-2]]]],103],104,105,105],[[[4,[-1,-2]],-3],[[17,[24]]],5,5,3],[-1,[[17,[24]]],6],[[-1,-2],[[17,[24]]],6,3],[[-1,-2],[[17,[24]]],6,3],[-1,[[17,[24]]],6],[[-1,-2],[[17,[24]]],6,3],[[-1,-2],[[17,[24]]],6,3],[-1,[[29,[24]]],6],[[-1,-2],[[29,[24]]],6,3],[[-1,-2],[[29,[24]]],6,3],[[-1,-2],[[106,[-1,-2]]],6,3],[-1,[[107,[-1]]],6],[[-1,-2],[[19,[-3,-4]]],2,58,[],[]],[-1,[[17,[-2]]],6,108],[-1,109,2],[-1,110,2],[-1,111,2],[[[4,[-1,-2]],[7,[63]]],[[19,[24,64]]],112,112],[[[4,[-1,-2]],[7,[63]]],[[19,[16,64]]],112,112],[[[4,[-1,-2]],84],[[19,[24,64]]],42,42],[[[4,[-1,-2]],[38,[63,113]]],[[19,[24,64]]],112,112],[[[4,[-1,-2]],84],[[19,[24,64]]],112,112],[[[4,[-1,-2]],63,[38,[63,113]]],[[19,[24,64]]],42,42],[[[13,[-1,-1]],-2],-1,[],58],[-1,[[114,[-1]]],3],[[-1,24],[[115,[-1]]],27],[-1,116,2],[[[4,[-1,-2]],-3],17,55,55,3],[[[4,[-1,-2]],-3,-4],-3,55,55,[],3],[[[4,[-1,-2]]],[[17,[-2]]],[],[]],[[[13,[-1,-2]]],[[17,[-2]]],[],[]],[[[4,[-1,-2]],-3],[[4,[-1,-4]]],[],[],58,[]],[[[13,[-1,-2]],-3],[[13,[-1,-4]]],[],[],58,[]],[[[4,[-1,-2]],-2],-2,[],[]],[[[4,[-1,-2]]],-2,[],88],[[[4,[-1,-2]],-3],-2,[],[],58],[[[4,[-1,-2]],117],[[19,[118,64]]],119,119],[[-1,-2],24,5,2],[[[4,[-1,-2]]],[[16,[24,[17,[24]]]]],5,5],[-1,85,2],[-1,85,6],[[-1,-2],85,6,3],[[-1,-2],85,6,3],[[-1,-2],85,6,3],[-1,85,6],[[-1,-2],85,6,3],[[-1,-2],85,6,3],[[[4,[-1,-2]]],[[17,[22]]],22,22],[[-1,24],[[120,[-1]]],6],0,[-1,[[17,[-2]]],6,121],[[-1,-2],[[122,[-1,-2]]],27,3],[-1,[[16,[[123,[-1]],[123,[-1]]]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,84,[]],0,[[-1,-2],17,6,3],[-1,[[19,[-2,-3]]],[6,5],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[124,[-1,-2]]],[6,27],[[0,[-1]]]],[-1,[[125,[-1,-2]]],[6,5],37],[-1,[[126,[-1,-2]]],[6,5],37],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[[-1,-2],[[128,[-1,-2]]],[],3],[-1,[[129,[-1]]],6],[[-1,-2],[[130,[-1,-3,-2]]],6,3,[45,46]],[[[4,[-1,-2]]],-1,[],61],[[[4,[-1,-2]]],-2,61,[]],[[-1,-2],[[131,[-1,-2]]],6,3],[-1,[[132,[-1]]],[6,5]],[-1,[[133,[-1]]],6],[[[4,[-1,-2]],[7,[63]]],[[19,[24,64]]],68,68],[[[4,[-1,-2]],[7,[63]]],[[19,[16,64]]],68,68],[[[4,[-1,-2]],134],[[19,[16,64]]],68,68],[[-1,-2],135,2,2],[[-1,-2],136,2,2],[[-1,-2],[[136,[-1]]],6,2],[[-1,-2],[[137,[-1]]],6,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[81,[-1]],-2],[[44,[-3,-4]]],5,3,[46,45],[]],[[[109,[-1]],-2],1,5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[92,[-1,-2,-3]]],[[92,[-1,-2,-3]]],5,5,27],[[[39,[-1]]],[[39,[-1]]],[27,5]],[[[67,[-1,-2,-3]]],[[67,[-1,-2,-3]]],[5,27],2,[]],[[[87,[-1,-2]]],[[87,[-1,-2]]],[5,27],27],[[[93,[-1,-2,-3]]],[[93,[-1,-2,-3]]],5,5,27],[[[102,[-1]]],[[102,[-1]]],[27,5]],[[[107,[-1]]],[[107,[-1]]],[27,5]],[[[133,[-1]]],[[133,[-1]]],[27,5]],[[[94,[-1]]],[[94,[-1]]],[5,27,27]],[[[77,[-1,-2]]],[[77,[-1,-2]]],27,27],[[[78,[-1,-2]]],[[78,[-1,-2]]],[5,27],[5,27]],[[[109,[-1]]],[[109,[-1]]],[5,27]],[[[21,[-1,-2]]],[[21,[-1,-2]]],[5,27],27],[[[20,[-1,-2]]],[[20,[-1,-2]]],27,27],[[[120,[-1]]],[[120,[-1]]],27],[[[132,[-1]]],[[132,[-1]]],27],[[[124,[-1,-2]]],[[124,[-1,-2]]],[5,27],[[0,[-1]],27]],[[[66,[-1,-2]]],[[66,[-1,-2]]],27,27],[[[106,[-1,-2]]],[[106,[-1,-2]]],27,27],[[[131,[-1,-2]]],[[131,[-1,-2]]],27,27],[[[41,[-1,-2]]],[[41,[-1,-2]]],[27,5],[]],[[[40,[-1]]],[[40,[-1]]],[5,27]],[[[18,[-1]]],[[18,[-1]]],[5,27]],[[[74,[-1,-2]]],[[74,[-1,-2]]],27,27],[[[73,[-1]]],[[73,[-1]]],27],[[[81,[-1]]],[[81,[-1]]],27],[[[80,[-1,-2]]],[[80,[-1,-2]]],[5,27],27],[[[95,[-1]]],[[95,[-1]]],[5,27]],[[[98,[-1,-2]]],[[98,[-1,-2]]],27,27],[[[99,[-1]]],[[99,[-1]]],[5,27]],[[[110,[-1]]],[[110,[-1]]],[27,5]],[[[111,[-1]]],[[111,[-1]]],[]],[[[115,[-1]]],[[115,[-1]]],27],[[[114,[-1]]],[[114,[-1]]],27],[[[128,[-1,-2]]],[[128,[-1,-2]]],27,27],[[[83,[-1,-2]]],[[83,[-1,-2]]],27,27],[[[138,[-1]]],[[138,[-1]]],[37,27]],[[[126,[-1,-2]]],[[126,[-1,-2]]],[5,27],[37,27]],[[[125,[-1,-2]]],[[125,[-1,-2]]],[5,27],[37,27]],[[[130,[-1,-2,-3]]],[[130,[-1,-2,-3]]],[27,5],27,27],[[[129,[-1]]],[[129,[-1]]],[27,5]],[[[136,[-1,-2]]],[[136,[-1,-2]]],27,27],[[[137,[-1,-2]]],[[137,[-1,-2]]],27,27],[[[97,[-1]]],[[97,[-1]]],27],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[[65,[-1,-2]]],-3,5,3,36],[[[66,[-1,-2]]],-3,5,3,36],[[[131,[-1,-2]]],-3,5,3,36],[[[81,[-1]]],[[44,[-2,-4]]],5,[46,45],[],[88,[62,[-3]]]],[[[93,[-1,-2,-3]]],24,5,5,3],[[[102,[-1]]],24,5],[[[94,[-1]]],24,[5,27]],[[[109,[-1]]],24,5],[[[130,[-1,-2,-3]]],24,5,[45,46],3],[[[129,[-1]]],24,5],[[[139,[-1,-2,-3]]],16,[],5,[]],[[[140,[-1]]],16,5],[[[92,[-1,-2,-3]],69],72,[5,61],[5,61],[]],[[[122,[-1,-2]],69],72,[5,61],[]],[[[65,[-1,-2]],69],72,61,[]],[[[39,[-1]],69],72,[5,61]],[[[67,[-1,-2,-3]],69],72,[5,61],2,[]],[[[87,[-1,-2]],69],72,[5,61],[]],[[[93,[-1,-2,-3]],69],72,[5,61],[5,61],[]],[[[100,[-1,-2]],69],72,[5,61],[]],[[[102,[-1]],69],72,[5,61]],[[[107,[-1]],69],72,[5,61]],[[[94,[-1]],69],72,[5,27,61]],[[[77,[-1,-2]],69],72,61,61],[[[78,[-1,-2]],69],72,[5,61],[5,61]],[[[109,[-1]],69],72,[5,61]],[[[21,[-1,-2]],69],72,[5,61],61],[[[20,[-1,-2]],69],72,61,[]],[[[120,[-1]],69],72,61],[[[132,[-1]],69],72,61],[[[124,[-1,-2]],69],72,[5,61],[[0,[-1]],61]],[[[66,[-1,-2]],69],72,61,[]],[[[106,[-1,-2]],69],72,61,[]],[[[131,[-1,-2]],69],72,61,[]],[[[41,[-1,-2]],69],72,[5,61],61],[[[40,[-1]],69],72,[5,61]],[[[18,[-1]],69],72,[5,61]],[[[18,[-1]],69],72,5],[[[74,[-1,-2]],69],72,5,3],[[[73,[-1]],69],72,5],[[[73,[-1]],69],72,5],[[[73,[-1]],69],72,5],[[[73,[-1]],69],72,5],[[[73,[-1]],69],72,5],[[[73,[-1]],69],72,5],[[[73,[-1]],69],72,5],[[[73,[-1]],69],72,5],[[[73,[-1]],69],72,5],[[[81,[-1]],69],72,61],[[[80,[-1,-2]],69],72,[5,61],61],[[[95,[-1]],69],72,[5,61]],[[[98,[-1,-2]],69],72,61,[]],[[[99,[-1]],69],72,[5,61]],[[[141,[-1,-2]],69],72,61,61],[[[110,[-1]],69],72,[61,5]],[[[111,[-1]],69],72,61],[[[115,[-1]],69],72,61],[[[114,[-1]],69],72,[]],[[[128,[-1,-2]],69],72,61,[]],[[[83,[-1,-2]],69],72,61,[]],[[[123,[-1]],69],72,[5,61]],[[[138,[-1]],69],72,[37,61]],[[[126,[-1,-2]],69],72,[5,61],[37,61]],[[[125,[-1,-2]],69],72,[5,61],[37,61]],[[[26,[-1,-2]],69],72,[5,27,61],[0,27,61]],[[[130,[-1,-2,-3]],69],72,[5,61],[61,46,45],[]],[[[129,[-1]],69],72,[5,61]],[[[136,[-1,-2]],69],72,61,61],[[[137,[-1,-2]],69],72,61,61],[[[97,[-1]],69],72,61],[[[65,[-1,-2]],-3,-4],-3,5,3,[],3],[[[109,[-1]],-2,-3],-2,5,[],3],[[[21,[-1,-2]],-3,-4],-3,5,[27,5],[],3],[[[66,[-1,-2]],-3,-4],-3,5,3,[],3],[[[131,[-1,-2]],-3,-4],-3,5,3,[],3],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]],-11]]]],-12,-13],-12,5,[],[],[],[],[],[],[],[],[],[],[],3],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]],-10]]]],-11,-12],-11,5,[],[],[],[],[],[],[],[],[],[],3],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7]],-8]]]],-9,-10],-9,5,[],[],[],[],[],[],[],[],3],[[[41,[-1,[16,[[16,[-2,-3,-4]],-5]]]],-6,-7],-6,5,[],[],[],[],[],3],[[[41,[-1,[16,[[16,[-2,-3,-4,-5]],-6]]]],-7,-8],-7,5,[],[],[],[],[],[],3],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]],-13]]]],-14,-15],-14,5,[],[],[],[],[],[],[],[],[],[],[],[],[],3],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6]],-7]]]],-8,-9],-8,5,[],[],[],[],[],[],[],3],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]],-12]]]],-13,-14],-13,5,[],[],[],[],[],[],[],[],[],[],[],[],3],[[[41,[-1,[16,[[16,[-2,-3]],-4]]]],-5,-6],-5,5,[],[],[],[],3],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8]],-9]]]],-10,-11],-10,5,[],[],[],[],[],[],[],[],[],3],[[[81,[-1]],-2,-3],[[44,[-4,-2]]],5,27,3,[46,45]],[[[80,[-1,-2]],-3,-4],-3,5,0,[],3],[[[141,[-1,-2]],-3,-4],-3,5,[],[],3],[[[81,[-1]],-2],[[44,[-3,-4]]],5,3,[46,45],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[16,[-1,-2]]],[[97,[16]]],2,2],[[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[[97,[16]]],2,2,2,2,2,2,2,2,2,2,2,2],[[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9]]],[[97,[16]]],2,2,2,2,2,2,2,2,2],[[[16,[-1,-2,-3,-4,-5,-6]]],[[97,[16]]],2,2,2,2,2,2],[[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[[97,[16]]],2,2,2,2,2,2,2,2,2,2,2],[[[16,[-1,-2,-3,-4,-5,-6,-7,-8]]],[[97,[16]]],2,2,2,2,2,2,2,2],[-1,-1,[]],[[[16,[-1,-2,-3,-4,-5,-6,-7]]],[[97,[16]]],2,2,2,2,2,2,2],[[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[[97,[16]]],2,2,2,2,2,2,2,2,2,2],[[[16,[-1]]],[[97,[16]]],2],[[[16,[-1,-2,-3]]],[[97,[16]]],2,2,2],[[[16,[-1,-2,-3,-4,-5]]],[[97,[16]]],2,2,2,2,2],[[[16,[-1,-2,-3,-4]]],[[97,[16]]],2,2,2,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[126,[-1,-2]]],[[138,[-2]]],5,37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[75,[-1,-2,-3]]],[],43,5,3],[-1,-2,[],[]],[-1,-2,[],[]],[[[25,[-1]]],[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[111,[-1]]],[[111,[-1]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[109,[-1]]],[[16,[17,-1]]],5],[[[39,[-1]]],24,5],[[[93,[-1,-2,-3]]],17,5,5,3],[[[94,[-1]]],17,[5,27]],[[[109,[-1]]],17,5],[[[81,[-1]]],[[44,[-2,-3]]],5,[46,45],34],[[[81,[-1]],-2],[[44,[-3,-4]]],5,3,[46,45],[]],[[[81,[-1]],-2],[[44,[-3,-4]]],5,3,[46,45],[]],[[[81,[-1]]],[[44,[-2,-3]]],5,[46,45],34],[[[81,[-1]],-2],[[44,[-3,-4]]],5,3,[46,45],[]],[[[81,[-1]],-2],[[44,[-3,-4]]],5,3,[46,45],[]],[[[81,[-1]]],[[44,[-2,[29,[-3]]]]],5,[46,45],34],[[[81,[-1]],-2],[[44,[-3,[29,[-4]]]]],5,3,[46,45],[]],[[[81,[-1]],-2],[[44,[-3,[29,[-4]]]]],5,3,[46,45],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,16,[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,16,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2,-3]]],[],[],[]],[-1,[[16,[-2,-3,-4]]],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[16,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[[[39,[-1]]],24,5],[[[92,[-1,-2,-3]]],17,5,5,0],[[[122,[-1,-2]]],17,[5,27],3],[[[65,[-1,-2]]],17,5,3],[[[39,[-1]]],17,5],[[[67,[-1,-2,-3]]],17,5,2,[]],[[[142,[-1,-2,-3]]],17,43,5,3],[[[139,[-1,-2,-3]]],17,43,5,3],[[[143,[-1]]],17,5],[[[140,[-1]]],17,5],[[[87,[-1,-2]]],17,5,0],[[[93,[-1,-2,-3]]],17,5,5,3],[[[100,[-1,-2]]],17,101,3],[[[102,[-1]]],17,5],[[[107,[-1]]],17,5],[[[133,[-1]]],17,5],[[[94,[-1]]],17,[5,27]],[[[77,[-1,-2]]],17,5,5],[[[78,[-1,-2]]],17,5,5],[[[109,[-1]]],17,5],[[[21,[-1,-2]]],17,5,[27,5]],[[[20,[-1,-2]]],17,5,3],[[[120,[-1]]],17,5],[[[132,[-1]]],17,5],[[[124,[-1,-2]]],17,5,[[0,[-1]]]],[[[66,[-1,-2]]],17,5,3],[[[106,[-1,-2]]],17,5,3],[[[131,[-1,-2]]],17,5,3],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8]],-9]]]]],17,5,[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]],-13]]]]],17,5,[],[],[],[],[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4]],-5]]]]],17,5,[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]],-12]]]]],17,5,[],[],[],[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5]],-6]]]]],17,5,[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]],-11]]]]],17,5,[],[],[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6]],-7]]]]],17,5,[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7]],-8]]]]],17,5,[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3]],-4]]]]],17,5,[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]],-10]]]]],17,5,[],[],[],[],[],[],[],[],[]],[[[40,[-1]]],17,5],[[[18,[-1]]],17,5],[[[80,[-1,-2]]],17,5,0],[[[95,[-1]]],17,5],[[[98,[-1,-2]]],17,5,3],[[[99,[-1]]],17,5],[[[141,[-1,-2]]],17,5,[]],[[[110,[-1]]],17,5],[[[111,[-1]]],17,5],[[[115,[-1]]],17,27],[[[114,[-1]]],17,3],[[[128,[-1,-2]]],17,[],3],[[[83,[-1,-2]]],17,[],3],[[[123,[-1]]],17,5],[[[138,[-1]]],17,37],[[[126,[-1,-2]]],17,5,37],[[[125,[-1,-2]]],17,5,[37,27]],[[[26,[-1,-2]]],17,[5,27],[0,27]],[[[130,[-1,-2,-3]]],17,5,[45,46],3],[[[129,[-1]]],17,5],[[[136,[-1,-2]]],17,5,5],[[[137,[-1,-2]]],17,5,5],[[[97,[[16,[-1,-2]]]]],17,5,5],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9]]]]],17,5,5,5,5,5,5,5,5,5],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]]]],17,5,5,5,5,5,5,5,5,5,5,5,5],[[[97,[[16,[-1,-2,-3,-4,-5,-6]]]]],17,5,5,5,5,5,5],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8]]]]],17,5,5,5,5,5,5,5,5],[[[97,[[16,[-1]]]]],17,5],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]]]]],17,5,5,5,5,5,5,5,5,5,5],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]]]],17,5,5,5,5,5,5,5,5,5,5,5],[[[97,[[16,[-1,-2,-3,-4]]]]],17,5,5,5,5],[[[97,[[16,[-1,-2,-3]]]]],17,5,5,5],[[[97,[[16,[-1,-2,-3,-4,-5]]]]],17,5,5,5,5,5],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7]]]]],17,5,5,5,5,5,5,5],[[[67,[-1,-2,-3]]],17,55,2,[]],[[[106,[-1,-2]]],17,[55,28],3],[[[131,[-1,-2]]],17,55,3],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]],-13]]]]],17,55,[],[],[],[],[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7]],-8]]]]],17,55,[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6]],-7]]]]],17,55,[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]],-11]]]]],17,55,[],[],[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5]],-6]]]]],17,55,[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8]],-9]]]]],17,55,[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]],-10]]]]],17,55,[],[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4]],-5]]]]],17,55,[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]],-12]]]]],17,55,[],[],[],[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3]],-4]]]]],17,55,[],[],[]],[[[98,[-1,-2]]],17,[55,28],3],[[[111,[-1]]],17,55],[[[115,[-1]]],17,27],[[[130,[-1,-2,-3]]],17,55,[45,46],3],[[[129,[-1]]],17,55],[[[137,[-1,-2]]],17,[55,28],[55,28]],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]]]]],17,[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28]],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8]]]]],17,[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28]],[[[97,[[16,[-1]]]]],17,[55,28]],[[[97,[[16,[-1,-2,-3,-4,-5]]]]],17,[55,28],[55,28],[55,28],[55,28],[55,28]],[[[97,[[16,[-1,-2,-3,-4]]]]],17,[55,28],[55,28],[55,28],[55,28]],[[[97,[[16,[-1,-2,-3,-4,-5,-6]]]]],17,[55,28],[55,28],[55,28],[55,28],[55,28],[55,28]],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9]]]]],17,[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28]],[[[97,[[16,[-1,-2]]]]],17,[55,28],[55,28]],[[[97,[[16,[-1,-2,-3]]]]],17,[55,28],[55,28],[55,28]],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]]]],17,[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28]],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7]]]]],17,[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28]],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]]]],17,[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28],[55,28]],[[[93,[-1,-2,-3]],24],17,5,5,3],[[[109,[-1]],24],17,5],[[[95,[-1]]],17,5],[[[99,[-1]]],17,5],[[[99,[-1]],24],17,5],[[[109,[-1]],-2],17,5,58],[[[95,[-1]],-2],17,5,58],[[[99,[-1]],-2],17,5,58],[[[110,[-1]],-2],17,5,58],[[[81,[-1]]],[[44,[-2,-3]]],5,[46,45],[]],[[[109,[-1]]],16,5],[[[110,[-1]]],16,5],0,[[[95,[-1]]],16,5],[[[92,[-1,-2,-3]]],[[16,[24,[17,[24]]]]],5,5,0],[[[122,[-1,-2]]],[[16,[24,[17,[24]]]]],[5,27],3],[[[65,[-1,-2]]],[[16,[24,[17,[24]]]]],5,3],[[[67,[-1,-2,-3]]],[[16,[24,[17,[24]]]]],5,2,[]],[[[87,[-1,-2]]],[[16,[24,[17,[24]]]]],5,0],[[[93,[-1,-2,-3]]],[[16,[24,[17,[24]]]]],5,5,3],[[[100,[-1,-2]]],[[16,[24,[17,[24]]]]],101,3],[[[102,[-1]]],[[16,[24,[17,[24]]]]],5],[[[107,[-1]]],[[16,[24,[17,[24]]]]],5],[[[133,[-1]]],[[16,[24,[17,[24]]]]],5],[[[94,[-1]]],[[16,[24,[17,[24]]]]],[5,27]],[[[77,[-1,-2]]],[[16,[24,[17,[24]]]]],5,5],[[[78,[-1,-2]]],[[16,[24,[17,[24]]]]],5,5],[[[109,[-1]]],[[16,[24,[17,[24]]]]],5],[[[21,[-1,-2]]],[[16,[24,[17,[24]]]]],5,[27,5]],[[[120,[-1]]],[[16,[24,[17,[24]]]]],5],[[[132,[-1]]],[[16,[24,[17,[24]]]]],5],[[[66,[-1,-2]]],[[16,[24,[17,[24]]]]],5,3],[[[106,[-1,-2]]],[[16,[24,[17,[24]]]]],5,3],[[[131,[-1,-2]]],[[16,[24,[17,[24]]]]],5,3],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10]],-11]]]]],[[16,[24,[17,[24]]]]],5,[],[],[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8]],-9]]]]],[[16,[24,[17,[24]]]]],5,[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6]],-7]]]]],[[16,[24,[17,[24]]]]],5,[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]],-13]]]]],[[16,[24,[17,[24]]]]],5,[],[],[],[],[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]],-12]]]]],[[16,[24,[17,[24]]]]],5,[],[],[],[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3]],-4]]]]],[[16,[24,[17,[24]]]]],5,[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4]],-5]]]]],[[16,[24,[17,[24]]]]],5,[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7,-8,-9]],-10]]]]],[[16,[24,[17,[24]]]]],5,[],[],[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5,-6,-7]],-8]]]]],[[16,[24,[17,[24]]]]],5,[],[],[],[],[],[],[]],[[[41,[-1,[16,[[16,[-2,-3,-4,-5]],-6]]]]],[[16,[24,[17,[24]]]]],5,[],[],[],[],[]],[[[18,[-1]]],[[16,[24,[17,[24]]]]],5],[[[80,[-1,-2]]],[[16,[24,[17,[24]]]]],5,0],[[[95,[-1]]],[[16,[24,[17,[24]]]]],5],[[[98,[-1,-2]]],[[16,[24,[17,[24]]]]],5,3],[[[99,[-1]]],[[16,[24,[17,[24]]]]],5],[[[141,[-1,-2]]],[[16,[24,[17,[24]]]]],5,[]],[[[110,[-1]]],[[16,[24,[17,[24]]]]],5],[[[111,[-1]]],[[16,[24,[17,[24]]]]],5],[[[115,[-1]]],[[16,[24,[17,[24]]]]],27],[[[114,[-1]]],[[16,[24,[17,[24]]]]],3],[[[83,[-1,-2]]],[[16,[24,[17,[24]]]]],[],3],[[[123,[-1]]],[[16,[24,[17,[24]]]]],5],[[[138,[-1]]],[[16,[24,[17,[24]]]]],37],[[[130,[-1,-2,-3]]],[[16,[24,[17,[24]]]]],5,[45,46],3],[[[129,[-1]]],[[16,[24,[17,[24]]]]],5],[[[136,[-1,-2]]],[[16,[24,[17,[24]]]]],5,5],[[[137,[-1,-2]]],[[16,[24,[17,[24]]]]],5,5],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9]]]]],[[16,[24,[17,[24]]]]],5,5,5,5,5,5,5,5,5],[[[97,[[16,[-1,-2,-3,-4]]]]],[[16,[24,[17,[24]]]]],5,5,5,5],[[[97,[[16,[-1,-2]]]]],[[16,[24,[17,[24]]]]],5,5],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]]]],[[16,[24,[17,[24]]]]],5,5,5,5,5,5,5,5,5,5,5,5],[[[97,[[16,[-1,-2,-3,-4,-5]]]]],[[16,[24,[17,[24]]]]],5,5,5,5,5],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7]]]]],[[16,[24,[17,[24]]]]],5,5,5,5,5,5,5],[[[97,[[16,[-1]]]]],[[16,[24,[17,[24]]]]],5],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]]]],[[16,[24,[17,[24]]]]],5,5,5,5,5,5,5,5,5,5,5],[[[97,[[16,[-1,-2,-3,-4,-5,-6]]]]],[[16,[24,[17,[24]]]]],5,5,5,5,5,5],[[[97,[[16,[-1,-2,-3]]]]],[[16,[24,[17,[24]]]]],5,5,5],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]]]]],[[16,[24,[17,[24]]]]],5,5,5,5,5,5,5,5,5,5],[[[97,[[16,[-1,-2,-3,-4,-5,-6,-7,-8]]]]],[[16,[24,[17,[24]]]]],5,5,5,5,5,5,5,5],0,[[[81,[-1]]],[[44,[-2,-3]]],5,[46,45],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,84,[]],[-1,84,[]],[-1,84,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[-1,127,[]],[[[109,[-1]]],[[109,[-1]]],5],0],"c":[153,156,159,233,314,338,384,423,440,442],"p":[[15,"bool"],[8,"IntoIterator",1780],[8,"FnMut",1781],[4,"Either",0],[8,"Iterator",1782],[8,"Sized",1783],[15,"slice"],[8,"AsMut",1784],[3,"CStr",1785],[15,"str"],[3,"OsStr",1786],[3,"Path",1787],[4,"EitherOrBoth",0],[3,"Pin",1788],[8,"AsRef",1784],[15,"tuple"],[4,"Option",1789],[3,"ExactlyOneError",388],[4,"Result",1790],[3,"Batching",388],[3,"Product",388],[8,"Error",1791],[3,"Chain",1792],[15,"usize"],[3,"IntoChunks",388],[3,"CircularTupleWindows",388],[8,"Clone",1793],[8,"ExactSizeIterator",1794],[4,"MinMaxResult",0],[4,"Position",0],[4,"FoldWhile",0],[3,"Cloned",1795],[4,"Ordering",1796],[8,"Ord",1796],[6,"Coalesce",388],[8,"FromIterator",1780],[8,"HomogeneousTuple",1779],[3,"Vec",1797],[3,"Combinations",388],[3,"CombinationsWithReplacement",388],[3,"ConsTuples",388],[8,"BufRead",1798],[8,"PartialEq",1796],[3,"HashMap",1799],[8,"Eq",1796],[8,"Hash",1800],[6,"Dedup",388],[6,"DedupBy",388],[6,"DedupByWithCount",388],[6,"DedupWithCount",388],[8,"Deref",1801],[8,"DerefMut",1801],[4,"Diff",0],[8,"Fn",1781],[8,"DoubleEndedIterator",1802],[6,"Duplicates",388],[6,"DuplicatesBy",388],[8,"FnOnce",1781],[8,"Into",1784],[3,"Enumerate",1803],[8,"Debug",1804],[8,"Extend",1780],[15,"u8"],[3,"Error",1805],[3,"FilterMapOk",388],[3,"FilterOk",388],[3,"FlattenOk",388],[8,"Write",1798],[3,"Formatter",1804],[3,"Error",1804],[8,"Display",1804],[6,"Result",1804],[3,"Format",388],[3,"FormatWith",388],[3,"GroupBy",388],[8,"Hasher",1800],[3,"Interleave",388],[3,"InterleaveShortest",388],[6,"Intersperse",388],[3,"IntersperseWith",388],[3,"GroupingMap",388],[6,"GroupingMapBy",388],[3,"Iterate",388],[3,"String",1806],[3,"IntoIter",1807],[6,"KMerge",388],[3,"KMergeBy",388],[8,"Default",1808],[6,"MapInto",388],[6,"MapOk",388],[6,"Merge",388],[3,"MergeBy",388],[3,"MergeJoinBy",388],[3,"MultiProduct",388],[3,"MultiPeek",388],[8,"MultiUnzip",0],[3,"Zip",388],[3,"PadUsing",388],[3,"PeekNth",388],[3,"PeekingTakeWhile",388],[8,"PeekingNext",0],[3,"Permutations",388],[3,"Context",1809],[4,"Poll",1810],[8,"Future",1811],[3,"Positions",388],[3,"Powerset",388],[8,"Product",1812],[3,"PutBack",388],[3,"PutBackN",388],[3,"RcIter",388],[8,"Read",1798],[3,"Global",1813],[3,"RepeatCall",388],[3,"RepeatN",388],[3,"Rev",1814],[4,"SeekFrom",1798],[15,"u64"],[8,"Seek",1798],[3,"Step",388],[8,"Sum",1812],[3,"TakeWhileRef",388],[3,"Tee",388],[3,"TupleCombinations",388],[3,"TupleWindows",388],[3,"Tuples",388],[3,"TypeId",1815],[3,"Unfold",388],[3,"Unique",388],[3,"UniqueBy",388],[3,"Update",388],[3,"WhileSome",388],[3,"WithPosition",388],[3,"Arguments",1804],[3,"Zip",1816],[3,"ZipEq",388],[3,"ZipLongest",388],[3,"TupleBuffer",388],[3,"Group",388],[3,"Chunk",388],[3,"ProcessResults",388],[3,"Groups",388],[3,"Chunks",388],[8,"Itertools",0]]},\
"itoa":{"doc":"github crates-io docs-rs","t":"DILLLLLLLLLLL","n":["Buffer","Integer","borrow","borrow_mut","clone","default","format","from","into","new","try_from","try_into","type_id"],"q":[[0,"itoa"],[13,"core::result"],[14,"core::any"]],"d":["A correctly sized stack allocation for the formatted …","An integer that can be written into an <code>itoa::Buffer</code>.","","","","","Print an integer into this buffer and return a reference …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[],1],[[1,-1],2,3],[-1,-1,[]],[-1,-2,[],[]],[[],1],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]]],"c":[],"p":[[3,"Buffer",0],[15,"str"],[8,"Integer",0],[4,"Result",13],[3,"TypeId",14]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":"IFO","n":["LazyStatic","initialize","lazy_static"],"q":[[0,"lazy_static"]],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[0,[-1,1,2],0],"c":[],"p":[[15,"tuple"],[8,"LazyStatic",0]]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","t":"RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGGFGRRRRRRRRRRRRRRRRFFFFFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRERRRRRRRRRRRRRRRRRRRRRRRRRRDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFFFRFRRRERRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNNRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFNNNNNNRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNNRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFRFFFFFRRRFFRRRRRRRRRRRRRRRRRRRFFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFRRRRRRTTTMMDDDDDDMFMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMFFFFFMMFFFFFMMMMMMDFMMMMMMMMMMMFFMFMMMFMFMFFDFMMMMMFFFDMFFFFFFFMMGDDDFFFFFFFMMMMMMFMGGMGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDFFMMMMMMGGGMGMMGGMMGGGGGGGEMFMMGFFFFFFMFFFFFMMMFFFFGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFMMMMMMMMMDMMMMMMMMFFFMMMFGGFFFFGMMMMMMGMMMMGMMMMMMMMMMFFFMDMMMMMMMMMMMMMMMMMMMGFMMDFFFMMFFFMMMMFFMMMMMMMMMMDFFFFMMFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMMMMFFFFFFFFFMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMFMMMMFFFFFFFFFFMDFFFFMMFFFFFFMMFMMMMMMMMMMMMMMMMMFDFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFMMFMMMFEFDFFMFFFMMMMMMFFFFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGFFFFFFGDDMMMMMMMMFFFFDFMMFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMGMMMFDFFFMMMMFDMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMGGGFFFGDFFFFGGMMGDDFMFDDMDFFMMMMDMMMDMMMMMMMMMDMMDMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDMMMMMMMMMMMMMMMMMMDDMMMMMMMMMMMMMMMDMMMMMMMMMMMMMMMMDMMMMMMMMMMDDDGDGMMMMFMMGGGGGMMMMMMMMGMMGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGMFMMDDDDDMMMMMDMMMMFFFFFFFFFFFFFMMDMMFRRRRRRRRRRRRRGDFFDGFFFMMMMMMMMMMFFFDGGDFFFFFMMDGFFFFFDFMMMMFFFFFMMDDFGGDGGFHFDFGGFGGMFMMFFFMFFDFFDFFFFFFFFFFDFDMMMMMGGMFFFFFGGFFFFFMFFFFFFFFFFFFFFFMGMMMMMFFFMMMMMMMDDFFFFFMMMMFMGMMMFGFGFGMMMFMMFFDMMGMMFFFFFFFDFGFGFFFGGGFFFDGFFMMMMMMMMMMMMMMDFFMMMMMMMMMMMMMMMMMMMMFMMFGFMMMMGFDFMFFFFFFFFFGFFFFFFFFFFFFFFFFGFMFFMMMMFMMDFFFFFFFFFFFFFFFFFDDDDDGGMMDGGGGGDGGDGGDFRRRRRMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMFFFFFFFFFFDFFFFFDFFFFFFDFFFFFFFFFFFFFFGFGFFFFFFFGFFFFFFDFFFFFFFDFFFDFFFFFFFFDFFFFFFFGFMMMMMMMMMMMMMMMMMMMFGFMMMMMMMMFFFFFMMMMMMMMMMMMFFEFFFMMDFFMMMMFFFFFFFMFFFFFFDFFDGMFFFFFFFMMMMMMMMMFFMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMGDMMFMMMMMMMMMMMMDDDMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDGDDDDDMMMMMMMDMGMMMMGGMMMMMFMMMMMFFFDMFMMMMMMMMMFFDDMMFMFMMMMMFMMMMMFGFFFDFFDFTFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDMMMMMMMMFMMFFGFFFDFLMMMLMMLMLMLDFFFFFMMMMDFGDFFFFGFDFMMMMMMMMMMMMMMMMMMMMMMMGMMFMMMMMMMFDDDDDDDDDDFFGMMMMGFFFMMMMMMFGMMMMMMMMMMMMMMMMMMMMMMMDDFDFMDFMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMMMGMMMMMMMMMMMMMFFFFFFFFFEEGFFMFMMMMMMMMMFGFFGGFGFDGGFFGFFFFFDMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMFFFFDMGGDGGDGGDGGMMDGGDGGGMMMMDGGFGGDGGGMMGFFGDGGDGGGDGGGMMDGGMMFMMGDFFMMDDDDEDMMMMMMMMMMMFFDMMMMMFMMFMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMDMMMGGGGGGGFFFFFFFFGFMMMMMMFMMMMMMMDFFFDFDMGMMMMMMMMMMMDMMMMGFFGGGHGDGDDGGGGMMMMDDDDGMMMMMMMMMMMMMMMMMMMMMMMFFFFGFFDMMMMFFFMMMMMMMMMDDMMMMM","n":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ACCOUNTING","AF_APPLETALK","AF_CCITT","AF_CHAOS","AF_CNT","AF_COIP","AF_DATAKIT","AF_DECnet","AF_DLI","AF_E164","AF_ECMA","AF_HYLINK","AF_IEEE80211","AF_IMPLINK","AF_INET","AF_INET6","AF_IPX","AF_ISDN","AF_ISO","AF_LAT","AF_LINK","AF_LOCAL","AF_NATM","AF_NDRV","AF_NETBIOS","AF_NS","AF_OSI","AF_PPP","AF_PUP","AF_ROUTE","AF_SIP","AF_SNA","AF_SYSTEM","AF_SYS_CONTROL","AF_UNIX","AF_UNSPEC","AF_UTUN","AF_VSOCK","AIO_ALLDONE","AIO_CANCELED","AIO_LISTIO_MAX","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_DEFAULT","AI_MASK","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_UNUSABLE","AI_V4MAPPED","AI_V4MAPPED_CFG","ALTWERASE","ALT_DIGITS","AM_STR","ARPOP_REPLY","ARPOP_REQUEST","ATF_COM","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","ATTR_BIT_MAP_COUNT","ATTR_CMNEXT_CLONEID","ATTR_CMNEXT_EXT_FLAGS","ATTR_CMNEXT_LINKID","ATTR_CMNEXT_NOFIRMLINKPATH","ATTR_CMNEXT_PRIVATESIZE","ATTR_CMNEXT_REALDEVID","ATTR_CMNEXT_REALFSID","ATTR_CMNEXT_RECURSIVE_GENCOUNT","ATTR_CMNEXT_RELPATH","ATTR_CMN_ACCESSMASK","ATTR_CMN_ACCTIME","ATTR_CMN_ADDEDTIME","ATTR_CMN_BKUPTIME","ATTR_CMN_CHGTIME","ATTR_CMN_CRTIME","ATTR_CMN_DATA_PROTECT_FLAGS","ATTR_CMN_DEVID","ATTR_CMN_DOCUMENT_ID","ATTR_CMN_EXTENDED_SECURITY","ATTR_CMN_FILEID","ATTR_CMN_FLAGS","ATTR_CMN_FNDRINFO","ATTR_CMN_FSID","ATTR_CMN_FULLPATH","ATTR_CMN_GEN_COUNT","ATTR_CMN_GRPID","ATTR_CMN_GRPUUID","ATTR_CMN_MODTIME","ATTR_CMN_NAME","ATTR_CMN_OBJID","ATTR_CMN_OBJPERMANENTID","ATTR_CMN_OBJTAG","ATTR_CMN_OBJTYPE","ATTR_CMN_OWNERID","ATTR_CMN_PARENTID","ATTR_CMN_PAROBJID","ATTR_CMN_RETURNED_ATTRS","ATTR_CMN_SCRIPT","ATTR_CMN_USERACCESS","ATTR_CMN_UUID","ATTR_DIR_ALLOCSIZE","ATTR_DIR_DATALENGTH","ATTR_DIR_ENTRYCOUNT","ATTR_DIR_IOBLOCKSIZE","ATTR_DIR_LINKCOUNT","ATTR_DIR_MOUNTSTATUS","ATTR_FILE_ALLOCSIZE","ATTR_FILE_DATAALLOCSIZE","ATTR_FILE_DATALENGTH","ATTR_FILE_DEVTYPE","ATTR_FILE_FORKCOUNT","ATTR_FILE_FORKLIST","ATTR_FILE_IOBLOCKSIZE","ATTR_FILE_LINKCOUNT","ATTR_FILE_RSRCALLOCSIZE","ATTR_FILE_RSRCLENGTH","ATTR_FILE_TOTALSIZE","ATTR_VOL_ALLOCATIONCLUMP","ATTR_VOL_ATTRIBUTES","ATTR_VOL_CAPABILITIES","ATTR_VOL_DIRCOUNT","ATTR_VOL_ENCODINGSUSED","ATTR_VOL_FILECOUNT","ATTR_VOL_FSTYPE","ATTR_VOL_INFO","ATTR_VOL_IOBLOCKSIZE","ATTR_VOL_MAXOBJCOUNT","ATTR_VOL_MINALLOCATION","ATTR_VOL_MOUNTEDDEVICE","ATTR_VOL_MOUNTFLAGS","ATTR_VOL_MOUNTPOINT","ATTR_VOL_NAME","ATTR_VOL_OBJCOUNT","ATTR_VOL_QUOTA_SIZE","ATTR_VOL_RESERVED_SIZE","ATTR_VOL_SIGNATURE","ATTR_VOL_SIZE","ATTR_VOL_SPACEAVAIL","ATTR_VOL_SPACEFREE","ATTR_VOL_SPACEUSED","ATTR_VOL_UUID","AT_EACCESS","AT_FDCWD","AT_REMOVEDIR","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","B0","B110","B115200","B1200","B134","B14400","B150","B1800","B19200","B200","B230400","B2400","B28800","B300","B38400","B4800","B50","B57600","B600","B7200","B75","B76800","B9600","BIOCFLUSH","BIOCGBLEN","BIOCGDLT","BIOCGDLTLIST","BIOCGETIF","BIOCGHDRCMPLT","BIOCGRSIG","BIOCGRTIMEOUT","BIOCGSEESENT","BIOCGSTATS","BIOCIMMEDIATE","BIOCPROMISC","BIOCSBLEN","BIOCSDLT","BIOCSETF","BIOCSETFNR","BIOCSETIF","BIOCSHDRCMPLT","BIOCSRSIG","BIOCSRTIMEOUT","BIOCSSEESENT","BIOCVERSION","BOOT_TIME","BPF_ALIGNMENT","BRKINT","BS0","BS1","BSDLY","BUFSIZ","BUS_ADRALN","BUS_ADRERR","BUS_OBJERR","CCCryptorStatus","CCRNGStatus","CCRandomGenerateBytes","CCStatus","CIGNORE","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_MONOTONIC","CLOCK_MONOTONIC_RAW","CLOCK_MONOTONIC_RAW_APPROX","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_THREAD_CPUTIME_ID","CLOCK_UPTIME_RAW","CLOCK_UPTIME_RAW_APPROX","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CODESET","CONNECT_DATA_AUTHENTICATED","CONNECT_DATA_IDEMPOTENT","CONNECT_RESUME_ON_READ_WRITE","COPYFILE_ACL","COPYFILE_CHECK","COPYFILE_CLONE","COPYFILE_CLONE_FORCE","COPYFILE_CONTINUE","COPYFILE_COPY_DATA","COPYFILE_COPY_XATTR","COPYFILE_DATA","COPYFILE_DATA_SPARSE","COPYFILE_ERR","COPYFILE_EXCL","COPYFILE_FINISH","COPYFILE_METADATA","COPYFILE_MOVE","COPYFILE_NOFOLLOW","COPYFILE_NOFOLLOW_DST","COPYFILE_NOFOLLOW_SRC","COPYFILE_PACK","COPYFILE_PRESERVE_DST_TRACKED","COPYFILE_PROGRESS","COPYFILE_QUIT","COPYFILE_RECURSE_DIR","COPYFILE_RECURSE_DIR_CLEANUP","COPYFILE_RECURSE_ERROR","COPYFILE_RECURSE_FILE","COPYFILE_RECURSIVE","COPYFILE_RUN_IN_PLACE","COPYFILE_SECURITY","COPYFILE_SKIP","COPYFILE_START","COPYFILE_STAT","COPYFILE_STATE_BSIZE","COPYFILE_STATE_COPIED","COPYFILE_STATE_DST_BSIZE","COPYFILE_STATE_DST_FD","COPYFILE_STATE_DST_FILENAME","COPYFILE_STATE_QUARANTINE","COPYFILE_STATE_SRC_BSIZE","COPYFILE_STATE_SRC_FD","COPYFILE_STATE_SRC_FILENAME","COPYFILE_STATE_STATUS_CB","COPYFILE_STATE_STATUS_CTX","COPYFILE_STATE_WAS_CLONED","COPYFILE_STATE_XATTRNAME","COPYFILE_UNLINK","COPYFILE_UNPACK","COPYFILE_VERBOSE","COPYFILE_XATTR","CPU_STATE_IDLE","CPU_STATE_MAX","CPU_STATE_NICE","CPU_STATE_SYSTEM","CPU_STATE_USER","CR0","CR1","CR2","CR3","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTLFLAG_ANYBODY","CTLFLAG_KERN","CTLFLAG_LOCKED","CTLFLAG_MASKED","CTLFLAG_NOAUTO","CTLFLAG_NOLOCK","CTLFLAG_OID2","CTLFLAG_RD","CTLFLAG_RW","CTLFLAG_SECURE","CTLFLAG_WR","CTLIOCGINFO","CTLTYPE","CTLTYPE_INT","CTLTYPE_NODE","CTLTYPE_OPAQUE","CTLTYPE_QUAD","CTLTYPE_STRING","CTLTYPE_STRUCT","CTL_DEBUG","CTL_DEBUG_MAXID","CTL_DEBUG_NAME","CTL_DEBUG_VALUE","CTL_HW","CTL_KERN","CTL_MACHDEP","CTL_MAXID","CTL_NET","CTL_UNSPEC","CTL_USER","CTL_VFS","CTL_VM","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DEAD_PROCESS","DIR","DIR_MNTSTATUS_MNTPOINT","DLT_ARCNET","DLT_ATM_RFC1483","DLT_AX25","DLT_CHAOS","DLT_EN10MB","DLT_EN3MB","DLT_FDDI","DLT_IEEE802","DLT_LOOP","DLT_NULL","DLT_PPP","DLT_PRONET","DLT_RAW","DLT_SLIP","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_MD_ORDER","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EAUTH","EBADARCH","EBADEXEC","EBADF","EBADMACHO","EBADMSG","EBADRPC","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDEVERR","EDOM","EDQUOT","EEXIST","EFAULT","EFBIG","EFTYPE","EHOSTDOWN","EHOSTUNREACH","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","ELAST","ELOOP","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENEEDAUTH","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOATTR","ENOBUFS","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOLCK","ENOLINK","ENOMEM","ENOMSG","ENOPOLICY","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROCLIM","EPROCUNAVAIL","EPROGMISMATCH","EPROGUNAVAIL","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","EPWROFF","EQFULL","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMOTE","EROFS","ERPCMISMATCH","ESHLIBVERS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESTALE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUSERS","EVFILT_AIO","EVFILT_FS","EVFILT_MACHPORT","EVFILT_PROC","EVFILT_READ","EVFILT_SIGNAL","EVFILT_TIMER","EVFILT_USER","EVFILT_VM","EVFILT_VNODE","EVFILT_WRITE","EV_ADD","EV_CLEAR","EV_DELETE","EV_DISABLE","EV_DISPATCH","EV_ENABLE","EV_EOF","EV_ERROR","EV_FLAG0","EV_FLAG1","EV_ONESHOT","EV_OOBAND","EV_POLL","EV_RECEIPT","EV_SYSFLAGS","EWOULDBLOCK","EXDEV","EXIT_FAILURE","EXIT_SUCCESS","EXTA","EXTB","EXTPROC","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIODTYPE","FIOGETOWN","FIONBIO","FIONCLEX","FIONREAD","FIOSETOWN","FLUSHO","FOPEN_MAX","FSOPT_ATTR_CMN_EXTENDED","FSOPT_NOFOLLOW","FSOPT_NOFOLLOW_ANY","FSOPT_PACK_INVAL_ATTRS","FSOPT_REPORT_FULLSIZE","FSOPT_RETURN_REALDEV","F_ALLOCATEALL","F_ALLOCATECONTIG","F_BARRIERFSYNC","F_DUPFD","F_DUPFD_CLOEXEC","F_FREEZE_FS","F_FULLFSYNC","F_GETFD","F_GETFL","F_GETLK","F_GETOWN","F_GETPATH","F_GETPATH_NOFIRMLINK","F_GLOBAL_NOCACHE","F_LOCK","F_LOG2PHYS","F_LOG2PHYS_EXT","F_NOCACHE","F_NODIRECT","F_OK","F_PEOFPOSMODE","F_PREALLOCATE","F_PUNCHHOLE","F_RDADVISE","F_RDAHEAD","F_RDLCK","F_SETFD","F_SETFL","F_SETLK","F_SETLKW","F_SETOWN","F_SPECULATIVE_READ","F_TEST","F_THAW_FS","F_TLOCK","F_TRIM_ACTIVE_FILE","F_ULOCK","F_UNLCK","F_VOLPOSMODE","F_WRLCK","GETALL","GETNCNT","GETPID","GETVAL","GETZCNT","GLOB_ABORTED","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GRPQUOTA","HOST_CPU_LOAD_INFO","HOST_CPU_LOAD_INFO_COUNT","HOST_EXPIRED_TASK_INFO","HOST_EXTMOD_INFO64","HOST_LOAD_INFO","HOST_VM_INFO","HOST_VM_INFO64","HOST_VM_INFO64_COUNT","HUPCL","HW_AVAILCPU","HW_BUS_FREQ","HW_BYTEORDER","HW_CACHELINE","HW_CPU_FREQ","HW_DISKNAMES","HW_DISKSTATS","HW_EPOCH","HW_FLOATINGPT","HW_L1DCACHESIZE","HW_L1ICACHESIZE","HW_L2CACHESIZE","HW_L2SETTINGS","HW_L3CACHESIZE","HW_L3SETTINGS","HW_MACHINE","HW_MACHINE_ARCH","HW_MAXID","HW_MEMSIZE","HW_MODEL","HW_NCPU","HW_PAGESIZE","HW_PHYSMEM","HW_PRODUCT","HW_TARGET","HW_TB_FREQ","HW_USERMEM","HW_VECTORUNIT","ICANON","ICRNL","IEXTEN","IFF_ALLMULTI","IFF_ALTPHYS","IFF_BROADCAST","IFF_DEBUG","IFF_LINK0","IFF_LINK1","IFF_LINK2","IFF_LOOPBACK","IFF_MULTICAST","IFF_NOARP","IFF_NOTRAILERS","IFF_OACTIVE","IFF_POINTOPOINT","IFF_PROMISC","IFF_RUNNING","IFF_SIMPLEX","IFF_UP","IFNAMSIZ","IF_NAMESIZE","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INT_MAX","INT_MIN","IOV_MAX","IPC_CREAT","IPC_EXCL","IPC_M","IPC_NOWAIT","IPC_PRIVATE","IPC_R","IPC_RMID","IPC_SET","IPC_STAT","IPC_W","IPPROTO_3PC","IPPROTO_ADFS","IPPROTO_AH","IPPROTO_AHIP","IPPROTO_APES","IPPROTO_ARGUS","IPPROTO_AX25","IPPROTO_BHA","IPPROTO_BLT","IPPROTO_BRSATMON","IPPROTO_CFTP","IPPROTO_CHAOS","IPPROTO_CMTP","IPPROTO_CPHB","IPPROTO_CPNX","IPPROTO_DDP","IPPROTO_DGP","IPPROTO_DIVERT","IPPROTO_DONE","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_EMCON","IPPROTO_ENCAP","IPPROTO_EON","IPPROTO_ESP","IPPROTO_ETHERIP","IPPROTO_FRAGMENT","IPPROTO_GGP","IPPROTO_GMTP","IPPROTO_GRE","IPPROTO_HELLO","IPPROTO_HMP","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IDPR","IPPROTO_IDRP","IPPROTO_IGMP","IPPROTO_IGP","IPPROTO_IGRP","IPPROTO_IL","IPPROTO_INLSP","IPPROTO_INP","IPPROTO_IP","IPPROTO_IPCOMP","IPPROTO_IPCV","IPPROTO_IPEIP","IPPROTO_IPIP","IPPROTO_IPPC","IPPROTO_IPV6","IPPROTO_IRTP","IPPROTO_KRYPTOLAN","IPPROTO_LARP","IPPROTO_LEAF1","IPPROTO_LEAF2","IPPROTO_MAX","IPPROTO_MEAS","IPPROTO_MHRP","IPPROTO_MICP","IPPROTO_MTP","IPPROTO_MUX","IPPROTO_ND","IPPROTO_NHRP","IPPROTO_NONE","IPPROTO_NSP","IPPROTO_NVPII","IPPROTO_OSPFIGP","IPPROTO_PGM","IPPROTO_PIGP","IPPROTO_PIM","IPPROTO_PRM","IPPROTO_PUP","IPPROTO_PVP","IPPROTO_RAW","IPPROTO_RCCMON","IPPROTO_RDP","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_RVD","IPPROTO_SATEXPAK","IPPROTO_SATMON","IPPROTO_SCCSP","IPPROTO_SCTP","IPPROTO_SDRP","IPPROTO_SEP","IPPROTO_SRPC","IPPROTO_ST","IPPROTO_SVMTP","IPPROTO_SWIPE","IPPROTO_TCF","IPPROTO_TCP","IPPROTO_TP","IPPROTO_TPXX","IPPROTO_TRUNK1","IPPROTO_TRUNK2","IPPROTO_TTP","IPPROTO_UDP","IPPROTO_VINES","IPPROTO_VISA","IPPROTO_VMTP","IPPROTO_WBEXPAK","IPPROTO_WBMON","IPPROTO_WSN","IPPROTO_XNET","IPPROTO_XTP","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOTECT","IPV6_BOUND_IF","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_HOPLIMIT","IPV6_JOIN_GROUP","IPV6_LEAVE_GROUP","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_PKTINFO","IPV6_RECVHOPLIMIT","IPV6_RECVPKTINFO","IPV6_RECVTCLASS","IPV6_TCLASS","IPV6_UNICAST_HOPS","IPV6_V6ONLY","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BLOCK_SOURCE","IP_BOUND_IF","IP_DONTFRAG","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_HDRINCL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_PKTINFO","IP_RECVDSTADDR","IP_RECVIF","IP_RECVTOS","IP_RECVTTL","IP_TOS","IP_TTL","IP_UNBLOCK_SOURCE","ISIG","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IXANY","IXOFF","IXON","KERN_ABORTED","KERN_AFFINITY","KERN_AIOMAX","KERN_AIOPROCMAX","KERN_AIOTHREADS","KERN_ALREADY_IN_SET","KERN_ALREADY_WAITING","KERN_ARGMAX","KERN_BOOTFILE","KERN_BOOTTIME","KERN_CHECKOPENEVT","KERN_CLASSIC","KERN_CLASSICHANDLER","KERN_CLOCKRATE","KERN_CODESIGN_ERROR","KERN_COREDUMP","KERN_COREFILE","KERN_DEFAULT_SET","KERN_DOMAINNAME","KERN_DUMMY","KERN_DUMPDEV","KERN_EXCEPTION_PROTECTED","KERN_EXEC","KERN_FAILURE","KERN_FILE","KERN_HOSTID","KERN_HOSTNAME","KERN_INSUFFICIENT_BUFFER_SIZE","KERN_INVALID_ADDRESS","KERN_INVALID_ARGUMENT","KERN_INVALID_CAPABILITY","KERN_INVALID_HOST","KERN_INVALID_LEDGER","KERN_INVALID_MEMORY_CONTROL","KERN_INVALID_NAME","KERN_INVALID_OBJECT","KERN_INVALID_POLICY","KERN_INVALID_PROCESSOR_SET","KERN_INVALID_RIGHT","KERN_INVALID_SECURITY","KERN_INVALID_TASK","KERN_INVALID_VALUE","KERN_IPC","KERN_JOB_CONTROL","KERN_KDBUFWAIT","KERN_KDCPUMAP","KERN_KDDFLAGS","KERN_KDEBUG","KERN_KDEFLAGS","KERN_KDENABLE","KERN_KDGETBUF","KERN_KDGETENTROPY","KERN_KDGETREG","KERN_KDPIDEX","KERN_KDPIDTR","KERN_KDREADCURTHRMAP","KERN_KDREADTR","KERN_KDREMOVE","KERN_KDSETBUF","KERN_KDSETREG","KERN_KDSETRTCDEC","KERN_KDSETUP","KERN_KDSET_TYPEFILTER","KERN_KDTHRMAP","KERN_KDWRITEMAP","KERN_KDWRITETR","KERN_LOCK_OWNED","KERN_LOCK_OWNED_SELF","KERN_LOCK_SET_DESTROYED","KERN_LOCK_UNSTABLE","KERN_LOGSIGEXIT","KERN_LOW_PRI_DELAY","KERN_LOW_PRI_WINDOW","KERN_MAXFILES","KERN_MAXFILESPERPROC","KERN_MAXID","KERN_MAXPARTITIONS","KERN_MAXPROC","KERN_MAXPROCPERUID","KERN_MAXVNODES","KERN_MEMORY_DATA_MOVED","KERN_MEMORY_ERROR","KERN_MEMORY_FAILURE","KERN_MEMORY_PRESENT","KERN_MEMORY_RESTART_COPY","KERN_NAME_EXISTS","KERN_NETBOOT","KERN_NGROUPS","KERN_NISDOMAINNAME","KERN_NODE_DOWN","KERN_NOT_DEPRESSED","KERN_NOT_IN_SET","KERN_NOT_RECEIVER","KERN_NOT_SUPPORTED","KERN_NOT_WAITING","KERN_NO_ACCESS","KERN_NO_SPACE","KERN_NTP_PLL","KERN_NX_PROTECTION","KERN_OPENEVT_PROC","KERN_OPERATION_TIMED_OUT","KERN_OSRELDATE","KERN_OSRELEASE","KERN_OSREV","KERN_OSTYPE","KERN_OSVERSION","KERN_POLICY_LIMIT","KERN_POLICY_STATIC","KERN_POSIX","KERN_POSIX1","KERN_PROC","KERN_PROCARGS","KERN_PROCARGS2","KERN_PROCDELAYTERM","KERN_PROCNAME","KERN_PROC_ALL","KERN_PROC_LCID","KERN_PROC_PGRP","KERN_PROC_PID","KERN_PROC_RUID","KERN_PROC_SESSION","KERN_PROC_TTY","KERN_PROC_UID","KERN_PROF","KERN_PROTECTION_FAILURE","KERN_PS_STRINGS","KERN_RAGEVNODE","KERN_RAGE_PROC","KERN_RAGE_THREAD","KERN_RESOURCE_SHORTAGE","KERN_RIGHT_EXISTS","KERN_RPC_CONTINUE_ORPHAN","KERN_RPC_SERVER_TERMINATED","KERN_RPC_TERMINATE_ORPHAN","KERN_SAFEBOOT","KERN_SAVED_IDS","KERN_SECURELVL","KERN_SEMAPHORE_DESTROYED","KERN_SHREG_PRIVATIZABLE","KERN_SPECULATIVE_READS","KERN_SUCCESS","KERN_SUGID_COREDUMP","KERN_SYMFILE","KERN_SYSV","KERN_TERMINATED","KERN_TFP","KERN_TFP_POLICY","KERN_TFP_POLICY_DEFAULT","KERN_TFP_POLICY_DENY","KERN_THALTSTACK","KERN_THREADNAME","KERN_TRANSLATE","KERN_TTY","KERN_UNOPENEVT_PROC","KERN_UNRAGE_PROC","KERN_UNRAGE_THREAD","KERN_UPDATEINTERVAL","KERN_UREFS_OVERFLOW","KERN_USRSTACK32","KERN_USRSTACK64","KERN_VERSION","KERN_VNODE","KIPC_MAXSOCKBUF","KIPC_MAX_DATALEN","KIPC_MAX_HDR","KIPC_MAX_LINKHDR","KIPC_MAX_PROTOHDR","KIPC_MBSTAT","KIPC_NMBCLUSTERS","KIPC_SOCKBUF_WASTE","KIPC_SOMAXCONN","KIPC_SOQLIMITCOMPAT","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_SEGMENT","LC_SEGMENT_64","LC_TIME","LC_TIME_MASK","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LOCAL_PEERCRED","LOCAL_PEEREPID","LOCAL_PEEREUUID","LOCAL_PEERPID","LOCAL_PEERUUID","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_INSTALL","LOG_KERN","LOG_LAUNCHD","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NETINFO","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_RAS","LOG_REMOTEAUTH","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","MACH_PORT_NULL","MACH_TASK_BASIC_INFO","MACH_TASK_BASIC_INFO_COUNT","MADV_CAN_REUSE","MADV_DONTNEED","MADV_FREE","MADV_FREE_REUSABLE","MADV_FREE_REUSE","MADV_NORMAL","MADV_RANDOM","MADV_SEQUENTIAL","MADV_WILLNEED","MADV_ZERO_WIRED_PAGES","MAP_ANON","MAP_ANONYMOUS","MAP_COPY","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_HASSEMAPHORE","MAP_JIT","MAP_NOCACHE","MAP_NOEXTEND","MAP_NORESERVE","MAP_PRIVATE","MAP_RENAME","MAP_SHARED","MAXCOMLEN","MAXFREQ","MAXPATHLEN","MAXPHASE","MAXSEC","MAXTC","MAXTHREADNAMESIZE","MAX_KCTL_NAME","MCL_CURRENT","MCL_FUTURE","MDMBUF","MEMORY_OBJECT_NULL","MH_MAGIC","MH_MAGIC_64","MINCORE_INCORE","MINCORE_MODIFIED","MINCORE_MODIFIED_OTHER","MINCORE_REFERENCED","MINCORE_REFERENCED_OTHER","MINSEC","MINSIGSTKSZ","MNT_ASYNC","MNT_AUTOMOUNTED","MNT_CPROTECT","MNT_DEFWRITE","MNT_DONTBROWSE","MNT_DOVOLFS","MNT_EXPORTED","MNT_FORCE","MNT_IGNORE_OWNERSHIP","MNT_JOURNALED","MNT_LOCAL","MNT_MULTILABEL","MNT_NOATIME","MNT_NOBLOCK","MNT_NODEV","MNT_NOEXEC","MNT_NOSUID","MNT_NOUSERXATTR","MNT_NOWAIT","MNT_QUARANTINE","MNT_QUOTA","MNT_RDONLY","MNT_RELOAD","MNT_ROOTFS","MNT_SNAPSHOT","MNT_SYNCHRONOUS","MNT_UNION","MNT_UPDATE","MNT_WAIT","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_PPSMAX","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOF","MSG_EOR","MSG_FLUSH","MSG_HAVEMORE","MSG_HOLD","MSG_NEEDSA","MSG_NOSIGNAL","MSG_OOB","MSG_PEEK","MSG_RCVMORE","MSG_SEND","MSG_TRUNC","MSG_WAITALL","MS_ASYNC","MS_DEACTIVATE","MS_INVALIDATE","MS_KILLPAGES","MS_SYNC","NANOSECOND","NCCS","NET_RT_DUMP","NET_RT_FLAGS","NET_RT_IFLIST","NET_RT_IFLIST2","NEW_TIME","NI_DGRAM","NI_MAXHOST","NI_MAXSERV","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSCOPE","NI_NUMERICSERV","NL0","NL1","NLDLY","NOEXPR","NOFLSH","NOKERNINFO","NOSTR","NOTE_ABSOLUTE","NOTE_ATTRIB","NOTE_BACKGROUND","NOTE_CHILD","NOTE_CRITICAL","NOTE_DELETE","NOTE_EXEC","NOTE_EXIT","NOTE_EXITSTATUS","NOTE_EXIT_CSERROR","NOTE_EXIT_DECRYPTFAIL","NOTE_EXIT_DETAIL","NOTE_EXIT_DETAIL_MASK","NOTE_EXIT_MEMORY","NOTE_EXTEND","NOTE_FFAND","NOTE_FFCOPY","NOTE_FFCTRLMASK","NOTE_FFLAGSMASK","NOTE_FFNOP","NOTE_FFOR","NOTE_FORK","NOTE_LEEWAY","NOTE_LINK","NOTE_LOWAT","NOTE_NONE","NOTE_NSECONDS","NOTE_PCTRLMASK","NOTE_PDATAMASK","NOTE_RENAME","NOTE_REVOKE","NOTE_SECONDS","NOTE_SIGNAL","NOTE_TRACK","NOTE_TRACKERR","NOTE_TRIGGER","NOTE_USECONDS","NOTE_VM_ERROR","NOTE_VM_PRESSURE","NOTE_VM_PRESSURE_SUDDEN_TERMINATE","NOTE_VM_PRESSURE_TERMINATE","NOTE_WRITE","NTP_API","None","None","OCRNL","OFDEL","OFILL","OLD_TIME","ONLCR","ONLRET","ONOCR","ONOEOT","OPOST","OS_LOG_TYPE_DEBUG","OS_LOG_TYPE_DEFAULT","OS_LOG_TYPE_ERROR","OS_LOG_TYPE_FAULT","OS_LOG_TYPE_INFO","OS_SIGNPOST_EVENT","OS_SIGNPOST_INTERVAL_BEGIN","OS_SIGNPOST_INTERVAL_END","OS_UNFAIR_LOCK_INIT","OXTABS","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECTORY","O_DSYNC","O_EVTONLY","O_EXCL","O_EXLOCK","O_FSYNC","O_NDELAY","O_NOCTTY","O_NOFOLLOW","O_NOFOLLOW_ANY","O_NONBLOCK","O_RDONLY","O_RDWR","O_SHLOCK","O_SYMLINK","O_SYNC","O_TRUNC","O_WRONLY","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_APPLETALK","PF_CCITT","PF_CHAOS","PF_CNT","PF_COIP","PF_DATAKIT","PF_DECnet","PF_DLI","PF_ECMA","PF_HYLINK","PF_IMPLINK","PF_INET","PF_INET6","PF_IPX","PF_ISDN","PF_ISO","PF_KEY","PF_LAT","PF_LINK","PF_LOCAL","PF_NATM","PF_NDRV","PF_NETBIOS","PF_NS","PF_OSI","PF_PIP","PF_PPP","PF_PUP","PF_ROUTE","PF_RTIP","PF_SIP","PF_SNA","PF_SYSTEM","PF_UNIX","PF_UNSPEC","PF_VSOCK","PF_XTP","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_CLOEXEC_DEFAULT","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETEXEC","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_START_SUSPENDED","PRIO_DARWIN_BG","PRIO_DARWIN_NONUI","PRIO_DARWIN_PROCESS","PRIO_DARWIN_THREAD","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROCESSOR_BASIC_INFO","PROCESSOR_CPU_LOAD_INFO","PROCESSOR_PM_REGS_INFO","PROCESSOR_SET_BASIC_INFO","PROCESSOR_SET_LOAD_INFO","PROCESSOR_TEMPERATURE","PROC_CSM_ALL","PROC_CSM_NOSMT","PROC_CSM_TECS","PROC_PIDPATHINFO_MAXSIZE","PROC_PIDTASKALLINFO","PROC_PIDTASKINFO","PROC_PIDTBSDINFO","PROC_PIDTHREADINFO","PROC_PIDVNODEPATHINFO","PROT_EXEC","PROT_NONE","PROT_READ","PROT_WRITE","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_INTROSPECTION_THREAD_CREATE","PTHREAD_INTROSPECTION_THREAD_DESTROY","PTHREAD_INTROSPECTION_THREAD_START","PTHREAD_INTROSPECTION_THREAD_TERMINATE","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PT_ATTACH","PT_ATTACHEXC","PT_CONTINUE","PT_DENY_ATTACH","PT_DETACH","PT_FIRSTMACH","PT_FORCEQUOTA","PT_KILL","PT_READ_D","PT_READ_I","PT_READ_U","PT_SIGEXC","PT_STEP","PT_THUPDATE","PT_TRACE_ME","PT_WRITE_D","PT_WRITE_I","PT_WRITE_U","P_ALL","P_PGID","P_PID","QCMD","QOS_CLASS_BACKGROUND","QOS_CLASS_DEFAULT","QOS_CLASS_UNSPECIFIED","QOS_CLASS_USER_INITIATED","QOS_CLASS_USER_INTERACTIVE","QOS_CLASS_UTILITY","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETQUOTA","Q_SYNC","RADIXCHAR","RAND_MAX","REG_ASSERT","REG_ATOI","REG_BACKR","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_BASIC","REG_DUMP","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EESCAPE","REG_EMPTY","REG_EPAREN","REG_ERANGE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_INVARG","REG_ITOA","REG_LARGE","REG_NEWLINE","REG_NOMATCH","REG_NOSPEC","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_PEND","REG_STARTEND","REG_TRACE","RENAME_EXCL","RENAME_SWAP","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_MEMLOCK","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RTAX_AUTHOR","RTAX_BRD","RTAX_DST","RTAX_GATEWAY","RTAX_GENMASK","RTAX_IFA","RTAX_IFP","RTAX_MAX","RTAX_NETMASK","RTA_AUTHOR","RTA_BRD","RTA_DST","RTA_GATEWAY","RTA_GENMASK","RTA_IFA","RTA_IFP","RTA_NETMASK","RTF_BLACKHOLE","RTF_BROADCAST","RTF_CLONING","RTF_CONDEMNED","RTF_DEAD","RTF_DELCLONE","RTF_DONE","RTF_DYNAMIC","RTF_GATEWAY","RTF_GLOBAL","RTF_HOST","RTF_IFREF","RTF_IFSCOPE","RTF_LLINFO","RTF_LOCAL","RTF_MODIFIED","RTF_MULTICAST","RTF_NOIFREF","RTF_PINNED","RTF_PRCLONING","RTF_PROTO1","RTF_PROTO2","RTF_PROTO3","RTF_PROXY","RTF_REJECT","RTF_ROUTER","RTF_STATIC","RTF_UP","RTF_WASCLONED","RTF_XRESOLVE","RTLD_DEFAULT","RTLD_FIRST","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_MAIN_ONLY","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTLD_SELF","RTM_ADD","RTM_CHANGE","RTM_DELADDR","RTM_DELETE","RTM_DELMADDR","RTM_GET","RTM_GET2","RTM_IFINFO","RTM_IFINFO2","RTM_LOCK","RTM_LOSING","RTM_MISS","RTM_NEWADDR","RTM_NEWMADDR","RTM_NEWMADDR2","RTM_OLDADD","RTM_OLDDEL","RTM_REDIRECT","RTM_RESOLVE","RTM_VERSION","RTV_EXPIRE","RTV_HOPCOUNT","RTV_MTU","RTV_RPIPE","RTV_RTT","RTV_RTTVAR","RTV_SPIPE","RTV_SSTHRESH","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_INFO_V0","RUSAGE_INFO_V1","RUSAGE_INFO_V2","RUSAGE_INFO_V3","RUSAGE_INFO_V4","RUSAGE_SELF","R_OK","SAE_ASSOCID_ALL","SAE_ASSOCID_ANY","SAE_CONNID_ALL","SAE_CONNID_ANY","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCALE_PPM","SCHED_FIFO","SCHED_OTHER","SCHED_RR","SCM_CREDS","SCM_RIGHTS","SCM_TIMESTAMP","SEEK_CUR","SEEK_DATA","SEEK_END","SEEK_HOLE","SEEK_SET","SEM_FAILED","SEM_UNDO","SETALL","SETVAL","SF_APPEND","SF_ARCHIVED","SF_IMMUTABLE","SF_SETTABLE","SHMLBA","SHM_R","SHM_RDONLY","SHM_RND","SHM_W","SHUTDOWN_TIME","SHUT_RD","SHUT_RDWR","SHUT_WR","SIDL","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEMT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGFPE","SIGHUP","SIGILL","SIGINFO","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGNATURE","SIGPIPE","SIGPROF","SIGQUIT","SIGSEGV","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCGIFADDR","SOCK_DGRAM","SOCK_MAXADDRLEN","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOL_LOCAL","SOL_SOCKET","SOMAXCONN","SO_ACCEPTCONN","SO_BROADCAST","SO_DEBUG","SO_DONTROUTE","SO_DONTTRUNC","SO_ERROR","SO_KEEPALIVE","SO_LABEL","SO_LINGER","SO_LINGER_SEC","SO_NKE","SO_NOADDRERR","SO_NOSIGPIPE","SO_NOTIFYCONFLICT","SO_NP_EXTENSIONS","SO_NREAD","SO_NWRITE","SO_OOBINLINE","SO_PEERLABEL","SO_RANDOMPORT","SO_RCVBUF","SO_RCVLOWAT","SO_RCVTIMEO","SO_REUSEADDR","SO_REUSEPORT","SO_REUSESHAREUID","SO_SNDBUF","SO_SNDLOWAT","SO_SNDTIMEO","SO_TIMESTAMP","SO_TIMESTAMP_MONOTONIC","SO_TYPE","SO_USELOOPBACK","SO_WANTMORE","SO_WANTOOBFLAG","SRUN","SSLEEP","SSTOP","SS_DISABLE","SS_ONSTACK","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","ST_NOSUID","ST_RDONLY","SUPERPAGE_NONE","SUPERPAGE_SIZE_2MB","SUPERPAGE_SIZE_ANY","SYSDIR_DIRECTORY_ADMIN_APPLICATION","SYSDIR_DIRECTORY_ALL_APPLICATIONS","SYSDIR_DIRECTORY_ALL_LIBRARIES","SYSDIR_DIRECTORY_APPLICATION","SYSDIR_DIRECTORY_APPLICATION_SUPPORT","SYSDIR_DIRECTORY_AUTOSAVED_INFORMATION","SYSDIR_DIRECTORY_CACHES","SYSDIR_DIRECTORY_CORESERVICE","SYSDIR_DIRECTORY_DEMO_APPLICATION","SYSDIR_DIRECTORY_DESKTOP","SYSDIR_DIRECTORY_DEVELOPER","SYSDIR_DIRECTORY_DEVELOPER_APPLICATION","SYSDIR_DIRECTORY_DOCUMENT","SYSDIR_DIRECTORY_DOCUMENTATION","SYSDIR_DIRECTORY_DOWNLOADS","SYSDIR_DIRECTORY_INPUT_METHODS","SYSDIR_DIRECTORY_LIBRARY","SYSDIR_DIRECTORY_MOVIES","SYSDIR_DIRECTORY_MUSIC","SYSDIR_DIRECTORY_PICTURES","SYSDIR_DIRECTORY_PREFERENCE_PANES","SYSDIR_DIRECTORY_PRINTER_DESCRIPTION","SYSDIR_DIRECTORY_SHARED_PUBLIC","SYSDIR_DIRECTORY_USER","SYSDIR_DOMAIN_MASK_ALL","SYSDIR_DOMAIN_MASK_LOCAL","SYSDIR_DOMAIN_MASK_NETWORK","SYSDIR_DOMAIN_MASK_SYSTEM","SYSDIR_DOMAIN_MASK_USER","SYSPROTO_CONTROL","SYSPROTO_EVENT","SZOMB","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","Some","Some","TAB0","TAB1","TAB2","TAB3","TABDLY","TASK_THREAD_TIMES_INFO","TASK_THREAD_TIMES_INFO_COUNT","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_CONNECTION_INFO","TCP_FASTOPEN","TCP_KEEPALIVE","TCP_KEEPCNT","TCP_KEEPINTVL","TCP_MAXSEG","TCP_NODELAY","TCP_NOOPT","TCP_NOPUSH","TCSADRAIN","TCSAFLUSH","TCSANOW","THOUSEP","THREAD_AFFINITY_POLICY","THREAD_AFFINITY_POLICY_COUNT","THREAD_AFFINITY_TAG_NULL","THREAD_BACKGROUND_POLICY","THREAD_BACKGROUND_POLICY_COUNT","THREAD_BACKGROUND_POLICY_DARWIN_BG","THREAD_BASIC_INFO","THREAD_BASIC_INFO_COUNT","THREAD_EXTENDED_INFO","THREAD_EXTENDED_INFO_COUNT","THREAD_EXTENDED_POLICY","THREAD_EXTENDED_POLICY_COUNT","THREAD_IDENTIFIER_INFO","THREAD_IDENTIFIER_INFO_COUNT","THREAD_LATENCY_QOS_POLICY","THREAD_LATENCY_QOS_POLICY_COUNT","THREAD_PRECEDENCE_POLICY","THREAD_PRECEDENCE_POLICY_COUNT","THREAD_STANDARD_POLICY","THREAD_STANDARD_POLICY_COUNT","THREAD_THROUGHPUT_QOS_POLICY","THREAD_THROUGHPUT_QOS_POLICY_COUNT","THREAD_TIME_CONSTRAINT_POLICY","THREAD_TIME_CONSTRAINT_POLICY_COUNT","TH_FLAGS_GLOBAL_FORCED_IDLE","TH_FLAGS_IDLE","TH_FLAGS_SWAPPED","TH_STATE_HALTED","TH_STATE_RUNNING","TH_STATE_STOPPED","TH_STATE_UNINTERRUPTIBLE","TH_STATE_WAITING","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCDTR","TIOCCONS","TIOCDCDTIMESTAMP","TIOCDRAIN","TIOCDSIMICROCODE","TIOCEXCL","TIOCEXT","TIOCFLUSH","TIOCGDRAINWAIT","TIOCGETD","TIOCGPGRP","TIOCGWINSZ","TIOCIXOFF","TIOCIXON","TIOCMBIC","TIOCMBIS","TIOCMGDTRWAIT","TIOCMGET","TIOCMODG","TIOCMODS","TIOCMSDTRWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCPKT_DATA","TIOCPKT_DOSTOP","TIOCPKT_FLUSHREAD","TIOCPKT_FLUSHWRITE","TIOCPKT_IOCTL","TIOCPKT_NOSTOP","TIOCPKT_START","TIOCPKT_STOP","TIOCPTYGNAME","TIOCPTYGRANT","TIOCPTYUNLK","TIOCREMOTE","TIOCSBRK","TIOCSCONS","TIOCSCTTY","TIOCSDRAINWAIT","TIOCSDTR","TIOCSETD","TIOCSIG","TIOCSPGRP","TIOCSTART","TIOCSTAT","TIOCSTI","TIOCSTOP","TIOCSWINSZ","TIOCTIMESTAMP","TIOCUCNTL","TMP_MAX","TOSTOP","T_FMT","T_FMT_AMPM","UF_APPEND","UF_COMPRESSED","UF_HIDDEN","UF_IMMUTABLE","UF_NODUMP","UF_OPAQUE","UF_SETTABLE","UF_TRACKED","USER_BC_BASE_MAX","USER_BC_DIM_MAX","USER_BC_SCALE_MAX","USER_BC_STRING_MAX","USER_COLL_WEIGHTS_MAX","USER_CS_PATH","USER_EXPR_NEST_MAX","USER_LINE_MAX","USER_MAXID","USER_POSIX2_CHAR_TERM","USER_POSIX2_C_BIND","USER_POSIX2_C_DEV","USER_POSIX2_FORT_DEV","USER_POSIX2_FORT_RUN","USER_POSIX2_LOCALEDEF","USER_POSIX2_SW_DEV","USER_POSIX2_UPE","USER_POSIX2_VERSION","USER_PROCESS","USER_RE_DUP_MAX","USER_STREAM_MAX","USER_TZNAME_MAX","USRQUOTA","UTIME_NOW","UTIME_OMIT","UTUN_OPT_FLAGS","UTUN_OPT_IFNAME","VDISCARD","VDSUSP","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMADDR_CID_ANY","VMADDR_CID_HOST","VMADDR_CID_HYPERVISOR","VMADDR_CID_RESERVED","VMADDR_PORT_ANY","VMIN","VM_FLAGS_ALIAS_MASK","VM_FLAGS_ANYWHERE","VM_FLAGS_FIXED","VM_FLAGS_NO_CACHE","VM_FLAGS_OVERWRITE","VM_FLAGS_PURGABLE","VM_FLAGS_RANDOM_ADDR","VM_FLAGS_RESILIENT_CODESIGN","VM_FLAGS_RESILIENT_MEDIA","VM_FLAGS_RETURN_4K_DATA_ADDR","VM_FLAGS_RETURN_DATA_ADDR","VM_FLAGS_SUPERPAGE_MASK","VM_FLAGS_SUPERPAGE_NONE","VM_FLAGS_SUPERPAGE_SHIFT","VM_FLAGS_SUPERPAGE_SIZE_2MB","VM_FLAGS_SUPERPAGE_SIZE_ANY","VM_FLAGS_USER_ALLOCATE","VM_FLAGS_USER_MAP","VM_FLAGS_USER_REMAP","VM_LOADAVG","VM_MACHFACTOR","VM_MAKE_TAG","VM_MAXID","VM_MEMORY_ACCELERATE","VM_MEMORY_ANALYSIS_TOOL","VM_MEMORY_APPKIT","VM_MEMORY_APPLICATION_SPECIFIC_1","VM_MEMORY_APPLICATION_SPECIFIC_16","VM_MEMORY_ASL","VM_MEMORY_ASSETSD","VM_MEMORY_ATS","VM_MEMORY_CARBON","VM_MEMORY_CGIMAGE","VM_MEMORY_COREDATA","VM_MEMORY_COREDATA_OBJECTIDS","VM_MEMORY_COREGRAPHICS","VM_MEMORY_COREGRAPHICS_BACKINGSTORES","VM_MEMORY_COREGRAPHICS_DATA","VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","VM_MEMORY_COREGRAPHICS_MISC","VM_MEMORY_COREGRAPHICS_SHARED","VM_MEMORY_COREGRAPHICS_XALLOC","VM_MEMORY_COREIMAGE","VM_MEMORY_COREPROFILE","VM_MEMORY_CORESERVICES","VM_MEMORY_COREUI","VM_MEMORY_COREUIFILE","VM_MEMORY_CORPSEINFO","VM_MEMORY_DHMM","VM_MEMORY_DYLD","VM_MEMORY_DYLD_MALLOC","VM_MEMORY_DYLIB","VM_MEMORY_FOUNDATION","VM_MEMORY_GENEALOGY","VM_MEMORY_GLSL","VM_MEMORY_GUARD","VM_MEMORY_IMAGEIO","VM_MEMORY_IOKIT","VM_MEMORY_JAVA","VM_MEMORY_JAVASCRIPT_CORE","VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","VM_MEMORY_LAYERKIT","VM_MEMORY_LIBDISPATCH","VM_MEMORY_MACH_MSG","VM_MEMORY_MALLOC","VM_MEMORY_MALLOC_HUGE","VM_MEMORY_MALLOC_LARGE","VM_MEMORY_MALLOC_LARGE_REUSABLE","VM_MEMORY_MALLOC_LARGE_REUSED","VM_MEMORY_MALLOC_NANO","VM_MEMORY_MALLOC_SMALL","VM_MEMORY_MALLOC_TINY","VM_MEMORY_OBJC_DISPATCHERS","VM_MEMORY_OPENCL","VM_MEMORY_OS_ALLOC_ONCE","VM_MEMORY_RAWCAMERA","VM_MEMORY_REALLOC","VM_MEMORY_SBRK","VM_MEMORY_SCENEKIT","VM_MEMORY_SHARED_PMAP","VM_MEMORY_SKYWALK","VM_MEMORY_SQLITE","VM_MEMORY_STACK","VM_MEMORY_SWIFT_METADATA","VM_MEMORY_SWIFT_RUNTIME","VM_MEMORY_TCMALLOC","VM_MEMORY_UNSHARED_PMAP","VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","VM_METER","VM_PAGE_QUERY_PAGE_COPIED","VM_PAGE_QUERY_PAGE_CS_NX","VM_PAGE_QUERY_PAGE_CS_TAINTED","VM_PAGE_QUERY_PAGE_CS_VALIDATED","VM_PAGE_QUERY_PAGE_DIRTY","VM_PAGE_QUERY_PAGE_EXTERNAL","VM_PAGE_QUERY_PAGE_FICTITIOUS","VM_PAGE_QUERY_PAGE_PAGED_OUT","VM_PAGE_QUERY_PAGE_PRESENT","VM_PAGE_QUERY_PAGE_REF","VM_PAGE_QUERY_PAGE_SPECULATIVE","VM_PROT_EXECUTE","VM_PROT_NONE","VM_PROT_READ","VM_PROT_WRITE","VM_SWAPUSAGE","VOL_CAPABILITIES_FORMAT","VOL_CAPABILITIES_INTERFACES","VOL_CAP_FMT_2TB_FILESIZE","VOL_CAP_FMT_64BIT_OBJECT_IDS","VOL_CAP_FMT_CASE_PRESERVING","VOL_CAP_FMT_CASE_SENSITIVE","VOL_CAP_FMT_DECMPFS_COMPRESSION","VOL_CAP_FMT_DIR_HARDLINKS","VOL_CAP_FMT_DOCUMENT_ID","VOL_CAP_FMT_FAST_STATFS","VOL_CAP_FMT_HARDLINKS","VOL_CAP_FMT_HIDDEN_FILES","VOL_CAP_FMT_JOURNAL","VOL_CAP_FMT_JOURNAL_ACTIVE","VOL_CAP_FMT_NO_IMMUTABLE_FILES","VOL_CAP_FMT_NO_PERMISSIONS","VOL_CAP_FMT_NO_ROOT_TIMES","VOL_CAP_FMT_NO_VOLUME_SIZES","VOL_CAP_FMT_OPENDENYMODES","VOL_CAP_FMT_PATH_FROM_ID","VOL_CAP_FMT_PERSISTENTOBJECTIDS","VOL_CAP_FMT_SEALED","VOL_CAP_FMT_SHARED_SPACE","VOL_CAP_FMT_SPARSE_FILES","VOL_CAP_FMT_SYMBOLICLINKS","VOL_CAP_FMT_VOL_GROUPS","VOL_CAP_FMT_WRITE_GENERATION_COUNT","VOL_CAP_FMT_ZERO_RUNS","VOL_CAP_INT_ADVLOCK","VOL_CAP_INT_ALLOCATE","VOL_CAP_INT_ATTRLIST","VOL_CAP_INT_CLONE","VOL_CAP_INT_COPYFILE","VOL_CAP_INT_EXCHANGEDATA","VOL_CAP_INT_EXTENDED_ATTR","VOL_CAP_INT_EXTENDED_SECURITY","VOL_CAP_INT_FLOCK","VOL_CAP_INT_MANLOCK","VOL_CAP_INT_NAMEDSTREAMS","VOL_CAP_INT_NFSEXPORT","VOL_CAP_INT_READDIRATTR","VOL_CAP_INT_RENAME_EXCL","VOL_CAP_INT_RENAME_OPENFAIL","VOL_CAP_INT_RENAME_SWAP","VOL_CAP_INT_SEARCHFS","VOL_CAP_INT_SNAPSHOT","VOL_CAP_INT_USERACCESS","VOL_CAP_INT_VOL_RENAME","VQUIT","VREPRINT","VSTART","VSTATUS","VSTOP","VSUSP","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_OK","XATTR_CREATE","XATTR_NODEFAULT","XATTR_NOFOLLOW","XATTR_NOSECURITY","XATTR_REPLACE","XATTR_SHOWCOMPRESSION","XUCRED_VERSION","X_OK","YESEXPR","YESSTR","_CS_DARWIN_USER_CACHE_DIR","_CS_DARWIN_USER_DIR","_CS_DARWIN_USER_TEMP_DIR","_CS_PATH","_IOFBF","_IOLBF","_IONBF","_NSGetEnviron","_NSGetExecutablePath","_PC_CHOWN_RESTRICTED","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_VDISABLE","_POSIX_VDISABLE","_PTHREAD_COND_SIG_init","_PTHREAD_MUTEX_SIG_init","_PTHREAD_RWLOCK_SIG_init","_RLIMIT_POSIX_FLAG","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_BARRIERS","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_DELAYTIMER_MAX","_SC_EXPR_NEST_MAX","_SC_FILE_LOCKING","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_MAPPED_FILES","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_NGROUPS_MAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SIGQUEUE_MAX","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SS_REPL_MAX","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_VERSION","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_UTX_HOSTSIZE","_UTX_IDSIZE","_UTX_LINESIZE","_UTX_USERSIZE","_WSTATUS","_WSTOPPED","__PTHREAD_CONDATTR_SIZE__","__PTHREAD_COND_SIZE__","__PTHREAD_MUTEX_SIZE__","__PTHREAD_RWLOCKATTR_SIZE__","__PTHREAD_RWLOCK_SIZE__","__c_anonymous_ifc_ifcu","__c_anonymous_ifk_data","__c_anonymous_ifr_ifru","__cpu","__cs","__darwin_mcontext64","__darwin_mmst_reg","__darwin_x86_exception_state64","__darwin_x86_float_state64","__darwin_x86_thread_state64","__darwin_xmm_reg","__err","__error","__es","__faultvaddr","__fpu_cs","__fpu_dp","__fpu_ds","__fpu_fop","__fpu_ftw","__fpu_ip","__fpu_mxcsr","__fpu_mxcsrmask","__fpu_reserved","__fpu_reserved1","__fpu_rsrv1","__fpu_rsrv2","__fpu_rsrv3","__fpu_stmm0","__fpu_stmm1","__fpu_stmm2","__fpu_stmm3","__fpu_stmm4","__fpu_stmm5","__fpu_stmm6","__fpu_stmm7","__fpu_xmm0","__fpu_xmm1","__fpu_xmm10","__fpu_xmm11","__fpu_xmm12","__fpu_xmm13","__fpu_xmm14","__fpu_xmm15","__fpu_xmm2","__fpu_xmm3","__fpu_xmm4","__fpu_xmm5","__fpu_xmm6","__fpu_xmm7","__fpu_xmm8","__fpu_xmm9","__fs","__fs","__gs","__mmst_reg","__mmst_rsrv","__r10","__r11","__r12","__r13","__r14","__r15","__r8","__r9","__rax","__rbp","__rbx","__rcx","__rdi","__rdx","__rflags","__rip","__rsi","__rsp","__ss","__trapno","__xmm_reg","_dyld_get_image_header","_dyld_get_image_name","_dyld_get_image_vmaddr_slide","_dyld_image_count","_exit","_key","_seq","abort","abs","accept","access","acct","actime","active_count","active_count","active_count","active_count","address","addrinfo","adjtime","affinity_tag","affinity_tag","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arc4random","arc4random_buf","arc4random_uniform","arphdr","array","asctime","asctime_r","atexit","atof","atoi","atol","atoll","attr_dataoffset","attr_length","attrgroup_t","attribute_set_t","attrlist","attrreference_t","backtrace","backtrace_async","backtrace_from_fp","backtrace_image_offsets","backtrace_symbols","backtrace_symbols_fd","basename","batch_free","batch_malloc","bh_caplen","bh_datalen","bh_hdrlen","bh_tstamp","bind","bitmapcount","blkcnt_t","blksize_t","blocks_in_use","boolean_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpf_hdr","brk","bsearch","buf","bytes_free","bytes_total","bytes_used","c_cc","c_cflag","c_char","c_double","c_float","c_iflag","c_int","c_ispeed","c_lflag","c_long","c_longlong","c_oflag","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","calloc","capabilities","cc_t","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","chdir","chflags","chmod","chown","chroot","chunks_free","chunks_used","claimed_address","clearerr","clock_getres","clock_gettime","clock_settime","clock_t","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clonefile","clonefileat","close","closedir","closelog","cmd","cmd","cmd","cmdsize","cmdsize","cmdsize","cmsg_len","cmsg_level","cmsg_type","cmsghdr","commonattr","commonattr","compressions","compressions","compressor_page_count","compressor_page_count","computation","computation","confstr","connect","connectx","constant","constraint","constraint","copyfile","copyfile_callback_t","copyfile_flags_t","copyfile_state_alloc","copyfile_state_free","copyfile_state_get","copyfile_state_set","copyfile_state_t","cow_faults","cow_faults","cow_faults","cow_faults","cpu_subtype","cpu_subtype","cpu_subtype_t","cpu_ticks","cpu_ticks","cpu_type","cpu_type","cpu_type_t","cpu_usage","cpu_usage","cpusubtype","cpusubtype","cputype","cputype","cr_groups","cr_ngroups","cr_uid","cr_version","creat","ctime","ctime_r","ctl_id","ctl_info","ctl_name","cuid","currency_symbol","d_ino","d_name","d_namlen","d_reclen","d_seekoff","d_type","data","data","decimal_point","decompressions","decompressions","default_policy","default_policy","denom","denom","destroy","dev_t","difftime","dirattr","dirattr","dirent","dirfd","dirname","disconnectx","dispatch_qaddr","dispatch_qaddr","dladdr","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlopen","dlsym","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curbytes","dqb_curinodes","dqb_id","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_spare","dqblk","drand48","dup","dup2","duplocale","e_tdev","e_tpgid","endgrent","endpwent","endservent","endutxent","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","erand48","errcnt","esterror","esterror","events","exchangedata","execl","execle","execlp","execv","execvP","execve","execvp","exit","ext","external_page_count","external_page_count","f_bavail","f_bavail","f_bfree","f_bfree","f_blocks","f_blocks","f_bsize","f_bsize","f_favail","f_ffree","f_ffree","f_files","f_files","f_flag","f_flags","f_flags_ext","f_frsize","f_fsid","f_fsid","f_fssubtype","f_fstypename","f_iosize","f_mntfromname","f_mntonname","f_namemax","f_owner","f_reserved","f_type","faccessat","faults","faults","faults","faults","fchdir","fchflags","fchmod","fchmodat","fchown","fchownat","fclonefileat","fclose","fcntl","fcopyfile","fd","fd_set","fdopen","fdopendir","feof","ferror","fflags","fflags","fflush","fgetattrlist","fgetc","fgetpos","fgets","fgetxattr","fileattr","fileattr","fileno","fileoff","fileoff","filesize","filesize","filetype","filetype","filter","filter","flag","flags","flags","flags","flags","flags","flags","flags","flags","flistxattr","flock","flock","fmemopen","fmount","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fopen","fork","forkattr","forkattr","forkpty","fp_flags","fp_length","fp_offset","fpathconf","fpos_t","fprintf","fpunchhole_t","fputc","fputs","frac_digits","fread","freadlink","free","free","free_count","free_count","free_count","free_count","free_definite_size","freeaddrinfo","freeifaddrs","freelocale","fremovexattr","freopen","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fsblkcnt_t","fscanf","fseek","fseeko","fsetattrlist","fsetpos","fsetxattr","fsfilcnt_t","fsid_t","fspecread_t","fsr_flags","fsr_length","fsr_offset","fst_bytesalloc","fst_flags","fst_length","fst_offset","fst_posmode","fstat","fstatat","fstatfs","fstatvfs","fstore_t","fsync","fta_length","fta_offset","ftell","ftello","ftok","ftrimactivefile_t","ftruncate","futimens","futimes","fwrite","gai_strerror","getaddrinfo","getattrlist","getattrlistat","getattrlistbulk","getchar","getchar_unlocked","getcwd","getdate","getdomainname","getdtablesize","getegid","getentropy","getenv","geteuid","getfsstat","getgid","getgrent","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","gethostuuid","getifaddrs","getitimer","getline","getloadavg","getlogin","getmntinfo","getnameinfo","getopt","getopt_long","getpeereid","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprogname","getprotobyname","getprotobynumber","getpwent","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrlimit","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid_t","gl_offs","gl_pathc","gl_pathv","glob","glob_t","globfree","gmtime","gmtime_r","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","group","grouping","h_addr_list","h_addrtype","h_aliases","h_length","h_name","has_arg","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hdr_cnt","headers","hits","hits","hits","hits","host_flavor_t","host_info64_t","host_info_t","host_processor_info","host_statistics","host_statistics64","host_t","hostent","hstrerror","iconv","iconv_close","iconv_open","iconv_t","id_t","ident","ident","idtype_t","if_data","if_data64","if_freenameindex","if_index","if_indextoname","if_msghdr","if_msghdr2","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_dstaddr","ifa_flags","ifa_msghdr","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifam_addrs","ifam_flags","ifam_index","ifam_metric","ifam_msglen","ifam_type","ifam_version","ifc_ifcu","ifc_len","ifconf","ifcu_buf","ifcu_req","ifdevmtu","ifdm_current","ifdm_max","ifdm_min","ifi_addrlen","ifi_addrlen","ifi_baudrate","ifi_baudrate","ifi_collisions","ifi_collisions","ifi_hdrlen","ifi_hdrlen","ifi_hwassist","ifi_ibytes","ifi_ibytes","ifi_ierrors","ifi_ierrors","ifi_imcasts","ifi_imcasts","ifi_ipackets","ifi_ipackets","ifi_iqdrops","ifi_iqdrops","ifi_lastchange","ifi_lastchange","ifi_metric","ifi_metric","ifi_mtu","ifi_mtu","ifi_noproto","ifi_noproto","ifi_obytes","ifi_obytes","ifi_oerrors","ifi_oerrors","ifi_omcasts","ifi_omcasts","ifi_opackets","ifi_opackets","ifi_physical","ifi_physical","ifi_recvquota","ifi_recvquota","ifi_recvtiming","ifi_recvtiming","ifi_reserved1","ifi_reserved2","ifi_type","ifi_type","ifi_typelen","ifi_typelen","ifi_unused1","ifi_unused1","ifi_unused2","ifi_xmitquota","ifi_xmitquota","ifi_xmittiming","ifi_xmittiming","ifk_data","ifk_module_id","ifk_ptr","ifk_type","ifk_value","ifkpi","ifm_addrs","ifm_addrs","ifm_data","ifm_data","ifm_flags","ifm_flags","ifm_index","ifm_index","ifm_msglen","ifm_msglen","ifm_snd_drops","ifm_snd_len","ifm_snd_maxlen","ifm_timer","ifm_type","ifm_type","ifm_version","ifm_version","ifma_msghdr","ifma_msghdr2","ifmam_addrs","ifmam_addrs","ifmam_flags","ifmam_flags","ifmam_index","ifmam_index","ifmam_msglen","ifmam_msglen","ifmam_refcount","ifmam_type","ifmam_type","ifmam_version","ifmam_version","ifr_ifru","ifr_name","ifreq","ifru_addr","ifru_broadaddr","ifru_cap","ifru_data","ifru_devmtu","ifru_dstaddr","ifru_flags","ifru_functional_type","ifru_intval","ifru_kpi","ifru_media","ifru_metrics","ifru_mtu","ifru_phys","ifru_route_refcnt","ifru_wake_flags","image_offset","importance","importance","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_pktinfo","in_addr","in_addr_t","in_pktinfo","in_port_t","inactive_count","inactive_count","inactive_count","inactive_count","initgroups","initprot","initprot","ino_t","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","integer_t","internal_page_count","internal_page_count","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","introspect","ioctl","iov_base","iov_len","iovec","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","is_master","is_master","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_value","itimerval","jitcnt","jitter","jrand48","kCCAlignmentError","kCCBufferTooSmall","kCCCallSequenceError","kCCDecodeError","kCCInvalidKey","kCCKeySizeError","kCCMemoryFailure","kCCOverflow","kCCParamError","kCCRNGFailure","kCCSuccess","kCCUnimplemented","kCCUnspecifiedError","kern_return_t","kevent","kevent","kevent64","kevent64_s","key_t","kill","killpg","kqueue","l2p_contigbytes","l2p_devoffset","l2p_flags","l_len","l_linger","l_onoff","l_pid","l_start","l_type","l_whence","labs","lchown","lcong48","lconv","ledger_array_t","ledger_t","linger","link","linkat","lio_listio","listen","listxattr","load_average","load_average","load_command","locale_t","localeconv","localeconv_l","localtime","localtime_r","lockf","log2phys","login_tty","lookups","lookups","lookups","lookups","lrand48","lseek","lstat","lutimes","mach_absolute_time","mach_factor","mach_factor","mach_header","mach_header_64","mach_host_self","mach_msg_type_number_t","mach_port_t","mach_task_basic_info","mach_task_basic_info_data_t","mach_task_basic_info_t","mach_task_self","mach_task_self_","mach_thread_self","mach_timebase_info","mach_timebase_info","mach_timebase_info_data_t","mach_vm_address_t","mach_vm_map","mach_vm_offset_t","mach_vm_size_t","machine","madvise","magic","magic","major","makedev","malloc","malloc","malloc_default_zone","malloc_good_size","malloc_introspection_t","malloc_printf","malloc_size","malloc_statistics_t","malloc_zone_calloc","malloc_zone_check","malloc_zone_free","malloc_zone_from_ptr","malloc_zone_log","malloc_zone_malloc","malloc_zone_print","malloc_zone_print_ptr_info","malloc_zone_realloc","malloc_zone_statistics","malloc_zone_t","malloc_zone_valloc","max_align_t","max_size_in_use","maxerror","maxerror","maxprot","maxprot","mcontext_t","mem_entry_name_port_t","memalign","memchr","memcmp","memcpy","memmem","memmove","memory_object_offset_t","memory_object_t","memset","memset_pattern16","memset_pattern4","memset_pattern8","memset_s","microseconds","mincore","minor","mkdir","mkdirat","mkdtemp","mkfifo","mkfifoat","mknod","mknodat","mkstemp","mkstemps","mktime","mlock","mlockall","mmap","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mrand48","msg_control","msg_controllen","msg_flags","msg_iov","msg_iovlen","msg_name","msg_namelen","msghdr","mstats","mstats","msync","munlock","munlockall","munmap","n_cs_precedes","n_sep_by_space","n_sign_posn","name","nanosleep","nativeattr","natural_t","ncmds","ncmds","negative_sign","newlocale","nfds_t","nice","nl_item","nl_langinfo","nlink_t","no_data","no_data","nodename","nrand48","nsects","nsects","ntp_adjtime","ntp_gettime","ntptimeval","numer","numer","off_t","offset","offset","open","open_memstream","open_wmemstream","openat","opendir","openlog","openpty","option","os_log_create","os_log_t","os_log_type_enabled","os_log_type_t","os_signpost_enabled","os_signpost_id_generate","os_signpost_id_make_with_pointer","os_signpost_id_t","os_signpost_type_t","os_unfair_lock","os_unfair_lock_assert_not_owner","os_unfair_lock_assert_owner","os_unfair_lock_lock","os_unfair_lock_s","os_unfair_lock_t","os_unfair_lock_trylock","os_unfair_lock_unlock","p_aliases","p_cs_precedes","p_name","p_proto","p_sep_by_space","p_sign_posn","pageins","pageins","pageins","pageins","pageouts","pageouts","pageouts","pageouts","passwd","pathconf","pause","pbi_comm","pbi_flags","pbi_gid","pbi_name","pbi_nfiles","pbi_nice","pbi_pgid","pbi_pid","pbi_pjobc","pbi_ppid","pbi_rgid","pbi_ruid","pbi_start_tvsec","pbi_start_tvusec","pbi_status","pbi_svgid","pbi_svuid","pbi_uid","pbi_xstatus","pbsd","pclose","period","period","perror","pid_t","pipe","policy","policy","policy","policy","policy_t","poll","pollfd","popen","positive_sign","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addclose","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addopen","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_get_qos_class_np","posix_spawnattr_getarchpref_np","posix_spawnattr_getbinpref_np","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_set_qos_class_np","posix_spawnattr_setarchpref_np","posix_spawnattr_setbinpref_np","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppsfreq","pread","preadv","precision","preemptible","preemptible","pressure_relief","printf","priority","priority","proc_bsdinfo","proc_kmsgbuf","proc_libversion","proc_listallpids","proc_listchildpids","proc_listpgrppids","proc_listpids","proc_name","proc_pid_rusage","proc_pidfdinfo","proc_pidfileportinfo","proc_pidinfo","proc_pidpath","proc_regionfilename","proc_set_csm","proc_set_no_smt","proc_setthread_csm","proc_setthread_no_smt","proc_taskallinfo","proc_taskinfo","proc_threadinfo","proc_vnodepathinfo","processor_basic_info","processor_basic_info_data_t","processor_basic_info_t","processor_count","processor_count","processor_cpu_load_info","processor_cpu_load_info_data_t","processor_cpu_load_info_t","processor_flavor_t","processor_info_array_t","processor_info_t","processor_set_basic_info","processor_set_basic_info_data_t","processor_set_basic_info_t","processor_set_load_info","processor_set_load_info_data_t","processor_set_load_info_t","protoent","pselect","pseudo_AF_HDRCMPLT","pseudo_AF_KEY","pseudo_AF_PIP","pseudo_AF_RTIP","pseudo_AF_XTP","pth_cpu_usage","pth_cpu_usage","pth_cpu_usage","pth_curpri","pth_curpri","pth_curpri","pth_flags","pth_flags","pth_flags","pth_maxpriority","pth_maxpriority","pth_maxpriority","pth_name","pth_name","pth_name","pth_policy","pth_policy","pth_policy","pth_priority","pth_priority","pth_priority","pth_run_state","pth_run_state","pth_run_state","pth_sleep_time","pth_sleep_time","pth_sleep_time","pth_system_time","pth_system_time","pth_system_time","pth_user_time","pth_user_time","pth_user_time","pthread_atfork","pthread_attr_destroy","pthread_attr_get_qos_class_np","pthread_attr_getschedparam","pthread_attr_getstacksize","pthread_attr_init","pthread_attr_set_qos_class_np","pthread_attr_setdetachstate","pthread_attr_setschedparam","pthread_attr_setstacksize","pthread_attr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setpshared","pthread_condattr_t","pthread_cpu_number_np","pthread_create","pthread_create_from_mach_thread","pthread_detach","pthread_exit","pthread_from_mach_thread_np","pthread_get_qos_class_np","pthread_get_stackaddr_np","pthread_get_stacksize_np","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_introspection_getspecific_np","pthread_introspection_hook_install","pthread_introspection_hook_t","pthread_introspection_setspecific_np","pthread_jit_write_callback_t","pthread_jit_write_freeze_callbacks_np","pthread_jit_write_protect_np","pthread_jit_write_protect_supported_np","pthread_jit_write_with_callback_np","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mach_thread_np","pthread_main_np","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getpshared","pthread_mutexattr_init","pthread_mutexattr_setpshared","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_set_qos_class_self_np","pthread_setname_np","pthread_setschedparam","pthread_setspecific","pthread_sigmask","pthread_stack_frame_decode_np","pthread_t","pthread_threadid_np","pti_cow_faults","pti_csw","pti_faults","pti_messages_received","pti_messages_sent","pti_numrunning","pti_pageins","pti_policy","pti_priority","pti_resident_size","pti_syscalls_mach","pti_syscalls_unix","pti_threadnum","pti_threads_system","pti_threads_user","pti_total_system","pti_total_user","pti_virtual_size","ptinfo","ptrace","ptrdiff_t","ptsname","purgeable_count","purgeable_count","purgeable_count","purgeable_count","purges","purges","purges","purges","putchar","putchar_unlocked","putenv","puts","pututxline","pvi_cdir","pvi_rdir","pw_change","pw_class","pw_dir","pw_expire","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwritev","qos_class_t","qsort","querylocale","quotactl","ra_count","ra_offset","radvisory","raise","rand","reactivations","reactivations","reactivations","reactivations","read","readdir","readdir_r","readlink","readlinkat","readv","realloc","realloc","realpath","recv","recvfrom","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","release","remove","removexattr","rename","renameat","renameatx_np","renamex_np","res_init","reserved","reserved","reserved","reserved","resident_size","resident_size","resident_size_max","resident_size_max","revents","rewind","rewinddir","rfu_1","ri_billed_energy","ri_billed_system_time","ri_billed_system_time","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_pageins","ri_child_pageins","ri_child_pageins","ri_child_pageins","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_system_time","ri_child_system_time","ri_child_system_time","ri_child_system_time","ri_child_user_time","ri_child_user_time","ri_child_user_time","ri_child_user_time","ri_cpu_time_qos_background","ri_cpu_time_qos_background","ri_cpu_time_qos_default","ri_cpu_time_qos_default","ri_cpu_time_qos_legacy","ri_cpu_time_qos_legacy","ri_cpu_time_qos_maintenance","ri_cpu_time_qos_maintenance","ri_cpu_time_qos_user_initiated","ri_cpu_time_qos_user_initiated","ri_cpu_time_qos_user_interactive","ri_cpu_time_qos_user_interactive","ri_cpu_time_qos_utility","ri_cpu_time_qos_utility","ri_cycles","ri_diskio_bytesread","ri_diskio_bytesread","ri_diskio_bytesread","ri_diskio_byteswritten","ri_diskio_byteswritten","ri_diskio_byteswritten","ri_instructions","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interval_max_phys_footprint","ri_lifetime_max_phys_footprint","ri_logical_writes","ri_pageins","ri_pageins","ri_pageins","ri_pageins","ri_pageins","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_resident_size","ri_resident_size","ri_resident_size","ri_resident_size","ri_resident_size","ri_runnable_time","ri_serviced_energy","ri_serviced_system_time","ri_serviced_system_time","ri_system_time","ri_system_time","ri_system_time","ri_system_time","ri_system_time","ri_user_time","ri_user_time","ri_user_time","ri_user_time","ri_user_time","ri_uuid","ri_uuid","ri_uuid","ri_uuid","ri_uuid","ri_wired_size","ri_wired_size","ri_wired_size","ri_wired_size","ri_wired_size","rlim_cur","rlim_max","rlim_t","rlimit","rm_eo","rm_so","rmdir","rmx_expire","rmx_filler","rmx_hopcount","rmx_locks","rmx_mtu","rmx_pksent","rmx_recvpipe","rmx_rtt","rmx_rttvar","rmx_sendpipe","rmx_ssthresh","rmx_state","rt_metrics","rt_msghdr","rt_msghdr2","rtm_addrs","rtm_addrs","rtm_errno","rtm_flags","rtm_flags","rtm_index","rtm_index","rtm_inits","rtm_inits","rtm_msglen","rtm_msglen","rtm_parentflags","rtm_pid","rtm_refcnt","rtm_reserved","rtm_rmx","rtm_rmx","rtm_seq","rtm_type","rtm_type","rtm_use","rtm_use","rtm_version","rtm_version","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","run_state","run_state","running","running","rusage","rusage_info_t","rusage_info_v0","rusage_info_v1","rusage_info_v2","rusage_info_v3","rusage_info_v4","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_endpoints_t","sa_family","sa_family_t","sa_flags","sa_len","sa_mask","sa_sigaction","sae_associd_t","sae_connid_t","sae_dstaddr","sae_dstaddrlen","sae_srcaddr","sae_srcaddrlen","sae_srcif","sbrk","sc_family","sc_id","sc_len","sc_reserved","sc_unit","scanf","sched_get_priority_max","sched_get_priority_min","sched_param","sched_priority","sched_yield","sdl_alen","sdl_data","sdl_family","sdl_index","sdl_len","sdl_nlen","sdl_slen","sdl_type","seconds","seed48","seekdir","segment_command","segment_command_64","segname","segname","select","sem_base","sem_close","sem_ctime","sem_flg","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_pad1","sem_pad2","sem_pad3","sem_perm","sem_post","sem_t","sem_trywait","sem_unlink","sem_wait","sembuf","semctl","semget","semid_ds","semop","semun","send","sendfile","sendmsg","sendto","servent","setattrlist","setattrlistat","setbuf","setdomainname","setegid","setenv","seteuid","setgid","setgrent","setgroups","sethostid","sethostname","setitimer","setlocale","setlogin","setlogmask","setpgid","setpriority","setprogname","setpwent","setregid","setreuid","setrlimit","setservent","setsid","setsockopt","settimeofday","setuid","setutxent","setvbuf","setxattr","sf_hdtr","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_internal","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_addr","si_code","si_errno","si_pid","si_pid","si_signo","si_status","si_status","si_uid","si_uid","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_attributes","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","sigpending","sigprocmask","sigset_t","sigsuspend","sigval","sigwait","sin6_addr","sin6_family","sin6_flowinfo","sin6_len","sin6_port","sin6_scope_id","sin_addr","sin_addr","sin_family","sin_family","sin_len","sin_len","sin_other","sin_port","sin_port","sin_srcaddr","sin_tos","sin_zero","sival_ptr","size","size","size_allocated","size_in_use","size_t","sizeofcmds","sizeofcmds","sleep","sleep_time","sleep_time","slot_num","slot_num","snd_family","snd_len","snd_name","snprintf","sockaddr","sockaddr_ctl","sockaddr_dl","sockaddr_in","sockaddr_in6","sockaddr_inarp","sockaddr_ndrv","sockaddr_storage","sockaddr_un","sockaddr_vm","socket","socketpair","socklen_t","speculative_count","speculative_count","speculative_count","speculative_count","speed_t","sprintf","srand","srand48","ss_family","ss_flags","ss_len","ss_size","ss_sp","ss_sysaddr","sscanf","ssize_t","st_atime","st_atime_nsec","st_birthtime","st_birthtime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_flags","st_gen","st_gid","st_ino","st_lspare","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_qspare","st_rdev","st_size","st_uid","stabil","stack_t","stat","stat","statfs","statfs","status","statvfs","statvfs","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strftime","strftime_l","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strpbrk","strptime","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtoll","strtonum","strtoul","strtoull","strxfrm","sun_family","sun_len","sun_path","suseconds_t","suspend_count","suspend_count","suspend_count","suspend_count","svm_cid","svm_family","svm_len","svm_port","svm_reserved1","swapins","swapins","swapouts","swapouts","symlink","symlinkat","sync","syscall","sysconf","sysctl","sysctlbyname","sysctlnametomib","sysdir_get_next_search_path_enumeration","sysdir_search_path_directory_t","sysdir_search_path_domain_mask_t","sysdir_search_path_enumeration_state","sysdir_start_search_path_enumeration","syslog","sysname","system","system_time","system_time","system_time","system_time","system_time","system_time","tai","task_count","task_count","task_create","task_flavor_t","task_for_pid","task_info","task_info_t","task_inspect_t","task_set_info","task_t","task_terminate","task_thread_times_info","task_thread_times_info_data_t","task_thread_times_info_t","task_threads","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcp_connection_info","tcpi_flags","tcpi_maxseg","tcpi_options","tcpi_rcv_wnd","tcpi_rcv_wscale","tcpi_rto","tcpi_rttcur","tcpi_rttvar","tcpi_rxbytes","tcpi_rxoutoforderbytes","tcpi_rxpackets","tcpi_rxretransmitpackets","tcpi_snd_cwnd","tcpi_snd_sbbytes","tcpi_snd_ssthresh","tcpi_snd_wnd","tcpi_snd_wscale","tcpi_srtt","tcpi_state","tcpi_tfo_cookie_invalid","tcpi_tfo_cookie_rcv","tcpi_tfo_cookie_req","tcpi_tfo_cookie_req_rcv","tcpi_tfo_cookie_sent","tcpi_tfo_cookie_wrong","tcpi_tfo_heuristics_disable","tcpi_tfo_no_cookie_rcv","tcpi_tfo_onebyte_proxy","tcpi_tfo_recv_blackhole","tcpi_tfo_send_blackhole","tcpi_tfo_syn_data_acked","tcpi_tfo_syn_data_rcv","tcpi_tfo_syn_data_sent","tcpi_tfo_syn_loss","tcpi_txbytes","tcpi_txpackets","tcpi_txretransmitbytes","tcsendbreak","tcsetattr","tcsetpgrp","telldir","termios","thousands_sep","thread_act_array_t","thread_act_t","thread_affinity_policy","thread_affinity_policy_data_t","thread_affinity_policy_t","thread_background_policy","thread_background_policy_data_t","thread_background_policy_t","thread_basic_info","thread_basic_info_data_t","thread_basic_info_t","thread_count","thread_count","thread_extended_info","thread_extended_info_data_t","thread_extended_info_t","thread_extended_policy","thread_extended_policy_data_t","thread_extended_policy_t","thread_flavor_t","thread_handle","thread_handle","thread_id","thread_id","thread_identifier_info","thread_identifier_info_data_t","thread_identifier_info_t","thread_info","thread_info_t","thread_inspect_t","thread_latency_qos_policy","thread_latency_qos_policy_data_t","thread_latency_qos_policy_t","thread_latency_qos_t","thread_latency_qos_tier","thread_latency_qos_tier","thread_policy_flavor_t","thread_policy_get","thread_policy_set","thread_policy_t","thread_precedence_policy","thread_precedence_policy_data_t","thread_precedence_policy_t","thread_standard_policy","thread_standard_policy_data_t","thread_standard_policy_t","thread_t","thread_throughput_qos_policy","thread_throughput_qos_policy_data_t","thread_throughput_qos_policy_t","thread_throughput_qos_t","thread_throughput_qos_tier","thread_throughput_qos_tier","thread_time_constraint_policy","thread_time_constraint_policy_data_t","thread_time_constraint_policy_t","throttled_count","throttled_count","time","time","time_state","time_t","time_value_t","timegm","times","timeshare","timeshare","timespec","timeval","timeval32","timex","timezone","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","total_uncompressed_pages_in_compressor","total_uncompressed_pages_in_compressor","toupper","trailers","trl_cnt","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uc_link","uc_mcontext","uc_mcsize","uc_onstack","uc_sigmask","uc_stack","ucontext_t","udata","udata","uid","uid_t","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","uname","ungetc","unlink","unlinkat","unlockpt","unmount","unsetenv","useconds_t","uselocale","user_time","user_time","user_time","user_time","user_time","user_time","usleep","ut_host","ut_id","ut_line","ut_pid","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpx","utmpxname","utsname","uuid","uuid_t","val","val","valid","validattr","valloc","version","version","vi_fsid","vi_pad","vi_stat","vi_type","vinfo_stat","vip_path","vip_vi","virtual_size","virtual_size","vm_address_t","vm_allocate","vm_deallocate","vm_inherit_t","vm_map_t","vm_offset_t","vm_page_size","vm_prot_t","vm_range_t","vm_size_t","vm_statistics","vm_statistics64","vm_statistics64_data_t","vm_statistics64_t","vm_statistics_data_t","vm_statistics_t","vmaddr","vmaddr","vmsize","vmsize","vnode_info","vnode_info_path","vol_attributes_attr_t","vol_capabilities_attr_t","vol_capabilities_set_t","volattr","volattr","vst_atime","vst_atimensec","vst_birthtime","vst_birthtimensec","vst_blksize","vst_blocks","vst_ctime","vst_ctimensec","vst_dev","vst_flags","vst_gen","vst_gid","vst_ino","vst_mode","vst_mtime","vst_mtimensec","vst_nlink","vst_qspare","vst_rdev","vst_size","vst_uid","wait","wait4","waitid","waitpid","wchar_t","wcslen","wcstombs","winsize","wire_count","wire_count","wire_count","wire_count","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xsu_avail","xsu_encrypted","xsu_pagesize","xsu_total","xsu_used","xsw_usage","xucred","zero_fill_count","zero_fill_count","zero_fill_count","zero_fill_count","zone_name"],"q":[[0,"libc"],[6602,"core::fmt"],[6603,"core::fmt"],[6604,"core::hash"],[6605,"core::any"]],"ddata includes security that replaces the TFO-cookie","data is idempotent","resume connect() on read/writehird Party Connect","Any distributed FS","IP6 Auth Header","any host internal protocol","any private encr. scheme","Argus","AX.25 Frames","BHA","Bulk Data Transfer","BackRoom SATNET Monitoring","CFTP","Chaos","Control Message Transport","Comp. Prot. HeartBeat","Comp. Prot. Net. Executive","Datagram Delivery","dissimilar gateway prot.","divert pseudo-protocol","last return value of *_input(), meaning “all job for …","IP6 destination option","exterior gateway protocol","EMCON","encapsulation header","ISO cnlp","IP6 Encap Sec. Payload","Ethernet IP encapsulation","IP6 fragmentation header","gateway2 (deprecated)","GMTP","General Routing Encap.","“hello” routing protocol","Host Monitoring","IP6 hop-by-hop options","","","xns idp","InterDomain Policy Routing","InterDomain Routing","group mgmt protocol","NSFNET-IGP","Cisco/GXS IGRP","IL transport protocol","Integ. Net Layer Security","Merit Internodal","","payload compression (IPComp)","Packet Core Utility","IP encapsulated in IP","for compatibility","Pluribus Packet Core","","Reliable Transaction","Kryptolan","Locus Address Resoloution","Leaf-1","Leaf-2","","DCN Measurement Subsystems","Mobile Host Routing","Mobile Int.ing control","Multicast Transport","Multiplexing","Sun net disk proto (temp.)","Next Hop Resolution","IP6 no next header","Network Services","network voice protocol","OSPFIGP","PGM","private interior gateway","Protocol Independent Mcast","Packet Radio Measurement","pup","Packet Video Protocol","raw IP packet","BBN RCC Monitoring","Reliable Data","IP6 routing header","resource reservation","Remote Virtual Disk","SATNET/Backroom EXPAK","Satnet Monitoring","Semaphore Comm. security","SCTP","Source Demand Routing","Sequential Exchange","Strite RPC protocol","Stream protocol II.","Secure VMTP","IP with encryption","TCF","","tp-4 w/ class negotiation","TP++ Transport","Trunk-1","Trunk-2","TTP","","Banyon VINES","VISA Protocol","VMTP","WIDEBAND EXPAK","WIDEBAND Monitoring","Wang Span Network","Cross Net Debuggero value.","No value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","((sae_associd_t)(-1ULL))","","((sae_connid_t)(-1ULL))","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Process being created by fork.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Currently runnable.","Sleeping on an address.","Process debugging or suspension.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Awaiting collection by parent.","","","","","","","","","","","","","","","","","","","","","","","","","","","Some value of type <code>T</code>.","Some value of type <code>T</code>.","","","","","","","","","","","","","","","","Enable/Disable TCP Fastopen on this socketquivalent to C’s <code>void</code> type when used as a pointereturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Notesalls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codehe 64-bit libc on Solaris and illumos only has readdir_r. …if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,1],[4,4],[[3,1],1],[4,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[5,6],7],[[5,6],8],[[5,6],7],0,[6,7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[5,5],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,8],0,[5,5],[5,8],[5,8],[5,8],[5,8],0,0,0,[5,5],[5,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[6,6],[32,32],[3,3],[1,1],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[11,11],8],[[12,12],8],[[13,13],8],[[14,14],8],[[15,15],8],[[16,16],8],[[17,17],8],[[18,18],8],[[19,19],8],[[20,20],8],[[21,21],8],[[22,22],8],[[23,23],8],[[24,24],8],[[25,25],8],[[26,26],8],[[27,27],8],[[28,28],8],[[29,29],8],[[30,30],8],[[31,31],8],[[6,6],8],[[32,32],8],[[3,3],8],[[1,1],8],[[33,33],8],[[34,34],8],[[35,35],8],[[36,36],8],[[37,37],8],[[38,38],8],[[39,39],8],[[183,183],8],[[44,44],8],[[45,45],8],[[46,46],8],[[47,47],8],[[48,48],8],[[49,49],8],[[50,50],8],[[51,51],8],[[52,52],8],[[53,53],8],[[54,54],8],[[55,55],8],[[56,56],8],[[57,57],8],[[58,58],8],[[59,59],8],[[60,60],8],[[61,61],8],[[62,62],8],[[63,63],8],[[64,64],8],[[65,65],8],[[66,66],8],[[67,67],8],[[68,68],8],[[69,69],8],[[70,70],8],[[71,71],8],[[72,72],8],[[73,73],8],[[74,74],8],[[75,75],8],[[76,76],8],[[77,77],8],[[78,78],8],[[79,79],8],[[80,80],8],[[81,81],8],[[82,82],8],[[83,83],8],[[84,84],8],[[85,85],8],[[86,86],8],[[87,87],8],[[88,88],8],[[89,89],8],[[90,90],8],[[91,91],8],[[92,92],8],[[93,93],8],[[94,94],8],[[95,95],8],[[96,96],8],[[97,97],8],[[98,98],8],[[99,99],8],[[100,100],8],[[101,101],8],[[102,102],8],[[103,103],8],[[104,104],8],[[105,105],8],[[106,106],8],[[107,107],8],[[108,108],8],[[109,109],8],[[110,110],8],[[111,111],8],[[112,112],8],[[113,113],8],[[114,114],8],[[115,115],8],[[116,116],8],[[117,117],8],[[118,118],8],[[119,119],8],[[120,120],8],[[121,121],8],[[122,122],8],[[123,123],8],[[124,124],8],[[125,125],8],[[126,126],8],[[127,127],8],[[128,128],8],[[129,129],8],[[130,130],8],[[131,131],8],[[132,132],8],[[133,133],8],[[134,134],8],[[135,135],8],[[136,136],8],[[137,137],8],[[138,138],8],[[139,139],8],[[140,140],8],[[141,141],8],[[142,142],8],[[143,143],8],[[144,144],8],[[145,145],8],[[146,146],8],[[147,147],8],[[148,148],8],[[149,149],8],[[150,150],8],[[151,151],8],[[152,152],8],[[153,153],8],[[154,154],8],[[155,155],8],[[156,156],8],[[157,157],8],[[159,159],8],[[160,160],8],[[161,161],8],[[162,162],8],[[163,163],8],[[164,164],8],[[165,165],8],[[166,166],8],[[167,167],8],[[168,168],8],[[169,169],8],[[170,170],8],[[171,171],8],[[172,172],8],[[173,173],8],[[174,174],8],[[175,175],8],[[176,176],8],[[177,177],8],[[178,178],8],[[179,179],8],[[181,181],8],[[182,182],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[184,185],186],[[11,185],186],[[12,185],186],[[13,185],186],[[14,185],186],[[15,185],186],[[16,185],186],[[17,185],186],[[18,185],186],[[19,185],186],[[20,185],186],[[21,185],186],[[22,185],186],[[23,185],186],[[24,185],186],[[25,185],186],[[26,185],186],[[27,185],186],[[187,185],186],[[188,185],186],[[28,185],186],[[29,185],186],[[30,185],186],[[31,185],186],[[6,185],186],[[32,185],186],[[3,185],186],[[1,185],186],[[33,185],186],[[34,185],186],[[35,185],186],[[36,185],186],[[37,185],186],[[38,185],186],[[39,185],186],[[183,185],186],[[40,185],186],[[41,185],186],[[42,185],186],[[43,185],186],[[44,185],186],[[45,185],186],[[46,185],186],[[47,185],186],[[48,185],186],[[49,185],186],[[50,185],186],[[51,185],186],[[52,185],186],[[53,185],186],[[54,185],186],[[55,185],186],[[56,185],186],[[57,185],186],[[58,185],186],[[59,185],186],[[60,185],186],[[61,185],186],[[62,185],186],[[63,185],186],[[64,185],186],[[65,185],186],[[66,185],186],[[67,185],186],[[68,185],186],[[69,185],186],[[70,185],186],[[71,185],186],[[72,185],186],[[73,185],186],[[74,185],186],[[75,185],186],[[76,185],186],[[77,185],186],[[78,185],186],[[79,185],186],[[80,185],186],[[189,185],[[191,[7,190]]]],[[81,185],186],[[82,185],186],[[83,185],186],[[84,185],186],[[85,185],186],[[86,185],186],[[87,185],186],[[88,185],186],[[89,185],186],[[90,185],186],[[91,185],186],[[92,185],186],[[93,185],186],[[94,185],186],[[95,185],186],[[96,185],186],[[97,185],186],[[98,185],186],[[99,185],186],[[100,185],186],[[101,185],186],[[102,185],186],[[103,185],186],[[104,185],186],[[105,185],186],[[106,185],186],[[107,185],186],[[108,185],186],[[109,185],186],[[110,185],186],[[111,185],186],[[112,185],186],[[113,185],186],[[114,185],186],[[115,185],186],[[116,185],186],[[117,185],186],[[118,185],186],[[119,185],186],[[120,185],186],[[121,185],186],[[122,185],186],[[123,185],186],[[124,185],186],[[125,185],186],[[126,185],186],[[127,185],186],[[128,185],186],[[129,185],186],[[130,185],186],[[131,185],186],[[132,185],186],[[133,185],186],[[134,185],186],[[135,185],186],[[136,185],186],[[137,185],186],[[138,185],186],[[139,185],186],[[140,185],186],[[141,185],186],[[142,185],186],[[143,185],186],[[144,185],186],[[145,185],186],[[146,185],186],[[147,185],186],[[148,185],186],[[149,185],186],[[150,185],186],[[151,185],186],[[152,185],186],[[153,185],186],[[154,185],186],[[155,185],186],[[156,185],186],[[157,185],186],[[159,185],186],[[160,185],186],[[161,185],186],[[162,185],186],[[163,185],186],[[164,185],186],[[165,185],186],[[166,185],186],[[167,185],186],[[168,185],186],[[169,185],186],[[170,185],186],[[171,185],186],[[172,185],186],[[173,185],186],[[174,185],186],[[175,185],186],[[176,185],186],[[177,185],186],[[178,185],186],[[179,185],186],[[181,185],186],[[182,185],186],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[11,-1],7,192],[[12,-1],7,192],[[13,-1],7,192],[[14,-1],7,192],[[15,-1],7,192],[[16,-1],7,192],[[17,-1],7,192],[[18,-1],7,192],[[19,-1],7,192],[[20,-1],7,192],[[21,-1],7,192],[[22,-1],7,192],[[23,-1],7,192],[[24,-1],7,192],[[25,-1],7,192],[[26,-1],7,192],[[27,-1],7,192],[[28,-1],7,192],[[29,-1],7,192],[[30,-1],7,192],[[31,-1],7,192],[[6,-1],7,192],[[32,-1],7,192],[[3,-1],7,192],[[1,-1],7,192],[[33,-1],7,192],[[34,-1],7,192],[[35,-1],7,192],[[36,-1],7,192],[[37,-1],7,192],[[38,-1],7,192],[[39,-1],7,192],[[183,-1],7,192],[[44,-1],7,192],[[45,-1],7,192],[[46,-1],7,192],[[47,-1],7,192],[[48,-1],7,192],[[49,-1],7,192],[[50,-1],7,192],[[51,-1],7,192],[[52,-1],7,192],[[53,-1],7,192],[[54,-1],7,192],[[55,-1],7,192],[[56,-1],7,192],[[57,-1],7,192],[[58,-1],7,192],[[59,-1],7,192],[[60,-1],7,192],[[61,-1],7,192],[[62,-1],7,192],[[63,-1],7,192],[[64,-1],7,192],[[65,-1],7,192],[[66,-1],7,192],[[67,-1],7,192],[[68,-1],7,192],[[69,-1],7,192],[[70,-1],7,192],[[71,-1],7,192],[[72,-1],7,192],[[73,-1],7,192],[[74,-1],7,192],[[75,-1],7,192],[[76,-1],7,192],[[77,-1],7,192],[[78,-1],7,192],[[79,-1],7,192],[[80,-1],7,192],[[81,-1],7,192],[[82,-1],7,192],[[83,-1],7,192],[[84,-1],7,192],[[85,-1],7,192],[[86,-1],7,192],[[87,-1],7,192],[[88,-1],7,192],[[89,-1],7,192],[[90,-1],7,192],[[91,-1],7,192],[[92,-1],7,192],[[93,-1],7,192],[[94,-1],7,192],[[95,-1],7,192],[[96,-1],7,192],[[97,-1],7,192],[[98,-1],7,192],[[99,-1],7,192],[[100,-1],7,192],[[101,-1],7,192],[[102,-1],7,192],[[103,-1],7,192],[[104,-1],7,192],[[105,-1],7,192],[[106,-1],7,192],[[107,-1],7,192],[[108,-1],7,192],[[109,-1],7,192],[[110,-1],7,192],[[111,-1],7,192],[[112,-1],7,192],[[113,-1],7,192],[[114,-1],7,192],[[115,-1],7,192],[[116,-1],7,192],[[117,-1],7,192],[[118,-1],7,192],[[119,-1],7,192],[[120,-1],7,192],[[121,-1],7,192],[[122,-1],7,192],[[123,-1],7,192],[[124,-1],7,192],[[125,-1],7,192],[[126,-1],7,192],[[127,-1],7,192],[[128,-1],7,192],[[129,-1],7,192],[[130,-1],7,192],[[131,-1],7,192],[[132,-1],7,192],[[133,-1],7,192],[[134,-1],7,192],[[135,-1],7,192],[[136,-1],7,192],[[137,-1],7,192],[[138,-1],7,192],[[139,-1],7,192],[[140,-1],7,192],[[141,-1],7,192],[[142,-1],7,192],[[143,-1],7,192],[[144,-1],7,192],[[145,-1],7,192],[[146,-1],7,192],[[147,-1],7,192],[[148,-1],7,192],[[149,-1],7,192],[[150,-1],7,192],[[151,-1],7,192],[[152,-1],7,192],[[153,-1],7,192],[[154,-1],7,192],[[155,-1],7,192],[[156,-1],7,192],[[157,-1],7,192],[[159,-1],7,192],[[160,-1],7,192],[[161,-1],7,192],[[162,-1],7,192],[[163,-1],7,192],[[164,-1],7,192],[[165,-1],7,192],[[166,-1],7,192],[[167,-1],7,192],[[168,-1],7,192],[[169,-1],7,192],[[170,-1],7,192],[[171,-1],7,192],[[172,-1],7,192],[[173,-1],7,192],[[174,-1],7,192],[[175,-1],7,192],[[176,-1],7,192],[[177,-1],7,192],[[178,-1],7,192],[[179,-1],7,192],[[181,-1],7,192],[[182,-1],7,192],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],193],0,0,0,0,0,0,0,0,0,0,0,0,0,[194,195],[[195,195],194],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[194,195],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[55,189],0,0,0,[55,196],0,0,[55,5],0,[55,197],0,[55,23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],[-1,[[191,[-2]]],[],[]],0,0,0,0,0,0,0,0,[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],[-1,198,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[59,1538,1790,1791,1792,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2468,2469,2470,2471,3194,3195,3196,3197,3223,3224,3517,3518,3524,3525,4410,4411,4412,4413,4707,4710,4711,4721,4722,4723,4730,4731,4822,4823,4840,4841,5216,5597,5598,6468,6469,6470,6471],"p":[[3,"cmsghdr",0],[6,"c_uchar",0],[3,"msghdr",0],[6,"c_uint",0],[6,"c_int",0],[3,"fd_set",0],[15,"tuple"],[15,"bool"],[15,"u8"],[15,"u32"],[3,"group",0],[3,"utimbuf",0],[3,"timeval",0],[3,"timespec",0],[3,"rlimit",0],[3,"rusage",0],[3,"ipv6_mreq",0],[3,"hostent",0],[3,"iovec",0],[3,"pollfd",0],[3,"winsize",0],[3,"linger",0],[3,"sigval",0],[3,"itimerval",0],[3,"tms",0],[3,"servent",0],[3,"protoent",0],[3,"sockaddr",0],[3,"sockaddr_in6",0],[3,"passwd",0],[3,"ifaddrs",0],[3,"tm",0],[3,"fsid_t",0],[3,"if_nameindex",0],[3,"regex_t",0],[3,"regmatch_t",0],[3,"option",0],[3,"sockaddr_un",0],[3,"utsname",0],[4,"timezone",0],[4,"qos_class_t",0],[4,"sysdir_search_path_directory_t",0],[4,"sysdir_search_path_domain_mask_t",0],[3,"ip_mreq",0],[3,"ip_mreqn",0],[3,"ip_mreq_source",0],[3,"aiocb",0],[3,"glob_t",0],[3,"addrinfo",0],[3,"mach_timebase_info",0],[3,"stat",0],[3,"pthread_mutexattr_t",0],[3,"pthread_condattr_t",0],[3,"pthread_rwlockattr_t",0],[3,"siginfo_t",0],[3,"sigaction",0],[3,"stack_t",0],[3,"fstore_t",0],[3,"fpunchhole_t",0],[3,"ftrimactivefile_t",0],[3,"fspecread_t",0],[3,"radvisory",0],[3,"statvfs",0],[3,"Dl_info",0],[3,"sockaddr_in",0],[3,"kevent64_s",0],[3,"dqblk",0],[3,"if_msghdr",0],[3,"ifa_msghdr",0],[3,"ifma_msghdr",0],[3,"ifma_msghdr2",0],[3,"rt_metrics",0],[3,"rt_msghdr",0],[3,"rt_msghdr2",0],[3,"termios",0],[3,"flock",0],[3,"sf_hdtr",0],[3,"lconv",0],[3,"proc_taskinfo",0],[3,"proc_bsdinfo",0],[3,"proc_taskallinfo",0],[3,"xsw_usage",0],[3,"xucred",0],[3,"mach_header",0],[3,"mach_header_64",0],[3,"segment_command",0],[3,"segment_command_64",0],[3,"load_command",0],[3,"sockaddr_dl",0],[3,"sockaddr_inarp",0],[3,"sockaddr_ctl",0],[3,"in_pktinfo",0],[3,"in6_pktinfo",0],[3,"ipc_perm",0],[3,"sembuf",0],[3,"arphdr",0],[3,"in_addr",0],[3,"sockaddr_ndrv",0],[3,"sa_endpoints_t",0],[3,"timex",0],[3,"ntptimeval",0],[3,"thread_standard_policy",0],[3,"thread_extended_policy",0],[3,"thread_time_constraint_policy",0],[3,"thread_precedence_policy",0],[3,"thread_affinity_policy",0],[3,"thread_background_policy",0],[3,"thread_latency_qos_policy",0],[3,"thread_throughput_qos_policy",0],[3,"malloc_statistics_t",0],[3,"mstats",0],[3,"vm_range_t",0],[3,"sched_param",0],[3,"vinfo_stat",0],[3,"vnode_info",0],[3,"vnode_info_path",0],[3,"proc_vnodepathinfo",0],[3,"vm_statistics",0],[3,"task_thread_times_info",0],[3,"rusage_info_v0",0],[3,"rusage_info_v1",0],[3,"rusage_info_v2",0],[3,"rusage_info_v3",0],[3,"rusage_info_v4",0],[3,"image_offset",0],[3,"attrlist",0],[3,"attrreference_t",0],[3,"vol_capabilities_attr_t",0],[3,"attribute_set_t",0],[3,"vol_attributes_attr_t",0],[3,"ifconf",0],[3,"tcp_connection_info",0],[3,"kevent",0],[3,"semid_ds",0],[3,"shmid_ds",0],[3,"proc_threadinfo",0],[3,"statfs",0],[3,"dirent",0],[3,"pthread_rwlock_t",0],[3,"pthread_mutex_t",0],[3,"pthread_cond_t",0],[3,"sockaddr_storage",0],[3,"utmpx",0],[3,"sigevent",0],[3,"processor_cpu_load_info",0],[3,"processor_basic_info",0],[3,"processor_set_basic_info",0],[3,"processor_set_load_info",0],[3,"time_value_t",0],[3,"thread_basic_info",0],[3,"thread_identifier_info",0],[3,"thread_extended_info",0],[3,"if_data64",0],[3,"if_msghdr2",0],[3,"vm_statistics64",0],[3,"mach_task_basic_info",0],[3,"log2phys",0],[3,"os_unfair_lock_s",0],[3,"sockaddr_vm",0],[3,"ifdevmtu",0],[19,"__c_anonymous_ifk_data",0],[3,"ifkpi",0],[19,"__c_anonymous_ifr_ifru",0],[3,"ifreq",0],[19,"__c_anonymous_ifc_ifcu",0],[19,"semun",0],[3,"timeval32",0],[3,"if_data",0],[3,"bpf_hdr",0],[3,"pthread_attr_t",0],[3,"ucontext_t",0],[3,"__darwin_mcontext64",0],[3,"__darwin_x86_exception_state64",0],[3,"__darwin_x86_thread_state64",0],[3,"__darwin_x86_float_state64",0],[3,"__darwin_mmst_reg",0],[3,"__darwin_xmm_reg",0],[3,"malloc_introspection_t",0],[3,"malloc_zone_t",0],[3,"max_align_t",0],[3,"ctl_info",0],[3,"in6_addr",0],[6,"os_unfair_lock",0],[4,"DIR",0],[3,"Formatter",6602],[6,"Result",6602],[4,"FILE",0],[4,"fpos_t",0],[4,"c_void",0],[3,"Error",6602],[4,"Result",6603],[8,"Hasher",6604],[6,"mach_port_t",0],[6,"dev_t",0],[15,"i32"],[6,"pid_t",0],[6,"uid_t",0],[3,"TypeId",6605],[6,"pthread_jit_write_callback_t",0],[6,"copyfile_callback_t",0],[6,"vm_statistics_data_t",0],[6,"vm_statistics64_data_t",0],[6,"thread_affinity_policy_data_t",0],[6,"thread_time_constraint_policy_data_t",0],[6,"processor_basic_info_data_t",0],[6,"processor_cpu_load_info_data_t",0],[6,"thread_basic_info_data_t",0],[6,"processor_set_basic_info_data_t",0],[6,"mach_timebase_info_data_t",0],[6,"thread_identifier_info_data_t",0],[6,"thread_precedence_policy_data_t",0],[6,"processor_set_load_info_data_t",0],[6,"thread_standard_policy_data_t",0],[6,"mach_task_basic_info_data_t",0],[6,"thread_background_policy_data_t",0],[6,"thread_extended_info_data_t",0],[6,"task_thread_times_info_data_t",0],[6,"thread_latency_qos_policy_data_t",0],[6,"thread_throughput_qos_policy_data_t",0],[6,"thread_extended_policy_data_t",0]],"a":{"__errno_location":[2402],"errno":[2402]}},\
"longest_increasing_subsequence":{"doc":"   Build Status","t":"FF","n":["lis","lis_with"],"q":[[0,"longest_increasing_subsequence"],[2,"alloc::vec"],[3,"core::cmp"],[4,"core::iter::traits::collect"],[5,"core::ops::function"]],"d":["The high-level, easy-to-use function for finding a longest …","The low-level function for finding a longest increasing …"],"i":[0,0],"f":[[[[1,[-1]]],[[3,[2]]],4],[[[1,[-1]],-2,-3,[1,[2]],[1,[2]]],5,[],[[6,[2]]],7]],"c":[],"p":[[15,"slice"],[15,"usize"],[3,"Vec",2],[8,"Ord",3],[15,"tuple"],[8,"Extend",4],[8,"FnMut",5]]},\
"memchr":{"doc":"This library provides heavily optimized routines for …","t":"DDDALLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFAFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLAAFFFFAAAAADDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIDLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLAAAADDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLAADDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLNDDDDDNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Memchr","Memchr2","Memchr3","arch","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","count","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","into_iter","memchr","memchr2","memchr2_iter","memchr3","memchr3_iter","memchr_iter","memmem","memrchr","memrchr2","memrchr2_iter","memrchr3","memrchr3_iter","memrchr_iter","new","new","new","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","all","x86_64","is_equal","is_equal_raw","is_prefix","is_suffix","memchr","packedpair","rabinkarp","shiftor","twoway","One","OneIter","Three","ThreeIter","Two","TwoIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","find","find","find","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","iter","iter","iter","new","new","new","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","HeuristicFrequencyRank","Pair","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","find_prefilter","fmt","fmt","from","from","index1","index2","into","into","new","new","pair","rank","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_indices","with_pair","with_ranker","Finder","FinderRev","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","find","find_raw","fmt","fmt","from","from","into","into","new","new","rfind","rfind_raw","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Finder","borrow","borrow_mut","find","fmt","from","into","new","try_from","try_into","type_id","Finder","FinderRev","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","find","fmt","fmt","from","from","into","into","new","new","rfind","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","avx2","sse2","memchr","packedpair","One","OneIter","Three","ThreeIter","Two","TwoIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","find","find","find","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_available","is_available","is_available","iter","iter","iter","new","new","new","new_unchecked","new_unchecked","new_unchecked","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","borrow","borrow_mut","clone","clone_into","find","find_prefilter","fmt","from","into","is_available","min_haystack_len","new","pair","to_owned","try_from","try_into","type_id","with_pair","memchr","packedpair","One","OneIter","Three","ThreeIter","Two","TwoIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","find","find","find","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_available","is_available","is_available","iter","iter","iter","new","new","new","new_unchecked","new_unchecked","new_unchecked","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","borrow","borrow_mut","clone","clone_into","find","find_prefilter","fmt","from","into","is_available","min_haystack_len","new","pair","to_owned","try_from","try_into","type_id","with_pair","Auto","FindIter","FindRevIter","Finder","FinderBuilder","FinderRev","None","Prefilter","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_forward","build_forward_with_ranker","build_reverse","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","find","find","find_iter","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_owned","into_owned","into_owned","into_owned","needle","needle","new","new","new","next","next","prefilter","rfind","rfind","rfind_iter","rfind_iter","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"memchr"],[66,"memchr::arch"],[68,"memchr::arch::all"],[77,"memchr::arch::all::memchr"],[182,"memchr::arch::all::packedpair"],[217,"memchr::arch::all::rabinkarp"],[247,"memchr::arch::all::shiftor"],[258,"memchr::arch::all::twoway"],[286,"memchr::arch::x86_64"],[288,"memchr::arch::x86_64::avx2"],[290,"memchr::arch::x86_64::avx2::memchr"],[401,"memchr::arch::x86_64::avx2::packedpair"],[420,"memchr::arch::x86_64::sse2"],[422,"memchr::arch::x86_64::sse2::memchr"],[533,"memchr::arch::x86_64::sse2::packedpair"],[552,"memchr::memmem"],[656,"core::fmt"],[657,"core::fmt"],[658,"core::iter::adapters::rev"],[659,"core::result"],[660,"core::any"],[661,"core::marker"],[662,"core::convert"]],"d":["An iterator over all occurrences of a single byte in a …","An iterator over all occurrences of two possible bytes in …","An iterator over all occurrences of three possible bytes …","A module with low-level architecture dependent routines.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Search for the first occurrence of a byte in a slice.","Search for the first occurrence of two possible bytes in a …","Returns an iterator over all occurrences of the needles in …","Search for the first occurrence of three possible bytes in …","Returns an iterator over all occurrences of the needles in …","Returns an iterator over all occurrences of the needle in …","This module provides forward and reverse substring search …","Search for the last occurrence of a byte in a slice.","Search for the last occurrence of two possible bytes in a …","Returns an iterator over all occurrences of the needles in …","Search for the last occurrence of three possible bytes in …","Returns an iterator over all occurrences of the needles in …","Returns an iterator over all occurrences of the needle in …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","","","","","","","","","","","","","","","","","","","","","","Contains architecture independent routines.","Vector algorithms for the <code>x86_64</code> target.","Compare corresponding bytes in <code>x</code> and <code>y</code> for equality.","Compare <code>n</code> bytes at the given pointers for equality.","Returns true if and only if <code>needle</code> is a prefix of <code>haystack</code>.","Returns true if and only if <code>needle</code> is a suffix of <code>haystack</code>.","Provides architecture independent implementations of <code>memchr</code>…","Provides an architecture independent implementation of the …","An implementation of the Rabin-Karp substring search …","An implementation of the Shift-Or substring search …","An implementation of the Two-Way substring search algorithm…","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Return the first occurrence of the needle in the given …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of one of the …","Returns an iterator over all occurrences of one of the …","Create a new searcher that finds occurrences of the byte …","Create a new searcher that finds occurrences of the two …","Create a new searcher that finds occurrences of the three …","","","","","","","Return the last occurrence of the needle in the given …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","An architecture independent “packed pair” finder.","This trait allows the user to customize the heuristic used …","A pair of byte offsets into a needle to use as a predicate.","","","","","","","","","Run this finder on the given haystack as a prefilter.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the first offset of the pair.","Returns the second offset of the pair.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new prefilter that reports possible locations …","Create a new pair of offsets from the given needle.","Returns the pair of offsets (into the needle) used to …","Return the heuristic frequency rank of the given byte. A …","","","","","","","","","Create a new pair using the offsets given for the needle …","Create a new prefilter using the pair given.","Create a new pair of offsets from the given needle and …","A forward substring searcher using the Rabin-Karp …","A reverse substring searcher using the Rabin-Karp …","","","","","","","","","Return the first occurrence of the <code>needle</code> in the <code>haystack</code> …","Like <code>find</code>, but accepts and returns raw pointers.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new Rabin-Karp forward searcher for the given …","Create a new Rabin-Karp reverse searcher for the given …","Return the last occurrence of the <code>needle</code> in the <code>haystack</code> …","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","A forward substring searcher using the Shift-Or algorithm.","","","Return the first occurrence of the needle given to …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new Shift-Or forward searcher for the given <code>needle</code>…","","","","A forward substring searcher that uses the Two-Way …","A reverse substring searcher that uses the Two-Way …","","","","","","","","","Returns the first occurrence of <code>needle</code> in the given …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a searcher that finds occurrences of the given …","Create a searcher that finds occurrences of the given …","Returns the last occurrence of <code>needle</code> in the given <code>haystack</code>…","","","","","","","","","Algorithms for the <code>x86_64</code> target using 256-bit vectors via …","Algorithms for the <code>x86_64</code> target using 128-bit vectors via …","This module defines 256-bit vector implementations of …","A 256-bit vector implementation of the “packed pair” …","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new finder specific to AVX2 vectors and routines …","Create a new finder specific to AVX2 vectors and routines …","Create a new finder specific to AVX2 vectors and routines …","","","","","","","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A “packed pair” finder that uses 256-bit vector …","","","","","Execute a search using AVX2 vectors and routines.","Run this finder on the given haystack as a prefilter.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true when this implementation is available in the …","Returns the minimum haystack length that this <code>Finder</code> can …","Create a new pair searcher. The searcher returned can …","Returns the pair of offsets (into the needle) used to …","","","","","Create a new “packed pair” finder using the pair of …","This module defines 128-bit vector implementations of …","A 128-bit vector implementation of the “packed pair” …","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new finder specific to SSE2 vectors and routines …","Create a new finder specific to SSE2 vectors and routines …","Create a new finder specific to SSE2 vectors and routines …","","","","","","","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A “packed pair” finder that uses 128-bit vector …","","","","","Execute a search using SSE2 vectors and routines.","Run this finder on the given haystack as a prefilter.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true when this implementation is available in the …","Returns the minimum haystack length that this <code>Finder</code> can …","Create a new pair searcher. The searcher returned can …","Returns the pair of offsets (into the needle) used to …","","","","","Create a new “packed pair” finder using the pair of …","Automatically detect whether a heuristic prefilter should …","An iterator over non-overlapping substring matches.","An iterator over non-overlapping substring matches in …","A single substring searcher fixed to a particular needle.","A builder for constructing non-default forward or reverse …","A single substring reverse searcher fixed to a particular …","Never used a prefilter in substring search.","Prefilter controls whether heuristics are used to …","Convert this finder into its borrowed variant.","Convert this finder into its borrowed variant.","","","","","","","","","","","","","Build a forward finder using the given needle from the …","Build a forward finder using the given needle and a custom …","Build a reverse finder using the given needle from the …","","","","","","","","","","","","","","","Returns the index of the first occurrence of the given …","Returns the index of the first occurrence of this needle …","Returns an iterator over all non-overlapping occurrences …","Returns an iterator over all occurrences of a substring in …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Convert this iterator into its owned variant, such that it …","Convert this iterator into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Returns the needle that this finder searches for.","Returns the needle that this finder searches for.","Create a new finder for the given needle.","Create a new reverse finder for the given needle.","Create a new finder builder with default settings.","","","Configure the prefilter setting for the finder.","Returns the index of the last occurrence of the given …","Returns the index of the last occurrence of this needle in …","Returns a reverse iterator over all non-overlapping …","Returns a reverse iterator over all occurrences of a …","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,15,15,17,19,15,17,19,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,16,18,20,15,17,19,15,17,19,16,18,20,16,18,20,15,17,19,15,17,19,16,18,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,0,0,0,21,22,21,22,21,22,21,22,21,21,22,21,22,22,22,21,22,21,22,21,23,21,22,21,22,21,22,21,22,22,21,22,0,0,24,25,24,25,24,25,24,25,24,24,24,25,24,25,24,25,24,25,25,25,24,25,24,25,24,25,24,25,0,26,26,26,26,26,26,26,26,26,26,0,0,27,28,27,28,27,28,27,28,27,27,28,27,28,27,28,27,28,28,27,28,27,28,27,28,27,28,0,0,0,0,0,0,0,0,0,0,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,29,29,31,33,29,31,33,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,30,32,34,29,31,33,29,31,33,29,31,33,29,31,33,30,32,34,30,32,34,29,31,33,29,31,33,30,32,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,0,0,0,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,36,36,38,40,36,38,40,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,37,39,41,36,38,40,36,38,40,36,38,40,36,38,40,37,39,41,37,39,41,36,38,40,36,38,40,37,39,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,48,0,0,0,0,0,48,0,43,44,48,49,50,43,44,45,48,49,50,43,44,45,45,45,45,48,49,50,43,44,45,48,49,50,43,44,45,48,45,0,43,0,43,48,49,50,43,44,45,48,49,50,43,44,45,48,49,50,43,44,45,49,50,49,50,43,44,43,44,43,44,45,49,50,45,0,44,0,44,49,48,49,50,43,44,45,48,49,50,43,44,45,48,49,50,43,44,45,48,49,50,43,44,45],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[1,5],[[1,6],7],[[2,6],7],[[3,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],2],[[8,8,8,[9,[8]]],[[10,[5]]]],[[8,8,8,[9,[8]]],3],[[8,[9,[8]]],1],0,[[8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],[[11,[2]]]],[[8,8,8,[9,[8]]],[[10,[5]]]],[[8,8,8,[9,[8]]],[[11,[3]]]],[[8,[9,[8]]],[[11,[1]]]],[[8,[9,[8]]],1],[[8,8,[9,[8]]],2],[[8,8,8,[9,[8]]],3],[1,[[10,[5]]]],[2,[[10,[5]]]],[3,[[10,[5]]]],[1,[[10,[5]]]],[2,[[10,[5]]]],[3,[[10,[5]]]],[1,[[4,[5,[10,[5]]]]]],[2,[[4,[5,[10,[5]]]]]],[3,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,[[[9,[8]],[9,[8]]],14],[[8,8,5],14],[[[9,[8]],[9,[8]]],14],[[[9,[8]],[9,[8]]],14],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[15,[9,[8]]],5],[16,5],[[15,8,8],5],[[15,[9,[8]]],[[10,[5]]]],[[17,[9,[8]]],[[10,[5]]]],[[19,[9,[8]]],[[10,[5]]]],[[15,8,8],[[10,[8]]]],[[17,8,8],[[10,[8]]]],[[19,8,8],[[10,[8]]]],[[15,6],7],[[16,6],7],[[17,6],7],[[18,6],7],[[19,6],7],[[20,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[15,[9,[8]]],16],[[17,[9,[8]]],18],[[19,[9,[8]]],20],[8,15],[[8,8],17],[[8,8,8],19],[16,[[10,[5]]]],[18,[[10,[5]]]],[20,[[10,[5]]]],[16,[[10,[5]]]],[18,[[10,[5]]]],[20,[[10,[5]]]],[[15,[9,[8]]],[[10,[5]]]],[[17,[9,[8]]],[[10,[5]]]],[[19,[9,[8]]],[[10,[5]]]],[[15,8,8],[[10,[8]]]],[[17,8,8],[[10,[8]]]],[[19,8,8],[[10,[8]]]],[16,[[4,[5,[10,[5]]]]]],[18,[[4,[5,[10,[5]]]]]],[20,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[22,22],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[21,[9,[8]]],[[10,[5]]]],[[21,6],7],[[22,6],7],[-1,-1,[]],[-1,-1,[]],[22,8],[22,8],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[8]]],[[10,[21]]]],[[[9,[8]]],[[10,[22]]]],[21,22],[[-1,8],8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[[9,[8]],8,8],[[10,[22]]]],[[[9,[8]],22],[[10,[21]]]],[[[9,[8]],-1],[[10,[22]]],23],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[25,25],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[24,[9,[8]],[9,[8]]],[[10,[5]]]],[[24,8,8,8,8],[[10,[8]]]],[[24,6],7],[[25,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[8]]],24],[[[9,[8]]],25],[[25,[9,[8]],[9,[8]]],[[10,[5]]]],[[25,8,8,8,8],[[10,[8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[26,[9,[8]]],[[10,[5]]]],[[26,6],7],[-1,-1,[]],[-1,-2,[],[]],[[[9,[8]]],[[10,[26]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[28,28],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[27,[9,[8]],[9,[8]]],[[10,[5]]]],[[27,6],7],[[28,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[8]]],27],[[[9,[8]]],28],[[28,[9,[8]],[9,[8]]],[[10,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[29,[9,[8]]],5],[30,5],[[29,8,8],5],[[29,[9,[8]]],[[10,[5]]]],[[31,[9,[8]]],[[10,[5]]]],[[33,[9,[8]]],[[10,[5]]]],[[29,8,8],[[10,[8]]]],[[31,8,8],[[10,[8]]]],[[33,8,8],[[10,[8]]]],[[29,6],7],[[30,6],7],[[31,6],7],[[32,6],7],[[33,6],7],[[34,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],14],[[],14],[[],14],[[29,[9,[8]]],30],[[31,[9,[8]]],32],[[33,[9,[8]]],34],[8,[[10,[29]]]],[[8,8],[[10,[31]]]],[[8,8,8],[[10,[33]]]],[8,29],[[8,8],31],[[8,8,8],33],[30,[[10,[5]]]],[32,[[10,[5]]]],[34,[[10,[5]]]],[30,[[10,[5]]]],[32,[[10,[5]]]],[34,[[10,[5]]]],[[29,[9,[8]]],[[10,[5]]]],[[31,[9,[8]]],[[10,[5]]]],[[33,[9,[8]]],[[10,[5]]]],[[29,8,8],[[10,[8]]]],[[31,8,8],[[10,[8]]]],[[33,8,8],[[10,[8]]]],[30,[[4,[5,[10,[5]]]]]],[32,[[4,[5,[10,[5]]]]]],[34,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],4,[],[]],[[35,[9,[8]],[9,[8]]],[[10,[5]]]],[[35,[9,[8]]],[[10,[5]]]],[[35,6],7],[-1,-1,[]],[-1,-2,[],[]],[[],14],[35,5],[[[9,[8]]],[[10,[35]]]],[35,22],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[[9,[8]],22],[[10,[35]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[36,[9,[8]]],5],[37,5],[[36,8,8],5],[[36,[9,[8]]],[[10,[5]]]],[[38,[9,[8]]],[[10,[5]]]],[[40,[9,[8]]],[[10,[5]]]],[[36,8,8],[[10,[8]]]],[[38,8,8],[[10,[8]]]],[[40,8,8],[[10,[8]]]],[[36,6],7],[[37,6],7],[[38,6],7],[[39,6],7],[[40,6],7],[[41,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],14],[[],14],[[],14],[[36,[9,[8]]],37],[[38,[9,[8]]],39],[[40,[9,[8]]],41],[8,[[10,[36]]]],[[8,8],[[10,[38]]]],[[8,8,8],[[10,[40]]]],[8,36],[[8,8],38],[[8,8,8],40],[37,[[10,[5]]]],[39,[[10,[5]]]],[41,[[10,[5]]]],[37,[[10,[5]]]],[39,[[10,[5]]]],[41,[[10,[5]]]],[[36,[9,[8]]],[[10,[5]]]],[[38,[9,[8]]],[[10,[5]]]],[[40,[9,[8]]],[[10,[5]]]],[[36,8,8],[[10,[8]]]],[[38,8,8],[[10,[8]]]],[[40,8,8],[[10,[8]]]],[37,[[4,[5,[10,[5]]]]]],[39,[[4,[5,[10,[5]]]]]],[41,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[42,42],[[-1,-2],4,[],[]],[[42,[9,[8]],[9,[8]]],[[10,[5]]]],[[42,[9,[8]]],[[10,[5]]]],[[42,6],7],[-1,-1,[]],[-1,-2,[],[]],[[],14],[42,5],[[[9,[8]]],[[10,[42]]]],[42,22],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[[9,[8]],22],[[10,[42]]]],0,0,0,0,0,0,0,0,[43,43],[44,44],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[45,-1],43,[46,[47,[[9,[8]]]]]],[[45,-1,-2],43,23,[46,[47,[[9,[8]]]]]],[[45,-1],44,[46,[47,[[9,[8]]]]]],[48,48],[49,49],[50,50],[43,43],[44,44],[45,45],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],48],[[],45],[[[9,[8]],[9,[8]]],[[10,[5]]]],[[43,[9,[8]]],[[10,[5]]]],[[[9,[8]],-1],49,[46,[47,[[9,[8]]]]]],[[43,[9,[8]]],49],[[48,6],7],[[49,6],7],[[50,6],7],[[43,6],7],[[44,6],7],[[45,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,49],[50,50],[43,43],[44,44],[43,[[9,[8]]]],[44,[[9,[8]]]],[-1,43,[46,[47,[[9,[8]]]]]],[-1,44,[46,[47,[[9,[8]]]]]],[[],45],[49,[[10,[5]]]],[50,[[10,[5]]]],[[45,48],45],[[[9,[8]],[9,[8]]],[[10,[5]]]],[[44,-1],[[10,[5]]],[[47,[[9,[8]]]]]],[[[9,[8]],-1],50,[46,[47,[[9,[8]]]]]],[[44,[9,[8]]],50],[49,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]]],"c":[],"p":[[3,"Memchr",0],[3,"Memchr2",0],[3,"Memchr3",0],[15,"tuple"],[15,"usize"],[3,"Formatter",656],[6,"Result",656],[15,"u8"],[15,"slice"],[4,"Option",657],[3,"Rev",658],[4,"Result",659],[3,"TypeId",660],[15,"bool"],[3,"One",77],[3,"OneIter",77],[3,"Two",77],[3,"TwoIter",77],[3,"Three",77],[3,"ThreeIter",77],[3,"Finder",182],[3,"Pair",182],[8,"HeuristicFrequencyRank",182],[3,"Finder",217],[3,"FinderRev",217],[3,"Finder",247],[3,"Finder",258],[3,"FinderRev",258],[3,"One",290],[3,"OneIter",290],[3,"Two",290],[3,"TwoIter",290],[3,"Three",290],[3,"ThreeIter",290],[3,"Finder",401],[3,"One",422],[3,"OneIter",422],[3,"Two",422],[3,"TwoIter",422],[3,"Three",422],[3,"ThreeIter",422],[3,"Finder",533],[3,"Finder",552],[3,"FinderRev",552],[3,"FinderBuilder",552],[8,"Sized",661],[8,"AsRef",662],[4,"Prefilter",552],[3,"FindIter",552],[3,"FindRevIter",552]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCCNCCCECCQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACAACLLLLLLLCIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIIKKLKLKKKLKLKKKKKKKKKKLKKLKKKLKKKKLKLKKKKKKLKLKLKLKLKLLLKKKKKKLKKKLKKKKKKKKKKKKKLKLKLKLKKKKKKKLKLKLIILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAAQQIIIKKLKKLIIIIIIIIKKKKKKKKIIKKKKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[90,"num_traits::bounds"],[97,"num_traits::cast"],[132,"num_traits::float"],[243,"num_traits::identities"],[253,"num_traits::int"],[273,"num_traits::ops"],[281,"num_traits::ops::bytes"],[292,"num_traits::ops::checked"],[308,"num_traits::ops::euclid"],[314,"num_traits::ops::inv"],[317,"num_traits::ops::mul_add"],[322,"num_traits::ops::overflowing"],[328,"num_traits::ops::saturating"],[337,"num_traits::ops::wrapping"],[349,"num_traits::pow"],[354,"num_traits::real"],[402,"num_traits::sign"],[412,"core::cmp"],[413,"core::fmt"],[414,"core::fmt"],[415,"alloc::string"],[416,"core::any"],[417,"core::option"],[418,"core::marker"],[419,"core::ops::arith"],[420,"core::ops::arith"],[421,"core::cmp"],[422,"core::ops::arith"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if the number is subnormal.","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,40,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,40,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,41,42,41,43,0,0,0,0,44,0,12,45,45,45,45,45,45,45,45,45,45,45,45,45,45,13,13,13,13,13,13,13,13,13,13,13,13,13,13,46,46,46,46,46,46,46,46,46,46,0,0,0,46,46,46,46,46,46,46,46,46,47,48,47,47,47,47,47,47,47,47,47,47,48,48,47,47,47,47,48,47,47,47,47,47,48,47,48,47,48,47,48,47,47,48,47,48,47,48,47,48,47,48,47,48,48,47,47,47,47,47,47,47,48,48,47,47,48,48,47,48,47,47,48,47,48,47,48,47,47,47,48,47,48,47,48,47,48,47,47,47,47,47,47,48,47,48,47,47,48,0,0,34,35,0,34,34,35,0,35,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,0,0,0,0,0,0,50,51,0,0,0,51,51,51,50,50,50,0,0,0,0,0,0,0,0,52,53,37,54,55,56,57,58,0,0,59,59,60,60,0,61,61,0,0,62,62,63,0,0,0,64,65,66,0,0,0,0,67,68,69,67,70,0,0,0,0,0,0,71,72,73,74,75,76,77,0,0,0,77,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,0,39,0,39,39,39,0,39],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[-1,-1,-1],-1,1],[[-1,-1],-1,1],[[-1,-1],-1,1],0,[[2,3],4],[[5,3],4],[[5,3],4],[-1,-1,[]],[-1,-1,[]],[[6,7],[[8,[-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,9,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,0,0,0,[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],0,0,0,0,[-1,-2,[],[]],[-1,[[11,[-2]]],12,12],[-1,[[11,[-2]]],13,[]],[14,[[11,[-1]]],[]],[15,[[11,[-1]]],[]],[16,[[11,[-1]]],[]],[17,[[11,[-1]]],[]],[18,[[11,[-1]]],[]],[19,[[11,[-1]]],[]],[20,[[11,[-1]]],[]],[21,[[11,[-1]]],[]],[22,[[11,[-1]]],[]],[23,[[11,[-1]]],[]],[7,[[11,[-1]]],[]],[24,[[11,[-1]]],[]],[25,[[11,[-1]]],[]],[26,[[11,[-1]]],[]],[-1,[[11,[14]]],[]],[-1,[[11,[15]]],[]],[-1,[[11,[16]]],[]],[-1,[[11,[17]]],[]],[-1,[[11,[18]]],[]],[-1,[[11,[19]]],[]],[-1,[[11,[20]]],[]],[-1,[[11,[21]]],[]],[-1,[[11,[22]]],[]],[-1,[[11,[23]]],[]],[-1,[[11,[7]]],[]],[-1,[[11,[24]]],[]],[-1,[[11,[25]]],[]],[-1,[[11,[26]]],[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],0,0,0,[[],-1,[]],[[],-1,[]],[[],-1,[27,28]],[[],-1,[]],[[],-1,[27,28]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[27,29]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,30,[]],[-1,30,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[[],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[-1,[[31,[24,17,20]]],[]],[-1,[[31,[24,17,20]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[-1,18],-1,[]],[[-1,18],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[31,[-1,-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,32,33],[-1,32,[]],[[],-1,34],[[],-1,[]],[-1,31,[]],[-1,31,[]],[[],-1,35],[[],-1,[]],0,[-1,7,[]],[-1,7,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,[]],[-1,7,[]],[[-1,7],-1,[]],[-1,-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,[]],[-1,7,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],-1,[]],[[],-1,[]],[[],-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],0,0,0,0,0,0,0,0,[[-1,-1],[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],[-1,[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],[[-1,7],[[11,[-1]]],[]],[[-1,7],[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],0,0,[[-1,-1],[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,0,[-1,[],[]],0,0,0,[[-1,-2,-3],[],[],[],[]],[[-1,-2,-3],31,[],[],[]],0,0,0,[[-1,-1],[[31,[-1,32]]],[]],[[-1,-1],[[31,[-1,32]]],[]],[[-1,-1],[[31,[-1,32]]],[]],0,0,0,0,[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,0,0,0,0,0,[[-1,-1],-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[[-1,-1],-1,[]],0,0,[[-1,26],[[11,[-1]]],[36,34,37]],[[-1,26],-1,[36,34,38]],[[-1,-2],[],[],[]],0,[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,32,[]],[-1,32,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,18],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[31,[-1,-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-1,39],[-1,-1,[]],[[-1,-1],-1,39],[[-1,-1],-1,[]],[-1,32,[]],[-1,32,[]],[-1,-1,39],[-1,-1,[]]],"c":[],"p":[[8,"PartialOrd",412],[4,"FloatErrorKind",0],[3,"Formatter",413],[6,"Result",413],[3,"ParseFloatError",0],[15,"str"],[15,"u32"],[4,"Result",414],[3,"String",415],[3,"TypeId",416],[4,"Option",417],[8,"NumCast",97],[8,"ToPrimitive",97],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Sized",418],[8,"Div",419],[8,"Add",419],[4,"FpCategory",420],[15,"tuple"],[15,"bool"],[8,"PartialEq",412],[8,"One",243],[8,"Zero",243],[8,"Clone",421],[8,"CheckedMul",292],[8,"Mul",419],[8,"Signed",402],[8,"Num",0],[8,"Bounded",90],[8,"UpperBounded",90],[8,"LowerBounded",90],[8,"AsPrimitive",97],[8,"FromPrimitive",97],[8,"FloatConst",132],[8,"Float",132],[8,"FloatCore",132],[8,"PrimInt",253],[8,"ToBytes",281],[8,"FromBytes",281],[8,"CheckedAdd",292],[8,"CheckedDiv",292],[8,"CheckedNeg",292],[8,"CheckedRem",292],[8,"CheckedShl",292],[8,"CheckedShr",292],[8,"CheckedSub",292],[8,"CheckedEuclid",308],[8,"Euclid",308],[8,"Inv",314],[8,"MulAdd",317],[8,"MulAddAssign",317],[8,"OverflowingAdd",322],[8,"OverflowingMul",322],[8,"OverflowingSub",322],[8,"Saturating",328],[8,"SaturatingAdd",328],[8,"SaturatingMul",328],[8,"SaturatingSub",328],[8,"WrappingAdd",337],[8,"WrappingMul",337],[8,"WrappingNeg",337],[8,"WrappingShl",337],[8,"WrappingShr",337],[8,"WrappingSub",337],[8,"Pow",349],[8,"Real",354]]},\
"once_cell":{"doc":"Overview","t":"AAADDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["race","sync","unsync","OnceBool","OnceBox","OnceNonZeroUsize","OnceRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","drop","fmt","fmt","fmt","fmt","from","from","from","from","get","get","get","get","get_or_init","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","into","new","new","new","new","set","set","set","set","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","equivalent","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","get_unchecked","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","wait","with_value","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","equivalent","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":[[0,"once_cell"],[3,"once_cell::race"],[64,"once_cell::sync"],[112,"once_cell::unsync"],[158,"core::fmt"],[159,"core::fmt"],[160,"core::num::nonzero"],[161,"core::ops::function"],[162,"core::result"],[163,"alloc::boxed"],[164,"core::any"],[165,"core::clone"],[166,"core::default"],[167,"core::cmp"],[168,"core::fmt"]],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Thread-safe, blocking version of <code>OnceCell</code>.","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","","","","A value which is initialized on the first access.","A thread-safe cell which can be written to only once.","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","","","Returns the argument unchanged.","Gets the reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the mutable reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Get the reference to the underlying value, without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value. Returns","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Gets the reference to the underlying value, blocking the …","Creates a new initialized cell.","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","","","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,15,17,15,17,15,15,15,15,17,17,17,15,15,15,17,17,17,15,15,15,17,15,17,15,17,15,15,15,15,17,15,17,15,17,15,15,15,15,17,15,15,17,15,17,15,15,0,0,22,23,22,23,22,22,22,22,23,23,23,22,22,22,23,23,23,22,22,22,23,22,23,22,23,22,22,22,23,22,23,22,23,22,22,22,22,23,22,22,23,22,23,22],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],[]],[[],[[2,[-1]]],[]],[[],3],[[],4],[[[2,[-1]]],5,[]],[[[1,[-1]],6],7,[]],[[[2,[-1]],6],7,[]],[[3,6],7],[[4,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[1,[-1]]],[[8,[-1]]],[]],[[[2,[-1]]],[[8,[-1]]],[]],[3,[[8,[9]]]],[4,[[8,[10]]]],[[[1,[-1]],-2],-1,[],11],[[[2,[-1]],-2],-1,[],11],[[3,-1],9,11],[[4,-1],10,11],[[[1,[-1]],-2],[[12,[-1,-3]]],[],11,[]],[[[2,[-1]],-2],[[12,[-1,-3]]],[],11,[]],[[3,-1],[[12,[9,-2]]],11,[]],[[4,-1],[[12,[10,-2]]],11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],[]],[[],[[2,[-1]]],[]],[[],3],[[],4],[[[1,[-1]],-1],[[12,[5,5]]],[]],[[[2,[-1]],[13,[-1]]],[[12,[5,[13,[-1]]]]],[]],[[3,9],[[12,[5,5]]]],[[4,10],[[12,[5,5]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[-1]]],[[15,[-1]]],16],[[[15,[-1]],[15,[-1]]],5,16],[[-1,-2],5,[],[]],[[],[[15,[-1]]],[]],[[],[[17,[-1]]],18],[[[17,[-1,-2]]],-1,[],11],[[[17,[-1,-2]]],-1,[],11],[[[15,[-1]],[15,[-1]]],10,19],[[-1,-2],10,[],[]],[[[15,[-1]],6],7,20],[[[17,[-1,-2]],6],7,20,[]],[[[17,[-1,-2]]],-1,[],11],[[[17,[-1,-2]]],-1,[],11],[-1,-1,[]],[21,-1,[]],[-1,[[15,[-1]]],[]],[-1,-1,[]],[[[15,[-1]]],[[8,[-1]]],[]],[[[17,[-1,-2]]],[[8,[-1]]],[],11],[[[15,[-1]]],[[8,[-1]]],[]],[[[17,[-1,-2]]],[[8,[-1]]],[],11],[[[15,[-1]],-2],-1,[],11],[[[15,[-1]],-2],[[12,[-1,-3]]],[],11,[]],[[[15,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[-1]]],[[8,[-1]]],[]],[[[17,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[],[[15,[-1]]],[]],[-1,[[17,[-2,-1]]],[],[]],[[[15,[-1]],-1],[[12,[5,-1]]],[]],[[[15,[-1]]],[[8,[-1]]],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[15,[-1]],-1],[[12,[-1,[5,[-1,-1]]]]],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[[[15,[-1]]],-1,[]],[-1,[[15,[-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],[[22,[-1]]],16],[[[22,[-1]],[22,[-1]]],5,16],[[-1,-2],5,[],[]],[[],[[22,[-1]]],[]],[[],[[23,[-1]]],18],[[[23,[-1,-2]]],-1,[],11],[[[23,[-1,-2]]],-1,[],11],[[[22,[-1]],[22,[-1]]],10,19],[[-1,-2],10,[],[]],[[[22,[-1]],6],7,20],[[[23,[-1,-2]],6],7,20,[]],[[[23,[-1,-2]]],-1,[],11],[[[23,[-1,-2]]],-1,[],11],[-1,-1,[]],[21,-1,[]],[-1,[[22,[-1]]],[]],[-1,-1,[]],[[[22,[-1]]],[[8,[-1]]],[]],[[[23,[-1,-2]]],[[8,[-1]]],[],11],[[[22,[-1]]],[[8,[-1]]],[]],[[[23,[-1,-2]]],[[8,[-1]]],[],11],[[[22,[-1]],-2],-1,[],11],[[[22,[-1]],-2],[[12,[-1,-3]]],[],11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],[[8,[-1]]],[]],[[[23,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[],[[22,[-1]]],[]],[-1,[[23,[-2,-1]]],[],[]],[[[22,[-1]],-1],[[12,[5,-1]]],[]],[[[22,[-1]]],[[8,[-1]]],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[22,[-1]],-1],[[12,[-1,[5,[-1,-1]]]]],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,[[22,[-1]]],[]]],"c":[],"p":[[3,"OnceRef",3],[3,"OnceBox",3],[3,"OnceNonZeroUsize",3],[3,"OnceBool",3],[15,"tuple"],[3,"Formatter",158],[6,"Result",158],[4,"Option",159],[3,"NonZeroUsize",160],[15,"bool"],[8,"FnOnce",161],[4,"Result",162],[3,"Box",163],[3,"TypeId",164],[3,"OnceCell",64],[8,"Clone",165],[3,"Lazy",64],[8,"Default",166],[8,"PartialEq",167],[8,"Debug",158],[15,"never"],[3,"OnceCell",112],[3,"Lazy",112]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDCLLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[231,"proc_macro2::extra"],[246,"proc_macro2::token_stream"],[262,"core::cmp"],[263,"core::marker"],[264,"core::convert"],[265,"core::iter::traits::collect"],[266,"core::fmt"],[267,"core::fmt"],[268,"proc_macro"],[269,"core::hash"],[270,"core::option"],[271,"alloc::string"],[272,"core::ops::range"],[273,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,10,11,12,7,7,0,5,5,5,5,23,23,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,23,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,23,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,6,8,9,1,12,5,6,1,23,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,23,7,8,9,1,12,5,0,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[12,12],14],[[],7],[9,15],[9,10],[[10,10],16],[[11,11],16],[[12,-1],16,[17,[19,[18]]]],[[12,12],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[7,-1],13,20],[[7,-1],13,20],0,[21,5],[21,5],[22,5],[22,5],[[23,24],25],[[23,24],25],[[7,24],25],[[7,24],25],[[6,24],25],[[8,24],25],[[8,24],25],[[9,24],25],[[9,24],25],[[10,24],25],[[1,24],25],[[1,24],25],[[11,24],25],[[12,24],25],[[12,24],25],[[5,24],25],[[5,24],25],[-1,-1,[]],[26,7],[8,7],[-1,-1,[]],[27,6],[-1,-1,[]],[1,8],[-1,-1,[]],[9,8],[12,8],[5,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,20],[-1,7,20],[18,[[28,[7,23]]]],[18,[[28,[5,23]]]],[[12,-1],13,29],[30,5],[30,5],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[34,5],[34,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,35],[7,16],[36,5],[36,5],[[6,6],[[37,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[18,6],12],[[18,6],12],[[12,12],[[37,[14]]]],[[6,6],6],[[8,6],13],[[9,6],13],[[1,6],13],[[12,6],13],[[5,6],13],[6,[[37,[38]]]],[1,11],[23,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[18,5],[[5,-1],[[37,[6]]],[[40,[39]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],0,[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[42,5],[42,5],[43,5],[43,5],[44,5],[44,5],[45,5],[45,5],[3,5],[3,5],[6,27],[39,5],[39,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],13,[],[]],[15,6],[[15,24],25],[-1,-1,[]],[-1,-2,[],[]],[15,6],[15,6],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],13,[],[]],[[35,24],25],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,[[37,[8]]]],[35,[[13,[39,[37,[39]]]]]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]]],"c":[],"p":[[3,"Punct",0],[15,"char"],[15,"u8"],[15,"slice"],[3,"Literal",0],[3,"Span",0],[3,"TokenStream",0],[4,"TokenTree",0],[3,"Group",0],[4,"Delimiter",0],[4,"Spacing",0],[3,"Ident",0],[15,"tuple"],[4,"Ordering",262],[3,"DelimSpan",231],[15,"bool"],[8,"Sized",263],[15,"str"],[8,"AsRef",264],[8,"IntoIterator",265],[15,"f32"],[15,"f64"],[3,"LexError",0],[3,"Formatter",266],[6,"Result",266],[3,"TokenStream",267],[3,"Span",267],[4,"Result",268],[8,"Hasher",269],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter",246],[15,"isize"],[4,"Option",270],[3,"String",271],[15,"usize"],[8,"RangeBounds",272],[3,"TypeId",273],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"],[23,"proc_macro2"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,12,12,12,12,13,0,5,5,0,0,13,13,5,5,5],"f":[0,0,0,[[-1,-2],1,[],[[3,[2]]]],[[-1,-2],1,[],4],[[-1,-2,-3],1,[],4,5],[[-1,-2,-3],1,[],4,5],[[-1,6],7,[]],0,[-1,8,9],[-1,8,9],0,0,[-1,[[11,[10]]],[]],[-1,[[11,[10]]],[]],[-1,8,[]],[-1,8,[]],[[-1,8],1,[]]],"c":[],"p":[[15,"tuple"],[4,"TokenTree",18],[8,"Into",19],[8,"IntoIterator",20],[8,"ToTokens",0],[3,"Formatter",21],[6,"Result",21],[3,"TokenStream",18],[8,"Sized",22],[3,"Span",18],[4,"Option",23],[8,"TokenStreamExt",0],[8,"IdentFragment",0]]},\
"raw_string":{"doc":"<code>RawString</code> and <code>RawStr</code> are the equivalents of <code>String</code> and <code>str</code>…","t":"QDICDDDLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLKLKLLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALMLIIKKKK","n":["Output","RawStr","RawStrIndex","RawStrIndexOutput","RawString","Utf8Chunk","Utf8ChunksIter","as_bytes","as_bytes_mut","as_mut_bytes","as_osstr","as_path","as_ptr","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broken","bytes","bytes_mut","capacity","clear","clone","clone_into","cmp","cmp","contains_byte","default","default","default","deref","deref_mut","drain","ends_with","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_ignore_ascii_case","equivalent","equivalent","first","first_mut","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes_mut","from_str","from_string","get","get","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","hash","hash","index","index","index_mut","index_mut","insert","insert_str","into","into","into","into_boxed_raw_str","into_bytes","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_osstring","into_pathbuf","is_ascii","is_empty","last","last_mut","len","make_ascii_lowercase","make_ascii_uppercase","new","next","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","push","push_str","remove","replace_range","reserve","reserve_exact","retain","shrink_to_fit","size_hint","slice_mut_unchecked","slice_unchecked","split_at","split_at_mut","split_first","split_first_mut","split_last","split_last_mut","split_off","starts_with","to_osstr","to_osstring","to_owned","to_owned","to_path","to_pathbuf","to_str","to_string","to_string","to_string","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unix","utf8_chunks","valid","with_capacity","RawStrExt","RawStringExt","as_osstr","as_path","into_osstring","into_pathbuf"],"q":[[0,"raw_string"],[179,"raw_string::unix"],[185,"alloc::vec"],[186,"std::ffi::os_str"],[187,"std::path"],[188,"core::slice::iter"],[189,"core::iter::adapters::cloned"],[190,"core::slice::iter"],[191,"alloc::vec::drain"],[192,"core::ops::range"],[193,"core::convert"],[194,"core::option"],[195,"core::fmt"],[196,"core::fmt"],[197,"alloc::string"],[198,"core::hash"],[199,"alloc::boxed"],[200,"std::ffi::os_str"],[201,"core::str::error"],[202,"core::result"],[203,"alloc::string"]],"d":["<code>RawStr</code> (for ranges) or <code>u8</code> (for single indexes).","A <code>str</code> with unchecked contents.","The equivalent of <code>SliceIndex</code> for <code>RawStr</code>.","","A <code>String</code> with unchecked contents.","A chunk of valid UTF-8, possibly followed by a broken …","An iterator over chunks of valid UTF-8 in a RawStr.","","","","","","","","","","","","","","","","","","","","A broken char.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","Get the range or byte from the given <code>&amp;RawStr</code>.","","Get the (mutable) range or byte from the given <code>&amp;mut RawStr</code>.","","Like <code>get</code>, but unsafe and unchecked.","","Like <code>get_mut</code>, but unsafe and unchecked.","","","","Like <code>get</code>, but panics on failure.","","Like <code>get_mut</code>, but panics on failure.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert to an OsStr.","Convert to an OsString.","","","Convert to a Path.","Convert to a PathBuf.","","","","","","","","","","","","","","","","Conversions only available on unix.","Iterate over chunks of valid UTF-8.","A valid UTF-8 piece, at the start, end, or between broken …","","","","","","",""],"i":[24,0,0,0,0,0,0,1,1,4,1,1,1,1,1,4,4,29,30,1,4,4,29,30,1,4,30,1,1,4,4,4,4,1,4,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,1,1,4,1,1,1,1,4,4,29,30,1,1,1,4,4,4,4,4,4,1,4,1,1,4,24,1,24,1,24,1,24,1,1,4,24,1,24,1,4,4,29,30,4,4,4,29,1,1,4,4,4,4,4,1,1,1,1,1,1,1,4,29,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,29,1,1,1,1,1,1,1,1,4,1,1,4,1,4,1,4,1,1,4,4,4,29,30,4,29,30,4,29,30,1,4,0,1,30,4,0,0,36,36,37,37],"f":[0,0,0,0,0,0,0,[1,[[3,[2]]]],[1,[[3,[2]]]],[4,[[5,[2]]]],[1,6],[1,7],[1,2],[1,[[3,[2]]]],[1,1],[4,1],[4,[[3,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,[[9,[[8,[2]]]]]],[1,[[10,[2]]]],[4,11],[4,12],[4,4],[[-1,-2],12,[],[]],[[1,1],13],[[4,4],13],[[1,2],14],[[],1],[[],1],[[],4],[4,1],[4,1],[[4,-1],[[15,[2]]],[[16,[11]]]],[[1,-1],14,[[17,[1]]]],[[1,4],14],[[1,1],14],[[1,18],14],[[1,[3,[2]]],14],[[1,4],14],[[1,[3,[2]]],14],[[1,18],14],[[4,1],14],[[4,18],14],[[4,[3,[2]]],14],[[4,4],14],[[4,18],14],[[4,[3,[2]]],14],[[4,1],14],[[1,1],14],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[1,[[19,[2]]]],[1,[[19,[2]]]],[[1,20],21],[[1,20],21],[[4,20],21],[[4,20],21],[-1,-1,[]],[-1,-1,[]],[18,1],[[[3,[2]]],1],[-1,1,[[17,[1]],22]],[[[5,[2]]],4],[[[3,[2]]],4],[-1,-1,[]],[1,4],[23,4],[18,4],[[[3,[2]]],1],[[[5,[2]]],4],[[[3,[2]]],1],[18,1],[23,4],[[-1,1],19,[]],[[1,-1],19,24],[[-1,1],19,[]],[[1,-1],19,24],[[-1,1],[],[]],[[1,-1],[],24],[[-1,1],[],[]],[[1,-1],[],24],[[1,-1],12,25],[[4,-1],12,25],[[-1,1],[],[]],[[1,-1],[],24],[[-1,1],[],[]],[[1,-1],[],24],[[4,11,2],12],[[4,11,-1],12,[[17,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,[[26,[1]]]],[4,[[5,[2]]]],[-1,-2,[],[]],[1],[1],[4],[4],[4],[4,27],[4,28],[1,14],[1,14],[1,[[19,[2]]]],[1,[[19,[2]]]],[1,11],[1,12],[1,12],[[],4],[29,[[19,[30]]]],[[1,18],[[19,[13]]]],[[1,18],[[19,[13]]]],[[1,[3,[2]]],[[19,[13]]]],[[1,4],[[19,[13]]]],[[1,1],[[19,[13]]]],[[1,4],[[19,[13]]]],[[1,[3,[2]]],[[19,[13]]]],[[4,1],[[19,[13]]]],[[4,[3,[2]]],[[19,[13]]]],[[4,18],[[19,[13]]]],[[4,4],[[19,[13]]]],[[4,[3,[2]]],[[19,[13]]]],[[4,18],[[19,[13]]]],[[4,1],[[19,[13]]]],[4,[[19,[2]]]],[[4,2],12],[[4,-1],12,[[17,[1]]]],[[4,11],2],[[4,-1,-2],12,[[16,[11]]],[[17,[1]]]],[[4,11],12],[[4,11],12],[[4,-1],12,31],[4,12],[29,[[12,[11,[19,[11]]]]]],[[1,11,11],1],[[1,11,11],1],[[1,11],[[12,[1,1]]]],[[1,11],[[12,[1,1]]]],[1,[[19,[[12,[2,1]]]]]],[1,[[19,[[12,[2,1]]]]]],[1,[[19,[[12,[2,1]]]]]],[1,[[19,[[12,[2,1]]]]]],[[4,11],4],[[1,-1],14,[[17,[1]]]],[1,[[33,[6,32]]]],[4,[[33,[27,34]]]],[1,4],[-1,-2,[],[]],[1,[[33,[7,32]]]],[4,[[33,[28,34]]]],[1,[[33,[18,32]]]],[-1,23,[]],[4,[[33,[23,34]]]],[-1,23,[]],[[4,11],12],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],0,[1,29],0,[11,4],0,0,[-1,6,[]],[-1,7,[]],[-1,27,[]],[-1,28,[]]],"c":[],"p":[[3,"RawStr",0],[15,"u8"],[15,"slice"],[3,"RawString",0],[3,"Vec",185],[3,"OsStr",186],[3,"Path",187],[3,"Iter",188],[3,"Cloned",189],[3,"IterMut",188],[15,"usize"],[15,"tuple"],[4,"Ordering",190],[15,"bool"],[3,"Drain",191],[8,"RangeBounds",192],[8,"AsRef",193],[15,"str"],[4,"Option",194],[3,"Formatter",195],[6,"Result",195],[8,"Sized",196],[3,"String",197],[8,"RawStrIndex",0],[8,"Hasher",198],[3,"Box",199],[3,"OsString",186],[3,"PathBuf",187],[3,"Utf8ChunksIter",0],[3,"Utf8Chunk",0],[8,"FnMut",200],[3,"Utf8Error",201],[4,"Result",202],[3,"FromUtf8Error",197],[3,"TypeId",203],[8,"RawStrExt",179],[8,"RawStringExt",179]]},\
"regex":{"doc":"This crate provides routines for searching strings for …","t":"DDDDNEDDDDDDDIDDDDDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDIDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CaptureLocations","CaptureMatches","CaptureNames","Captures","CompiledTooBig","Error","Match","Matches","NoExpand","Regex","RegexBuilder","RegexSet","RegexSetBuilder","Replacer","ReplacerRef","SetMatches","SetMatchesIntoIter","SetMatchesIter","Split","SplitN","SubCaptureMatches","Syntax","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","by_ref","by_ref","bytes","capture_locations","capture_names","captures","captures_at","captures_iter","captures_len","captures_read","captures_read_at","case_insensitive","case_insensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count","count","crlf","crlf","default","description","dfa_size_limit","dfa_size_limit","dot_matches_new_line","dot_matches_new_line","empty","end","eq","eq","equivalent","escape","expand","extract","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","ignore_whitespace","ignore_whitespace","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_match","is_match","is_match_at","is_match_at","iter","iter","len","len","len","len","len","line_terminator","line_terminator","matched","matched_any","matches","matches_at","multi_line","multi_line","name","nest_limit","nest_limit","new","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","no_expansion","no_expansion","no_expansion","no_expansion","octal","octal","patterns","range","replace","replace_all","replace_append","replace_append","replace_append","replacen","shortest_match","shortest_match_at","size_hint","size_hint","size_hint","size_hint","size_hint","size_limit","size_limit","split","splitn","start","static_captures_len","swap_greed","swap_greed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","unicode","CaptureLocations","CaptureMatches","CaptureNames","Captures","Match","Matches","NoExpand","Regex","RegexBuilder","RegexSet","RegexSetBuilder","Replacer","ReplacerRef","SetMatches","SetMatchesIntoIter","SetMatchesIter","Split","SplitN","SubCaptureMatches","as_bytes","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","by_ref","by_ref","capture_locations","capture_names","captures","captures_at","captures_iter","captures_len","captures_read","captures_read_at","case_insensitive","case_insensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count","count","crlf","crlf","default","dfa_size_limit","dfa_size_limit","dot_matches_new_line","dot_matches_new_line","empty","end","eq","equivalent","expand","extract","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","ignore_whitespace","ignore_whitespace","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_match","is_match","is_match_at","is_match_at","iter","iter","len","len","len","len","len","line_terminator","line_terminator","matched","matched_any","matches","matches_at","multi_line","multi_line","name","nest_limit","nest_limit","new","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","no_expansion","no_expansion","no_expansion","no_expansion","octal","octal","patterns","range","replace","replace_all","replace_append","replace_append","replace_append","replacen","shortest_match","shortest_match_at","size_hint","size_hint","size_hint","size_hint","size_hint","size_limit","size_limit","split","splitn","start","static_captures_len","swap_greed","swap_greed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","unicode"],"q":[[0,"regex"],[342,"regex::bytes"],[664,"core::result"],[665,"core::option"],[666,"alloc::string"],[667,"core::fmt"],[668,"core::fmt"],[669,"core::iter::traits::collect"],[670,"alloc::borrow"],[671,"core::ops::range"],[672,"core::any"],[673,"alloc::vec"]],"d":["A low level representation of the byte offsets of each …","An iterator over all non-overlapping capture matches in a …","An iterator over the names of all capture groups in a …","Represents the capture groups for a single match.","The compiled program exceeded the set size limit. The …","An error that occurred during parsing or compiling a …","Represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches in a haystack.","A helper type for forcing literal string replacement.","A compiled regular expression for searching Unicode …","A configurable builder for a <code>Regex</code>.","Match multiple, possibly overlapping, regexes in a single …","A configurable builder for a <code>RegexSet</code>.","A trait for types that can be used to replace matches in a …","A by-reference adaptor for a <code>Replacer</code>.","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex set.","A borrowed iterator over the set of matches from a regex …","An iterator over all substrings delimited by a regex match.","An iterator over at most <code>N</code> substrings delimited by a regex …","An iterator over all group matches in a <code>Captures</code> value.","A syntax error.","Returns the original string of this regex.","Returns the substring of the haystack that matched.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compiles the pattern given to <code>RegexBuilder::new</code> with the …","Compiles the patterns given to <code>RegexSetBuilder::new</code> with …","Returns a type that implements <code>Replacer</code>, but that borrows …","Returns a type that implements <code>Replacer</code>, but that borrows …","Search for regex matches in <code>&amp;[u8]</code> haystacks.","Returns a fresh allocated set of capture locations that can","Returns an iterator over the capture names in this regex.","This routine searches for the first match of this regex in …","Returns the same as <code>Regex::captures</code>, but starts the search …","Returns an iterator that yields successive non-overlapping …","Returns the number of captures groups in this regex.","This is like <code>Regex::captures</code>, but writes the byte offsets …","Returns the same as <code>Regex::captures_read</code>, but starts the …","This configures whether to enable case insensitive …","This configures whether to enable case insensitive …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This configures CRLF mode for the entire pattern.","This configures CRLF mode for all of the patterns.","","","Set the approximate capacity, in bytes, of the cache of …","Set the approximate capacity, in bytes, of the cache of …","This configures dot-matches-new-line mode for the entire …","This configures dot-matches-new-line mode for the entire …","Create a new empty regex set.","Returns the byte offset of the end of the match in the …","","","","Escapes all regular expression meta characters in <code>pattern</code>.","Expands all instances of <code>$ref</code> in <code>replacement</code> to the …","This is a convenience routine for extracting the substrings","This routine searches for the first match of this regex in …","Returns the same as <code>Regex::find</code>, but starts the search at …","Returns an iterator that yields successive non-overlapping …","","","","","","Shows the original regular expression.","Shows the original regular expression.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to parse a string into a regular expression","Returns the <code>Match</code> associated with the capture group at …","Returns the start and end byte offsets of the capture …","This configures verbose mode for the entire pattern.","This configures verbose mode for all of the patterns.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns true if and only if this match has a length of …","Returns <code>true</code> if this set contains no regexes.","Returns true if and only if there is a match for the regex …","Returns true if and only if one of the regexes in this set …","Returns the same as <code>Regex::is_match</code>, but starts the search …","Returns true if and only if one of the regexes in this set …","Returns an iterator over all capture groups. This includes …","Returns an iterator over the indices of the regexes that …","Returns the total number of capture groups. This includes …","Returns the length, in bytes, of this match.","Returns the total number of capture groups (even if they …","Returns the total number of regexes in this set.","The total number of regexes in the set that created these …","Configures the line terminator to be used by the regex.","Configures the line terminator to be used by the regex.","Whether the regex at the given index matched.","Whether this set contains any matches.","Returns the set of regexes that match in the given …","Returns the set of regexes that match in the given …","This configures multi-line mode for the entire pattern.","This configures multi-line mode for all of the patterns.","Returns the <code>Match</code> associated with the capture group named …","Set the nesting limit for this parser.","Set the nesting limit for this parser.","Create a new builder with a default configuration for the …","Create a new builder with a default configuration for the …","Compiles a regular expression. Once compiled, it can be …","Create a new regex set with the given regular expressions.","","","","","","","","","","","Return a fixed unchanging replacement string.","Return a fixed unchanging replacement string.","","","This configures octal mode for the entire pattern.","This configures octal mode for all of the patterns.","Returns the regex patterns that this regex set was …","Returns the range over the starting and ending byte …","Replaces the leftmost-first match in the given haystack …","Replaces all non-overlapping matches in the haystack with …","Appends possibly empty data to <code>dst</code> to replace the current …","","","Replaces at most <code>limit</code> non-overlapping matches in the …","Returns the end byte offset of the first match in the …","Returns the same as <code>Regex::shortest_match</code>, but starts the …","","","","","","Sets the approximate size limit, in bytes, of the compiled …","Sets the approximate size limit, in bytes, of the compiled …","Returns an iterator of substrings of the haystack given, …","Returns an iterator of at most <code>limit</code> substrings of the …","Returns the byte offset of the start of the match in the …","Returns the total number of capturing groups that appear …","This configures swap-greed mode for the entire pattern.","This configures swap-greed mode for all of the patterns.","","","","","","","","","","","","","","","","","","","","Attempts to parse a string into a regular expression","Attempts to parse a string into a regular expression","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This configures Unicode mode for the entire pattern.","This configures Unicode mode for the all of the patterns.","A low level representation of the byte offsets of each …","An iterator over all non-overlapping capture matches in a …","An iterator over the names of all capture groups in a …","Represents the capture groups for a single match.","Represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches in a haystack.","A helper type for forcing literal string replacement.","A compiled regular expression for searching Unicode …","A configurable builder for a <code>Regex</code>.","Match multiple, possibly overlapping, regexes in a single …","A configurable builder for a <code>RegexSet</code>.","A trait for types that can be used to replace matches in a …","A by-reference adaptor for a <code>Replacer</code>.","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex set.","A borrowed iterator over the set of matches from a regex …","An iterator over all substrings delimited by a regex match.","An iterator over at most <code>N</code> substrings delimited by a regex …","An iterator over all group matches in a <code>Captures</code> value.","Returns the substring of the haystack that matched.","Returns the original string of this regex.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compiles the pattern given to <code>RegexBuilder::new</code> with the …","Compiles the patterns given to <code>RegexSetBuilder::new</code> with …","Returns a type that implements <code>Replacer</code>, but that borrows …","Returns a type that implements <code>Replacer</code>, but that borrows …","Returns a fresh allocated set of capture locations that can","Returns an iterator over the capture names in this regex.","This routine searches for the first match of this regex in …","Returns the same as <code>Regex::captures</code>, but starts the search …","Returns an iterator that yields successive non-overlapping …","Returns the number of captures groups in this regex.","This is like <code>Regex::captures</code>, but writes the byte offsets …","Returns the same as <code>Regex::captures_read</code>, but starts the …","This configures whether to enable case insensitive …","This configures whether to enable case insensitive …","","","","","","","","","","","","","","","","","","","","","","","","","","","This configures CRLF mode for the entire pattern.","This configures CRLF mode for all of the patterns.","","Set the approximate capacity, in bytes, of the cache of …","Set the approximate capacity, in bytes, of the cache of …","This configures dot-matches-new-line mode for the entire …","This configures dot-matches-new-line mode for the entire …","Create a new empty regex set.","Returns the byte offset of the end of the match in the …","","","Expands all instances of <code>$ref</code> in <code>replacement</code> to the …","This is a convenience routine for extracting the substrings","This routine searches for the first match of this regex in …","Returns the same as <code>Regex::find</code>, but starts the search at …","Returns an iterator that yields successive non-overlapping …","","","","Shows the original regular expression.","Shows the original regular expression.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to parse a string into a regular expression","Returns the <code>Match</code> associated with the capture group at …","Returns the start and end byte offsets of the capture …","This configures verbose mode for the entire pattern.","This configures verbose mode for all of the patterns.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns true if and only if this match has a length of …","Returns <code>true</code> if this set contains no regexes.","Returns true if and only if there is a match for the regex …","Returns true if and only if one of the regexes in this set …","Returns the same as <code>Regex::is_match</code>, but starts the search …","Returns true if and only if one of the regexes in this set …","Returns an iterator over all capture groups. This includes …","Returns an iterator over the indices of the regexes that …","Returns the total number of capture groups. This includes …","Returns the length, in bytes, of this match.","Returns the total number of capture groups (even if they …","Returns the total number of regexes in this set.","The total number of regexes in the set that created these …","Configures the line terminator to be used by the regex.","Configures the line terminator to be used by the regex.","Whether the regex at the given index matched.","Whether this set contains any matches.","Returns the set of regexes that match in the given …","Returns the set of regexes that match in the given …","This configures multi-line mode for the entire pattern.","This configures multi-line mode for all of the patterns.","Returns the <code>Match</code> associated with the capture group named …","Set the nesting limit for this parser.","Set the nesting limit for this parser.","Create a new builder with a default configuration for the …","Create a new builder with a default configuration for the …","Compiles a regular expression. Once compiled, it can be …","Create a new regex set with the given regular expressions.","","","","","","","","","","","Return a fixed unchanging replacement byte string.","Return a fixed unchanging replacement byte string.","","","This configures octal mode for the entire pattern.","This configures octal mode for all of the patterns.","Returns the regex patterns that this regex set was …","Returns the range over the starting and ending byte …","Replaces the leftmost-first match in the given haystack …","Replaces all non-overlapping matches in the haystack with …","Appends possibly empty data to <code>dst</code> to replace the current …","","","Replaces at most <code>limit</code> non-overlapping matches in the …","Returns the end byte offset of the first match in the …","Returns the same as <code>shortest_match</code>, but starts the search …","","","","","","Sets the approximate size limit, in bytes, of the compiled …","Sets the approximate size limit, in bytes, of the compiled …","Returns an iterator of substrings of the haystack given, …","Returns an iterator of at most <code>limit</code> substrings of the …","Returns the byte offset of the start of the match in the …","Returns the total number of capturing groups that appear …","This configures swap-greed mode for the entire pattern.","This configures swap-greed mode for all of the patterns.","","","","","","","","","","","","","","","","Attempts to parse a string into a regular expression","Attempts to parse a string into a regular expression","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This configures Unicode mode for the entire pattern.","This configures Unicode mode for the all of the patterns."],"i":[0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,3,12,4,7,5,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,12,4,7,5,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,4,7,36,36,0,1,1,1,1,1,1,1,1,4,7,4,7,5,1,3,10,11,17,18,8,19,20,4,7,5,1,3,10,11,17,18,8,19,20,22,15,11,17,4,7,8,5,4,7,4,7,8,3,5,3,3,0,12,12,1,1,1,12,4,7,5,5,1,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,12,4,7,5,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,1,12,10,4,7,12,12,12,4,7,5,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,22,15,27,28,11,17,19,19,31,20,3,8,1,8,1,8,12,19,12,3,10,8,19,4,7,19,19,8,8,4,7,12,4,7,4,7,1,8,22,15,27,28,11,17,31,20,31,20,36,36,9,18,4,7,8,3,1,1,36,9,18,1,1,1,28,11,17,31,20,4,7,1,1,3,1,4,7,4,7,5,1,3,10,11,17,18,8,19,20,5,1,12,4,7,5,1,1,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,12,4,7,5,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,12,4,7,5,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,41,48,42,43,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,48,42,43,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,42,43,59,59,41,41,41,41,41,41,41,41,42,43,42,43,41,40,46,47,50,51,44,52,53,42,43,41,40,46,47,50,51,44,52,53,54,49,47,50,42,43,44,42,43,42,43,44,40,40,40,48,48,41,41,41,48,42,43,41,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,48,42,43,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,41,48,46,42,43,48,48,48,42,43,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,54,49,56,57,47,50,52,52,58,53,40,44,41,44,41,44,48,52,48,40,46,44,52,42,43,52,52,44,44,42,43,48,42,43,42,43,41,44,54,49,56,57,47,50,58,53,58,53,59,59,45,51,42,43,44,40,41,41,59,45,51,41,41,41,57,47,50,58,53,42,43,41,41,40,41,42,43,42,43,41,40,46,47,50,51,44,52,53,41,48,42,43,41,41,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,48,42,43,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,48,42,43,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,42,43],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,[[6,[1,5]]]],[7,[[6,[8,5]]]],[-1,[[9,[-1]]],[]],[-1,[[9,[-1]]],[]],0,[1,10],[1,11],[[1,2],[[13,[12]]]],[[1,2,14],[[13,[12]]]],[[1,2],15],[1,14],[[1,10,2],[[13,[3]]]],[[1,10,2,14],[[13,[3]]]],[[4,16],4],[[7,16],7],[4,4],[7,7],[5,5],[1,1],[3,3],[10,10],[11,11],[17,17],[18,18],[8,8],[19,19],[20,20],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[22,14],[15,14],[11,14],[17,14],[[4,16],4],[[7,16],7],[[],8],[5,2],[[4,14],4],[[7,14],7],[[4,16],4],[[7,16],7],[[],8],[3,14],[[5,5],16],[[3,3],16],[[-1,-2],16,[],[]],[2,23],[[12,2,23],21],[12,[[21,[2,[24,[2]]]]]],[[1,2],[[13,[3]]]],[[1,2,14],[[13,[3]]]],[[1,2],22],[[12,25],26],[[4,25],26],[[7,25],26],[[5,25],26],[[5,25],26],[[1,25],26],[[1,25],26],[[3,25],26],[[10,25],26],[[22,25],26],[[15,25],26],[[27,25],26],[[28,25],26],[[11,25],26],[[17,25],26],[[[9,[-1]],25],26,[29,30]],[[18,25],26],[[8,25],26],[[19,25],26],[[31,25],26],[[20,25],26],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[2,[[6,[1,5]]]],[[12,14],[[13,[3]]]],[[10,14],[[13,[[21,[14,14]]]]]],[[4,16],4],[[7,16],7],[[12,2],2],[[12,14],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19],[19],[-1,-2,[],[]],[-1,-2,[],[]],[3,16],[8,16],[[1,2],16],[[8,2],16],[[1,2,14],16],[[8,2,14],16],[12,17],[19,20],[12,14],[3,14],[10,14],[8,14],[19,14],[[4,32],4],[[7,32],7],[[19,14],16],[19,16],[[8,2],19],[[8,2,14],19],[[4,16],4],[[7,16],7],[[12,2],[[13,[3]]]],[[4,33],4],[[7,33],7],[2,4],[-1,7,34],[2,[[6,[1,5]]]],[-1,[[6,[8,5]]],34],[22,[[13,[3]]]],[15,[[13,[12]]]],[27,[[13,[2]]]],[28,[[13,[2]]]],[11,[[13,[[13,[2]]]]]],[17,[[13,[[13,[3]]]]]],[31,[[13,[14]]]],[20,[[13,[14]]]],[31,[[13,[14]]]],[20,[[13,[14]]]],[-1,[[13,[[35,[2]]]]],[]],[-1,[[13,[[35,[2]]]]],[]],[[[9,[-1]]],[[13,[[35,[2]]]]],[36,30]],[18,[[13,[[35,[2]]]]]],[[4,16],4],[[7,16],7],[8,[[37,[23]]]],[3,[[38,[14]]]],[[1,2,-1],[[35,[2]]],36],[[1,2,-1],[[35,[2]]],36],[[-1,12,23],21,[]],[[[9,[-1]],12,23],21,[36,30]],[[18,12,23],21],[[1,2,14,-1],[[35,[2]]],36],[[1,2],[[13,[14]]]],[[1,2,14],[[13,[14]]]],[28,[[21,[14,[13,[14]]]]]],[11,[[21,[14,[13,[14]]]]]],[17,[[21,[14,[13,[14]]]]]],[31,[[21,[14,[13,[14]]]]]],[20,[[21,[14,[13,[14]]]]]],[[4,14],4],[[7,14],7],[[1,2],27],[[1,2,14],28],[3,14],[1,[[13,[14]]]],[[4,16],4],[[7,16],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,23,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[23,[[6,[1,5]]]],[2,[[6,[1,5]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[4,16],4],[[7,16],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[40,[[37,[32]]]],[41,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[42,[[6,[41,5]]]],[43,[[6,[44,5]]]],[-1,[[45,[-1]]],[]],[-1,[[45,[-1]]],[]],[41,46],[41,47],[[41,[37,[32]]],[[13,[48]]]],[[41,[37,[32]],14],[[13,[48]]]],[[41,[37,[32]]],49],[41,14],[[41,46,[37,[32]]],[[13,[40]]]],[[41,46,[37,[32]],14],[[13,[40]]]],[[42,16],42],[[43,16],43],[42,42],[43,43],[41,41],[40,40],[46,46],[47,47],[50,50],[51,51],[44,44],[52,52],[53,53],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[54,14],[49,14],[47,14],[50,14],[[42,16],42],[[43,16],43],[[],44],[[42,14],42],[[43,14],43],[[42,16],42],[[43,16],43],[[],44],[40,14],[[40,40],16],[[-1,-2],16,[],[]],[[48,[37,[32]],[55,[32]]],21],[48,[[21,[[37,[32]],[24,[[37,[32]]]]]]]],[[41,[37,[32]]],[[13,[40]]]],[[41,[37,[32]],14],[[13,[40]]]],[[41,[37,[32]]],54],[[48,25],26],[[42,25],26],[[43,25],26],[[41,25],26],[[41,25],26],[[40,25],26],[[46,25],26],[[54,25],26],[[49,25],26],[[56,25],26],[[57,25],26],[[47,25],26],[[50,25],26],[[[45,[-1]],25],26,[29,30]],[[51,25],26],[[44,25],26],[[52,25],26],[[58,25],26],[[53,25],26],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[2,[[6,[41,5]]]],[[48,14],[[13,[40]]]],[[46,14],[[13,[[21,[14,14]]]]]],[[42,16],42],[[43,16],43],[[48,14],[[37,[32]]]],[[48,2],[[37,[32]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[52],[52],[-1,-2,[],[]],[-1,-2,[],[]],[40,16],[44,16],[[41,[37,[32]]],16],[[44,[37,[32]]],16],[[41,[37,[32]],14],16],[[44,[37,[32]],14],16],[48,50],[52,53],[48,14],[40,14],[46,14],[44,14],[52,14],[[42,32],42],[[43,32],43],[[52,14],16],[52,16],[[44,[37,[32]]],52],[[44,[37,[32]],14],52],[[42,16],42],[[43,16],43],[[48,2],[[13,[40]]]],[[42,33],42],[[43,33],43],[2,42],[-1,43,34],[2,[[6,[41,5]]]],[-1,[[6,[44,5]]],34],[54,[[13,[40]]]],[49,[[13,[48]]]],[56,[[13,[[37,[32]]]]]],[57,[[13,[[37,[32]]]]]],[47,[[13,[[13,[2]]]]]],[50,[[13,[[13,[40]]]]]],[58,[[13,[14]]]],[53,[[13,[14]]]],[58,[[13,[14]]]],[53,[[13,[14]]]],[-1,[[13,[[35,[[37,[32]]]]]]],[]],[-1,[[13,[[35,[[37,[32]]]]]]],[]],[[[45,[-1]]],[[13,[[35,[[37,[32]]]]]]],[59,30]],[51,[[13,[[35,[[37,[32]]]]]]]],[[42,16],42],[[43,16],43],[44,[[37,[23]]]],[40,[[38,[14]]]],[[41,[37,[32]],-1],[[35,[[37,[32]]]]],59],[[41,[37,[32]],-1],[[35,[[37,[32]]]]],59],[[-1,48,[55,[32]]],21,[]],[[[45,[-1]],48,[55,[32]]],21,[59,30]],[[51,48,[55,[32]]],21],[[41,[37,[32]],14,-1],[[35,[[37,[32]]]]],59],[[41,[37,[32]]],[[13,[14]]]],[[41,[37,[32]],14],[[13,[14]]]],[57,[[21,[14,[13,[14]]]]]],[47,[[21,[14,[13,[14]]]]]],[50,[[21,[14,[13,[14]]]]]],[58,[[21,[14,[13,[14]]]]]],[53,[[21,[14,[13,[14]]]]]],[[42,14],42],[[43,14],43],[[41,[37,[32]]],56],[[41,[37,[32]],14],57],[40,14],[41,[[13,[14]]]],[[42,16],42],[[43,16],43],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[23,[[6,[41,5]]]],[2,[[6,[41,5]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[42,16],42],[[43,16],43]],"c":[],"p":[[3,"Regex",0],[15,"str"],[3,"Match",0],[3,"RegexBuilder",0],[4,"Error",0],[4,"Result",664],[3,"RegexSetBuilder",0],[3,"RegexSet",0],[3,"ReplacerRef",0],[3,"CaptureLocations",0],[3,"CaptureNames",0],[3,"Captures",0],[4,"Option",665],[15,"usize"],[3,"CaptureMatches",0],[15,"bool"],[3,"SubCaptureMatches",0],[3,"NoExpand",0],[3,"SetMatches",0],[3,"SetMatchesIter",0],[15,"tuple"],[3,"Matches",0],[3,"String",666],[15,"array"],[3,"Formatter",667],[6,"Result",667],[3,"Split",0],[3,"SplitN",0],[8,"Debug",667],[8,"Sized",668],[3,"SetMatchesIntoIter",0],[15,"u8"],[15,"u32"],[8,"IntoIterator",669],[4,"Cow",670],[8,"Replacer",0],[15,"slice"],[3,"Range",671],[3,"TypeId",672],[3,"Match",342],[3,"Regex",342],[3,"RegexBuilder",342],[3,"RegexSetBuilder",342],[3,"RegexSet",342],[3,"ReplacerRef",342],[3,"CaptureLocations",342],[3,"CaptureNames",342],[3,"Captures",342],[3,"CaptureMatches",342],[3,"SubCaptureMatches",342],[3,"NoExpand",342],[3,"SetMatches",342],[3,"SetMatchesIter",342],[3,"Matches",342],[3,"Vec",673],[3,"Split",342],[3,"SplitN",342],[3,"SetMatchesIntoIter",342],[8,"Replacer",342]]},\
"regex_automata":{"doc":"This crate exposes a variety of regex engines used by the …","t":"NENDNDNDDEENNDDDDNDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLALLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMMMMMADDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNDDNENLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLMMMDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLANNDDNNDDNDNNNNDNDNDEDNELLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLALLLLLLLLMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAADDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLFFDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLNNNEDDDNNNDNNNNNNNNNNNNLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLSSSSSSDDDSSSDDDDSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLLLLLLDDDMLLLLLLMLLLLLLLLLLLLLLLLLLLLLL","n":["All","Anchored","GaveUp","HalfMatch","HaystackTooLong","Input","LeftmostFirst","Match","MatchError","MatchErrorKind","MatchKind","No","Pattern","PatternID","PatternSet","PatternSetInsertError","PatternSetIter","Quit","Span","UnsupportedAnchored","Yes","anchored","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains","default","default","dfa","earliest","end","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gave_up","get_anchored","get_earliest","get_range","get_span","hash","hash","hash","hash","haystack","haystack_too_long","hybrid","insert","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_anchored","is_char_boundary","is_done","is_empty","is_empty","is_empty","is_full","iter","kind","len","len","len","meta","must","must","new","new","new","new","new","next","next_back","nfa","offset","offset","partial_cmp","pattern","pattern","pattern","quit","range","range","range","set_anchored","set_earliest","set_end","set_range","set_span","set_start","size_hint","span","span","start","start","start","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsupported_anchored","util","byte","len","mode","offset","offset","onepass","BuildError","Builder","Cache","Config","DFA","alphabet_len","always_match","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_from_nfa","build_many","builder","byte_classes","captures","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","config","configure","create_cache","create_captures","default","find","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_byte_classes","get_config","get_match_kind","get_nfa","get_size_limit","get_starts_for_each_pattern","into","into","into","into","into","is_match","match_kind","memory_usage","memory_usage","never_match","new","new","new","new","new_from_nfa","new_many","pattern_len","reset","reset_cache","size_limit","source","starts_for_each_pattern","state_len","stride","stride2","syntax","thompson","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_search","try_search_slots","type_id","type_id","type_id","type_id","type_id","BuildError","Cache","CacheError","LazyStateID","Quit","StartError","UnsupportedAnchored","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","default","dfa","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","into","into","into","into","is_dead","is_match","is_quit","is_start","is_tagged","is_unknown","partial_cmp","regex","source","source","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","byte","err","mode","Builder","Cache","Config","DFA","OverlappingState","always_match","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_from_nfa","build_many","builder","byte_classes","byte_classes","cache_capacity","clear_count","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","config","configure","create_cache","default","eq","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_byte_classes","get_cache_capacity","get_config","get_match","get_match_kind","get_minimum_bytes_per_state","get_minimum_cache_capacity","get_minimum_cache_clear_count","get_nfa","get_prefilter","get_quit","get_skip_cache_capacity_check","get_specialize_start_states","get_starts_for_each_pattern","get_unicode_word_boundary","into","into","into","into","into","match_kind","match_len","match_pattern","memory_usage","memory_usage","minimum_bytes_per_state","minimum_cache_clear_count","never_match","new","new","new","new","new_many","next_eoi_state","next_state","next_state_untagged","next_state_untagged_unchecked","pattern_len","prefilter","quit","reset","reset_cache","search_finish","search_start","search_total_len","search_update","skip_cache_capacity_check","specialize_start_states","start","start_state","start_state_forward","start_state_reverse","starts_for_each_pattern","syntax","thompson","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_search_fwd","try_search_overlapping_fwd","try_search_overlapping_rev","try_search_rev","try_which_overlapping_matches","type_id","type_id","type_id","type_id","type_id","unicode_word_boundary","Builder","Cache","FindMatches","Regex","as_parts","as_parts_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_from_dfas","build_many","builder","clone","clone","clone_into","clone_into","create_cache","default","dfa","find","find_iter","fmt","fmt","fmt","fmt","forward","forward","forward_mut","from","from","from","from","into","into","into","into","into_iter","is_match","memory_usage","new","new","new","new_many","next","pattern_len","reset","reset_cache","reverse","reverse","reverse_mut","syntax","thompson","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_search","type_id","type_id","type_id","type_id","BuildError","Builder","Cache","CapturesMatches","Config","FindMatches","Regex","Split","SplitN","auto_prefilter","backtrack","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_from_hir","build_many","build_many_from_hir","builder","byte_classes","captures","captures_iter","captures_len","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","config","configure","count","count","create_cache","create_captures","default","dfa","dfa_size_limit","dfa_state_limit","find","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_auto_prefilter","get_backtrack","get_byte_classes","get_config","get_dfa","get_dfa_size_limit","get_dfa_state_limit","get_hybrid","get_hybrid_cache_capacity","get_line_terminator","get_match_kind","get_nfa_size_limit","get_onepass","get_onepass_size_limit","get_prefilter","get_utf8_empty","get_which_captures","group_info","hybrid","hybrid_cache_capacity","input","input","input","input","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_accelerated","is_match","line_terminator","match_kind","memory_usage","memory_usage","new","new","new","new","new_many","next","next","next","next","nfa_size_limit","onepass","onepass_size_limit","pattern","pattern_len","prefilter","regex","regex","reset","search","search_captures","search_captures_with","search_half","search_half_with","search_slots","search_slots_with","search_with","size_hint","size_limit","source","split","splitn","static_captures_len","syntax","syntax_error","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utf8_empty","which_captures","which_overlapping_matches","which_overlapping_matches_with","thompson","All","BinaryUnion","BuildError","Builder","ByteRange","Capture","Compiler","Config","Dense","DenseTransitions","Fail","Implicit","Look","Match","NFA","None","PatternIter","Sparse","SparseTransitions","State","Transition","Union","WhichCaptures","add_capture_end","add_capture_start","add_empty","add_fail","add_look","add_match","add_range","add_sparse","add_union","add_union_reverse","always_match","backtrack","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build_from_hir","build_many","build_many_from_hir","byte_classes","captures","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compiler","config","configure","current_pattern_id","default","default","default","end","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","finish_pattern","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_captures","get_look_matcher","get_look_matcher","get_nfa_size_limit","get_reverse","get_reverse","get_shrink","get_size_limit","get_utf8","get_utf8","get_which_captures","group_info","has_capture","has_empty","hash","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_always_start_anchored","is_any","is_epsilon","is_none","is_reverse","is_utf8","look_matcher","look_matcher","look_set_any","look_set_prefix_any","matches","matches","matches","matches_byte","matches_byte","matches_byte","matches_unit","memory_usage","memory_usage","never_match","new","new","new","new","new_many","next","next","nfa_size_limit","patch","pattern_len","pattern_len","patterns","pikevm","reverse","set_look_matcher","set_reverse","set_size_limit","set_utf8","shrink","size_limit","source","start","start_anchored","start_pattern","start_pattern","start_unanchored","state","states","syntax","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transitions","transitions","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utf8","which_captures","alt1","alt2","alternates","group_index","look","next","next","pattern_id","pattern_id","slot","trans","BoundedBacktracker","Builder","Cache","Config","TryCapturesMatches","TryFindMatches","always_match","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_from_nfa","build_many","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","config","configure","create_cache","create_captures","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_config","get_nfa","get_prefilter","get_visited_capacity","into","into","into","into","into","into","into_iter","into_iter","max_haystack_len","memory_usage","min_visited_capacity","never_match","new","new","new","new","new_from_nfa","new_many","next","next","pattern_len","prefilter","reset","reset_cache","syntax","thompson","to_owned","to_owned","to_owned","to_owned","try_captures","try_captures_iter","try_find","try_find_iter","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_is_match","try_search","try_search_slots","type_id","type_id","type_id","type_id","type_id","type_id","visited_capacity","Builder","Cache","CapturesMatches","Config","FindMatches","PikeVM","always_match","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_from_nfa","build_many","builder","captures","captures_iter","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","config","configure","create_cache","create_captures","default","find","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_config","get_match_kind","get_nfa","get_prefilter","into","into","into","into","into","into","into_iter","into_iter","is_match","match_kind","memory_usage","never_match","new","new","new","new","new_from_nfa","new_many","next","next","pattern_len","prefilter","reset","reset_cache","search","search_slots","syntax","thompson","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","which_overlapping_matches","alphabet","captures","escape","interpolate","iter","lazy","look","pool","prefilter","primitives","start","syntax","wire","ByteClassElements","ByteClassIter","ByteClassRepresentatives","ByteClasses","Unit","alphabet_len","as_eoi","as_u8","as_usize","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","elements","empty","eoi","eoi","eq","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get","get_by_unit","into","into","into","into","into","into_iter","into_iter","into_iter","is_byte","is_eoi","is_singleton","is_word_byte","iter","next","next","next","partial_cmp","representatives","set","singletons","stride2","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","u8","Captures","CapturesPatternIter","GroupInfo","GroupInfoAllNames","GroupInfoError","GroupInfoPatternNames","all","all_group_len","all_names","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","default","empty","empty","explicit_slot_len","extract","extract_bytes","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_group","get_group_by_name","get_match","group_info","group_len","group_len","implicit_slot_len","interpolate_bytes","interpolate_bytes_into","interpolate_string","interpolate_string_into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_match","iter","matches","memory_usage","new","next","next","next","pattern","pattern_len","pattern_names","set_pattern","size_hint","size_hint","slot","slot_len","slots","slots","slots_mut","source","to_index","to_name","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","DebugByte","DebugHaystack","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","bytes","string","CapturesIter","HalfMatchesIter","MatchesIter","Searcher","TryCapturesIter","TryHalfMatchesIter","TryMatchesIter","advance","advance_half","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","infallible","infallible","infallible","input","input","input","input","input","into","into","into","into","into","into","into","into_captures_iter","into_half_matches_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_matches_iter","new","next","next","next","next","next","next","to_owned","try_advance","try_advance_half","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Lazy","borrow","borrow_mut","deref","fmt","from","get","into","new","try_from","try_into","type_id","End","EndCRLF","EndLF","Look","LookMatcher","LookSet","LookSetIter","Start","StartCRLF","StartLF","UnicodeWordBoundaryError","WordAscii","WordAsciiNegate","WordEndAscii","WordEndHalfAscii","WordEndHalfUnicode","WordEndUnicode","WordStartAscii","WordStartHalfAscii","WordStartHalfUnicode","WordStartUnicode","WordUnicode","WordUnicodeNegate","as_char","as_repr","available","bits","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","contains","contains_anchor","contains_anchor_crlf","contains_anchor_haystack","contains_anchor_lf","contains_anchor_line","contains_word","contains_word_ascii","contains_word_unicode","default","default","empty","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_repr","full","get_line_terminator","insert","intersect","into","into","into","into","into","into_iter","is_empty","is_end","is_end_crlf","is_end_lf","is_start","is_start_crlf","is_start_lf","is_word_ascii","is_word_ascii_negate","is_word_end_ascii","is_word_end_half_ascii","is_word_end_half_unicode","is_word_end_unicode","is_word_start_ascii","is_word_start_half_ascii","is_word_start_half_unicode","is_word_start_unicode","is_word_unicode","is_word_unicode_negate","iter","len","matches","matches_set","new","next","read_repr","remove","reversed","set_insert","set_intersect","set_line_terminator","set_remove","set_subtract","set_union","singleton","subtract","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","write_repr","Pool","PoolGuard","borrow","borrow","borrow_mut","borrow_mut","deref","deref_mut","fmt","fmt","from","from","get","into","into","new","put","try_from","try_from","try_into","try_into","type_id","type_id","Prefilter","borrow","borrow_mut","clone","clone_into","find","fmt","from","from_hir_prefix","from_hirs_prefix","into","memory_usage","new","prefix","to_owned","try_from","try_into","type_id","LIMIT","LIMIT","LIMIT","MAX","MAX","MAX","NonMaxUsize","PatternID","PatternIDError","SIZE","SIZE","SIZE","SmallIndex","SmallIndexError","StateID","StateIDError","ZERO","ZERO","ZERO","as_i32","as_i32","as_i32","as_u32","as_u32","as_u32","as_u64","as_u64","as_u64","as_usize","as_usize","as_usize","attempted","attempted","attempted","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes_unchecked","from_ne_bytes_unchecked","from_ne_bytes_unchecked","get","hash","hash","hash","into","into","into","into","into","into","must","must","must","new","new","new","new","new_unchecked","new_unchecked","new_unchecked","one_more","one_more","one_more","partial_cmp","partial_cmp","partial_cmp","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Config","anchored","borrow","borrow_mut","clone","clone_into","fmt","from","from_input_forward","from_input_reverse","get_anchored","get_look_behind","into","look_behind","new","to_owned","try_from","try_into","type_id","Config","borrow","borrow_mut","case_insensitive","clone","clone_into","crlf","default","dot_matches_new_line","fmt","from","get_case_insensitive","get_crlf","get_dot_matches_new_line","get_ignore_whitespace","get_line_terminator","get_multi_line","get_nest_limit","get_octal","get_swap_greed","get_unicode","get_utf8","ignore_whitespace","into","line_terminator","multi_line","nest_limit","new","octal","parse","parse_many","parse_many_with","parse_with","swap_greed","to_owned","try_from","try_into","type_id","unicode","utf8","AlignAs","DeserializeError","SerializeError","_align","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes","fmt","fmt","fmt","fmt","fmt","from","from","from","into","into","into","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"regex_automata"],[258,"regex_automata::MatchErrorKind"],[263,"regex_automata::dfa"],[264,"regex_automata::dfa::onepass"],[370,"regex_automata::hybrid"],[443,"regex_automata::hybrid::StartError"],[446,"regex_automata::hybrid::dfa"],[577,"regex_automata::hybrid::regex"],[650,"regex_automata::meta"],[843,"regex_automata::nfa"],[844,"regex_automata::nfa::thompson"],[1093,"regex_automata::nfa::thompson::State"],[1104,"regex_automata::nfa::thompson::backtrack"],[1212,"regex_automata::nfa::thompson::pikevm"],[1319,"regex_automata::util"],[1332,"regex_automata::util::alphabet"],[1414,"regex_automata::util::captures"],[1533,"regex_automata::util::escape"],[1554,"regex_automata::util::interpolate"],[1556,"regex_automata::util::iter"],[1650,"regex_automata::util::lazy"],[1662,"regex_automata::util::look"],[1807,"regex_automata::util::pool"],[1830,"regex_automata::util::prefilter"],[1848,"regex_automata::util::primitives"],[2010,"regex_automata::util::start"],[2029,"regex_automata::util::syntax"],[2069,"regex_automata::util::wire"],[2102,"core::cmp"],[2103,"core::ops::range"],[2104,"core::fmt"],[2105,"core::fmt"],[2106,"core::convert"],[2107,"core::hash"],[2108,"core::convert"],[2109,"core::ops::range"],[2110,"core::result"],[2111,"core::any"],[2112,"core::error"],[2113,"regex_syntax::hir"],[2114,"core::borrow"],[2115,"regex_syntax::error"],[2116,"alloc::sync"],[2117,"alloc::vec"],[2118,"core::iter::traits::collect"],[2119,"core::ops::function"],[2120,"core::fmt"]],"d":["Report all possible matches.","The type of anchored search to perform.","The search, based on heuristics, determined that it would …","A representation of “half” of a match reported by a …","This error occurs if the haystack given to the regex …","The parameters for a regex search including the haystack …","Report only the leftmost matches. When multiple leftmost …","A representation of a match reported by a regex engine.","An error indicating that a search stopped before reporting …","The underlying kind of a <code>MatchError</code>.","The kind of match semantics to use for a regex pattern.","Run an unanchored search. This means a match may occur …","Run an anchored search for a specific pattern. This means …","The identifier of a regex pattern, represented by a …","A set of <code>PatternID</code>s.","An error that occurs when a <code>PatternID</code> failed to insert …","An iterator over all pattern identifiers in a <code>PatternSet</code>.","The search saw a “quit” byte at which it was …","A representation of a span reported by a regex engine.","An error indicating that a particular type of anchored …","Run an anchored search. This means that a match must begin …","Sets the anchor mode of a search.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the total number of pattern identifiers that may …","Clear this set such that it contains no pattern IDs.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true when the given offset is contained within …","Return true if and only if the given pattern identifier is …","","","A module for building and searching with deterministic …","Whether to execute an “earliest” search or not.","Return the end position of this search.","The ending position of the match.","The end offset of the span, exclusive.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new “gave up” error. The given <code>offset</code> …","Return the anchored mode for this search configuration.","Return whether this search should execute in “earliest”…","Return the span as a range for this search configuration.","Return the span for this search configuration.","","","","","Return a borrow of the underlying haystack as a slice of …","Create a new “haystack too long” error. The given <code>len</code> …","A module for building and searching with lazy …","Insert the given pattern identifier into this set and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if and only if this anchor mode corresponds …","Returns true if and only if the given offset in this search…","Return true if and only if this search can never return …","Returns true when this span is empty. That is, when …","Returns true when the span in this match is empty.","Return true if and only if this set has no pattern …","Return true if and only if this set has the maximum number …","Returns an iterator over all pattern identifiers in this …","Returns a reference to the underlying error kind.","Returns the length of this span.","Returns the length of this match.","Returns the total number of pattern identifiers in this …","Provides a regex matcher that composes several other regex …","Create a new half match from a pattern ID and a byte …","Create a new match from a pattern ID and a byte offset …","Create a new search configuration for the given haystack.","Create a new half match from a pattern ID and a byte …","Create a new match from a pattern ID and a span.","Create a new set of pattern identifiers with the given …","Create a new error value with the given kind.","","","Provides non-deterministic finite automata (NFA) and regex …","Returns a new span with <code>offset</code> added to this span’s <code>start</code>…","The position of the match.","","Returns the ID of the pattern that matched.","Returns the ID of the pattern that matched.","Returns the pattern ID associated with this configuration …","Create a new “quit” error. The given <code>byte</code> corresponds …","Like <code>Input::span</code>, but accepts any range instead.","Returns this span as a range.","Returns the match span as a range.","Set the anchor mode of a search.","Set whether the search should execute in “earliest” …","Set the ending offset for the span for this search …","Set the span for this search configuration given any range.","Set the span for this search configuration.","Set the starting offset for the span for this search …","","Set the span for this search.","Returns the span for this match.","Return the start position of this search.","The starting position of the match.","The start offset of the span, inclusive.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Insert the given pattern identifier into this set and …","","","","","","","","","","","","","","","","","","","","","","","","","Create a new “unsupported anchored” error. This occurs …","A collection of modules that provide APIs that are useful …","The “quit” byte that was observed that caused the …","The length of the haystack that exceeded the limit.","The anchored mode given that is unsupported.","The offset at which the quit byte was observed.","The offset at which the search stopped. This corresponds …","A DFA that can return spans for matching capturing groups.","An error that occurred during the construction of a …","A builder for a one-pass DFA.","A cache represents mutable state that a one-pass <code>DFA</code> …","The configuration used for building a one-pass DFA.","A one-pass DFA for executing a subset of anchored regex …","Returns the total number of elements in the alphabet for …","Create a new one-pass DFA that matches every input.","","","","","","","","","","","Build a one-pass DFA from the given pattern.","Build a DFA from the given NFA.","Build a one-pass DFA from the given patterns.","Return a builder for configuring the construction of a DFA.","Whether to attempt to shrink the size of the DFA’s …","Executes an anchored leftmost forward search and writes …","","","","","","","","","","","Return a default configuration for a DFA.","Apply the given one-pass DFA configuration options to this …","Create a new cache for this DFA.","Create a new empty set of capturing groups that is …","","Executes an anchored leftmost forward search, and returns …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns whether this configuration has enabled byte …","Return the config for this one-pass DFA.","Returns the match semantics set in this configuration.","Returns a reference to the underlying NFA.","Returns the DFA size limit of this configuration if one …","Returns whether this configuration has enabled anchored …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Executes an anchored leftmost forward search, and returns …","Set the desired match semantics.","Returns the memory usage, in bytes, of this DFA.","Returns the heap memory usage, in bytes, of this cache.","Create a new one-pass DFA that never matches any input.","Return a new default one-pass DFA configuration.","Create a new one-pass DFA builder with the default …","Parse the given regular expression using the default …","Create a new <code>onepass::DFA</code> cache.","Like <code>new</code>, but builds a one-pass DFA directly from an NFA. …","Like <code>new</code>, but parses multiple patterns into a single “…","Returns the total number of patterns compiled into this …","Reset this cache such that it can be used for searching …","Reset the given cache such that it can be used for …","Set a size limit on the total heap used by a one-pass DFA.","","Whether to compile a separate start state for each pattern …","Returns the total number of states in this one-pass DFA.","Returns the total stride for every state in this DFA. This …","Returns the total stride for every state in this DFA, …","Set the syntax configuration for this builder using …","Set the Thompson NFA configuration for this builder using …","","","","","","","","","","","","","","","","","Executes an anchored leftmost forward search and writes …","Executes an anchored leftmost forward search and writes …","","","","","","An error that occurs when initial construction of a lazy …","An error that occurs when cache inefficiency has dropped …","An error that occurs when cache usage has become …","A state identifier specifically tailored for lazy DFAs.","An error that occurs when a starting configuration’s …","An error that can occur when computing the start state for …","An error that occurs when the caller requests an anchored …","","","","","","","","","","","","","","","","","","","Types and routines specific to lazy DFAs.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if and only if this represents a dead state. A …","Return true if and only if this lazy state ID has been …","Return true if and only if this represents a quit state. A …","Return true if and only if this lazy state ID has been …","Return true if and only if this lazy state ID is tagged.","Return true if and only if this represents a lazy state ID …","","A lazy DFA backed <code>Regex</code>.","","","","","","","","","","","","","","","","","","","","","","The quit byte that was found.","The underlying cache error that occurred.","The anchored mode given that is unsupported.","A builder for constructing a lazy deterministic finite …","A cache represents a partially computed DFA.","The configuration used for building a lazy DFA.","A hybrid NFA/DFA (also called a “lazy DFA”) for regex …","Represents the current state of an overlapping search.","Create a new lazy DFA that matches every input.","","","","","","","","","","","Build a lazy DFA from the given pattern.","Build a DFA from the given NFA.","Build a lazy DFA from the given patterns.","Return a builder for configuring the construction of a …","Returns the equivalence classes that make up the alphabet …","Whether to attempt to shrink the size of the lazy DFA’s …","Sets the maximum amount of heap memory, in bytes, to …","Returns the total number of times this cache has been …","","","","","","","","","","","Return a default configuration for a <code>DFA</code>.","Apply the given lazy DFA configuration options to this …","Create a new cache for this lazy DFA.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns whether this configuration has enabled byte …","Returns the cache capacity set on this configuration.","Returns this lazy DFA’s configuration.","Return the match result of the most recent search to …","Returns the match semantics set in this configuration.","Returns, if set, the minimum number of bytes per state …","Returns the minimum lazy DFA cache capacity required for …","Returns, if set, the minimum number of times the cache …","Returns a reference to the underlying NFA.","Returns the prefilter set in this configuration, if one at …","Returns whether this configuration will instruct the lazy …","Returns whether the cache capacity check should be skipped.","Returns whether this configuration will instruct the lazy …","Returns whether this configuration has enabled anchored …","Returns whether this configuration has enabled heuristic …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set the desired match semantics.","Returns the total number of patterns that match in this …","Returns the pattern ID corresponding to the given match …","Returns the memory usage, in bytes, of this lazy DFA.","Returns the heap memory usage, in bytes, of this cache.","Configure a lazy DFA search to quit only when its …","Configure a lazy DFA search to quit after a certain number …","Create a new lazy DFA that never matches any input.","Parse the given regular expression using a default …","Create a new cache for the given lazy DFA.","Return a new default lazy DFA builder configuration.","Create a new lazy DFA builder with the default …","Parse the given regular expressions using a default …","Transitions from the current state to the next state for …","Transitions from the current state to the next state, …","Transitions from the current state to the next state, …","Transitions from the current state to the next state, …","Returns the total number of patterns compiled into this …","Set a prefilter to be used whenever a start state is …","Add a “quit” byte to the lazy DFA.","Reset this cache such that it can be used for searching …","Reset the given cache such that it can be used for …","Indicates that a search has finished at the given position.","Initializes a new search starting at the given position.","Returns the total number of bytes that have been searched …","Updates the current search to indicate that it has search …","Configures construction of a lazy DFA to use the minimum …","Enable specializing start states in the lazy DFA.","Create a new overlapping state that begins at the start …","Return the ID of the start state for this lazy DFA for the …","Return the ID of the start state for this lazy DFA when …","Return the ID of the start state for this lazy DFA when …","Whether to compile a separate start state for each pattern …","Set the syntax configuration for this builder using …","Set the Thompson NFA configuration for this builder using …","","","","","","","","","","","","","","","","Executes a forward search and returns the end position of …","Executes an overlapping forward search and returns the end …","Executes a reverse overlapping search and returns the …","Executes a reverse search and returns the start of the …","Writes the set of patterns that match anywhere in the …","","","","","","Heuristically enable Unicode word boundaries.","A builder for a regex based on a hybrid NFA/DFA.","A cache represents a partially computed forward and …","An iterator over all non-overlapping matches for an …","A regular expression that uses hybrid NFA/DFAs (also …","Return references to the forward and reverse caches, …","Return mutable references to the forward and reverse …","","","","","","","","","Build a regex from the given pattern.","Build a regex from its component forward and reverse …","Build a regex from the given patterns.","Return a builder for configuring the construction of a …","","","","","Create a new cache for this <code>Regex</code>.","","Set the lazy DFA compilation configuration for this …","Returns the start and end offset of the leftmost match. If …","Returns an iterator over all non-overlapping leftmost …","","","","","Return the underlying lazy DFA responsible for forward …","Return a reference to the forward cache.","Return a mutable reference to the forward cache.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if and only if this regex matches the given …","Returns the heap memory usage, in bytes, as a sum of the …","Parse the given regular expression using the default …","Create a new cache for the given <code>Regex</code>.","Create a new regex builder with the default configuration.","Like <code>new</code>, but parses multiple patterns into a single “…","","Returns the total number of patterns matched by this regex.","Reset this cache such that it can be used for searching …","Reset the given cache such that it can be used for …","Return the underlying lazy DFA responsible for reverse …","Return a reference to the reverse cache.","Return a mutable reference to the reverse cache.","Set the syntax configuration for this builder using …","Set the Thompson NFA configuration for this builder using …","","","","","","","","","","","Returns the start and end offset of the leftmost match. If …","","","","","An error that occurs when construction of a <code>Regex</code> fails.","A builder for configuring and constructing a <code>Regex</code>.","Represents mutable scratch space used by regex engines …","An iterator over all non-overlapping leftmost matches with …","An object describing the configuration of a <code>Regex</code>.","An iterator over all non-overlapping matches.","A regex matcher that works by composing several other …","Yields all substrings delimited by a regular expression …","Yields at most <code>N</code> spans delimited by a regular expression …","Toggles whether automatic prefilter support is enabled.","Toggle whether a bounded backtracking regex engine should …","","","","","","","","","","","","","","","","","","","Builds a <code>Regex</code> from a single pattern string.","Builds a <code>Regex</code> directly from an <code>Hir</code> expression.","Builds a <code>Regex</code> from many pattern strings.","Builds a <code>Regex</code> directly from many <code>Hir</code> expressions.","Return a builder for configuring the construction of a …","Whether to attempt to shrink the size of the alphabet for …","Executes a leftmost forward search and writes the spans of …","Returns an iterator over all non-overlapping <code>Captures</code> …","Returns the total number of capturing groups.","","","","","","","","","","","Return a default configuration for a <code>Regex</code>.","Configure the behavior of a <code>Regex</code>.","","","Creates a new cache for use with lower level search APIs …","Creates a new object for recording capture group offsets. …","","Toggle whether a fully compiled DFA should be available …","Sets the size limit, in bytes, for heap memory used for a …","Sets a limit on the total number of NFA states, beyond …","Executes a leftmost search and returns the first match …","Returns an iterator over all non-overlapping leftmost …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns whether automatic prefilters are enabled, as set by","Returns whether the bounded backtracking regex engine may …","Returns whether byte classes are enabled, as set by …","Returns the configuration object used to build this <code>Regex</code>.","Returns whether the DFA regex engine may be used, as set by","Returns DFA size limit, as set by <code>Config::dfa_size_limit</code>.","Returns DFA size limit in terms of the number of states in …","Returns whether the hybrid NFA/DFA regex engine may be …","Returns hybrid NFA/DFA cache capacity, as set by …","Returns the line terminator for this configuration, as set …","Returns the match kind on this configuration, as set by …","Returns NFA size limit, as set by <code>Config::nfa_size_limit</code>.","Returns whether the one-pass DFA regex engine may be used, …","Returns one-pass DFA size limit, as set by …","Returns a manually set prefilter, if one was set by …","Returns whether empty matches must fall on valid UTF-8 …","Returns the capture configuration, as set by …","Return information about the capture groups in this <code>Regex</code>.","Toggle whether the hybrid NFA/DFA (also known as the “…","Set the cache capacity, in bytes, for the lazy DFA.","Returns the current <code>Input</code> associated with this iterator.","Returns the current <code>Input</code> associated with this iterator.","Returns the current <code>Input</code> associated with this iterator.","Returns the current <code>Input</code> associated with this iterator.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns true if this regex has a high chance of being “…","Returns true if and only if this regex matches the given …","Set the line terminator to be used by the <code>^</code> and <code>$</code> anchors …","Set the match semantics for a <code>Regex</code>.","Return the total approximate heap memory, in bytes, used …","Returns the heap memory usage, in bytes, of this cache.","Builds a <code>Regex</code> from a single pattern string using the …","Creates a new <code>Cache</code> for use with this regex.","Create a new configuration object for a <code>Regex</code>.","Creates a new builder for configuring and constructing a …","Builds a <code>Regex</code> from many pattern strings using the default …","","","","","Sets the size limit, in bytes, to enforce on the …","Toggle whether a one-pass DFA should be available for use …","Sets the size limit, in bytes, for the one-pass DFA.","If it is known which pattern ID caused this build error to …","Returns the total number of patterns in this regex.","Overrides and sets the prefilter to use inside a <code>Regex</code>.","Returns the <code>Regex</code> value that created this iterator.","Returns the <code>Regex</code> value that created this iterator.","Reset this cache such that it can be used for searching …","Returns the start and end offset of the leftmost match. If …","Executes a leftmost forward search and writes the spans of …","This is like <code>Regex::search_captures</code>, but requires the …","Returns the end offset of the leftmost match. If no match …","This is like <code>Regex::search_half</code>, but requires the caller to","Executes a leftmost forward search and writes the spans of …","This is like <code>Regex::search_slots</code>, but requires the caller …","This is like <code>Regex::search</code>, but requires the caller to …","","If this error occurred because the regex exceeded the …","","Returns an iterator of spans of the haystack given, …","Returns an iterator of at most <code>limit</code> spans of the haystack …","Returns the total number of capturing groups that appear …","Configure the syntax options when parsing a pattern string …","If this error corresponds to a syntax error, then a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles whether empty matches are permitted to occur …","Configures what kinds of groups are compiled as “…","Writes the set of patterns that match anywhere in the …","This is like <code>Regex::which_overlapping_matches</code>, but …","Defines a Thompson NFA and provides the <code>PikeVM</code> and …","All capture states, including those corresponding to both …","An alternation such that there exists precisely two …","An error that can occurred during the construction of a …","An abstraction for building Thompson NFAs by hand.","A state with a single transition that can only be taken if …","An empty state that records a capture location.","A builder for compiling an NFA from a regex’s high-level …","The configuration used for a Thompson NFA compiler.","A dense representation of a state with multiple …","A sequence of transitions used to represent a dense state.","A state that cannot be transitioned out of. This is useful …","Only capture states corresponding to implicit capture …","A conditional epsilon transition satisfied via some sort of","A match state. There is at least one such occurrence of …","A byte oriented Thompson non-deterministic finite …","No capture states are compiled into the Thompson NFA.","An iterator over all pattern IDs in an NFA.","A state with possibly many transitions represented in a …","A sequence of transitions used to represent a sparse state.","A state in an NFA.","A single transition to another state.","An alternation such that there exists an epsilon …","A configuration indicating which kinds of <code>State::Capture</code> …","Add a “end capture” NFA state.","Add a “start capture” NFA state.","Add an “empty” NFA state.","Adds a “fail” NFA state.","Add a “look” NFA state.","Adds a “match” NFA state.","Add a “range” NFA state.","Add a “sparse” NFA state.","Add a “union” NFA state.","Add a “reverse union” NFA state.","Returns an NFA with a single regex pattern that always …","An NFA backed bounded backtracker for executing regex …","","","","","","","","","","","","","","","","","","","","","","","Assemble a <code>NFA</code> from the states added so far.","Compile the given regular expression pattern into an NFA.","Compile the given high level intermediate representation …","Compile the given regular expression patterns into a …","Compile the given high level intermediate representations …","Get the byte classes for this NFA.","Whether to include ‘Capture’ states in the NFA.","Clear this builder.","","","","","","","","","","","","","","","","","","","","","Return a compiler for configuring the construction of an …","Return a default configuration for an <code>NFA</code>.","Apply the given NFA configuration options to this builder.","Returns the pattern identifier of the current pattern.","","","","The inclusive end of the byte range.","","","","","","","","","Finish the assembly of a pattern in this NFA.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return whether NFA compilation is configured to produce …","Returns the look-around matcher used for this builder.","Return the look-around matcher for this NFA.","Return the configured NFA size limit, if it exists, in the …","Returns whether reverse mode is enabled for this builder.","Returns whether this configuration has enabled reverse NFA …","Return whether NFA shrinking is enabled.","Return the currently configured size limit.","Returns whether UTF-8 mode is enabled for this builder.","Returns whether this configuration has enabled UTF-8 mode.","Return what kinds of capture states will be compiled into …","Returns the capturing group info for this NFA.","Returns true if and only if this NFA has at least one …","Returns true if and only if this NFA can match the empty …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if and only if all starting states for this …","Returns true if this configuration indicates that some …","Returns true if and only if this state contains one or …","Returns true if this configuration indicates that no …","Returns true when this NFA is meant to be matched in …","Whether UTF-8 mode is enabled for this NFA or not.","Sets the look-around matcher that should be used with this …","Returns the look-around matcher associated with this NFA.","Returns the union of all look-around assertions used …","Returns the union of all prefix look-around assertions for …","This follows the matching transition for a particular byte.","This follows the matching transition for a particular byte.","Returns true if the position <code>at</code> in <code>haystack</code> falls in this …","This follows the matching transition for a particular byte.","This follows the matching transition for a particular byte.","Returns true if the given byte falls in this transition’…","Returns true if the given alphabet unit falls in this …","Returns the heap memory usage, in bytes, used by the NFA …","Returns the memory usage, in bytes, of this NFA.","Returns an NFA that never matches at any position.","Create a new builder for hand-assembling NFAs.","Return a new default Thompson NFA compiler configuration.","Create a new NFA builder with its default configuration.","Parse the given regular expression using a default …","Parse the given regular expressions using a default …","","The identifier of the state to transition to.","Sets an approximate size limit on the total heap used by …","Add a transition from one state to another.","Returns the number of patterns added to this builder so …","Returns the total number of regex patterns in this NFA.","Returns an iterator over all pattern identifiers in this …","An NFA backed Pike VM for executing regex searches with …","Reverse the NFA.","Sets the look-around matcher that should be used for the …","Sets whether the NFA produced by this builder should be …","Set the size limit on this builder.","Set whether the NFA produced by this builder should only …","Apply best effort heuristics to shrink the NFA at the …","If this error occurred because the NFA exceeded the …","","The inclusive start of the byte range.","Return the state identifier of the initial anchored state …","Start the assembly of a pattern in this NFA.","Return the state identifier of the initial anchored state …","Return the state identifier of the initial unanchored …","Return a reference to the NFA state corresponding to the …","Returns a slice of all states in this NFA.","Set the syntax configuration for this builder using …","","","","","","","","","","","","The sorted sequence of non-overlapping transitions.","A dense representation of this state’s transitions on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether to enable UTF-8 mode during search or not.","Configures what kinds of capture groups are compiled into …","An unconditional epsilon transition to another NFA state. …","An unconditional epsilon transition to another NFA state. …","An ordered sequence of unconditional epsilon transitions …","The capture group index that this capture belongs to. …","The look-around assertion that must be satisfied before …","The state to transition to if the look-around assertion is …","The state to transition to, unconditionally.","The pattern ID that this capture belongs to.","The matching pattern ID.","The slot index for this capture. Every capturing group has …","The transition from this state to the next.","A backtracking regex engine that bounds its execution to …","A builder for a bounded backtracker.","A cache represents mutable state that a <code>BoundedBacktracker</code> …","The configuration used for building a bounded backtracker.","An iterator over all non-overlapping leftmost matches, …","An iterator over all non-overlapping matches for a …","Create a new <code>BoundedBacktracker</code> that matches every input.","","","","","","","","","","","","","Build a <code>BoundedBacktracker</code> from the given pattern.","Build a <code>BoundedBacktracker</code> directly from its NFA.","Build a <code>BoundedBacktracker</code> from the given patterns.","Return a builder for configuring the construction of a …","","","","","","","","","Return a default configuration for a <code>BoundedBacktracker</code>.","Apply the given <code>BoundedBacktracker</code> configuration options …","Create a new cache for this regex.","Create a new empty set of capturing groups that is …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the config for this <code>BoundedBacktracker</code>.","Returns a reference to the underlying NFA.","Returns the prefilter set in this configuration, if one at …","Returns the configured visited capacity.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the maximum haystack length supported by this …","Returns the heap memory usage, in bytes, of this cache.","Returns the minimum visited capacity for the given …","Create a new <code>BoundedBacktracker</code> that never matches any …","Return a new default regex configuration.","Create a new BoundedBacktracker builder with its default …","Parse the given regular expression using the default …","Create a new <code>BoundedBacktracker</code> cache.","Example","Like <code>new</code>, but parses multiple patterns into a single “…","","","Returns the total number of patterns compiled into this …","Set a prefilter to be used whenever a start state is …","Reset this cache such that it can be used for searching …","Reset the given cache such that it can be used for …","Set the syntax configuration for this builder using …","Set the Thompson NFA configuration for this builder using …","","","","","Executes a leftmost forward search and writes the spans of …","Returns an iterator over all non-overlapping <code>Captures</code> …","Executes a leftmost forward search and returns a <code>Match</code> if …","Returns an iterator over all non-overlapping leftmost …","","","","","","","","","","","","","Returns true if and only if this regex matches the given …","Executes a leftmost forward search and writes the spans of …","Executes a leftmost forward search and writes the spans of …","","","","","","","Set the visited capacity used to bound backtracking.","A builder for a <code>PikeVM</code>.","A cache represents mutable state that a <code>PikeVM</code> requires …","An iterator over all non-overlapping leftmost matches, …","The configuration used for building a <code>PikeVM</code>.","An iterator over all non-overlapping matches for a …","A virtual machine for executing regex searches with …","Create a new <code>PikeVM</code> that matches every input.","","","","","","","","","","","","","Build a <code>PikeVM</code> from the given pattern.","Build a <code>PikeVM</code> directly from its NFA.","Build a <code>PikeVM</code> from the given patterns.","Return a builder for configuring the construction of a …","Executes a leftmost forward search and writes the spans of …","Returns an iterator over all non-overlapping <code>Captures</code> …","","","","","","","","","Return a default configuration for a <code>PikeVM</code>.","Apply the given <code>PikeVM</code> configuration options to this …","Create a new cache for this <code>PikeVM</code>.","Create a new empty set of capturing groups that is …","","Executes a leftmost forward search and returns a <code>Match</code> if …","Returns an iterator over all non-overlapping leftmost …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the config for this <code>PikeVM</code>.","Returns the match semantics set in this configuration.","Returns a reference to the underlying NFA.","Returns the prefilter set in this configuration, if one at …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if and only if this <code>PikeVM</code> matches the given …","Set the desired match semantics.","Returns the heap memory usage, in bytes, of this cache.","Create a new <code>PikeVM</code> that never matches any input.","Return a new default PikeVM configuration.","Create a new PikeVM builder with its default configuration.","Parse the given regular expression using the default …","Create a new <code>PikeVM</code> cache.","Like <code>new</code>, but builds a PikeVM directly from an NFA. This …","Like <code>new</code>, but parses multiple patterns into a single “…","","","Returns the total number of patterns compiled into this …","Set a prefilter to be used whenever a start state is …","Reset this cache such that it can be used for searching …","Reset the given cache such that it can be used for …","Executes a leftmost forward search and writes the spans of …","Executes a leftmost forward search and writes the spans of …","Set the syntax configuration for this builder using …","Set the Thompson NFA configuration for this builder using …","","","","","","","","","","","","","","","","","","","","","","","Writes the set of patterns that match anywhere in the …","This module provides APIs for dealing with the alphabets …","Provides types for dealing with capturing groups.","Provides convenience routines for escaping raw bytes.","Provides routines for interpolating capture group …","Generic helpers for iteration of matches from a regex …","A lazily initialized value for safe sharing between …","Types and routines for working with look-around assertions.","A thread safe memory pool.","Defines a prefilter for accelerating regex searches.","Lower level primitive types that are useful in a variety …","Provides helpers for dealing with start state …","Utilities for dealing with the syntax of a regular …","Types and routines that support the wire format of finite …","An iterator over all elements in an equivalence class.","An iterator over each equivalence class.","An iterator over representative bytes from each …","A representation of byte oriented equivalence classes.","Unit represents a single unit of haystack for DFA based …","Return the total number of elements in the alphabet …","If this unit is an “end of input” sentinel, then …","If this unit is not an “end of input” sentinel, then …","Return this unit as a <code>usize</code>, regardless of whether it is a …","","","","","","","","","","","","","","","","","Returns an iterator of the bytes in the given equivalence …","Creates a new set of equivalence classes where all bytes …","Create a new “end of input” haystack unit.","Create a unit that represents the “end of input” …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the equivalence class for the given byte.","Get the equivalence class for the given haystack unit and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true if and only of this unit is a byte value …","Returns true when this unit represents an “end of input…","Returns true if and only if every byte in this class maps …","Returns true when this unit corresponds to an ASCII word …","Returns an iterator over all equivalence classes in this …","","","","","Returns an iterator over a sequence of representative …","Set the equivalence class for the given byte.","Creates a new set of equivalence classes where each byte …","Returns the stride, as a base-2 exponent, required for …","","","","","","","","","","","","","","","","","","Create a new haystack unit from a byte value.","The span offsets of capturing groups after a match has …","An iterator over all capturing groups in a <code>Captures</code> value.","Represents information about capturing groups in a …","An iterator over capturing groups and their names for a …","An error that may occur when building a <code>GroupInfo</code>.","An iterator over capturing groups and their names for a …","Create new storage for the offsets of all matching …","Return the total number of capture groups across all …","Return an iterator of all capture groups for all patterns …","","","","","","","","","","","","","Clear this <code>Captures</code> value.","","","","","","","","","","","","","","Create new storage for only tracking which pattern …","This creates an empty <code>GroupInfo</code>.","Returns the total number of slots for explicit capturing …","This is a convenience routine for extracting the substrings","This is a convenience routine for extracting the substrings","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the span of a capturing group match corresponding …","Returns the span of a capturing group match corresponding …","Returns the pattern ID and the span of the match, if one …","Returns a reference to the underlying group info on which …","Return the total number of capturing groups for the …","Return the number of capture groups in a pattern.","Returns the total number of slots for implicit capturing …","Interpolates the capture references in <code>replacement</code> with the","Interpolates the capture references in <code>replacement</code> with the","Interpolates the capture references in <code>replacement</code> with the","Interpolates the capture references in <code>replacement</code> with the","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true if and only if this capturing group …","Returns an iterator of possible spans for every capturing …","Create new storage for only the full match spans of a …","Returns the memory usage, in bytes, of this <code>GroupInfo</code>.","Creates a new group info from a sequence of patterns, …","","","","Returns the identifier of the pattern that matched when …","Returns the total number of patterns in this <code>GroupInfo</code>.","Return an iterator of all capture groups and their names …","Set the pattern on this <code>Captures</code> value.","","","Returns the starting slot corresponding to the given …","Returns the total number of slots in this <code>GroupInfo</code> across …","Returns the underlying slots, where each slot stores a …","Returns the starting and ending slot corresponding to the …","Returns the underlying slots as a mutable slice, where …","","Return the capture group index corresponding to the given …","Return the capture name for the given index and given …","","","","","","","","","","","","","","","","","","","","","","","","","Provides a convenient <code>Debug</code> implementation for a <code>u8</code>.","Provides a convenient <code>Debug</code> implementation for <code>&amp;[u8]</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Accepts a replacement byte string and interpolates capture …","Accepts a replacement string and interpolates capture …","An iterator over all non-overlapping captures for an …","An iterator over all non-overlapping half matches for an …","An iterator over all non-overlapping matches for an …","A searcher for creating iterators and performing lower …","An iterator over all non-overlapping captures for a …","An iterator over all non-overlapping half matches for a …","An iterator over all non-overlapping matches for a …","Return the next match for an infallible search if one …","Return the next half match for an infallible search if one …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return an infallible version of this iterator.","Return an infallible version of this iterator.","Return an infallible version of this iterator.","Returns the current <code>Input</code> used by this iterator.","Returns the current <code>Input</code> used by this iterator.","Returns the current <code>Input</code> used by this searcher.","Returns the current <code>Input</code> used by this iterator.","Returns the current <code>Input</code> used by this iterator.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Given a closure that executes a single search, return an …","Given a closure that executes a single search, return an …","","","","","","","Given a closure that executes a single search, return an …","Create a new fallible non-overlapping matches iterator.","","","","","","","","Return the next match for a fallible search if one exists, …","Return the next half match for a fallible search if one …","","","","","","","","","","","","","","","","","","","","","","A lazily initialized value that implements <code>Deref</code> for <code>T</code>.","","","","","Returns the argument unchanged.","Return a reference to the lazily initialized value.","Calls <code>U::from(self)</code>.","Create a new <code>Lazy</code> value that is initialized via the given …","","","","Match the end of text. Specifically, this matches at the …","Match the end of a line or the end of text. Specifically, …","Match the end of a line or the end of text. Specifically, …","A look-around assertion.","A matcher for look-around assertions.","LookSet is a memory-efficient set of look-around …","An iterator over all look-around assertions in a <code>LookSet</code>.","Match the beginning of text. Specifically, this matches at …","Match the beginning of a line or the beginning of text. …","Match the beginning of a line or the beginning of text. …","An error that occurs when the Unicode-aware <code>\\\\w</code> class is …","Match an ASCII-only word boundary. That is, this matches a …","Match an ASCII-only negation of a word boundary.","Match the end of an ASCII-only word boundary. That is, …","Match the end half of an ASCII-only word boundary. That …","Match the end half of a Unicode word boundary. That is, …","Match the end of a Unicode word boundary. That is, this …","Match the start of an ASCII-only word boundary. That is, …","Match the start half of an ASCII-only word boundary. That …","Match the start half of a Unicode word boundary. That is, …","Match the start of a Unicode word boundary. That is, this …","Match a Unicode-aware word boundary. That is, this matches …","Match a Unicode-aware negation of a word boundary.","Returns a convenient single codepoint representation of …","Return the underlying representation of this look-around …","Checks that all assertions in this set can be matched.","The underlying representation this set is exposed to make …","","","","","","","","","","","Returns an error if and only if Unicode word boundary data …","","","","","","","","","","","Returns true if and only if the given look-around …","Returns true if and only if this set contains any anchor …","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any word …","Returns true if and only if this set contains any ASCII …","Returns true if and only if this set contains any Unicode …","","","Create an empty set of look-around assertions.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Given the underlying representation of a <code>Look</code> value, …","Create a full set of look-around assertions.","Returns the line terminator that was configured for this …","Return a new set that is equivalent to the original, but …","Returns a new set that is the intersection of this and the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if and only if this set is empty.","Returns true when <code>Look::End</code> is satisfied <code>at</code> the given …","Returns true when <code>Look::EndCRLF</code> is satisfied <code>at</code> the given …","Returns true when <code>Look::EndLF</code> is satisfied <code>at</code> the given …","Returns true when <code>Look::Start</code> is satisfied <code>at</code> the given …","Returns true when <code>Look::StartCRLF</code> is satisfied <code>at</code> the given","Returns true when <code>Look::StartLF</code> is satisfied <code>at</code> the given …","Returns true when <code>Look::WordAscii</code> is satisfied <code>at</code> the given","Returns true when <code>Look::WordAsciiNegate</code> is satisfied <code>at</code> …","Returns true when <code>Look::WordEndAscii</code> is satisfied <code>at</code> the …","Returns true when <code>Look::WordEndHalfAscii</code> is satisfied <code>at</code> …","Returns true when <code>Look::WordEndHalfUnicode</code> is satisfied <code>at</code> …","Returns true when <code>Look::WordEndUnicode</code> is satisfied <code>at</code> the …","Returns true when <code>Look::WordStartAscii</code> is satisfied <code>at</code> the …","Returns true when <code>Look::WordStartHalfAscii</code> is satisfied <code>at</code> …","Returns true when <code>Look::WordStartHalfUnicode</code> is satisfied …","Returns true when <code>Look::WordStartUnicode</code> is satisfied <code>at</code> …","Returns true when <code>Look::WordUnicode</code> is satisfied <code>at</code> the …","Returns true when <code>Look::WordUnicodeNegate</code> is satisfied <code>at</code> …","Returns an iterator over all of the look-around assertions …","Returns the total number of look-around assertions in this …","Returns true when the position <code>at</code> in <code>haystack</code> satisfies …","Returns true when <em>all</em> of the assertions in the given set …","Creates a new default matcher for look-around assertions.","","Return a <code>LookSet</code> from the slice given as a native endian …","Return a new set that is equivalent to the original, but …","Flip the look-around assertion to its equivalent for …","Updates this set in place with the result of inserting the …","Updates this set in place with the result of intersecting …","Sets the line terminator for use with <code>(?m:^)</code> and <code>(?m:$)</code>.","Updates this set in place with the result of removing the …","Updates this set in place with the result of subtracting …","Updates this set in place with the result of unioning it …","Create a look-around set containing the look-around …","Returns a new set that is the result of subtracting the …","","","","","","","","","","","","","","","","","","","","","","Returns a new set that is the union of this and the one …","Write a <code>LookSet</code> as a native endian 32-bit integer to the …","A thread safe pool that works in an <code>alloc</code>-only context.","A guard that is returned when a caller requests a value …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get a value from the pool. The caller is guaranteed to have","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new pool. The given closure is used to create …","Consumes this guard and puts it back into the pool.","","","","","","","A prefilter for accelerating regex searches.","","","","","Run this prefilter on <code>haystack[span.start..end]</code> and return …","","Returns the argument unchanged.","This attempts to extract prefixes from the given <code>Hir</code> …","This attempts to extract prefixes from the given <code>Hir</code> …","Calls <code>U::from(self)</code>.","Returns the heap memory, in bytes, used by the underlying …","Create a new prefilter from a sequence of needles and a …","Returns the span of a prefix of …","","","","","The total number of values that can be represented as a …","The total number of values that can be represented.","The total number of values that can be represented.","The maximum index value.","The maximum value.","The maximum value.","A <code>usize</code> that can never be <code>usize::MAX</code>.","The identifier of a regex pattern, represented by a …","This error occurs when a value could not be constructed.","The number of bytes that a single small index uses in …","The number of bytes that a single value uses in memory.","The number of bytes that a single value uses in memory.","A type that represents a “small” index.","This error occurs when a small index could not be …","The identifier of a finite automaton state, represented by …","This error occurs when a value could not be constructed.","The zero index value.","The zero value.","The zero value.","Return the internal <code>u32</code> of this small index represented as …","Return the internal value as a i32…","Return the internal value as a i32…","Return the internal <code>u32</code> of this small index. This is …","Return the internal value as a <code>u32</code>. This is guaranteed to …","Return the internal value as a <code>u32</code>. This is guaranteed to …","Return this small index as a <code>u64</code>. This is guaranteed to …","Return the internal value as a <code>u64</code>. This is guaranteed to …","Return the internal value as a <code>u64</code>. This is guaranteed to …","Return this small index as a <code>usize</code>. This is guaranteed to …","Return the internal value as a <code>usize</code>. This is guaranteed to","Return the internal value as a <code>usize</code>. This is guaranteed to","Returns the value that could not be converted to a small …","Returns the value that could not be converted to an ID.","Returns the value that could not be converted to an ID.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Decode this small index from the bytes given using the …","Decode this value from the bytes given using the native …","Decode this value from the bytes given using the native …","Decode this small index from the bytes given using the …","Decode this value from the bytes given using the native …","Decode this value from the bytes given using the native …","Return the underlying <code>usize</code> value. The returned value is …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Like <code>SmallIndex::new</code>, but panics if the given index is not …","Like <code>new</code>, but panics if the given value is not valid.","Like <code>new</code>, but panics if the given value is not valid.","Create a new <code>NonMaxUsize</code> from the given value.","Create a new small index.","Create a new value that is represented by a “small index.…","Create a new value that is represented by a “small index.…","Create a new small index without checking whether the …","Create a new value without checking whether the given …","Create a new value without checking whether the given …","Returns one more than this small index as a usize.","Returns one more than this value as a usize.","Returns one more than this value as a usize.","","","","Return the underlying small index integer as raw bytes in …","Return the underlying integer as raw bytes in native endian","Return the underlying integer as raw bytes in native endian","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The configuration used to determine a DFA’s start state …","Set the anchored mode of a search.","","","","","","Returns the argument unchanged.","A convenience routine for building a start configuration …","A convenience routine for building a start configuration …","Return the anchored mode in this configuration.","Return the look-behind byte in this configuration, if one …","Calls <code>U::from(self)</code>.","Set the look-behind byte at the start of a search.","Create a new default start configuration.","","","","","A common set of configuration options that apply to the …","","","Enable or disable the case insensitive flag by default.","","","Enable or disable the “CRLF mode” flag by default.","","Enable or disable the “dot matches any character” flag …","","Returns the argument unchanged.","Returns whether “case insensitive” mode is enabled.","Returns whether “CRLF” mode is enabled.","Returns whether “dot matches new line” mode is enabled.","Returns whether “ignore whitespace” mode is enabled.","Returns the line terminator in this syntax configuration.","Returns whether “multi line” mode is enabled.","Returns the “nest limit” setting.","Returns whether “octal” mode is enabled.","Returns whether “swap greed” mode is enabled.","Returns whether “unicode” mode is enabled.","Returns whether UTF-8 mode is enabled.","Enable verbose mode in the regular expression.","Calls <code>U::from(self)</code>.","Sets the line terminator for use with <code>(?u-s:.)</code> and <code>(?-us:.)</code>…","Enable or disable the multi-line matching flag by default.","Set the nesting limit used for the regular expression …","Return a new default syntax configuration.","Whether to support octal syntax or not.","A convenience routine for parsing a pattern into an HIR …","A convenience routine for parsing many patterns into HIR …","A convenience routine for parsing many patterns into HIR …","A convenience routine for parsing a pattern into an HIR …","Enable or disable the “swap greed” flag by default.","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","When disabled, the builder will permit the construction of …","A hack to align a smaller type <code>B</code> with a bigger type <code>T</code>.","An error that occurs when deserializing an object defined …","An error that occurs when serializing an object from this …","A zero-sized field indicating the alignment we want.","","","","","","","A possibly non-sized field containing a sequence of bytes.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[12,0,14,0,14,0,12,0,0,0,0,2,2,0,0,0,0,14,0,14,2,1,6,1,7,8,9,3,10,11,2,12,13,14,6,1,7,8,9,3,10,11,2,12,13,14,3,3,6,1,7,8,9,3,10,11,2,12,13,14,6,1,7,8,9,3,10,11,2,12,13,14,6,7,3,6,12,0,1,1,9,7,6,7,7,8,9,3,2,12,13,14,6,7,8,9,3,2,12,13,14,6,1,7,8,9,3,10,10,11,2,12,13,13,14,6,6,1,1,7,7,8,9,3,10,11,2,12,13,14,13,1,1,1,1,6,7,8,9,1,13,0,3,6,1,7,8,9,3,10,11,2,12,13,14,11,2,1,1,7,9,3,3,3,13,7,9,3,0,8,9,1,8,9,3,13,11,11,0,7,8,6,8,9,2,13,1,7,9,1,1,1,1,1,1,11,1,9,1,9,7,6,1,7,8,9,3,10,11,2,12,13,14,10,13,6,6,6,6,6,1,7,8,9,3,10,11,2,12,13,14,3,6,1,7,8,9,3,10,11,2,12,13,14,6,1,7,8,9,3,10,11,2,12,13,14,13,0,139,140,141,139,142,0,0,0,0,0,0,35,35,40,37,35,41,36,40,37,35,41,36,37,37,37,35,40,35,40,37,35,41,36,40,37,35,41,36,35,37,35,35,40,35,40,37,35,41,36,36,40,37,35,41,36,40,35,40,35,40,40,40,37,35,41,36,35,40,35,41,35,40,37,35,41,35,35,35,41,35,40,36,40,35,35,35,37,37,40,37,35,41,36,36,40,37,35,41,36,40,37,35,41,36,35,35,40,37,35,41,36,0,48,0,0,48,0,48,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,50,50,0,50,50,47,47,48,48,49,49,50,47,48,49,50,50,47,48,49,50,50,50,50,50,50,50,50,0,47,48,47,48,49,50,47,48,49,47,48,49,50,47,48,49,50,47,48,49,50,143,144,145,0,0,0,0,0,51,51,55,54,52,56,51,55,54,52,56,52,52,52,51,51,54,54,55,51,55,54,52,56,51,55,54,52,56,51,52,51,54,56,56,51,55,54,52,56,51,55,54,52,56,54,54,51,56,54,54,54,54,51,54,54,54,54,54,54,51,55,54,52,56,54,51,51,51,55,54,54,51,51,55,54,52,51,51,51,51,51,51,54,54,55,51,55,55,55,55,54,54,56,51,51,51,54,52,52,51,55,54,52,56,51,55,54,52,56,51,55,54,52,56,51,51,51,51,51,51,55,54,52,56,54,0,0,0,0,59,59,61,62,59,60,61,62,59,60,60,60,60,61,59,60,59,60,61,60,60,61,61,61,62,59,60,61,59,59,61,62,59,60,61,62,59,60,62,61,59,61,59,60,61,62,61,59,61,61,59,59,60,60,59,60,61,62,59,60,61,62,59,60,61,61,62,59,60,0,0,0,0,0,0,0,0,0,63,63,66,65,71,69,72,73,70,63,64,66,65,71,69,72,73,70,63,64,64,64,64,64,65,63,65,65,65,66,65,70,63,64,66,65,70,63,64,65,64,71,69,65,65,63,63,63,63,65,65,66,66,65,71,69,72,73,70,63,64,66,65,71,69,72,73,70,63,64,63,63,63,65,63,63,63,63,63,63,63,63,63,63,63,63,63,65,63,63,71,69,72,73,66,65,71,69,72,73,70,63,64,71,69,72,73,65,65,63,63,65,70,65,70,63,64,65,71,69,72,73,63,63,63,66,65,63,71,69,70,65,65,65,65,65,65,65,65,73,66,66,65,65,65,64,66,66,65,70,63,64,66,66,65,71,69,72,73,70,63,64,66,65,71,69,72,73,70,63,64,66,65,71,69,72,73,70,63,64,63,63,65,65,0,74,85,0,0,85,85,0,0,85,0,85,74,85,85,0,74,0,85,0,0,0,85,0,77,77,77,77,77,77,77,77,77,77,39,0,77,45,74,84,79,39,85,86,87,82,88,77,45,74,84,79,39,85,86,87,82,88,77,84,84,84,84,39,45,77,77,45,74,84,79,39,85,86,87,82,77,45,74,84,79,39,85,86,87,82,39,39,84,77,77,45,74,82,85,86,87,82,85,86,87,82,77,77,45,74,84,79,79,39,85,86,87,82,88,77,45,74,84,79,39,85,86,87,82,88,45,77,45,45,77,45,45,77,77,45,45,39,39,39,82,77,45,74,84,79,39,85,86,87,82,88,88,39,74,85,74,39,39,45,39,39,39,86,87,82,86,87,82,82,77,39,39,77,45,84,39,39,88,82,45,77,77,39,39,0,45,77,77,77,77,45,79,79,82,39,77,39,39,39,39,84,77,45,74,84,79,39,85,86,87,82,79,86,87,77,45,74,84,79,39,85,86,87,82,88,77,45,74,84,79,39,85,86,87,82,88,77,45,74,84,79,39,85,86,87,82,88,45,45,146,146,147,148,149,149,148,148,150,148,151,0,0,0,0,0,0,92,94,93,92,96,97,95,94,93,92,96,97,95,93,93,93,92,94,93,92,95,94,93,92,95,92,93,92,92,94,94,93,92,96,97,95,94,93,92,96,97,95,92,92,94,94,94,93,92,96,97,95,96,97,92,95,0,92,94,93,92,95,92,92,96,97,92,94,95,92,93,93,94,93,92,95,92,92,92,92,94,93,92,96,97,95,94,93,92,96,97,95,92,92,92,94,93,92,96,97,95,94,0,0,0,0,0,0,98,102,99,98,103,101,100,102,99,98,103,101,100,99,99,99,98,98,98,102,99,98,100,102,99,98,100,98,99,98,98,102,98,98,102,99,98,103,101,100,102,99,98,103,101,100,98,102,98,102,102,99,98,103,101,100,103,101,98,102,100,98,102,99,98,100,98,98,103,101,98,102,100,98,98,98,99,99,102,99,98,100,102,99,98,103,101,100,102,99,98,103,101,100,102,99,98,103,101,100,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,91,91,91,91,53,105,106,104,91,53,105,106,104,91,53,91,53,91,53,53,53,91,53,91,91,91,53,105,106,104,91,53,105,106,104,53,53,91,53,105,106,104,105,106,104,91,91,53,91,53,105,106,104,91,53,53,53,53,91,53,91,53,105,106,104,91,53,105,106,104,91,53,105,106,104,91,0,0,0,0,0,0,42,75,75,42,108,75,109,110,107,42,108,75,109,110,107,42,42,108,75,109,110,42,108,75,109,110,108,110,75,42,75,75,42,42,42,108,75,109,109,110,107,42,108,75,109,110,107,42,42,42,42,42,75,75,42,42,42,42,42,108,75,109,110,107,108,110,107,42,42,42,75,75,108,110,107,42,75,75,42,108,110,75,75,42,75,42,109,75,75,42,108,75,109,110,109,42,108,75,109,110,107,42,108,75,109,110,107,42,108,75,109,110,107,0,0,114,113,114,113,113,113,114,113,114,113,114,113,113,114,113,114,113,114,113,0,0,0,0,0,0,0,0,0,116,116,117,118,119,116,120,122,123,117,118,119,116,120,122,123,116,116,117,118,119,116,120,122,123,117,118,119,116,120,122,123,117,118,119,117,118,116,120,122,117,118,119,116,120,122,123,116,116,117,118,119,120,122,123,116,116,117,118,119,120,122,123,116,116,116,117,118,119,116,120,122,123,117,118,119,116,120,122,123,117,118,119,116,120,122,123,0,124,124,124,124,124,124,124,124,124,124,124,81,81,81,0,0,0,0,81,81,81,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,90,90,81,90,128,89,127,81,90,128,89,127,127,81,90,128,89,127,81,90,128,89,127,90,90,90,90,90,90,90,90,90,90,89,90,81,90,81,90,81,90,128,89,127,127,81,90,128,89,127,81,90,89,90,90,81,90,128,89,127,128,90,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,89,89,89,128,90,90,81,90,90,89,90,90,90,90,90,81,90,128,89,127,127,81,90,128,89,127,81,90,128,89,127,81,90,128,89,127,90,90,0,0,131,129,131,129,129,129,131,129,131,129,131,131,129,131,129,131,129,131,129,131,129,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,132,6,78,132,6,78,0,0,0,132,6,78,0,0,0,0,132,6,78,132,6,78,132,6,78,132,6,78,132,6,78,134,30,135,46,132,134,78,30,135,46,132,134,78,30,135,46,132,134,78,30,135,46,132,134,78,30,135,46,132,78,132,78,46,132,134,78,30,135,46,132,134,78,30,135,46,132,134,134,78,30,30,135,135,46,132,132,134,78,78,30,135,132,6,78,132,6,78,46,46,132,78,46,132,134,78,30,135,132,6,78,46,132,6,78,132,6,78,132,6,78,46,132,78,132,6,78,46,132,134,78,30,135,134,30,135,46,132,132,132,132,132,134,78,78,78,78,78,30,135,46,132,134,78,30,135,46,132,134,78,30,135,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,44,44,44,44,44,44,44,0,0,0,136,136,137,138,136,137,138,136,136,137,137,138,138,136,137,138,136,137,138,137,138,136,137,138,136,137,138,136,137,138],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,4],[3,5],[6,6],[1,1],[7,7],[8,8],[9,9],[3,3],[10,10],[11,11],[2,2],[12,12],[13,13],[14,14],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[6,6],15],[[7,4],16],[[3,6],16],[[],6],[[],12],0,[[1,16],1],[1,4],[9,4],0,[[6,6],16],[[7,7],16],[[7,[17,[4]]],16],[[8,8],16],[[9,9],16],[[3,3],16],[[2,2],16],[[12,12],16],[[13,13],16],[[14,14],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[6,18],19],[[1,18],19],[[7,18],19],[[8,18],19],[[9,18],19],[[3,18],19],[[10,18],19],[[10,18],19],[[11,18],19],[[2,18],19],[[12,18],19],[[13,18],19],[[13,18],19],[[14,18],19],[-1,-1,[]],[20,6],[-1,1,[21,[23,[[22,[20]]]]]],[-1,-1,[]],[[[17,[4]]],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,13],[1,2],[1,16],[1,[[17,[4]]]],[1,7],[[6,-1],5,24],[[7,-1],5,24],[[8,-1],5,24],[[9,-1],5,24],[1,[[22,[20]]]],[4,13],0,[[3,6],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,16],[[1,4],16],[1,16],[7,16],[9,16],[3,16],[3,16],[3,11],[13,14],[7,4],[9,4],[3,4],0,[[4,4],8],[[4,-1],9,[[25,[7]]]],[-1,1,[21,[23,[[22,[20]]]]]],[[6,4],8],[[6,-1],9,[[25,[7]]]],[4,3],[14,13],[11,[[26,[6]]]],[11,[[26,[6]]]],0,[[7,4],7],[8,4],[[6,6],[[26,[15]]]],[8,6],[9,6],[2,[[26,[6]]]],[[20,4],13],[[1,-1],1,[[27,[4]]]],[7,[[17,[4]]]],[9,[[17,[4]]]],[[1,2],5],[[1,16],5],[[1,4],5],[[1,-1],5,[[27,[4]]]],[[1,-1],5,[[25,[7]]]],[[1,4],5],[11,[[5,[4,[26,[4]]]]]],[[1,-1],1,[[25,[7]]]],[9,7],[1,4],[9,4],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[-1,[[29,[-2]]],[],[]],[4,[[29,[6,30]]]],[31,[[29,[6,30]]]],[32,[[29,[6,30]]]],[33,[[29,[6,30]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[[3,6],[[29,[16,10]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[2,13],0,0,0,0,0,0,0,0,0,0,0,0,[35,4],[[],[[29,[35,36]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[37,38],[[29,[35,36]]]],[[37,39],[[29,[35,36]]]],[[37,[22,[-1]]],[[29,[35,36]]],[[23,[38]]]],[[],37],[[40,16],40],[[35,41,-1,42],5,[[25,[1]]]],[40,40],[37,37],[35,35],[41,41],[36,36],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],40],[[37,40],37],[35,41],[35,42],[[],40],[[35,41,-1],[[26,[9]]],[[25,[1]]]],[[40,18],19],[[37,18],19],[[35,18],19],[[41,18],19],[[36,18],19],[[36,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[40,16],[35,40],[40,12],[35,39],[40,[[26,[4]]]],[40,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,41,-1],16,[[25,[1]]]],[[40,12],40],[35,4],[41,4],[[],[[29,[35,36]]]],[[],40],[[],37],[38,[[29,[35,36]]]],[35,41],[39,[[29,[35,36]]]],[[[22,[-1]]],[[29,[35,36]]],[[23,[38]]]],[35,4],[[41,35],5],[[35,41],5],[[40,[26,[4]]],40],[36,[[26,[43]]]],[[40,16],40],[35,4],[35,4],[35,4],[[37,44],37],[[37,45],37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[[35,41,1,42],[[29,[5,13]]]],[[35,41,1,[22,[[26,[46]]]]],[[29,[[26,[6]],13]]]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[47,47],[48,48],[49,49],[50,50],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[50,50],15],[[],50],0,[[50,50],16],[[-1,-2],16,[],[]],[[47,18],19],[[47,18],19],[[48,18],19],[[48,18],19],[[49,18],19],[[49,18],19],[[50,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[50,-1],5,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[50,16],[50,16],[50,16],[50,16],[50,16],[50,16],[[50,50],[[26,[15]]]],0,[47,[[26,[43]]]],[48,[[26,[43]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,0,0,0,[[],[[29,[51,47]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[52,38],[[29,[51,47]]]],[[52,39],[[29,[51,47]]]],[[52,[22,[-1]]],[[29,[51,47]]],[[23,[38]]]],[[],52],[51,53],[[54,16],54],[[54,4],54],[55,4],[51,51],[55,55],[54,54],[52,52],[56,56],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],54],[[52,54],52],[51,55],[[],54],[[56,56],16],[[-1,-2],16,[],[]],[[51,18],19],[[55,18],19],[[54,18],19],[[52,18],19],[[56,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[54,16],[54,4],[51,54],[56,[[26,[8]]]],[54,12],[54,[[26,[4]]]],[[54,39],[[29,[4,47]]]],[54,[[26,[4]]]],[51,39],[54,[[26,[57]]]],[[54,20],16],[54,16],[54,16],[54,16],[54,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[54,12],54],[[51,55,50],4],[[51,55,50,4],6],[51,4],[55,4],[[54,[26,[4]]],54],[[54,[26,[4]]],54],[[],[[29,[51,47]]]],[38,[[29,[51,47]]]],[51,55],[[],54],[[],52],[[[22,[-1]]],[[29,[51,47]]],[[23,[38]]]],[[51,55,50],[[29,[50,49]]]],[[51,55,50,20],[[29,[50,49]]]],[[51,55,50,20],50],[[51,55,50,20],50],[51,4],[[54,[26,[57]]],54],[[54,20,16],54],[[55,51],5],[[51,55],5],[[55,4],5],[[55,4],5],[55,4],[[55,4],5],[[54,16],54],[[54,16],54],[[],56],[[51,55,58],[[29,[50,48]]]],[[51,55,1],[[29,[50,13]]]],[[51,55,1],[[29,[50,13]]]],[[54,16],54],[[52,44],52],[[52,45],52],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[[51,55,1],[[29,[[26,[8]],13]]]],[[51,55,1,56],[[29,[5,13]]]],[[51,55,1,56],[[29,[5,13]]]],[[51,55,1],[[29,[[26,[8]],13]]]],[[51,55,1,3],[[29,[5,13]]]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[54,16],54],0,0,0,0,[59,[[5,[55,55]]]],[59,[[5,[55,55]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[60,38],[[29,[61,47]]]],[[60,51,51],61],[[60,[22,[-1]]],[[29,[61,47]]],[[23,[38]]]],[[],60],[59,59],[60,60],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[61,59],[[],60],[[60,54],60],[[61,59,-1],[[26,[9]]],[[25,[1]]]],[[61,59,-1],62,[[25,[1]]]],[[61,18],19],[[62,18],19],[[59,18],19],[[60,18],19],[61,51],[59,55],[59,55],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[61,59,-1],16,[[25,[1]]]],[59,4],[38,[[29,[61,47]]]],[61,59],[[],60],[[[22,[-1]]],[[29,[61,47]]],[[23,[38]]]],[62,[[26,[9]]]],[61,4],[[59,61],5],[[61,59],5],[61,51],[59,55],[59,55],[[60,44],60],[[60,45],60],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[[61,59,1],[[29,[[26,[9]],13]]]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,[[63,16],63],[[63,16],63],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[64,38],[[29,[65,66]]]],[[64,67],[[29,[65,66]]]],[[64,[22,[-1]]],[[29,[65,66]]],[[23,[38]]]],[[64,[22,[-1]]],[[29,[65,66]]],[[68,[67]]]],[[],64],[[63,16],63],[[65,-1,42],5,[[25,[1]]]],[[65,-1],69,[[25,[1]]]],[65,4],[66,66],[65,65],[70,70],[63,63],[64,64],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],63],[[64,63],64],[71,4],[69,4],[65,70],[65,42],[[],63],[[63,16],63],[[63,[26,[4]]],63],[[63,[26,[4]]],63],[[65,-1],[[26,[9]]],[[25,[1]]]],[[65,-1],71,[[25,[1]]]],[[66,18],19],[[66,18],19],[[65,18],19],[[71,18],19],[[69,18],19],[[72,18],19],[[73,18],19],[[70,18],19],[[63,18],19],[[64,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[63,16],[63,16],[63,16],[65,63],[63,16],[63,[[26,[4]]]],[63,[[26,[4]]]],[63,16],[63,4],[63,20],[63,12],[63,[[26,[4]]]],[63,16],[63,[[26,[4]]]],[63,[[26,[57]]]],[63,16],[63,74],[65,75],[[63,16],63],[[63,4],63],[71,1],[69,1],[72,1],[73,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,16],[[65,-1],16,[[25,[1]]]],[[63,20],63],[[63,12],63],[65,4],[70,4],[38,[[29,[65,66]]]],[65,70],[[],63],[[],64],[[[22,[-1]]],[[29,[65,66]]],[[23,[38]]]],[71,[[26,[9]]]],[69,[[26,[42]]]],[72,[[26,[7]]]],[73,[[26,[7]]]],[[63,[26,[4]]],63],[[63,16],63],[[63,[26,[4]]],63],[66,[[26,[6]]]],[65,4],[[63,[26,[57]]],63],[71,65],[69,65],[[70,65],5],[[65,1],[[26,[9]]]],[[65,1,42],5],[[65,70,1,42],5],[[65,1],[[26,[8]]]],[[65,70,1],[[26,[8]]]],[[65,1,[22,[[26,[46]]]]],[[26,[6]]]],[[65,70,1,[22,[[26,[46]]]]],[[26,[6]]]],[[65,70,1],[[26,[9]]]],[73,[[5,[4,[26,[4]]]]]],[66,[[26,[4]]]],[66,[[26,[43]]]],[[65,-1],72,[[25,[1]]]],[[65,-1,4],73,[[25,[1]]]],[65,[[26,[4]]]],[[64,44],64],[66,[[26,[76]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[63,16],63],[[63,74],63],[[65,1,3],5],[[65,70,1,3],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[77,78,32],[[29,[78,79]]]],[[77,78,32,[26,[[80,[38]]]]],[[29,[78,79]]]],[77,[[29,[78,79]]]],[77,[[29,[78,79]]]],[[77,78,81],[[29,[78,79]]]],[77,[[29,[78,79]]]],[[77,82],[[29,[78,79]]]],[[77,[83,[82]]],[[29,[78,79]]]],[[77,[83,[78]]],[[29,[78,79]]]],[[77,[83,[78]]],[[29,[78,79]]]],[[],39],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[77,78,78],[[29,[39,79]]]],[[84,38],[[29,[39,79]]]],[[84,67],[[29,[39,79]]]],[[84,[22,[-1]]],[[29,[39,79]]],[[23,[38]]]],[[84,[22,[-1]]],[[29,[39,79]]],[[68,[67]]]],[39,53],[[45,16],45],[77,5],[77,77],[45,45],[74,74],[84,84],[79,79],[39,39],[85,85],[86,86],[87,87],[82,82],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],84],[[],45],[[84,45],84],[77,6],[[],77],[[],45],[[],74],0,[[85,85],16],[[86,86],16],[[87,87],16],[[82,82],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[77,78],[[29,[6,79]]]],[[77,18],19],[[45,18],19],[[74,18],19],[[84,18],19],[[79,18],19],[[79,18],19],[[39,18],19],[[85,18],19],[[86,18],19],[[87,18],19],[[82,18],19],[[88,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[45,16],[77,89],[45,89],[45,[[26,[4]]]],[77,16],[45,16],[45,16],[77,[[26,[4]]]],[77,16],[45,16],[45,74],[39,75],[39,16],[39,16],[[82,-1],5,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[39,16],[74,16],[85,16],[74,16],[39,16],[39,16],[[45,89],45],[39,89],[39,90],[39,90],[[86,[22,[20]],4],[[26,[78]]]],[[87,[22,[20]],4],[[26,[78]]]],[[82,[22,[20]],4],16],[[86,20],[[26,[78]]]],[[87,20],[[26,[78]]]],[[82,20],16],[[82,91],16],[77,4],[39,4],[[],39],[[],77],[[],45],[[],84],[38,[[29,[39,79]]]],[[[22,[-1]]],[[29,[39,79]]],[[23,[38]]]],[88,[[26,[6]]]],0,[[45,[26,[4]]],45],[[77,78,78],[[29,[5,79]]]],[77,4],[39,4],[39,88],0,[[45,16],45],[[77,89],5],[[77,16],5],[[77,[26,[4]]],[[29,[5,79]]]],[[77,16],5],[[45,16],45],[79,[[26,[4]]]],[79,[[26,[43]]]],0,[39,78],[77,[[29,[6,79]]]],[[39,6],[[26,[78]]]],[39,78],[[39,78],85],[39,[[22,[85]]]],[[84,44],84],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],0,0,[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[45,16],45],[[45,74],45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[29,[92,79]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[93,38],[[29,[92,79]]]],[[93,39],[[29,[92,79]]]],[[93,[22,[-1]]],[[29,[92,79]]],[[23,[38]]]],[[],93],[94,94],[93,93],[92,92],[95,95],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],94],[[93,94],93],[92,95],[92,42],[[],94],[[94,18],19],[[93,18],19],[[92,18],19],[[96,18],19],[[97,18],19],[[95,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[92,94],[92,39],[94,[[26,[57]]]],[94,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[92,4],[95,4],[[39,1],4],[[],[[29,[92,79]]]],[[],94],[[],93],[38,[[29,[92,79]]]],[92,95],[39,[[29,[92,79]]]],[[[22,[-1]]],[[29,[92,79]]],[[23,[38]]]],[96,[[26,[[29,[9,13]]]]]],[97,[[26,[[29,[42,13]]]]]],[92,4],[[94,[26,[57]]],94],[[95,92],5],[[92,95],5],[[93,44],93],[[93,45],93],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[92,95,-1,42],[[29,[5,13]]],[[25,[1]]]],[[92,95,-1],97,[[25,[1]]]],[[92,95,-1],[[29,[[26,[9]],13]]],[[25,[1]]]],[[92,95,-1],96,[[25,[1]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[[92,95,-1],[[29,[16,13]]],[[25,[1]]]],[[92,95,1,42],[[29,[5,13]]]],[[92,95,1,[22,[[26,[46]]]]],[[29,[[26,[6]],13]]]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[94,4],94],0,0,0,0,0,0,[[],[[29,[98,79]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[99,38],[[29,[98,79]]]],[[99,39],[[29,[98,79]]]],[[99,[22,[-1]]],[[29,[98,79]]],[[23,[38]]]],[[],99],[[98,100,-1,42],5,[[25,[1]]]],[[98,100,-1],101,[[25,[1]]]],[102,102],[99,99],[98,98],[100,100],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],102],[[99,102],99],[98,100],[98,42],[[],102],[[98,100,-1],[[26,[9]]],[[25,[1]]]],[[98,100,-1],103,[[25,[1]]]],[[102,18],19],[[99,18],19],[[98,18],19],[[103,18],19],[[101,18],19],[[100,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[98,102],[102,12],[98,39],[102,[[26,[57]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[98,100,-1],16,[[25,[1]]]],[[102,12],102],[100,4],[[],[[29,[98,79]]]],[[],102],[[],99],[38,[[29,[98,79]]]],[98,100],[39,[[29,[98,79]]]],[[[22,[-1]]],[[29,[98,79]]],[[23,[38]]]],[103,[[26,[9]]]],[101,[[26,[42]]]],[98,4],[[102,[26,[57]]],102],[[100,98],5],[[98,100],5],[[98,100,1,42],5],[[98,100,1,[22,[[26,[46]]]]],[[26,[6]]]],[[99,44],99],[[99,45],99],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[98,100,1,3],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[53,4],[91,[[26,[31]]]],[91,[[26,[20]]]],[91,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[91,91],[53,53],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[91,91],15],[[],53],[[53,91],104],[[],53],[4,91],[53,91],[[91,91],16],[[-1,-2],16,[],[]],[[91,18],19],[[53,18],19],[[105,18],19],[[106,18],19],[[104,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[53,20],20],[[53,91],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[91,20],16],[91,16],[53,16],[91,16],[53,105],[105,[[26,[91]]]],[106,[[26,[91]]]],[104,[[26,[91]]]],[[91,91],[[26,[15]]]],[[53,-1],106,[[27,[20]]]],[[53,20,20],5],[[],53],[53,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[20,91],0,0,0,0,0,0,[75,42],[75,4],[75,107],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[42,5],[42,42],[108,108],[75,75],[109,109],[110,110],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[108,4],[110,4],[[],75],[75,42],[[],75],[75,4],[[42,38],[[5,[38,[111,[38]]]]]],[[42,[22,[20]]],[[5,[[22,[20]],[111,[[22,[20]]]]]]]],[[42,18],19],[[108,18],19],[[75,18],19],[[109,18],19],[[109,18],19],[[110,18],19],[[107,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[42,4],[[26,[7]]]],[[42,38],[[26,[7]]]],[42,[[26,[9]]]],[42,75],[42,4],[[75,6],4],[75,4],[[42,[22,[20]],[22,[20]]],[[83,[20]]]],[[42,[22,[20]],[22,[20]],[83,[20]]],5],[[42,38,38],28],[[42,38,38,28],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[42,16],[42,108],[75,42],[75,4],[-1,[[29,[75,109]]],112],[108,[[26,[[26,[7]]]]]],[110,[[26,[[26,[38]]]]]],[107,[[26,[[5,[6,4,[26,[38]]]]]]]],[42,[[26,[6]]]],[75,4],[[75,6],110],[[42,[26,[6]]],5],[108,[[5,[4,[26,[4]]]]]],[110,[[5,[4,[26,[4]]]]]],[[75,6,4],[[26,[4]]]],[75,4],[42,[[22,[[26,[46]]]]]],[[75,6,4],[[26,[[5,[4,4]]]]]],[42,[[22,[[26,[46]]]]]],[109,[[26,[43]]]],[[75,6,38],[[26,[4]]]],[[75,6,4],[[26,[38]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[113,113],[[-1,-2],5,[],[]],[[114,18],19],[[113,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[[[22,[20]],-1,-2,[83,[20]]],5,115,115],[[38,-1,-2,28],5,115,115],0,0,0,0,0,0,0,[[116,-1],[[26,[9]]],115],[[116,-1],[[26,[8]]],115],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[116,116],[[-1,-2],5,[],[]],[[[117,[-1]],18],19,[]],[[[118,[-1]],18],19,[]],[[[119,[-1]],18],19,[]],[[116,18],19],[[[120,[-1]],18],19,121],[[[122,[-1]],18],19,121],[[[123,[-1]],18],19,121],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[117,[-1]]],[[120,[-1]]],[]],[[[118,[-1]]],[[122,[-1]]],[]],[[[119,[-1]]],[[123,[-1]]],[]],[[[117,[-1]]],1,[]],[[[118,[-1]]],1,[]],[116,1],[[[120,[-1]]],1,[]],[[[122,[-1]]],1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[116,42,-1],[[119,[-1]]],115],[[116,-1],[[117,[-1]]],115],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[116,-1],[[118,[-1]]],115],[1,116],[[[117,[-1]]],[[26,[[29,[8,13]]]]],115],[[[118,[-1]]],[[26,[[29,[9,13]]]]],115],[[[119,[-1]]],[[26,[[29,[42,13]]]]],115],[[[120,[-1]]],[[26,[8]]],115],[[[122,[-1]]],[[26,[9]]],115],[[[123,[-1]]],[[26,[42]]],115],[-1,-2,[],[]],[[116,-1],[[29,[[26,[9]],13]]],115],[[116,-1],[[29,[[26,[8]],13]]],115],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[124,[-1,-2]]],-1,[],125],[[[124,[-1,-2]],18],19,121,125],[-1,-1,[]],[[[124,[-1,-2]]],-1,[],125],[-1,-2,[],[]],[-1,[[124,[-2,-1]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[81,126],[81,32],[90,[[29,[5,127]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[29,[5,127]]]],[81,81],[90,90],[128,128],[89,89],[127,127],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[90,81],16],[90,16],[90,16],[90,16],[90,16],[90,16],[90,16],[90,16],[90,16],[[],90],[[],89],[[],90],[[81,81],16],[[90,90],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[81,18],19],[[90,18],19],[[128,18],19],[[89,18],19],[[127,18],19],[[127,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[32,[[26,[81]]]],[[],90],[89,20],[[90,81],90],[[90,90],90],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[90,16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],[[29,[16,127]]]],[[89,[22,[20]],4],[[29,[16,127]]]],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],[[29,[16,127]]]],[[89,[22,[20]],4],[[29,[16,127]]]],[[89,[22,[20]],4],[[29,[16,127]]]],[[89,[22,[20]],4],[[29,[16,127]]]],[90,128],[90,4],[[89,81,[22,[20]],4],16],[[89,90,[22,[20]],4],16],[[],89],[128,[[26,[81]]]],[[[22,[20]]],90],[[90,81],90],[81,81],[[90,81],5],[[90,90],5],[[89,20],89],[[90,81],5],[[90,90],5],[[90,90],5],[81,90],[[90,90],90],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[90,90],90],[[90,[22,[20]]],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[129,[-1,-2]]],-1,130,125],[[[129,[-1,-2]]],-1,130,125],[[[131,[-1,-2]],18],19,121,[]],[[[129,[-1,-2]],18],19,[130,121],125],[-1,-1,[]],[-1,-1,[]],[[[131,[-1,-2]]],[[129,[-1,-2]]],130,125],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[131,[-2,-1]]],[],[]],[[[129,[-1,-2]]],5,130,125],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[57,57],[[-1,-2],5,[],[]],[[57,[22,[20]],7],[[26,[7]]]],[[57,18],19],[-1,-1,[]],[[12,67],[[26,[57]]]],[[12,[22,[-1]]],[[26,[57]]],[[68,[67]]]],[-1,-2,[],[]],[57,4],[[12,[22,[-1]]],[[26,[57]]],[[23,[[22,[20]]]]]],[[57,[22,[20]],7],[[26,[7]]]],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[132,133],[6,133],[78,133],[132,32],[6,32],[78,32],[132,33],[6,33],[78,33],[132,4],[6,4],[78,4],[134,33],[30,33],[135,33],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[46,46],[132,132],[134,134],[78,78],[30,30],[135,135],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[46,46],15],[[132,132],15],[[78,78],15],[[],132],[[],78],[[46,46],16],[[132,132],16],[[134,134],16],[[78,78],16],[[30,30],16],[[135,135],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[46,18],19],[[132,18],19],[[134,18],19],[[134,18],19],[[78,18],19],[[30,18],19],[[30,18],19],[[135,18],19],[[135,18],19],[-1,-1,[]],[20,132],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[20,78],[-1,-1,[]],[-1,-1,[]],[[[111,[20]]],[[29,[132,134]]]],[[[111,[20]]],[[29,[6,30]]]],[[[111,[20]]],[[29,[78,135]]]],[[[111,[20]]],132],[[[111,[20]]],6],[[[111,[20]]],78],[46,4],[[46,-1],5,24],[[132,-1],5,24],[[78,-1],5,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,132],[4,6],[4,78],[4,[[26,[46]]]],[4,[[29,[132,134]]]],[4,[[29,[6,30]]]],[4,[[29,[78,135]]]],[4,132],[4,6],[4,78],[132,4],[6,4],[78,4],[[46,46],[[26,[15]]]],[[132,132],[[26,[15]]]],[[78,78],[[26,[15]]]],[132,[[111,[20]]]],[6,[[111,[20]]]],[78,[[111,[20]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,[[29,[-2]]],[],[]],[32,[[29,[132,134]]]],[33,[[29,[132,134]]]],[-1,[[29,[-2]]],[],[]],[31,[[29,[132,134]]]],[4,[[29,[132,134]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[4,[[29,[78,135]]]],[33,[[29,[78,135]]]],[31,[[29,[78,135]]]],[32,[[29,[78,135]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,[[58,2],58],[-1,-2,[],[]],[-1,-2,[],[]],[58,58],[[-1,-2],5,[],[]],[[58,18],19],[-1,-1,[]],[1,58],[1,58],[58,2],[58,[[26,[20]]]],[-1,-2,[],[]],[[58,[26,[20]]],58],[[],58],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[44,16],44],[44,44],[[-1,-2],5,[],[]],[[44,16],44],[[],44],[[44,16],44],[[44,18],19],[-1,-1,[]],[44,16],[44,16],[44,16],[44,16],[44,20],[44,16],[44,32],[44,16],[44,16],[44,16],[44,16],[[44,16],44],[-1,-2,[],[]],[[44,20],44],[[44,16],44],[[44,32],44],[[],44],[[44,16],44],[38,[[29,[67,76]]]],[[[22,[-1]]],[[29,[[83,[67]],76]]],[[23,[38]]]],[[[22,[-1]],44],[[29,[[83,[67]],76]]],[[23,[38]]]],[[38,44],[[29,[67,76]]]],[[44,16],44],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[[44,16],44],[[44,16],44],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[136,[-1,-2]],18],19,[121,21],121],[[137,18],19],[[137,18],19],[[138,18],19],[[138,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]]],"c":[907,969],"p":[[3,"Input",0],[4,"Anchored",0],[3,"PatternSet",0],[15,"usize"],[15,"tuple"],[3,"PatternID",0],[3,"Span",0],[3,"HalfMatch",0],[3,"Match",0],[3,"PatternSetInsertError",0],[3,"PatternSetIter",0],[4,"MatchKind",0],[3,"MatchError",0],[4,"MatchErrorKind",0],[4,"Ordering",2102],[15,"bool"],[3,"Range",2103],[3,"Formatter",2104],[6,"Result",2104],[15,"u8"],[8,"Sized",2105],[15,"slice"],[8,"AsRef",2106],[8,"Hasher",2107],[8,"Into",2106],[4,"Option",2108],[8,"RangeBounds",2103],[3,"String",2109],[4,"Result",2110],[3,"PatternIDError",1848],[15,"u16"],[15,"u32"],[15,"u64"],[3,"TypeId",2111],[3,"DFA",264],[3,"BuildError",264],[3,"Builder",264],[15,"str"],[3,"NFA",844],[3,"Config",264],[3,"Cache",264],[3,"Captures",1414],[8,"Error",2112],[3,"Config",2029],[3,"Config",844],[3,"NonMaxUsize",1848],[3,"BuildError",370],[4,"StartError",370],[3,"CacheError",370],[3,"LazyStateID",370],[3,"DFA",446],[3,"Builder",446],[3,"ByteClasses",1332],[3,"Config",446],[3,"Cache",446],[3,"OverlappingState",446],[3,"Prefilter",1830],[3,"Config",2010],[3,"Cache",577],[3,"Builder",577],[3,"Regex",577],[3,"FindMatches",577],[3,"Config",650],[3,"Builder",650],[3,"Regex",650],[3,"BuildError",650],[3,"Hir",2113],[8,"Borrow",2114],[3,"CapturesMatches",650],[3,"Cache",650],[3,"FindMatches",650],[3,"Split",650],[3,"SplitN",650],[4,"WhichCaptures",844],[3,"GroupInfo",1414],[4,"Error",2115],[3,"Builder",844],[3,"StateID",1848],[3,"BuildError",844],[3,"Arc",2116],[4,"Look",1662],[3,"Transition",844],[3,"Vec",2117],[3,"Compiler",844],[4,"State",844],[3,"SparseTransitions",844],[3,"DenseTransitions",844],[3,"PatternIter",844],[3,"LookMatcher",1662],[3,"LookSet",1662],[3,"Unit",1332],[3,"BoundedBacktracker",1104],[3,"Builder",1104],[3,"Config",1104],[3,"Cache",1104],[3,"TryFindMatches",1104],[3,"TryCapturesMatches",1104],[3,"PikeVM",1212],[3,"Builder",1212],[3,"Cache",1212],[3,"CapturesMatches",1212],[3,"Config",1212],[3,"FindMatches",1212],[3,"ByteClassElements",1332],[3,"ByteClassIter",1332],[3,"ByteClassRepresentatives",1332],[3,"GroupInfoAllNames",1414],[3,"CapturesPatternIter",1414],[3,"GroupInfoError",1414],[3,"GroupInfoPatternNames",1414],[15,"array"],[8,"IntoIterator",2118],[3,"DebugByte",1533],[3,"DebugHaystack",1533],[8,"FnMut",2119],[3,"Searcher",1556],[3,"TryHalfMatchesIter",1556],[3,"TryMatchesIter",1556],[3,"TryCapturesIter",1556],[3,"HalfMatchesIter",1556],[8,"Debug",2104],[3,"MatchesIter",1556],[3,"CapturesIter",1556],[3,"Lazy",1650],[8,"Fn",2119],[15,"char"],[3,"UnicodeWordBoundaryError",1662],[3,"LookSetIter",1662],[3,"PoolGuard",1807],[8,"Send",2105],[3,"Pool",1807],[3,"SmallIndex",1848],[15,"i32"],[3,"SmallIndexError",1848],[3,"StateIDError",1848],[3,"AlignAs",2069],[3,"SerializeError",2069],[3,"DeserializeError",2069],[13,"Quit",258],[13,"HaystackTooLong",258],[13,"UnsupportedAnchored",258],[13,"GaveUp",258],[13,"Quit",443],[13,"Cache",443],[13,"UnsupportedAnchored",443],[13,"BinaryUnion",1093],[13,"Union",1093],[13,"Capture",1093],[13,"Look",1093],[13,"Match",1093],[13,"ByteRange",1093]]},\
"regex_syntax":{"doc":"This crate provides a robust regular expression parser.","t":"ENDDNDALLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLALLLLLFFFFLLLLLLFLLLLLLLLLLLLLLLFLLLLLALNNDNNNDNEENNNNNNNNNDNNNDEDNNDNENNEDEEDDNDNEENNDDNNNNNNNNNNNNNQDENNNNNNENNNNNNDNDENNDNENNNNNNNNENNNNDNNENNNNNNNNNNNNNQNDNNNNDNNNNENDEDNNNDNENNNNNNNNNNNNNNNNNNNNIDNNNNNNNNNNNNNLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMMMMMMMMMMLMMMMMLLMMALLLALLMLLLLMMMMMMMMMMMMMMMMMMMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLMMMMMMMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLNNNNNNNNNNDNDENDDDDDDNENNNNQDEDENNDNENDDQDDNNNNNNNNNNINNNNNNNNNNNNLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLMLLLLLMLLLLMLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLEDDNDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNDEDLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLL","n":["Error","Parse","Parser","ParserBuilder","Translate","UnicodeWordError","ast","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","case_insensitive","clone","clone","clone","clone_into","clone_into","clone_into","crlf","default","dot_matches_new_line","eq","equivalent","escape","escape_into","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hir","ignore_whitespace","into","into","into","into","is_escapeable_character","is_meta_character","is_word_byte","is_word_character","line_terminator","multi_line","nest_limit","new","new","octal","parse","parse","swap_greed","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_is_word_character","type_id","type_id","type_id","type_id","unicode","utf8","utf8","Alnum","Alpha","Alternation","Alternation","Ascii","Ascii","Assertion","Assertion","AssertionKind","Ast","AtLeast","Bell","BinaryOp","Blank","Bounded","Bracketed","CRLF","CaptureIndex","CaptureLimitExceeded","CaptureName","CaptureName","CarriageReturn","CaseInsensitive","ClassAscii","ClassAsciiKind","ClassBracketed","ClassBracketed","ClassEscapeInvalid","ClassPerl","ClassPerl","ClassPerlKind","ClassRangeInvalid","ClassRangeLiteral","ClassSet","ClassSetBinaryOp","ClassSetBinaryOpKind","ClassSetItem","ClassSetRange","ClassSetUnion","ClassUnclosed","ClassUnicode","ClassUnicode","ClassUnicodeKind","ClassUnicodeOpKind","Cntrl","Colon","Comment","Concat","Concat","DecimalEmpty","DecimalInvalid","Difference","Digit","Digit","Dot","DotMatchesNewLine","Empty","Empty","EndLine","EndText","Equal","Err","Error","ErrorKind","EscapeHexEmpty","EscapeHexInvalid","EscapeHexInvalidDigit","EscapeUnexpectedEof","EscapeUnrecognized","Exactly","Flag","Flag","FlagDanglingNegation","FlagDuplicate","FlagRepeatedNegation","FlagUnexpectedEof","FlagUnrecognized","Flags","Flags","FlagsItem","FlagsItemKind","FormFeed","Graph","Group","Group","GroupKind","GroupNameDuplicate","GroupNameEmpty","GroupNameInvalid","GroupNameUnexpectedEof","GroupUnclosed","GroupUnopened","HexBrace","HexFixed","HexLiteralKind","IgnoreWhitespace","Intersection","Item","LineFeed","Literal","Literal","Literal","LiteralKind","Lower","Meta","MultiLine","Named","NamedValue","Negation","NestLimitExceeded","NonCapturing","NotEqual","NotWordBoundary","Octal","OneLetter","OneOrMore","Output","Perl","Position","Print","Punct","Range","Range","Repetition","Repetition","RepetitionCountDecimalEmpty","RepetitionCountInvalid","RepetitionCountUnclosed","RepetitionKind","RepetitionMissing","RepetitionOp","RepetitionRange","SetFlags","Space","Space","Space","Span","Special","SpecialLiteralKind","SpecialWordBoundaryUnclosed","SpecialWordBoundaryUnrecognized","SpecialWordOrRepetitionUnexpectedEof","StartLine","StartText","Superfluous","SwapGreed","SymmetricDifference","Tab","Unicode","Unicode","UnicodeClassInvalid","UnicodeLong","UnicodeShort","Union","UnsupportedBackreference","UnsupportedLookAround","Upper","Verbatim","VerticalTab","Visitor","WithComments","Word","Word","WordBoundary","WordBoundaryEnd","WordBoundaryEndAngle","WordBoundaryEndHalf","WordBoundaryStart","WordBoundaryStartAngle","WordBoundaryStartHalf","X","Xdigit","ZeroOrMore","ZeroOrOne","add_item","alternation","assertion","ast","ast","ast","asts","asts","auxiliary_span","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte","c","capture_index","class_bracketed","class_perl","class_unicode","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","column","comment","comments","concat","digits","dot","drop","drop","empty","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","finish","flag_state","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_name","greedy","group","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ast","into_ast","into_item","is_capturing","is_empty","is_empty","is_equal","is_negated","is_negation","is_one_line","is_valid","is_valid","items","items","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","lhs","line","literal","name","negated","negated","negated","negated","new","new","offset","op","parse","partial_cmp","partial_cmp","pattern","print","push","repetition","rhs","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","splat","start","start","start","start","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","visit","visit_alternation_in","visit_alternation_in","visit_class_set_binary_op_in","visit_class_set_binary_op_in","visit_class_set_binary_op_post","visit_class_set_binary_op_post","visit_class_set_binary_op_pre","visit_class_set_binary_op_pre","visit_class_set_item_post","visit_class_set_item_post","visit_class_set_item_pre","visit_class_set_item_pre","visit_concat_in","visit_concat_in","visit_post","visit_post","visit_pre","visit_pre","with_end","with_start","name","op","value","original","original","original","name","starts_with_p","Parser","ParserBuilder","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","ignore_whitespace","into","into","nest_limit","new","new","octal","parse","parse_with_comments","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Printer","borrow","borrow_mut","fmt","from","into","new","print","try_from","try_into","type_id","Alternation","AnyByte","AnyByteExcept","AnyByteExceptCRLF","AnyByteExceptLF","AnyChar","AnyCharExcept","AnyCharExceptCRLF","AnyCharExceptLF","Bytes","Capture","Capture","CaseFoldError","Class","Class","ClassBytes","ClassBytesIter","ClassBytesRange","ClassUnicode","ClassUnicodeIter","ClassUnicodeRange","Concat","Dot","Empty","End","EndCRLF","EndLF","Err","Error","ErrorKind","Hir","HirKind","InvalidLineTerminator","InvalidUtf8","Literal","Literal","Look","Look","LookSet","LookSetIter","Output","Properties","Repetition","Repetition","Start","StartCRLF","StartLF","Unicode","UnicodeCaseUnavailable","UnicodeNotAllowed","UnicodePerlClassNotFound","UnicodePropertyNotFound","UnicodePropertyValueNotFound","Visitor","WordAscii","WordAsciiNegate","WordEndAscii","WordEndHalfAscii","WordEndHalfUnicode","WordEndUnicode","WordStartAscii","WordStartHalfAscii","WordStartHalfUnicode","WordStartUnicode","WordUnicode","WordUnicodeNegate","alternation","as_char","as_repr","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capture","case_fold_simple","case_fold_simple","case_fold_simple","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","concat","contains","contains_anchor","contains_anchor_crlf","contains_anchor_haystack","contains_anchor_lf","contains_anchor_line","contains_word","contains_word_ascii","contains_word_unicode","default","default","default","difference","difference","dot","drop","empty","empty","empty","empty","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","explicit_captures_len","fail","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_repr","full","greedy","index","insert","intersect","intersect","intersect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_kind","is_alternation_literal","is_ascii","is_ascii","is_empty","is_empty","is_literal","is_utf8","is_utf8","iter","iter","iter","kind","kind","len","len","len","literal","literal","literal","literal","literal","look","look_set","look_set_prefix","look_set_prefix_any","look_set_suffix","look_set_suffix_any","max","maximum_len","maximum_len","maximum_len","maximum_len","memory_usage","min","minimum_len","minimum_len","minimum_len","minimum_len","name","negate","negate","negate","new","new","new","new","next","next","next","partial_cmp","partial_cmp","pattern","print","properties","push","push","ranges","ranges","read_repr","remove","repetition","reversed","set_insert","set_intersect","set_remove","set_subtract","set_union","singleton","span","start","start","start","start","static_explicit_captures_len","sub","sub","subs","subtract","symmetric_difference","symmetric_difference","to_byte_class","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_unicode_class","translate","try_case_fold_simple","try_case_fold_simple","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","visit","visit_alternation_in","visit_alternation_in","visit_concat_in","visit_concat_in","visit_post","visit_post","visit_pre","visit_pre","with","write_repr","ExtractKind","Extractor","Literal","Prefix","Seq","Suffix","as_bytes","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cross_forward","cross_reverse","dedup","default","default","empty","eq","eq","equivalent","equivalent","exact","extend","extract","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_iter","inexact","infinite","into","into","into","into","into_bytes","is_empty","is_empty","is_exact","is_exact","is_finite","is_inexact","is_prefix","is_suffix","keep_first_bytes","keep_first_bytes","keep_last_bytes","keep_last_bytes","kind","len","len","limit_class","limit_literal_len","limit_repeat","limit_total","literals","longest_common_prefix","longest_common_suffix","make_inexact","make_inexact","make_infinite","max_cross_len","max_literal_len","max_union_len","min_literal_len","minimize_by_preference","new","new","optimize_for_prefix_by_preference","optimize_for_suffix_by_preference","partial_cmp","push","rank","reverse","reverse_literals","singleton","sort","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","union_into_empty","Printer","borrow","borrow_mut","fmt","from","into","new","print","try_from","try_into","type_id","Translator","TranslatorBuilder","borrow","borrow","borrow_mut","borrow_mut","build","case_insensitive","clone","clone","clone_into","clone_into","crlf","default","dot_matches_new_line","fmt","fmt","from","from","into","into","line_terminator","multi_line","new","new","swap_greed","to_owned","to_owned","translate","try_from","try_from","try_into","try_into","type_id","type_id","unicode","utf8","Four","One","Three","Two","Utf8Range","Utf8Sequence","Utf8Sequences","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","end","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","len","matches","matches","new","next","partial_cmp","partial_cmp","reverse","start","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"regex_syntax"],[82,"regex_syntax::ast"],[927,"regex_syntax::ast::ClassUnicodeKind"],[930,"regex_syntax::ast::ErrorKind"],[933,"regex_syntax::ast::GroupKind"],[935,"regex_syntax::ast::parse"],[968,"regex_syntax::ast::print"],[979,"regex_syntax::hir"],[1445,"regex_syntax::hir::literal"],[1560,"regex_syntax::hir::print"],[1571,"regex_syntax::hir::translate"],[1608,"regex_syntax::utf8"],[1664,"alloc::string"],[1665,"core::fmt"],[1666,"core::fmt"],[1667,"core::any"],[1668,"core::option"],[1669,"core::cmp"],[1670,"core::fmt"],[1671,"alloc::boxed"],[1672,"core::convert"],[1673,"core::iter::traits::collect"]],"d":["This error type encompasses any error that can be returned …","An error that occurred while translating concrete syntax …","A convenience parser for regular expressions.","A builder for a regular expression parser.","An error that occurred while translating abstract syntax …","An error that occurs when the Unicode-aware <code>\\\\w</code> class is …","Defines an abstract syntax for regular expressions.","","","","","","","","","Build a parser from this configuration with the given …","Enable or disable the case insensitive flag by default.","","","","","","","Enable or disable the CRLF mode flag by default.","","Enable or disable the “dot matches any character” flag …","","","Escapes all regular expression meta characters in <code>text</code>.","Escapes all meta characters in <code>text</code> and writes the result …","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Defines a high-level intermediate (HIR) representation for …","Enable verbose mode in the regular expression.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the given character can be escaped in a …","Returns true if the given character has significance in a …","Returns true if and only if the given character is an …","Returns true if and only if the given character is a …","Sets the line terminator for use with <code>(?u-s:.)</code> and <code>(?-us:.)</code>…","Enable or disable the multi-line matching flag by default.","Set the nesting limit for this parser.","Create a new parser builder with a default configuration.","Create a new parser with a default configuration.","Whether to support octal syntax or not.","A convenience routine for parsing a regex using default …","Parse the regular expression into a high level intermediate","Enable or disable the “swap greed” flag by default.","","","","","","","","","","","","","","Returns true if and only if the given character is a …","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","Converts ranges of Unicode scalar values to equivalent …","When disabled, translation will permit the construction of …","<code>[0-9A-Za-z]</code>","<code>[A-Za-z]</code>","An alternation of regular expressions.","An alternation of regular expressions.","<code>[\\\\x00-\\\\x7F]</code>","An ASCII character class, e.g., <code>[:alnum:]</code> or <code>[:punct:]</code>.","A single zero-width assertion.","A single zero-width assertion.","An assertion kind.","An abstract syntax tree for a single regular expression.","<code>{m,}</code>","Bell, spelled <code>\\\\a</code> (<code>\\\\x07</code>).","A single binary operation (i.e., &amp;&amp;, – or ~~).","<code>[ \\\\t]</code>","<code>{m,n}</code>","A bracketed character class set, which may contain zero or …","<code>R</code>","<code>(a)</code>","The capturing group limit was exceeded.","A capture name.","<code>(?&lt;name&gt;a)</code> or <code>(?P&lt;name&gt;a)</code>","Carriage return, spelled <code>\\\\r</code> (<code>\\\\x0D</code>).","<code>i</code>","An ASCII character class.","The available ASCII character classes.","A bracketed character class, e.g., <code>[a-z0-9]</code>.","A single bracketed character class set, which may contain …","An invalid escape sequence was found in a character class …","A Perl character class.","A single perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","The available Perl character classes.","An invalid character class range was found. An invalid …","An invalid range boundary was found in a character class. …","A character class set.","A Unicode character class set operation.","The type of a Unicode character class set operation.","A single component of a character class set.","A single character class range in a set.","A union of items inside a character class set.","An opening <code>[</code> was found with no corresponding closing <code>]</code>.","A Unicode character class.","A single Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","The available forms of Unicode character classes.","The type of op used in a Unicode character class.","<code>[\\\\x00-\\\\x1F\\\\x7F]</code>","A property set to a specific value using a colon, e.g., …","A comment from a regular expression with an associated …","A concatenation of regular expressions.","A concatenation of regular expressions.","Note that this error variant is no longer used. Namely, a …","An invalid decimal number was given where one was expected.","The difference of two sets, e.g., <code>\\\\pN--[0-9]</code>.","Decimal numbers.","<code>[0-9]</code>","The “any character” class.","<code>s</code>","An empty regex that matches everything.","An empty item.","<code>$</code>","<code>\\\\z</code>","A property set to a specific value, e.g., <code>\\\\p{scx=Katakana}</code>.","An error that visiting an AST might return.","An error that occurred while parsing a regular expression …","The type of an error that occurred while building an AST.","A bracketed hex literal was empty.","A bracketed hex literal did not correspond to a Unicode …","An invalid hexadecimal digit was found.","EOF was found before an escape sequence was completed.","An unrecognized escape sequence.","<code>{m}</code>","A single flag.","A single flag in a group.","A dangling negation was used when setting flags, e.g., <code>i-</code>.","A flag was used twice, e.g., <code>i-i</code>.","The negation operator was used twice, e.g., <code>-i-s</code>.","Expected a flag but got EOF, e.g., <code>(?</code>.","Unrecognized flag, e.g., <code>a</code>.","A group of flags.","A set of flags, e.g., <code>(?is)</code>.","A single item in a group of flags.","The kind of an item in a group of flags.","Form feed, spelled <code>\\\\f</code> (<code>\\\\x0C</code>).","<code>[!-~]</code>","A grouped regular expression.","A grouped regular expression.","The kind of a group.","A duplicate capture name was found.","A capture group name is empty, e.g., <code>(?P&lt;&gt;abc)</code>.","An invalid character was seen for a capture group name. …","A closing <code>&gt;</code> could not be found for a capture group name.","An unclosed group, e.g., <code>(ab</code>.","An unopened group, e.g., <code>ab)</code>.","The literal is written as a hex code with a bracketed …","The literal is written as a hex code with a fixed number …","The type of a Unicode hex literal.","<code>x</code>","The intersection of two sets, e.g., <code>\\\\pN&amp;&amp;[a-z]</code>.","An item, which can be a single literal, range, nested …","Line feed, spelled <code>\\\\n</code> (<code>\\\\x0A</code>).","A single literal expression.","A single character literal, which includes escape …","A single literal.","The kind of a single literal expression.","<code>[a-z]</code>","The literal is written as an escape because it is …","<code>m</code>","A binary property, general category or script. The string …","A property name and an associated value.","A negation operator applied to all subsequent flags in the …","The nest limit was exceeded. The limit stored here is the …","<code>(?:a)</code> and <code>(?i:a)</code>","A property that isn’t a particular value, e.g., …","<code>\\\\B</code>","The literal is written as an octal escape, e.g., <code>\\\\141</code>.","A one letter abbreviated class, e.g., <code>\\\\pN</code>.","<code>+</code>","The result of visiting an AST.","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","A single position in a regular expression.","<code>[ -~]</code>","<code>[!-/:-@\\\\[-</code>{-~]`","A range between two literals.","<code>{m,n}</code>","A repetition operation applied to a regular expression.","A repetition operator applied to an arbitrary regular …","An opening <code>{</code> was not followed by a valid decimal value. …","The range provided in a counted repetition operator is …","An opening <code>{</code> was found with no corresponding closing <code>}</code>.","The kind of a repetition operator.","A repetition operator was applied to a missing …","The repetition operator itself.","A range repetition operator.","A group of flags that is not applied to a particular …","Space, spelled <code>\\\\ </code> (<code>\\\\x20</code>). Note that this can only appear …","Whitespace.","<code>[\\\\t\\\\n\\\\v\\\\f\\\\r ]</code>","Span represents the position information of a single AST …","The literal is written as a specially recognized escape, …","The type of a special literal.","The special word boundary syntax, <code>\\\\b{something}</code>, was used, …","The special word boundary syntax, <code>\\\\b{something}</code>, was used, …","The syntax <code>\\\\b{</code> was observed, but afterwards the end of the …","<code>^</code>","<code>\\\\A</code>","The literal is written as an escape despite the fact that …","<code>U</code>","The symmetric difference of two sets. The symmetric …","Tab, spelled <code>\\\\t</code> (<code>\\\\x09</code>).","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","<code>u</code>","The Unicode class is not valid. This typically occurs when …","A <code>\\\\U</code> prefix. When used without brackets, this form is …","A <code>\\\\u</code> prefix. When used without brackets, this form is …","A union of items.","When octal support is disabled, this error is produced …","When syntax similar to PCRE’s look-around is used, this …","<code>[A-Z]</code>","The literal is written verbatim, e.g., <code>a</code> or <code>☃</code>.","Vertical tab, spelled <code>\\\\v</code> (<code>\\\\x0B</code>).","A trait for visiting an abstract syntax tree (AST) in …","An abstract syntax tree for a singular expression along …","Word characters.","<code>[0-9A-Za-z_]</code>","<code>\\\\b</code>","<code>\\\\b{end}</code>","<code>\\\\&gt;</code> (alias for <code>\\\\b{end}</code>)","<code>\\\\b{end-half}</code>","<code>\\\\b{start}</code>","<code>\\\\&lt;</code> (alias for <code>\\\\b{start}</code>)","<code>\\\\b{start-half}</code>","A <code>\\\\x</code> prefix. When used without brackets, this form is …","<code>[0-9A-Fa-f]</code>","<code>*</code>","<code>?</code>","Add the given item to this sequence of flags.","Create a “alternation” AST item.","Create a “assertion” AST item.","The actual ast.","The regular expression under repetition.","The regular expression in this group.","The alternate regular expressions.","The concatenation regular expressions.","Return an auxiliary span. This span exists only for some …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If this literal was written as a <code>\\\\x</code> hex escape, then this …","The Unicode scalar value corresponding to this literal.","Returns the capture index of this group, if this is a …","Create a “bracketed class” AST item.","Create a “Perl class” AST item.","Create a “Unicode class” AST item.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The approximate column number, starting at <code>1</code>.","The comment text, starting with the first character …","All comments found in the original regular expression.","Create a “concat” AST item.","The number of digits that must be used with this literal …","Create a “dot” AST item.","","","Create an “empty” AST item.","The end byte offset.","The end of this range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","Returns the state of the given flag in this set.","Create a “flags” AST item.","If this group is non-capturing, then this returns the …","The actual sequence of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the corresponding ClassAsciiKind variant for the …","Whether this operation was applied greedily or not.","Create a “group” AST item.","The capture index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return this alternation as an AST.","Return this concatenation as an AST.","Return this union as a character class set item.","Returns true if and only if this group is capturing.","Returns true if and only if this span is empty. That is, …","Return true if and only if this Ast is empty.","Whether the op is an equality op or not.","Returns true if this class has been negated.","Returns true if and only if this item is a negation …","Returns true if and only if this span occurs on a single …","Returns true if and only if this character class range is …","Returns true if and only if this repetition range is valid.","The sequence of items that make up this union.","A sequence of flag items. Each item is either a flag or a …","Return the type of this error.","The kind of this literal.","The kind of Perl class.","The kind of ASCII class.","The kind of Unicode class.","The type of this set. A set is either a normal union of …","The type of this set operation.","The assertion kind, e.g., <code>\\\\b</code> or <code>^</code>.","The type of operation.","The kind of this group.","The kind of this item.","The left hand side of the operation.","The line number, starting at <code>1</code>.","Create a “literal” AST item.","The capture name.","Whether the class is negated or not. e.g., <code>\\\\d</code> is not …","Whether the class is negated or not. e.g., <code>[[:alpha:]]</code> is …","Whether this class is negated or not.","Whether this class is negated or not. e.g., <code>[a]</code> is not …","Create a new span with the given positions.","Create a new position with the given information.","The absolute offset of this position, starting at <code>0</code> from …","The actual operation.","This module provides a regular expression parser.","","","The original pattern string in which this error occurred.","This module provides a regular expression printer for <code>Ast</code>.","Push a new item in this union.","Create a “repetition” AST item.","The right hand side of the operation.","Return the span at which this error occurred.","Return the span of this abstract syntax tree.","Return the span of this character class set.","Return the span of this character class set item.","The span of this comment, including the beginning <code>#</code> and …","The span of this alternation.","The span of this concatenation.","The span of this literal.","The span of this class.","The span of this class.","The span of this class.","The span of this class.","The span of this range.","The span of the items in this operation. e.g., the <code>a-z0-9</code> …","The span of this operation. e.g., the <code>a-z--[h-p]</code> in …","The span of this assertion.","The span of this operation.","The span of this operator. This includes things like <code>+</code>, <code>*?</code> …","The span of this group.","The span of this capture name.","The span of these flags, including the grouping …","The span of this group of flags.","The span of this item.","Create a new span using the given position as the start …","This method is called before beginning traversal of the …","This method is called before beginning traversal of the …","The start byte offset.","The start of this rangeuild a set from a union.","Executes an implementation of <code>Visitor</code> in constant stack …","This method is called between child nodes of an <code>Alternation</code>…","This method is called between child nodes of an <code>Alternation</code>…","This method is called between the left hand and right hand …","This method is called between the left hand and right hand …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetItem</code> before …","This method is called on every <code>ClassSetItem</code> before …","This method is called between child nodes of a …","This method is called between child nodes of a …","This method is called on an <code>Ast</code> after descending all of …","This method is called on an <code>Ast</code> after descending all of …","This method is called on an <code>Ast</code> before descending into …","This method is called on an <code>Ast</code> before descending into …","Create a new span by replacing the ending the position …","Create a new span by replacing the starting the position …","The property name (which may be empty).","The type of Unicode op used to associate <code>name</code> with <code>value</code>.","The property value (which may be empty).","The position of the original flag. The error position …","The position of the original negation operator. The error …","The position of the initial occurrence of the capture …","The capture name.","True if the <code>?P&lt;</code> syntax is used and false if the <code>?&lt;</code> syntax …","A regular expression parser.","A builder for a regular expression parser.","","","","","Build a parser from this configuration with the given …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Enable verbose mode in the regular expression.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set the nesting limit for this parser.","Create a new parser builder with a default configuration.","Create a new parser with a default configuration.","Whether to support octal syntax or not.","Parse the regular expression into an abstract syntax tree.","Parse the regular expression and return an abstract syntax …","","","","","","","","","A printer for a regular expression abstract syntax tree.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","","","","An alternation of expressions.","Matches any byte value.","Matches any byte value except for the <code>u8</code> given.","Matches any byte value except for <code>\\\\r</code> and <code>\\\\n</code>.","Matches any byte value except for <code>\\\\n</code>.","Matches the UTF-8 encoding of any Unicode scalar value.","Matches the UTF-8 encoding of any Unicode scalar value …","Matches the UTF-8 encoding of any Unicode scalar value …","Matches the UTF-8 encoding of any Unicode scalar value …","A set of characters represented by arbitrary bytes (one …","The high-level intermediate representation for a capturing …","A capturing group, which contains a sub-expression.","An error that occurs when Unicode-aware simple case …","The high-level intermediate representation of a character …","A single character class that matches any of the …","A set of characters represented by arbitrary bytes.","An iterator over all ranges in a byte character class.","A single range of characters represented by arbitrary …","A set of characters represented by Unicode scalar values.","An iterator over all ranges in a Unicode character class.","A single range of characters represented by Unicode scalar …","A concatenation of expressions.","A type describing the different flavors of <code>.</code>.","The empty regular expression, which matches everything, …","Match the end of text. Specifically, this matches at the …","Match the end of a line or the end of text. Specifically, …","Match the end of a line or the end of text. Specifically, …","An error that visiting an HIR might return.","An error that can occur while translating an <code>Ast</code> to a <code>Hir</code>.","The type of an error that occurred while building an <code>Hir</code>.","A high-level intermediate representation (HIR) for a …","The underlying kind of an arbitrary <code>Hir</code> expression.","This error occurs when one uses a non-ASCII byte for a …","This error occurs when translating a pattern that could …","The high-level intermediate representation of a literal.","A literalstring that matches exactly these bytes.","The high-level intermediate representation for a …","A look-around assertion. A look-around match always has …","A set of look-around assertions.","An iterator over all look-around assertions in a <code>LookSet</code>.","The result of visiting an HIR.","A type that collects various properties of an HIR value.","The high-level intermediate representation of a repetition …","A repetition operation applied to a sub-expression.","Match the beginning of text. Specifically, this matches at …","Match the beginning of a line or the beginning of text. …","Match the beginning of a line or the beginning of text. …","A set of characters represented by Unicode scalar values.","This occurs when the Unicode simple case mapping tables …","This error occurs when a Unicode feature is used when …","This occurs when a Unicode-aware Perl character class (<code>\\\\w</code>, …","This occurs when an unrecognized Unicode property name …","This occurs when an unrecognized Unicode property value …","A trait for visiting the high-level IR (HIR) in depth …","Match an ASCII-only word boundary. That is, this matches a …","Match an ASCII-only negation of a word boundary.","Match the end of an ASCII-only word boundary. That is, …","Match the end half of an ASCII-only word boundary. That …","Match the end half of a Unicode word boundary. That is, …","Match the end of a Unicode word boundary. That is, this …","Match the start of an ASCII-only word boundary. That is, …","Match the start half of an ASCII-only word boundary. That …","Match the start half of a Unicode word boundary. That is, …","Match the start of a Unicode word boundary. That is, this …","Match a Unicode-aware word boundary. That is, this matches …","Match a Unicode-aware negation of a word boundary.","Returns the alternation of the given expressions.","Returns a convenient single codepoint representation of …","Return the underlying representation of this look-around …","The underlying representation this set is exposed to make …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a capture HIR expression.","Apply Unicode simple case folding to this character class, …","Expand this character class such that it contains all case …","Expand this character class such that it contains all case …","Creates a class HIR expression. The class may either be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the concatenation of the given expressions.","Returns true if and only if the given look-around …","Returns true if and only if this set contains any anchor …","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any word …","Returns true if and only if this set contains any ASCII …","Returns true if and only if this set contains any Unicode …","","","","Subtract the given character class from this character …","Subtract the given byte class from this byte class, in …","Returns an HIR expression for <code>.</code>.","","Returns an empty HIR expression.","Create a new class with no ranges.","Create a new class with no ranges.","Create an empty set of look-around assertions.","Return the end of this range.","Return the end of this range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the total number of explicit capturing groups in …","Returns an HIR expression that can never match anything. …","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Given the underlying representation of a <code>Look</code> value, …","Create a full set of look-around assertions.","Whether this repetition operator is greedy or not. A …","The capture index of the capture.","Return a new set that is equivalent to the original, but …","Intersect this character class with the given character …","Intersect this byte class with the given byte class, in …","Returns a new set that is the intersection of this and the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Consumes ownership of this HIR expression and returns its …","Return true if and only if this HIR is either a simple …","Returns true if and only if this character class will …","Returns true if and only if this character class will …","Returns true if and only if this character class is empty. …","Returns true if and only if this set is empty.","Return true if and only if this HIR is a simple literal. …","Returns true if and only if this character class will only …","Return true if and only if the corresponding HIR will …","Return an iterator over all ranges in this class.","Return an iterator over all ranges in this class.","Returns an iterator over all of the look-around assertions …","Return the type of this error.","Returns a reference to the underlying HIR kind.","Returns the number of codepoints in this range.","Returns the number of bytes in this range.","Returns the total number of look-around assertions in this …","Provides literal extraction from <code>Hir</code> expressions.","Creates a literal HIR expression.","If this class consists of exactly one element (whether a …","If this class consists of exactly one codepoint, then …","If this class consists of exactly one byte, then return it …","Creates a look-around assertion HIR expression.","Returns a set of all look-around assertions that appear at …","Returns a set of all look-around assertions that appear as …","Returns a set of all look-around assertions that appear as …","Returns a set of all look-around assertions that appear as …","Returns a set of all look-around assertions that appear as …","The maximum range of the repetition.","Returns the length, in bytes, of the longest string …","Returns the length, in bytes, of the longest string …","Returns the length, in bytes, of the longest string …","Returns the length (in bytes) of the longest string …","Returns the total amount of heap memory usage, in bytes, …","The minimum range of the repetition.","Returns the length, in bytes, of the smallest string …","Returns the length, in bytes, of the smallest string …","Returns the length, in bytes, of the smallest string …","Returns the length (in bytes) of the smallest string …","The name of the capture, if it exists.","Negate this character class in place.","Negate this character class.","Negate this byte class.","Create a new class from a sequence of ranges.","Create a new Unicode scalar value range for a character …","Create a new class from a sequence of ranges.","Create a new byte range for a character class.","","","","","","The original pattern string in which this error occurred.","This module provides a regular expression printer for <code>Hir</code>.","Returns the properties computed for this <code>Hir</code>.","Add a new range to this set.","Add a new range to this set.","Return the underlying ranges as a slice.","Return the underlying ranges as a slice.","Return a <code>LookSet</code> from the slice given as a native endian …","Return a new set that is equivalent to the original, but …","Creates a repetition HIR expression.","Flip the look-around assertion to its equivalent for …","Updates this set in place with the result of inserting the …","Updates this set in place with the result of intersecting …","Updates this set in place with the result of removing the …","Updates this set in place with the result of subtracting …","Updates this set in place with the result of unioning it …","Create a look-around set containing the look-around …","Return the span at which this error occurred.","This method is called before beginning traversal of the …","This method is called before beginning traversal of the …","Return the start of this range.","Return the start of this range.","Returns the total number of explicit capturing groups that …","The expression inside the capturing group, which may be …","The expression being repeated.","Returns a slice of this kind’s sub-expressions, if any.","Returns a new set that is the result of subtracting the …","Compute the symmetric difference of the given character …","Compute the symmetric difference of the given byte …","If this class consists of only ASCII ranges, then return …","","","","","","","","","","","","","","","","","","","","","","If this class consists of only ASCII ranges, then return …","Defines a translator that converts an <code>Ast</code> to an <code>Hir</code>.","Apply Unicode simple case folding to this character class, …","Expand this character class such that it contains all case …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Union this character class with the given character class, …","Union this byte class with the given byte class, in place.","Returns a new set of properties that corresponds to the …","Returns a new set that is the union of this and the one …","Executes an implementation of <code>Visitor</code> in constant stack …","This method is called between child nodes of an …","This method is called between child nodes of an …","This method is called between child nodes of a …","This method is called between child nodes of a …","This method is called on an <code>Hir</code> after descending all of …","This method is called on an <code>Hir</code> after descending all of …","This method is called on an <code>Hir</code> before descending into …","This method is called on an <code>Hir</code> before descending into …","Returns a new repetition with the same <code>min</code>, <code>max</code> and <code>greedy</code> …","Write a <code>LookSet</code> as a native endian 32-bit integer to the …","The kind of literals to extract from an <code>Hir</code> expression.","Extracts prefix or suffix literal sequences from <code>Hir</code> …","A single literal extracted from an <code>Hir</code> expression.","Extracts only prefix literals from a regex.","A sequence of literals.","Extracts only suffix literals from a regex.","Returns the bytes in this literal.","","","","","","","","","","","","","","","","","","","Modify this sequence to contain the cross product between …","Modify this sequence to contain the cross product between …","Deduplicate adjacent equivalent literals in this sequence.","","","Returns an empty sequence.","","","","","Returns a new exact literal containing the bytes given.","Extend this literal with the literal given.","Execute the extractor and return a sequence of literals.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns a new inexact literal containing the bytes given.","Returns a sequence of literals without a finite size and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Yields ownership of the bytes inside this literal.","Returns true if and only if this sequence is finite and …","Returns true if and only if this literal has zero bytes.","Returns true if and only if all literals in this sequence …","Returns true if and only if this literal is exact.","Returns true if this sequence is finite.","Returns true if and only if all literals in this sequence …","Returns true if this kind is the <code>Prefix</code> variant.","Returns true if this kind is the <code>Suffix</code> variant.","Trims all literals in this seq such that only the first <code>len</code>…","Trims this literal such that only the first <code>len</code> bytes …","Trims all literals in this seq such that only the last <code>len</code> …","Trims this literal such that only the last <code>len</code> bytes …","Set the kind of literal sequence to extract from an <code>Hir</code> …","Returns the number of literals in this sequence if the …","Returns the length of this literal in bytes.","Configure a limit on the length of the sequence that is …","Configure a limit on the maximum length of any literal in …","Configure a limit on the total number of repetitions that …","Configure a limit on the total number of literals that …","If this is a finite sequence, return its members as a …","Returns the longest common prefix from this seq.","Returns the longest common suffix from this seq.","Make all of the literals in this sequence inexact.","Marks this literal as inexact.","Converts this sequence to an infinite sequence.","Return the maximum length of the sequence that would …","Returns the length of the longest literal in this sequence.","Return the maximum length of the sequence that would …","Returns the length of the shortest literal in this …","Shrinks this seq to its minimal size while respecting the …","Create a new extractor with a default configuration.","Returns a sequence of exact literals from the given byte …","Optimizes this seq while treating its literals as prefixes …","Optimizes this seq while treating its literals as suffixes …","","Push a literal to the end of this sequence.","Returns the “rank” of the given byte.","Reverse the bytes in this literal.","Reverses all of the literals in this sequence.","Returns a sequence containing a single literal.","Sorts this sequence of literals lexicographically.","","","","","","","","","","","","","","","","","Unions the <code>other</code> sequence into this one.","Unions the <code>other</code> sequence into this one by splice the <code>other</code>","A printer for a regular expression’s high-level …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","","","","A translator maps abstract syntax to a high level …","A builder for constructing an AST-&gt;HIR translator.","","","","","Build a translator using the current configuration.","Enable or disable the case insensitive flag (<code>i</code>) by default.","","","","","Enable or disable the CRLF mode flag (<code>R</code>) by default.","","Enable or disable the “dot matches any character” flag …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sets the line terminator for use with <code>(?u-s:.)</code> and <code>(?-us:.)</code>…","Enable or disable the multi-line matching flag (<code>m</code>) by …","Create a new translator builder with a default c …","Create a new translator using the default configuration.","Enable or disable the “swap greed” flag (<code>U</code>) by default.","","","Translate the given abstract syntax tree (AST) into a high …","","","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","When disabled, translation will permit the construction of …","Four successive byte ranges.","One byte range.","Three successive byte ranges.","Two successive byte ranges.","A single inclusive range of UTF-8 bytes.","Utf8Sequence represents a sequence of byte ranges.","An iterator over ranges of matching UTF-8 byte sequences.","Returns the underlying sequence of byte ranges as a slice.","","","","","","","","","","","","","End of byte range (inclusive).","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the number of byte ranges in this sequence.","Returns true if and only if a prefix of <code>bytes</code> matches this …","Returns true if and only if the given byte is in this …","Create a new iterator over UTF-8 byte ranges for the …","","","","Reverses the ranges in this sequence.","Start of byte range (inclusive).","","","","","","","","","","",""],"i":[0,4,0,0,4,0,0,4,1,2,10,4,1,2,10,1,1,4,1,2,4,1,2,1,1,1,4,4,0,0,4,4,1,2,10,10,4,4,4,1,2,10,0,1,4,1,2,10,0,0,0,0,1,1,1,1,2,1,0,2,1,4,1,2,4,10,4,1,2,10,4,1,2,10,0,4,1,2,10,1,0,1,42,42,0,24,42,46,0,24,0,0,55,38,45,42,55,46,60,56,32,0,56,38,60,0,0,0,24,32,0,24,0,32,32,0,0,0,0,0,0,32,0,24,0,0,42,44,0,0,24,32,32,50,40,42,24,60,24,46,51,51,44,62,0,0,32,32,32,32,32,55,0,59,32,32,32,32,32,0,24,0,0,38,42,0,24,0,32,32,32,32,32,32,37,37,0,60,50,45,38,0,24,46,0,42,37,60,43,43,59,32,56,44,51,37,43,54,62,46,0,42,42,46,54,0,24,32,32,32,0,32,0,0,0,38,40,42,0,37,0,32,32,32,51,51,37,60,50,38,46,60,32,39,39,46,32,32,42,37,38,0,0,40,42,51,51,51,51,51,51,51,39,42,54,54,19,24,24,34,52,28,23,36,11,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,27,27,28,24,24,24,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,26,33,33,35,34,24,39,24,24,45,24,26,47,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,62,19,24,28,58,11,11,32,32,26,33,34,35,24,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,42,52,24,57,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,23,36,48,28,26,24,44,31,59,26,47,55,48,19,11,27,30,41,31,29,49,25,53,28,20,49,33,24,57,30,41,31,29,26,33,33,52,0,26,33,11,0,48,24,49,11,24,45,46,35,23,36,27,30,41,31,29,47,48,49,25,52,53,28,57,58,19,20,26,62,62,26,47,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,24,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,45,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,26,26,101,101,101,102,103,104,105,105,0,0,63,64,63,64,63,63,64,63,64,63,63,64,63,64,63,63,64,63,63,64,63,64,64,63,64,63,64,63,64,63,64,0,65,65,65,65,65,65,65,65,65,65,74,79,79,79,79,79,79,79,79,70,0,74,0,0,74,0,0,0,0,0,0,74,0,74,68,68,68,90,0,0,0,0,73,73,0,74,0,74,0,0,90,0,0,74,68,68,68,70,73,73,73,73,73,0,68,68,68,68,68,68,68,68,68,68,68,68,16,68,68,81,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,16,70,71,72,16,12,73,16,74,75,70,71,76,72,77,68,69,78,79,80,81,82,12,73,16,74,75,70,71,76,72,77,68,69,78,79,80,81,82,76,77,16,81,81,81,81,81,81,81,81,81,76,77,81,71,72,16,16,16,71,72,81,76,77,12,73,16,74,75,70,71,76,72,77,68,69,78,79,80,81,12,73,16,74,75,70,71,76,72,77,68,69,78,79,80,81,80,16,90,12,12,73,73,16,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,85,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,68,81,78,69,81,71,72,81,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,83,84,82,16,80,71,72,70,81,80,70,80,71,72,81,12,16,76,77,81,0,16,70,71,72,16,80,80,80,80,80,78,70,71,72,80,80,78,70,71,72,80,69,70,71,72,71,76,72,77,83,84,82,76,77,12,0,16,71,72,71,72,81,81,16,68,81,81,81,81,81,81,12,90,90,76,77,80,69,78,74,81,71,72,71,12,73,16,74,75,70,71,76,72,77,68,69,78,79,80,81,82,12,73,16,85,72,0,70,71,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,71,72,80,81,0,90,90,90,90,90,90,90,90,78,81,0,0,0,93,0,93,91,91,92,93,94,91,92,93,94,91,92,93,94,91,92,93,94,91,91,94,94,94,92,93,94,94,91,94,91,91,91,92,92,93,94,91,92,93,94,91,91,91,94,91,94,92,93,94,91,91,94,91,94,91,94,94,93,93,94,91,94,91,92,94,91,92,92,92,92,94,94,94,94,91,94,94,94,94,94,94,92,94,94,94,91,94,0,91,94,94,94,92,93,94,91,92,93,94,91,92,93,94,91,92,93,94,91,94,94,0,95,95,95,95,95,95,95,95,95,95,0,0,96,97,96,97,96,96,96,97,96,97,96,96,96,96,97,96,97,96,97,96,96,96,97,96,96,97,97,96,97,96,97,96,97,96,96,98,98,98,98,0,0,0,98,98,99,100,98,99,100,98,99,98,99,98,99,99,98,99,98,99,98,99,100,98,99,100,98,99,100,98,100,98,98,99,100,100,98,99,98,99,98,99,98,99,100,98,99,100,98,99,100],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[1,3],1],[4,4],[1,1],[2,2],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[1,3],1],[[],1],[[1,3],1],[[4,4],3],[[-1,-2],3,[],[]],[6,7],[[6,7],5],[[4,8],9],[[4,8],9],[[1,8],9],[[2,8],9],[[10,8],9],[[10,8],9],[-1,-1,[]],[11,4],[12,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[1,3],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,3],[13,3],[14,3],[13,3],[[1,14],1],[[1,3],1],[[1,15],1],[[],1],[[],2],[[1,3],1],[6,[[17,[16,4]]]],[[2,6],[[17,[16,4]]]],[[1,3],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[-1,7,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[13,[[17,[3,10]]]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[1,3],1],0,[[1,3],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[19,20],[[22,[21]]]],[23,24],[25,24],0,0,0,0,0,[11,[[22,[26]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,[[22,[14]]]],0,[28,[[22,[15]]]],[29,24],[30,24],[31,24],[11,11],[32,32],[26,26],[33,33],[34,34],[35,35],[24,24],[23,23],[36,36],[27,27],[37,37],[38,38],[39,39],[30,30],[40,40],[41,41],[42,42],[31,31],[43,43],[44,44],[29,29],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[25,25],[51,51],[52,52],[53,53],[54,54],[55,55],[28,28],[56,56],[57,57],[58,58],[19,19],[20,20],[59,59],[60,60],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[26,26],61],[[33,33],61],0,0,0,[36,24],[39,15],[26,24],[24,5],[45,5],[26,24],0,0,[[11,11],3],[[32,32],3],[[26,26],3],[[33,33],3],[[34,34],3],[[35,35],3],[[24,24],3],[[23,23],3],[[36,36],3],[[27,27],3],[[37,37],3],[[38,38],3],[[39,39],3],[[30,30],3],[[40,40],3],[[41,41],3],[[42,42],3],[[31,31],3],[[43,43],3],[[44,44],3],[[29,29],3],[[45,45],3],[[46,46],3],[[47,47],3],[[48,48],3],[[49,49],3],[[50,50],3],[[25,25],3],[[51,51],3],[[52,52],3],[[53,53],3],[[54,54],3],[[55,55],3],[[28,28],3],[[56,56],3],[[57,57],3],[[58,58],3],[[19,19],3],[[20,20],3],[[59,59],3],[[60,60],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[-1,17,[]],[[19,60],[[22,[3]]]],[58,24],[28,[[22,[19]]]],0,[[11,8],9],[[11,8],9],[[32,8],9],[[32,8],9],[[26,8],9],[[33,8],9],[[34,8],9],[[35,8],9],[[24,8],9],[[24,8],9],[[23,8],9],[[36,8],9],[[27,8],9],[[37,8],9],[[38,8],9],[[39,8],9],[[30,8],9],[[40,8],9],[[41,8],9],[[42,8],9],[[31,8],9],[[43,8],9],[[44,8],9],[[29,8],9],[[45,8],9],[[46,8],9],[[47,8],9],[[48,8],9],[[49,8],9],[[50,8],9],[[25,8],9],[[51,8],9],[[52,8],9],[[53,8],9],[[54,8],9],[[55,8],9],[[28,8],9],[[56,8],9],[[57,8],9],[[58,8],9],[[19,8],9],[[20,8],9],[[59,8],9],[[60,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,[[22,[42]]]],0,[28,24],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,24],[36,24],[48,46],[28,3],[26,3],[24,3],[44,3],[31,3],[59,3],[26,3],[47,3],[55,3],0,0,[11,32],0,0,0,0,0,0,0,0,0,0,0,0,[27,24],0,0,0,0,0,[[33,33],26],[[21,21,21],33],0,0,0,[[26,26],[[22,[61]]]],[[33,33],[[22,[61]]]],[11,6],0,[[48,46],5],[52,24],0,[11,26],[24,26],[45,26],[46,26],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[33,26],[-1,5,[]],[-1,5,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[48,45],[[24,-1],17,62],[-1,[[17,[5]]],[]],[-1,[[17,[5]]],[]],[[-1,49],[[17,[5]]],[]],[[-1,49],[[17,[5]]],[]],[[-1,49],[[17,[5]]],[]],[[-1,49],[[17,[5]]],[]],[[-1,49],[[17,[5]]],[]],[[-1,49],[[17,[5]]],[]],[[-1,46],[[17,[5]]],[]],[[-1,46],[[17,[5]]],[]],[[-1,46],[[17,[5]]],[]],[[-1,46],[[17,[5]]],[]],[-1,[[17,[5]]],[]],[-1,[[17,[5]]],[]],[[-1,24],[[17,[5]]],[]],[[-1,24],[[17,[5]]],[]],[[-1,24],[[17,[5]]],[]],[[-1,24],[[17,[5]]],[]],[[26,33],26],[[26,33],26],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[63,64],[63,63],[64,64],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],63],[[63,8],9],[[64,8],9],[-1,-1,[]],[-1,-1,[]],[[63,3],63],[-1,-2,[],[]],[-1,-2,[],[]],[[63,15],63],[[],63],[[],64],[[63,3],63],[[64,6],[[17,[24,11]]]],[[64,6],[[17,[34,11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[65,8],9],[-1,-1,[]],[-1,-2,[],[]],[[],65],[[65,24,-1],9,66],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[67,[16]]],16],[68,13],[68,15],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[69,16],[70,5],[71,5],[72,5],[70,16],[12,12],[73,73],[16,16],[74,74],[75,75],[70,70],[71,71],[76,76],[72,72],[77,77],[68,68],[69,69],[78,78],[79,79],[80,80],[81,81],[82,82],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[76,76],61],[[77,77],61],[[[67,[16]]],16],[[81,68],3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[[],76],[[],77],[[],81],[[71,71],5],[[72,72],5],[79,16],[16,5],[[],16],[[],71],[[],72],[[],81],[76,13],[77,14],[[12,12],3],[[73,73],3],[[16,16],3],[[74,74],3],[[75,75],3],[[70,70],3],[[71,71],3],[[76,76],3],[[72,72],3],[[77,77],3],[[68,68],3],[[69,69],3],[[78,78],3],[[79,79],3],[[80,80],3],[[81,81],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[80,21],[[],16],[-1,17,[]],[[12,8],9],[[12,8],9],[[73,8],9],[[73,8],9],[[16,8],9],[[16,8],9],[[74,8],9],[[75,8],9],[[70,8],9],[[71,8],9],[[83,8],9],[[76,8],9],[[72,8],9],[[84,8],9],[[77,8],9],[[68,8],9],[[69,8],9],[[78,8],9],[[79,8],9],[[80,8],9],[[81,8],9],[[82,8],9],[[85,8],9],[[85,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[15,[[22,[68]]]],[[],81],0,0,[[81,68],81],[[71,71],5],[[72,72],5],[[81,81],81],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,74],[80,3],[71,3],[72,3],[70,3],[81,3],[80,3],[70,3],[80,3],[71,83],[72,84],[81,82],[12,73],[16,74],[76,21],[77,21],[81,21],0,[-1,16,[[88,[[87,[[86,[14]]]]]]]],[70,[[22,[[67,[14]]]]]],[71,[[22,[[67,[14]]]]]],[72,[[22,[[67,[14]]]]]],[68,16],[80,81],[80,81],[80,81],[80,81],[80,81],0,[70,[[22,[21]]]],[71,[[22,[21]]]],[72,[[22,[21]]]],[80,[[22,[21]]]],[80,21],0,[70,[[22,[21]]]],[71,[[22,[21]]]],[72,[[22,[21]]]],[80,[[22,[21]]]],0,[70,5],[71,5],[72,5],[-1,71,89],[[13,13],76],[-1,72,89],[[14,14],77],[83,[[22,[76]]]],[84,[[22,[77]]]],[82,[[22,[68]]]],[[76,76],[[22,[61]]]],[[77,77],[[22,[61]]]],[12,6],0,[16,80],[[71,76],5],[[72,77],5],[71,[[86,[76]]]],[72,[[86,[77]]]],[[[86,[14]]],81],[[81,68],81],[78,16],[68,68],[[81,68],5],[[81,81],5],[[81,68],5],[[81,81],5],[[81,81],5],[68,81],[12,26],[-1,5,[]],[-1,5,[]],[76,13],[77,14],[80,[[22,[21]]]],0,0,[74,[[86,[16]]]],[[81,81],81],[[71,71],5],[[72,72],5],[71,[[22,[72]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[72,[[22,[71]]]],0,[70,[[17,[5,85]]]],[71,[[17,[5,85]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[71,71],5],[[72,72],5],[-1,80,89],[[81,81],81],[[16,-1],17,90],[-1,[[17,[5]]],[]],[-1,[[17,[5]]],[]],[-1,[[17,[5]]],[]],[-1,[[17,[5]]],[]],[[-1,16],[[17,[5]]],[]],[[-1,16],[[17,[5]]],[]],[[-1,16],[[17,[5]]],[]],[[-1,16],[[17,[5]]],[]],[[78,16],78],[[81,[86,[14]]],5],0,0,0,0,0,0,[91,[[86,[14]]]],[91,[[86,[14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[92,92],[93,93],[94,94],[91,91],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[91,91],61],[[94,94],5],[[94,94],5],[94,5],[[],92],[[],93],[[],94],[[94,94],3],[[91,91],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[-1,91,[[88,[[67,[14]]]]]],[[91,91],5],[[92,16],94],[[92,8],9],[[93,8],9],[[94,8],9],[[91,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[14,91],[-1,-1,[]],[13,91],[-1,94,89],[-1,91,[[88,[[67,[14]]]]]],[[],94],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[91,[[67,[14]]]],[94,3],[91,3],[94,3],[91,3],[94,3],[94,3],[93,3],[93,3],[[94,21],5],[[91,21],5],[[94,21],5],[[91,21],5],[[92,93],92],[94,[[22,[21]]]],[91,21],[[92,21],92],[[92,21],92],[[92,21],92],[[92,21],92],[94,[[22,[[86,[91]]]]]],[94,[[22,[[86,[14]]]]]],[94,[[22,[[86,[14]]]]]],[94,5],[91,5],[94,5],[[94,94],[[22,[21]]]],[94,[[22,[21]]]],[[94,94],[[22,[21]]]],[94,[[22,[21]]]],[94,5],[[],92],[-1,94,89],[94,5],[94,5],[[91,91],[[22,[61]]]],[[94,91],5],[14,14],[91,5],[94,5],[91,94],[94,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[94,94],5],[[94,94],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[[95,8],9],[-1,-1,[]],[-1,-2,[],[]],[[],95],[[95,16,-1],9,66],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[96,97],[[96,3],96],[96,96],[97,97],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[96,3],96],[[],96],[[96,3],96],[[96,8],9],[[97,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[96,14],96],[[96,3],96],[[],96],[[],97],[[96,3],96],[-1,-2,[],[]],[-1,-2,[],[]],[[97,6,24],[[17,[16,12]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[[96,3],96],[[96,3],96],0,0,0,0,0,0,0,[98,[[86,[99]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[98,98],[99,99],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[98,98],61],[[99,99],61],0,[[98,98],3],[[99,99],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[98,8],9],[[99,8],9],[[100,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[98],[-1,-2,[],[]],[98,21],[[98,[86,[14]]],3],[[99,14],3],[[13,13],100],[100,22],[[98,98],[[22,[61]]]],[[99,99],[[22,[61]]]],[98,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]]],"c":[],"p":[[3,"ParserBuilder",0],[3,"Parser",0],[15,"bool"],[4,"Error",0],[15,"tuple"],[15,"str"],[3,"String",1664],[3,"Formatter",1665],[6,"Result",1665],[3,"UnicodeWordError",0],[3,"Error",82],[3,"Error",979],[15,"char"],[15,"u8"],[15,"u32"],[3,"Hir",979],[4,"Result",1666],[3,"TypeId",1667],[3,"Flags",82],[3,"FlagsItem",82],[15,"usize"],[4,"Option",1668],[3,"Alternation",82],[4,"Ast",82],[3,"Assertion",82],[3,"Span",82],[3,"Literal",82],[3,"Group",82],[3,"ClassBracketed",82],[3,"ClassPerl",82],[3,"ClassUnicode",82],[4,"ErrorKind",82],[3,"Position",82],[3,"WithComments",82],[3,"Comment",82],[3,"Concat",82],[4,"LiteralKind",82],[4,"SpecialLiteralKind",82],[4,"HexLiteralKind",82],[4,"ClassPerlKind",82],[3,"ClassAscii",82],[4,"ClassAsciiKind",82],[4,"ClassUnicodeKind",82],[4,"ClassUnicodeOpKind",82],[4,"ClassSet",82],[4,"ClassSetItem",82],[3,"ClassSetRange",82],[3,"ClassSetUnion",82],[3,"ClassSetBinaryOp",82],[4,"ClassSetBinaryOpKind",82],[4,"AssertionKind",82],[3,"Repetition",82],[3,"RepetitionOp",82],[4,"RepetitionKind",82],[4,"RepetitionRange",82],[4,"GroupKind",82],[3,"CaptureName",82],[3,"SetFlags",82],[4,"FlagsItemKind",82],[4,"Flag",82],[4,"Ordering",1669],[8,"Visitor",82],[3,"ParserBuilder",935],[3,"Parser",935],[3,"Printer",968],[8,"Write",1665],[3,"Vec",1670],[4,"Look",979],[3,"Capture",979],[4,"Class",979],[3,"ClassUnicode",979],[3,"ClassBytes",979],[4,"ErrorKind",979],[4,"HirKind",979],[3,"Literal",979],[3,"ClassUnicodeRange",979],[3,"ClassBytesRange",979],[3,"Repetition",979],[4,"Dot",979],[3,"Properties",979],[3,"LookSet",979],[3,"LookSetIter",979],[3,"ClassUnicodeIter",979],[3,"ClassBytesIter",979],[3,"CaseFoldError",979],[15,"slice"],[3,"Box",1671],[8,"Into",1672],[8,"IntoIterator",1673],[8,"Visitor",979],[3,"Literal",1445],[3,"Extractor",1445],[4,"ExtractKind",1445],[3,"Seq",1445],[3,"Printer",1560],[3,"TranslatorBuilder",1571],[3,"Translator",1571],[4,"Utf8Sequence",1608],[3,"Utf8Range",1608],[3,"Utf8Sequences",1608],[13,"NamedValue",927],[13,"FlagDuplicate",930],[13,"FlagRepeatedNegation",930],[13,"GroupNameDuplicate",930],[13,"CaptureName",933]]},\
"rspirv":{"doc":"Library APIs for SPIR-V module processing functionalities.","t":"AAAACANNINNNINNNENDNNINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEGEDNNNNNNNNNNNNNNNLLLLKLLLLLLLLLLLLLKKLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNDNDNNNNNNNNNENNNNNNNDNNNNNNNNNNNEDNNNNNNNNNNDNNNNNNDDNNENNNNNNNNNNNNNNNNNLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLMLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMLLLLLLFFLLLLLLLMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLNNNNDNNNNDNNNNNDNNNNNNNNNNDNNNNNNNNDNNNNNDEENNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMMMMMMALLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFENEDNNNNNNNNENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNENNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDENNNNNNNNNNNAALLLLLLLLLLLLLLLLLMLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLALCLALLLLMLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDDDDDDDDDDDDMMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDDDDDMMMMLLLLLLLLLLMLLMMMLLMMMLLLLLLLLMMLLLLLMMMMMMMMLLLLLLLLLLLLLLLLMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["binary","dr","grammar","lift","spirv","sr","AccessQualifierUnknown","AddressingModelUnknown","Assemble","BuiltInUnknown","CapabilityUnknown","Complete","Consumer","ConsumerError","ConsumerStopRequested","Continue","DecodeError","DecodeStringFailed","Decoder","DecorationUnknown","DimUnknown","Disassemble","EndiannessUnsupported","Err","Error","ExecutionModeUnknown","ExecutionModelUnknown","FPFastMathModeUnknown","FPRoundingModeUnknown","FragmentShadingRateUnknown","FunctionControlUnknown","FunctionParameterAttributeUnknown","GroupOperationUnknown","HeaderIncomplete","HeaderIncorrect","ImageChannelDataTypeUnknown","ImageChannelOrderUnknown","ImageFormatUnknown","ImageOperandsUnknown","KernelEnqueueFlagsUnknown","KernelProfilingInfoUnknown","LimitReached","LinkageTypeUnknown","LoopControlUnknown","MemoryAccessUnknown","MemoryModelUnknown","MemorySemanticsUnknown","Ok","OpcodeUnknown","OperandError","OperandExceeded","OperandExpected","ParseAction","ParseResult","ParseState","Parser","RayFlagsUnknown","RayQueryCandidateIntersectionTypeUnknown","RayQueryCommittedIntersectionTypeUnknown","RayQueryIntersectionUnknown","SamplerAddressingModeUnknown","SamplerFilterModeUnknown","ScopeUnknown","SelectionControlUnknown","SourceLanguageUnknown","SpecConstantOpIntegerIncorrect","Stop","StorageClassUnknown","StreamExpected","TypeUnsupported","WordCountZero","access_qualifier","addressing_model","assemble","assemble","assemble_into","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","built_in","capability","clear_limit","consume_header","consume_instruction","decoration","dim","disassemble","eq","execution_mode","execution_model","ext_inst_integer","finalize","float32","float64","fmt","fmt","fmt","fmt","fmt","fp_fast_math_mode","fp_rounding_mode","fragment_shading_rate","from","from","from","from","from","from","function_control","function_parameter_attribute","group_operation","has_limit","id","image_channel_data_type","image_channel_order","image_format","image_operands","initialize","int32","int64","into","into","into","into","into","kernel_enqueue_flags","kernel_profiling_info","limit_reached","linkage_type","loop_control","memory_access","memory_model","memory_semantics","new","new","offset","parse","parse_bytes","parse_words","ray_flags","ray_query_candidate_intersection_type","ray_query_committed_intersection_type","ray_query_intersection","sampler_addressing_mode","sampler_filter_mode","scope","selection_control","set_limit","source_language","storage_class","string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","word","words","AccessQualifier","AddressingModel","Begin","Block","BlockNotFound","Builder","BuiltIn","Capability","Decoration","DetachedBlock","DetachedFunctionParameter","DetachedInstruction","Dim","EmptyInstructionList","End","Error","ExecutionMode","ExecutionModel","FPFastMathMode","FPRoundingMode","FragmentShadingRate","FromBegin","FromEnd","Function","FunctionControl","FunctionNotFound","FunctionParameterAttribute","GroupOperation","IdMemorySemantics","IdRef","IdScope","ImageChannelDataType","ImageChannelOrder","ImageFormat","ImageOperands","InsertPoint","Instruction","KernelEnqueueFlags","KernelProfilingInfo","LinkageType","LiteralExtInstInteger","LiteralFloat32","LiteralFloat64","LiteralInt32","LiteralInt64","LiteralSpecConstantOpInteger","LiteralString","Loader","LoopControl","MemoryAccess","MemoryModel","MemorySemantics","MismatchedFunctionEnd","MismatchedTerminator","Module","ModuleHeader","NestedBlock","NestedFunction","Operand","RayFlags","RayQueryCandidateIntersectionType","RayQueryCommittedIntersectionType","RayQueryIntersection","SamplerAddressingMode","SamplerFilterMode","Scope","SelectionControl","SourceLanguage","StorageClass","UnclosedBlock","UnclosedFunction","WrongOpCapabilityOperand","WrongOpExtInstImportOperand","WrongOpExtensionOperand","WrongOpMemoryModelOperand","WrongOpNameOperand","abs_i_sub_intel","abs_u_sub_intel","access_chain","additional_operands","all","all_inst_iter","all_inst_iter","all_inst_iter_mut","all_inst_iter_mut","annotations","any","array_length","assemble_into","assemble_into","assemble_into","assemble_into","assemble_into","assemble_into","atomic_and","atomic_compare_exchange","atomic_compare_exchange_weak","atomic_exchange","atomic_f_add_ext","atomic_flag_clear","atomic_flag_test_and_set","atomic_i_add","atomic_i_decrement","atomic_i_increment","atomic_i_sub","atomic_load","atomic_or","atomic_s_max","atomic_s_min","atomic_store","atomic_u_max","atomic_u_min","atomic_xor","begin_block","begin_block_no_label","begin_function","begin_invocation_interlock_ext","bit_count","bit_field_insert","bit_field_s_extract","bit_field_u_extract","bit_reverse","bitcast","bitwise_and","bitwise_or","bitwise_xor","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound","branch","branch_conditional","build_nd_range","capabilities","capability","capture_event_profiling_info","class","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit_read_pipe","commit_write_pipe","composite_construct","composite_extract","composite_insert","constant_composite","constant_f32","constant_f64","constant_false","constant_null","constant_pipe_storage","constant_sampler","constant_true","constant_u32","constant_u64","consume_header","consume_instruction","control_barrier","convert_f_to_s","convert_f_to_u","convert_ptr_to_u","convert_s_to_f","convert_u_to_acceleration_structure_khr","convert_u_to_f","convert_u_to_ptr","cooperative_matrix_length_nv","cooperative_matrix_load_nv","cooperative_matrix_mul_add_nv","cooperative_matrix_store_nv","copy_logical","copy_memory","copy_memory_sized","copy_object","create_pipe_from_pipe_storage","create_user_event","d_pdx","d_pdx_coarse","d_pdx_fine","d_pdy","d_pdy_coarse","d_pdy_fine","debug_module_processed","debug_names","debug_string_source","decorate","decorate_id","decorate_string","decorate_string_google","decoration_group","dedup_insert_type","def","def_id","default","default","default","default","default","demote_to_helper_invocation_ext","disassemble","disassemble","disassemble","disassemble","disassemble","disassemble","dot","emit_stream_vertex","emit_vertex","end","end_function","end_invocation_interlock_ext","end_primitive","end_stream_primitive","enqueue_kernel","enqueue_marker","entry_point","entry_points","eq","eq","eq","execute_callable_khr","execute_callable_nv","execution_mode","execution_mode_id","execution_modes","ext_inst","ext_inst_import","ext_inst_imports","extension","extensions","f_add","f_convert","f_div","f_mod","f_mul","f_negate","f_ord_equal","f_ord_greater_than","f_ord_greater_than_equal","f_ord_less_than","f_ord_less_than_equal","f_ord_not_equal","f_rem","f_sub","f_unord_equal","f_unord_greater_than","f_unord_greater_than_equal","f_unord_less_than","f_unord_less_than_equal","f_unord_not_equal","finalize","find_return_block_indices","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fpga_reg_intel","fragment_fetch_amd","fragment_mask_fetch_amd","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","function_call","function_parameter","functions","fwidth","fwidth_coarse","fwidth_fine","generator","generator","generic_cast_to_ptr","generic_cast_to_ptr_explicit","generic_ptr_mem_semantics","get_default_queue","get_kernel_local_size_for_subgroup_count","get_kernel_max_num_subgroups","get_kernel_n_drange_max_sub_group_size","get_kernel_n_drange_sub_group_count","get_kernel_preferred_work_group_size_multiple","get_kernel_work_group_size","get_max_pipe_packets","get_num_pipe_packets","global_inst_iter","global_inst_iter_mut","group_all","group_any","group_async_copy","group_broadcast","group_commit_read_pipe","group_commit_write_pipe","group_decorate","group_f_add","group_f_add_non_uniform_amd","group_f_max","group_f_max_non_uniform_amd","group_f_min","group_f_min_non_uniform_amd","group_i_add","group_i_add_non_uniform_amd","group_member_decorate","group_non_uniform_all","group_non_uniform_all_equal","group_non_uniform_any","group_non_uniform_ballot","group_non_uniform_ballot_bit_count","group_non_uniform_ballot_bit_extract","group_non_uniform_ballot_find_lsb","group_non_uniform_ballot_find_msb","group_non_uniform_bitwise_and","group_non_uniform_bitwise_or","group_non_uniform_bitwise_xor","group_non_uniform_broadcast","group_non_uniform_broadcast_first","group_non_uniform_elect","group_non_uniform_f_add","group_non_uniform_f_max","group_non_uniform_f_min","group_non_uniform_f_mul","group_non_uniform_i_add","group_non_uniform_i_mul","group_non_uniform_inverse_ballot","group_non_uniform_logical_and","group_non_uniform_logical_or","group_non_uniform_logical_xor","group_non_uniform_partition_nv","group_non_uniform_quad_broadcast","group_non_uniform_quad_swap","group_non_uniform_s_max","group_non_uniform_s_min","group_non_uniform_shuffle","group_non_uniform_shuffle_down","group_non_uniform_shuffle_up","group_non_uniform_shuffle_xor","group_non_uniform_u_max","group_non_uniform_u_min","group_reserve_read_pipe_packets","group_reserve_write_pipe_packets","group_s_max","group_s_max_non_uniform_amd","group_s_min","group_s_min_non_uniform_amd","group_u_max","group_u_max_non_uniform_amd","group_u_min","group_u_min_non_uniform_amd","group_wait_events","header","i_add","i_add_carry","i_add_sat_intel","i_average_intel","i_average_rounded_intel","i_equal","i_mul","i_mul32x16_intel","i_not_equal","i_sub","i_sub_borrow","i_sub_sat_intel","id","id_ref_any","id_ref_any_mut","ignore_intersection_khr","ignore_intersection_nv","image","image_dref_gather","image_fetch","image_gather","image_query_format","image_query_levels","image_query_lod","image_query_order","image_query_samples","image_query_size","image_query_size_lod","image_read","image_sample_dref_explicit_lod","image_sample_dref_implicit_lod","image_sample_explicit_lod","image_sample_footprint_nv","image_sample_implicit_lod","image_sample_proj_dref_explicit_lod","image_sample_proj_dref_implicit_lod","image_sample_proj_explicit_lod","image_sample_proj_implicit_lod","image_sparse_dref_gather","image_sparse_fetch","image_sparse_gather","image_sparse_read","image_sparse_sample_dref_explicit_lod","image_sparse_sample_dref_implicit_lod","image_sparse_sample_explicit_lod","image_sparse_sample_implicit_lod","image_sparse_sample_proj_dref_explicit_lod","image_sparse_sample_proj_dref_implicit_lod","image_sparse_sample_proj_explicit_lod","image_sparse_sample_proj_implicit_lod","image_sparse_texels_resident","image_texel_pointer","image_write","in_bounds_access_chain","in_bounds_ptr_access_chain","initialize","insert_abs_i_sub_intel","insert_abs_u_sub_intel","insert_access_chain","insert_all","insert_any","insert_array_length","insert_atomic_and","insert_atomic_compare_exchange","insert_atomic_compare_exchange_weak","insert_atomic_exchange","insert_atomic_f_add_ext","insert_atomic_flag_clear","insert_atomic_flag_test_and_set","insert_atomic_i_add","insert_atomic_i_decrement","insert_atomic_i_increment","insert_atomic_i_sub","insert_atomic_load","insert_atomic_or","insert_atomic_s_max","insert_atomic_s_min","insert_atomic_store","insert_atomic_u_max","insert_atomic_u_min","insert_atomic_xor","insert_begin_invocation_interlock_ext","insert_bit_count","insert_bit_field_insert","insert_bit_field_s_extract","insert_bit_field_u_extract","insert_bit_reverse","insert_bitcast","insert_bitwise_and","insert_bitwise_or","insert_bitwise_xor","insert_branch","insert_branch_conditional","insert_build_nd_range","insert_capture_event_profiling_info","insert_commit_read_pipe","insert_commit_write_pipe","insert_composite_construct","insert_composite_extract","insert_composite_insert","insert_constant_pipe_storage","insert_control_barrier","insert_convert_f_to_s","insert_convert_f_to_u","insert_convert_ptr_to_u","insert_convert_s_to_f","insert_convert_u_to_acceleration_structure_khr","insert_convert_u_to_f","insert_convert_u_to_ptr","insert_cooperative_matrix_length_nv","insert_cooperative_matrix_load_nv","insert_cooperative_matrix_mul_add_nv","insert_cooperative_matrix_store_nv","insert_copy_logical","insert_copy_memory","insert_copy_memory_sized","insert_copy_object","insert_create_pipe_from_pipe_storage","insert_create_user_event","insert_d_pdx","insert_d_pdx_coarse","insert_d_pdx_fine","insert_d_pdy","insert_d_pdy_coarse","insert_d_pdy_fine","insert_demote_to_helper_invocation_ext","insert_dot","insert_emit_stream_vertex","insert_emit_vertex","insert_end_invocation_interlock_ext","insert_end_primitive","insert_end_stream_primitive","insert_enqueue_kernel","insert_enqueue_marker","insert_execute_callable_khr","insert_execute_callable_nv","insert_f_add","insert_f_convert","insert_f_div","insert_f_mod","insert_f_mul","insert_f_negate","insert_f_ord_equal","insert_f_ord_greater_than","insert_f_ord_greater_than_equal","insert_f_ord_less_than","insert_f_ord_less_than_equal","insert_f_ord_not_equal","insert_f_rem","insert_f_sub","insert_f_unord_equal","insert_f_unord_greater_than","insert_f_unord_greater_than_equal","insert_f_unord_less_than","insert_f_unord_less_than_equal","insert_f_unord_not_equal","insert_fpga_reg_intel","insert_fragment_fetch_amd","insert_fragment_mask_fetch_amd","insert_function_call","insert_fwidth","insert_fwidth_coarse","insert_fwidth_fine","insert_generic_cast_to_ptr","insert_generic_cast_to_ptr_explicit","insert_generic_ptr_mem_semantics","insert_get_default_queue","insert_get_kernel_local_size_for_subgroup_count","insert_get_kernel_max_num_subgroups","insert_get_kernel_n_drange_max_sub_group_size","insert_get_kernel_n_drange_sub_group_count","insert_get_kernel_preferred_work_group_size_multiple","insert_get_kernel_work_group_size","insert_get_max_pipe_packets","insert_get_num_pipe_packets","insert_group_all","insert_group_any","insert_group_async_copy","insert_group_broadcast","insert_group_commit_read_pipe","insert_group_commit_write_pipe","insert_group_f_add","insert_group_f_add_non_uniform_amd","insert_group_f_max","insert_group_f_max_non_uniform_amd","insert_group_f_min","insert_group_f_min_non_uniform_amd","insert_group_i_add","insert_group_i_add_non_uniform_amd","insert_group_non_uniform_all","insert_group_non_uniform_all_equal","insert_group_non_uniform_any","insert_group_non_uniform_ballot","insert_group_non_uniform_ballot_bit_count","insert_group_non_uniform_ballot_bit_extract","insert_group_non_uniform_ballot_find_lsb","insert_group_non_uniform_ballot_find_msb","insert_group_non_uniform_bitwise_and","insert_group_non_uniform_bitwise_or","insert_group_non_uniform_bitwise_xor","insert_group_non_uniform_broadcast","insert_group_non_uniform_broadcast_first","insert_group_non_uniform_elect","insert_group_non_uniform_f_add","insert_group_non_uniform_f_max","insert_group_non_uniform_f_min","insert_group_non_uniform_f_mul","insert_group_non_uniform_i_add","insert_group_non_uniform_i_mul","insert_group_non_uniform_inverse_ballot","insert_group_non_uniform_logical_and","insert_group_non_uniform_logical_or","insert_group_non_uniform_logical_xor","insert_group_non_uniform_partition_nv","insert_group_non_uniform_quad_broadcast","insert_group_non_uniform_quad_swap","insert_group_non_uniform_s_max","insert_group_non_uniform_s_min","insert_group_non_uniform_shuffle","insert_group_non_uniform_shuffle_down","insert_group_non_uniform_shuffle_up","insert_group_non_uniform_shuffle_xor","insert_group_non_uniform_u_max","insert_group_non_uniform_u_min","insert_group_reserve_read_pipe_packets","insert_group_reserve_write_pipe_packets","insert_group_s_max","insert_group_s_max_non_uniform_amd","insert_group_s_min","insert_group_s_min_non_uniform_amd","insert_group_u_max","insert_group_u_max_non_uniform_amd","insert_group_u_min","insert_group_u_min_non_uniform_amd","insert_group_wait_events","insert_i_add","insert_i_add_carry","insert_i_add_sat_intel","insert_i_average_intel","insert_i_average_rounded_intel","insert_i_equal","insert_i_mul","insert_i_mul32x16_intel","insert_i_not_equal","insert_i_sub","insert_i_sub_borrow","insert_i_sub_sat_intel","insert_ignore_intersection_khr","insert_ignore_intersection_nv","insert_image","insert_image_dref_gather","insert_image_fetch","insert_image_gather","insert_image_query_format","insert_image_query_levels","insert_image_query_lod","insert_image_query_order","insert_image_query_samples","insert_image_query_size","insert_image_query_size_lod","insert_image_read","insert_image_sample_dref_explicit_lod","insert_image_sample_dref_implicit_lod","insert_image_sample_explicit_lod","insert_image_sample_footprint_nv","insert_image_sample_implicit_lod","insert_image_sample_proj_dref_explicit_lod","insert_image_sample_proj_dref_implicit_lod","insert_image_sample_proj_explicit_lod","insert_image_sample_proj_implicit_lod","insert_image_sparse_dref_gather","insert_image_sparse_fetch","insert_image_sparse_gather","insert_image_sparse_read","insert_image_sparse_sample_dref_explicit_lod","insert_image_sparse_sample_dref_implicit_lod","insert_image_sparse_sample_explicit_lod","insert_image_sparse_sample_implicit_lod","insert_image_sparse_sample_proj_dref_explicit_lod","insert_image_sparse_sample_proj_dref_implicit_lod","insert_image_sparse_sample_proj_explicit_lod","insert_image_sparse_sample_proj_implicit_lod","insert_image_sparse_texels_resident","insert_image_texel_pointer","insert_image_write","insert_in_bounds_access_chain","insert_in_bounds_ptr_access_chain","insert_into_block","insert_is_finite","insert_is_helper_invocation_ext","insert_is_inf","insert_is_nan","insert_is_normal","insert_is_valid_event","insert_is_valid_reserve_id","insert_kill","insert_less_or_greater","insert_lifetime_start","insert_lifetime_stop","insert_load","insert_logical_and","insert_logical_equal","insert_logical_not","insert_logical_not_equal","insert_logical_or","insert_loop_control_intel","insert_loop_merge","insert_matrix_times_matrix","insert_matrix_times_scalar","insert_matrix_times_vector","insert_memory_barrier","insert_memory_named_barrier","insert_named_barrier_initialize","insert_nop","insert_not","insert_ordered","insert_outer_product","insert_phi","insert_ptr_access_chain","insert_ptr_cast_to_generic","insert_ptr_diff","insert_ptr_equal","insert_ptr_not_equal","insert_quantize_to_f16","insert_ray_query_confirm_intersection_khr","insert_ray_query_generate_intersection_khr","insert_ray_query_get_intersection_barycentrics_khr","insert_ray_query_get_intersection_candidate_aabb_opaque_khr","insert_ray_query_get_intersection_front_face_khr","insert_ray_query_get_intersection_geometry_index_khr","insert_ray_query_get_intersection_instance_custom_index_khr","insert_ray_query_get_intersection_instance_id_khr","insert_ray_query_get_intersection_instance_shader_binding_table_record_offset_khr","insert_ray_query_get_intersection_object_ray_direction_khr","insert_ray_query_get_intersection_object_ray_origin_khr","insert_ray_query_get_intersection_object_to_world_khr","insert_ray_query_get_intersection_primitive_index_khr","insert_ray_query_get_intersection_tkhr","insert_ray_query_get_intersection_type_khr","insert_ray_query_get_intersection_world_to_object_khr","insert_ray_query_get_ray_flags_khr","insert_ray_query_get_ray_t_min_khr","insert_ray_query_get_world_ray_direction_khr","insert_ray_query_get_world_ray_origin_khr","insert_ray_query_initialize_khr","insert_ray_query_proceed_khr","insert_ray_query_terminate_khr","insert_read_clock_khr","insert_read_pipe","insert_read_pipe_blocking_intel","insert_release_event","insert_report_intersection_khr","insert_report_intersection_nv","insert_reserve_read_pipe_packets","insert_reserve_write_pipe_packets","insert_reserved_read_pipe","insert_reserved_write_pipe","insert_ret","insert_ret_value","insert_retain_event","insert_s_convert","insert_s_div","insert_s_greater_than","insert_s_greater_than_equal","insert_s_less_than","insert_s_less_than_equal","insert_s_mod","insert_s_mul_extended","insert_s_negate","insert_s_rem","insert_sampled_image","insert_sat_convert_s_to_u","insert_sat_convert_u_to_s","insert_select","insert_selection_merge","insert_set_user_event_status","insert_shift_left_logical","insert_shift_right_arithmetic","insert_shift_right_logical","insert_sign_bit_set","insert_size_of","insert_store","insert_subgroup_all_equal_khr","insert_subgroup_all_khr","insert_subgroup_any_khr","insert_subgroup_ballot_khr","insert_subgroup_block_read_intel","insert_subgroup_block_write_intel","insert_subgroup_first_invocation_khr","insert_subgroup_image_block_read_intel","insert_subgroup_image_block_write_intel","insert_subgroup_image_media_block_read_intel","insert_subgroup_image_media_block_write_intel","insert_subgroup_read_invocation_khr","insert_subgroup_shuffle_down_intel","insert_subgroup_shuffle_intel","insert_subgroup_shuffle_up_intel","insert_subgroup_shuffle_xor_intel","insert_switch","insert_terminate_invocation","insert_terminate_ray_khr","insert_terminate_ray_nv","insert_trace_nv","insert_trace_ray_khr","insert_transpose","insert_types_global_values","insert_u_add_sat_intel","insert_u_average_intel","insert_u_average_rounded_intel","insert_u_convert","insert_u_count_leading_zeros_intel","insert_u_count_trailing_zeros_intel","insert_u_div","insert_u_greater_than","insert_u_greater_than_equal","insert_u_less_than","insert_u_less_than_equal","insert_u_mod","insert_u_mul32x16_intel","insert_u_mul_extended","insert_u_sub_sat_intel","insert_unordered","insert_unreachable","insert_vector_extract_dynamic","insert_vector_insert_dynamic","insert_vector_shuffle","insert_vector_times_matrix","insert_vector_times_scalar","insert_write_packed_primitive_indices4x8_nv","insert_write_pipe","insert_write_pipe_blocking_intel","instructions","into","into","into","into","into","into","into","into","into","into","is_finite","is_helper_invocation_ext","is_inf","is_nan","is_normal","is_type_identical","is_valid_event","is_valid_reserve_id","kill","label","label_id","less_or_greater","lifetime_start","lifetime_stop","line","load","load_bytes","load_words","logical_and","logical_equal","logical_not","logical_not_equal","logical_or","loop_control_intel","loop_merge","magic_number","matrix_times_matrix","matrix_times_scalar","matrix_times_vector","member_decorate","member_decorate_string","member_decorate_string_google","member_name","memory_barrier","memory_model","memory_model","memory_named_barrier","module","module","module_mut","module_processed","module_ref","name","named_barrier_initialize","new","new","new","new","new","new","new","new_from_module","no_line","nop","not","operands","ordered","outer_product","parameters","phi","pop_instruction","ptr_access_chain","ptr_cast_to_generic","ptr_diff","ptr_equal","ptr_not_equal","quantize_to_f16","ray_query_confirm_intersection_khr","ray_query_generate_intersection_khr","ray_query_get_intersection_barycentrics_khr","ray_query_get_intersection_candidate_aabb_opaque_khr","ray_query_get_intersection_front_face_khr","ray_query_get_intersection_geometry_index_khr","ray_query_get_intersection_instance_custom_index_khr","ray_query_get_intersection_instance_id_khr","ray_query_get_intersection_instance_shader_binding_table_record_offset_khr","ray_query_get_intersection_object_ray_direction_khr","ray_query_get_intersection_object_ray_origin_khr","ray_query_get_intersection_object_to_world_khr","ray_query_get_intersection_primitive_index_khr","ray_query_get_intersection_tkhr","ray_query_get_intersection_type_khr","ray_query_get_intersection_world_to_object_khr","ray_query_get_ray_flags_khr","ray_query_get_ray_t_min_khr","ray_query_get_world_ray_direction_khr","ray_query_get_world_ray_origin_khr","ray_query_initialize_khr","ray_query_proceed_khr","ray_query_terminate_khr","read_clock_khr","read_pipe","read_pipe_blocking_intel","release_event","report_intersection_khr","report_intersection_nv","required_capabilities","required_extensions","reserve_read_pipe_packets","reserve_write_pipe_packets","reserved_read_pipe","reserved_word","reserved_write_pipe","result_id","result_type","ret","ret_value","retain_event","s_convert","s_div","s_greater_than","s_greater_than_equal","s_less_than","s_less_than_equal","s_mod","s_mul_extended","s_negate","s_rem","sampled_image","sat_convert_s_to_u","sat_convert_u_to_s","select","select_block","select_function","select_function_by_name","selected_block","selected_function","selection_merge","set_user_event_status","set_version","set_version","shift_left_logical","shift_right_arithmetic","shift_right_logical","sign_bit_set","size_of","source","source_continued","source_extension","spec_constant_composite","spec_constant_f32","spec_constant_f64","spec_constant_false","spec_constant_op","spec_constant_true","spec_constant_u32","spec_constant_u64","store","string","subgroup_all_equal_khr","subgroup_all_khr","subgroup_any_khr","subgroup_ballot_khr","subgroup_block_read_intel","subgroup_block_write_intel","subgroup_first_invocation_khr","subgroup_image_block_read_intel","subgroup_image_block_write_intel","subgroup_image_media_block_read_intel","subgroup_image_media_block_write_intel","subgroup_read_invocation_khr","subgroup_shuffle_down_intel","subgroup_shuffle_intel","subgroup_shuffle_up_intel","subgroup_shuffle_xor_intel","switch","terminate_invocation","terminate_ray_khr","terminate_ray_nv","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","trace_nv","trace_ray_khr","transpose","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_acceleration_structure_khr","type_acceleration_structure_khr_id","type_array","type_array_id","type_bool","type_bool_id","type_cooperative_matrix_nv","type_cooperative_matrix_nv_id","type_device_event","type_device_event_id","type_event","type_event_id","type_float","type_float_id","type_forward_pointer","type_function","type_function_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_image","type_image_id","type_int","type_int_id","type_matrix","type_matrix_id","type_named_barrier","type_named_barrier_id","type_opaque","type_pipe","type_pipe_id","type_pipe_storage","type_pipe_storage_id","type_pointer","type_queue","type_queue_id","type_ray_query_khr","type_ray_query_khr_id","type_reserve_id","type_reserve_id_id","type_runtime_array","type_runtime_array_id","type_sampled_image","type_sampled_image_id","type_sampler","type_sampler_id","type_struct","type_struct_id","type_vector","type_vector_id","type_void","type_void_id","types_global_values","u_add_sat_intel","u_average_intel","u_average_rounded_intel","u_convert","u_count_leading_zeros_intel","u_count_trailing_zeros_intel","u_div","u_greater_than","u_greater_than_equal","u_less_than","u_less_than_equal","u_mod","u_mul32x16_intel","u_mul_extended","u_sub_sat_intel","undef","unordered","unreachable","unwrap_access_qualifier","unwrap_addressing_model","unwrap_built_in","unwrap_capability","unwrap_decoration","unwrap_dim","unwrap_execution_mode","unwrap_execution_model","unwrap_fp_fast_math_mode","unwrap_fp_rounding_mode","unwrap_fragment_shading_rate","unwrap_function_control","unwrap_function_parameter_attribute","unwrap_group_operation","unwrap_id_memory_semantics","unwrap_id_ref","unwrap_id_scope","unwrap_image_channel_data_type","unwrap_image_channel_order","unwrap_image_format","unwrap_image_operands","unwrap_kernel_enqueue_flags","unwrap_kernel_profiling_info","unwrap_linkage_type","unwrap_literal_ext_inst_integer","unwrap_literal_float32","unwrap_literal_float64","unwrap_literal_int32","unwrap_literal_int64","unwrap_literal_spec_constant_op_integer","unwrap_literal_string","unwrap_loop_control","unwrap_memory_access","unwrap_memory_model","unwrap_memory_semantics","unwrap_ray_flags","unwrap_ray_query_candidate_intersection_type","unwrap_ray_query_committed_intersection_type","unwrap_ray_query_intersection","unwrap_sampler_addressing_mode","unwrap_sampler_filter_mode","unwrap_scope","unwrap_selection_control","unwrap_source_language","unwrap_storage_class","variable","vector_extract_dynamic","vector_insert_dynamic","vector_shuffle","vector_times_matrix","vector_times_scalar","version","version","version","write_packed_primitive_indices4x8_nv","write_pipe","write_pipe_blocking_intel","AccessQualifier","AddressingModel","BuiltIn","Capability","CoreInstructionTable","Decoration","Dim","ExecutionMode","ExecutionModel","ExtendedInstruction","FPFastMathMode","FPRoundingMode","FragmentShadingRate","FunctionControl","FunctionParameterAttribute","GlslStd450InstructionTable","GroupOperation","IdMemorySemantics","IdRef","IdResult","IdResultType","IdScope","ImageChannelDataType","ImageChannelOrder","ImageFormat","ImageOperands","Instruction","KernelEnqueueFlags","KernelProfilingInfo","LinkageType","LiteralContextDependentNumber","LiteralExtInstInteger","LiteralInteger","LiteralSpecConstantOpInteger","LiteralString","LogicalOperand","LoopControl","MemoryAccess","MemoryModel","MemorySemantics","One","OpenCLStd100InstructionTable","OperandKind","OperandQuantifier","PairIdRefIdRef","PairIdRefLiteralInteger","PairLiteralIntegerIdRef","RayFlags","RayQueryCandidateIntersectionType","RayQueryCommittedIntersectionType","RayQueryIntersection","SamplerAddressingMode","SamplerFilterMode","Scope","SelectionControl","SourceLanguage","StorageClass","ZeroOrMore","ZeroOrOne","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","capabilities","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","extensions","extensions","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get","get","hash","hash","hash","hash","into","into","into","into","into","into","into","into","iter","iter","iter","kind","lookup_opcode","lookup_opcode","lookup_opcode","opcode","opcode","operands","operands","opname","opname","quantifier","reflect","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","is_abort","is_annotation","is_block_terminator","is_branch","is_constant","is_debug","is_location_debug","is_nonlocation_debug","is_return","is_return_or_abort","is_type","is_variable","ConversionError","Instruction","InstructionError","LiftContext","Missing","MissingFunction","MissingFunctionType","MissingHeader","MissingLabel","MissingResult","MissingTerminator","Operand","OperandError","WrongEnumValue","WrongOpcode","WrongType","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","convert","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","lift_branch","lift_capability","lift_entry_point","lift_execution_mode","lift_execution_mode_id","lift_ext_inst","lift_ext_inst_import","lift_extension","lift_function","lift_function_call","lift_function_end","lift_function_parameter","lift_memory_model","lift_op","lift_terminator","lift_type","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","AccelerationStructureKHR","Aliased","AliasedPointer","AliasedPointerEXT","Alignment","AlignmentId","Array","ArrayStride","BankBitsINTEL","BankwidthINTEL","Binding","Block","Bool","Bool","BufferBlock","BuiltIn","CPacked","Centroid","Coherent","ColMajor","Component","Composite","Constant","Constant","CooperativeMatrixNV","CounterBuffer","Decoration","DescriptorSet","DeviceEvent","DoublepumpINTEL","Event","ExplicitInterpAMD","FPFastMathMode","FPRoundingMode","Flat","Float","Float","ForcePow2DepthINTEL","ForwardPointer","FuncParamAttr","Function","GLSLPacked","GLSLShared","HlslCounterBufferGOOGLE","HlslSemanticGOOGLE","Image","Index","InputAttachmentIndex","Int","Int","Invariant","LinkageAttributes","Location","Matrix","MatrixStride","MaxByteOffset","MaxByteOffsetId","MaxPrivateCopiesINTEL","MaxReplicatesINTEL","MemoryINTEL","MergeINTEL","NamedBarrier","NoContraction","NoPerspective","NoSignedWrap","NoUnsignedWrap","NonReadable","NonUniform","NonUniformEXT","NonWritable","Null","NumbanksINTEL","Offset","Opaque","OverrideCoverageNV","PassthroughNV","Patch","PerPrimitiveNV","PerTaskNV","PerVertexNV","PerViewNV","Pipe","PipeStorage","Pointer","Queue","RayQueryKHR","ReferencedIndirectlyINTEL","RegisterINTEL","RelaxedPrecision","ReserveId","Restrict","RestrictPointer","RestrictPointerEXT","RowMajor","RuntimeArray","Sample","SampledImage","Sampler","Sampler","SaturatedConversion","SecondaryViewportRelativeNV","SimpleDualPortINTEL","SinglepumpINTEL","SpecBool","SpecComposite","SpecFloat","SpecId","SpecInt","SpecOp","SpecUInt","Stream","Struct","StructMember","Type","UInt","Uniform","UniformId","UserSemantic","UserTypeGOOGLE","Vector","ViewportRelativeNV","Void","Volatile","XfbBuffer","XfbStride","autogen_instructions","autogen_ops","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","decorations","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","instructions","into","into","into","into","is_aggregate_type","is_bool_constant","is_composite_constant","is_composite_type","is_float_constant","is_int_constant","is_null_constant","is_numerical_type","is_sampler_constant","is_scalar_type","is_spec_constant","is_spec_op_constant","is_uint_constant","module","new","ops","partial_cmp","storage","to_owned","to_owned","to_owned","to_owned","token","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","addressing_mode","filter_mode","normalized","access_qualifier","arrayed","column_count","column_type","columns","component_count","component_type","component_type","depth","dim","element_type","element_type","execution","image_format","image_type","length","member_0_type_member_1_type","ms","parameter_0_type_parameter_1_type","pointer_type","qualifier","return_type","rows","sampled","sampled_type","signedness","storage_class","storage_class","the_name_of_the_opaque_type","ty","width","width","Capability","EntryPoint","ExecutionMode","ExecutionModeId","ExtInst","ExtInstImport","Extension","Function","FunctionCall","FunctionEnd","FunctionParameter","MemoryModel","addressing_model","argument_0_argument_1","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capability","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","entry_point","entry_point","entry_point","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","execution_model","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","function","function_control","function_type","instruction","interface","into","into","into","into","into","into","into","into","into","into","into","into","memory_model","mode","mode","name","name","name","operand_1_operand_2","set","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AbsISubINTEL","AbsUSubINTEL","AccessChain","All","Any","ArrayLength","AtomicAnd","AtomicCompareExchange","AtomicCompareExchangeWeak","AtomicExchange","AtomicFAddEXT","AtomicFlagClear","AtomicFlagTestAndSet","AtomicIAdd","AtomicIDecrement","AtomicIIncrement","AtomicISub","AtomicLoad","AtomicOr","AtomicSMax","AtomicSMin","AtomicStore","AtomicUMax","AtomicUMin","AtomicXor","BeginInvocationInterlockEXT","BitCount","BitFieldInsert","BitFieldSExtract","BitFieldUExtract","BitReverse","Bitcast","BitwiseAnd","BitwiseOr","BitwiseXor","Branch","Branch","Branch","BranchConditional","BuildNDRange","CaptureEventProfilingInfo","CommitReadPipe","CommitWritePipe","CompositeConstruct","CompositeExtract","CompositeInsert","ConstantPipeStorage","ControlBarrier","ConvertFToS","ConvertFToU","ConvertPtrToU","ConvertSToF","ConvertUToAccelerationStructureKHR","ConvertUToF","ConvertUToPtr","CooperativeMatrixLengthNV","CooperativeMatrixLoadNV","CooperativeMatrixMulAddNV","CooperativeMatrixStoreNV","CopyLogical","CopyMemory","CopyMemorySized","CopyObject","CreatePipeFromPipeStorage","CreateUserEvent","DPdx","DPdxCoarse","DPdxFine","DPdy","DPdyCoarse","DPdyFine","Decorate","DecorateId","DecorateString","DecorateStringGOOGLE","DecorationGroup","DemoteToHelperInvocationEXT","Dot","EmitStreamVertex","EmitVertex","EndInvocationInterlockEXT","EndPrimitive","EndStreamPrimitive","EnqueueKernel","EnqueueMarker","ExecuteCallableKHR","ExecuteCallableNV","FAdd","FConvert","FDiv","FMod","FMul","FNegate","FOrdEqual","FOrdGreaterThan","FOrdGreaterThanEqual","FOrdLessThan","FOrdLessThanEqual","FOrdNotEqual","FPGARegINTEL","FRem","FSub","FUnordEqual","FUnordGreaterThan","FUnordGreaterThanEqual","FUnordLessThan","FUnordLessThanEqual","FUnordNotEqual","FragmentFetchAMD","FragmentMaskFetchAMD","FunctionPointerCallINTEL","FunctionPointerINTEL","Fwidth","FwidthCoarse","FwidthFine","GenericCastToPtr","GenericCastToPtrExplicit","GenericPtrMemSemantics","GetDefaultQueue","GetKernelLocalSizeForSubgroupCount","GetKernelMaxNumSubgroups","GetKernelNDrangeMaxSubGroupSize","GetKernelNDrangeSubGroupCount","GetKernelPreferredWorkGroupSizeMultiple","GetKernelWorkGroupSize","GetMaxPipePackets","GetNumPipePackets","GroupAll","GroupAny","GroupAsyncCopy","GroupBroadcast","GroupCommitReadPipe","GroupCommitWritePipe","GroupDecorate","GroupFAdd","GroupFAddNonUniformAMD","GroupFMax","GroupFMaxNonUniformAMD","GroupFMin","GroupFMinNonUniformAMD","GroupIAdd","GroupIAddNonUniformAMD","GroupMemberDecorate","GroupNonUniformAll","GroupNonUniformAllEqual","GroupNonUniformAny","GroupNonUniformBallot","GroupNonUniformBallotBitCount","GroupNonUniformBallotBitExtract","GroupNonUniformBallotFindLSB","GroupNonUniformBallotFindMSB","GroupNonUniformBitwiseAnd","GroupNonUniformBitwiseOr","GroupNonUniformBitwiseXor","GroupNonUniformBroadcast","GroupNonUniformBroadcastFirst","GroupNonUniformElect","GroupNonUniformFAdd","GroupNonUniformFMax","GroupNonUniformFMin","GroupNonUniformFMul","GroupNonUniformIAdd","GroupNonUniformIMul","GroupNonUniformInverseBallot","GroupNonUniformLogicalAnd","GroupNonUniformLogicalOr","GroupNonUniformLogicalXor","GroupNonUniformPartitionNV","GroupNonUniformQuadBroadcast","GroupNonUniformQuadSwap","GroupNonUniformSMax","GroupNonUniformSMin","GroupNonUniformShuffle","GroupNonUniformShuffleDown","GroupNonUniformShuffleUp","GroupNonUniformShuffleXor","GroupNonUniformUMax","GroupNonUniformUMin","GroupReserveReadPipePackets","GroupReserveWritePipePackets","GroupSMax","GroupSMaxNonUniformAMD","GroupSMin","GroupSMinNonUniformAMD","GroupUMax","GroupUMaxNonUniformAMD","GroupUMin","GroupUMinNonUniformAMD","GroupWaitEvents","IAdd","IAddCarry","IAddSatINTEL","IAverageINTEL","IAverageRoundedINTEL","IEqual","IMul","IMul32x16INTEL","INotEqual","ISub","ISubBorrow","ISubSatINTEL","IgnoreIntersectionKHR","IgnoreIntersectionNV","Image","ImageDrefGather","ImageFetch","ImageGather","ImageQueryFormat","ImageQueryLevels","ImageQueryLod","ImageQueryOrder","ImageQuerySamples","ImageQuerySize","ImageQuerySizeLod","ImageRead","ImageSampleDrefExplicitLod","ImageSampleDrefImplicitLod","ImageSampleExplicitLod","ImageSampleFootprintNV","ImageSampleImplicitLod","ImageSampleProjDrefExplicitLod","ImageSampleProjDrefImplicitLod","ImageSampleProjExplicitLod","ImageSampleProjImplicitLod","ImageSparseDrefGather","ImageSparseFetch","ImageSparseGather","ImageSparseRead","ImageSparseSampleDrefExplicitLod","ImageSparseSampleDrefImplicitLod","ImageSparseSampleExplicitLod","ImageSparseSampleImplicitLod","ImageSparseSampleProjDrefExplicitLod","ImageSparseSampleProjDrefImplicitLod","ImageSparseSampleProjExplicitLod","ImageSparseSampleProjImplicitLod","ImageSparseTexelsResident","ImageTexelPointer","ImageWrite","InBoundsAccessChain","InBoundsPtrAccessChain","IsFinite","IsHelperInvocationEXT","IsInf","IsNan","IsNormal","IsValidEvent","IsValidReserveId","Kill","Label","LessOrGreater","LifetimeStart","LifetimeStop","Line","Load","LogicalAnd","LogicalEqual","LogicalNot","LogicalNotEqual","LogicalOr","LoopControlINTEL","LoopMerge","MatrixTimesMatrix","MatrixTimesScalar","MatrixTimesVector","MemberDecorate","MemberDecorateString","MemberDecorateStringGOOGLE","MemberName","MemoryBarrier","MemoryNamedBarrier","ModuleProcessed","Name","NamedBarrierInitialize","NoLine","Nop","Not","Op","Ordered","OuterProduct","Phi","PtrAccessChain","PtrCastToGeneric","PtrDiff","PtrEqual","PtrNotEqual","QuantizeToF16","RayQueryConfirmIntersectionKHR","RayQueryGenerateIntersectionKHR","RayQueryGetIntersectionBarycentricsKHR","RayQueryGetIntersectionCandidateAABBOpaqueKHR","RayQueryGetIntersectionFrontFaceKHR","RayQueryGetIntersectionGeometryIndexKHR","RayQueryGetIntersectionInstanceCustomIndexKHR","RayQueryGetIntersectionInstanceIdKHR","RayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR","RayQueryGetIntersectionObjectRayDirectionKHR","RayQueryGetIntersectionObjectRayOriginKHR","RayQueryGetIntersectionObjectToWorldKHR","RayQueryGetIntersectionPrimitiveIndexKHR","RayQueryGetIntersectionTKHR","RayQueryGetIntersectionTypeKHR","RayQueryGetIntersectionWorldToObjectKHR","RayQueryGetRayFlagsKHR","RayQueryGetRayTMinKHR","RayQueryGetWorldRayDirectionKHR","RayQueryGetWorldRayOriginKHR","RayQueryInitializeKHR","RayQueryProceedKHR","RayQueryTerminateKHR","ReadClockKHR","ReadPipe","ReadPipeBlockingINTEL","ReleaseEvent","ReportIntersectionKHR","ReportIntersectionNV","ReserveReadPipePackets","ReserveWritePipePackets","ReservedReadPipe","ReservedWritePipe","RetainEvent","Return","ReturnValue","SConvert","SDiv","SGreaterThan","SGreaterThanEqual","SLessThan","SLessThanEqual","SMod","SMulExtended","SNegate","SRem","SampledImage","SatConvertSToU","SatConvertUToS","Select","SelectionMerge","SetUserEventStatus","ShiftLeftLogical","ShiftRightArithmetic","ShiftRightLogical","SignBitSet","SizeOf","Source","SourceContinued","SourceExtension","Store","String","SubgroupAllEqualKHR","SubgroupAllKHR","SubgroupAnyKHR","SubgroupAvcBmeInitializeINTEL","SubgroupAvcFmeInitializeINTEL","SubgroupAvcImeAdjustRefOffsetINTEL","SubgroupAvcImeConvertToMcePayloadINTEL","SubgroupAvcImeConvertToMceResultINTEL","SubgroupAvcImeEvaluateWithDualReferenceINTEL","SubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL","SubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL","SubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL","SubgroupAvcImeEvaluateWithSingleReferenceINTEL","SubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL","SubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL","SubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL","SubgroupAvcImeGetBorderReachedINTEL","SubgroupAvcImeGetDualReferenceStreaminINTEL","SubgroupAvcImeGetSingleReferenceStreaminINTEL","SubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL","SubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL","SubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL","SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL","SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL","SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL","SubgroupAvcImeGetTruncatedSearchIndicationINTEL","SubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL","SubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL","SubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL","SubgroupAvcImeInitializeINTEL","SubgroupAvcImeRefWindowSizeINTEL","SubgroupAvcImeSetDualReferenceINTEL","SubgroupAvcImeSetEarlySearchTerminationThresholdINTEL","SubgroupAvcImeSetMaxMotionVectorCountINTEL","SubgroupAvcImeSetSingleReferenceINTEL","SubgroupAvcImeSetUnidirectionalMixDisableINTEL","SubgroupAvcImeSetWeightedSadINTEL","SubgroupAvcImeStripDualReferenceStreamoutINTEL","SubgroupAvcImeStripSingleReferenceStreamoutINTEL","SubgroupAvcMceConvertToImePayloadINTEL","SubgroupAvcMceConvertToImeResultINTEL","SubgroupAvcMceConvertToRefPayloadINTEL","SubgroupAvcMceConvertToRefResultINTEL","SubgroupAvcMceConvertToSicPayloadINTEL","SubgroupAvcMceConvertToSicResultINTEL","SubgroupAvcMceGetBestInterDistortionsINTEL","SubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL","SubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL","SubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL","SubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL","SubgroupAvcMceGetDefaultInterShapePenaltyINTEL","SubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL","SubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL","SubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL","SubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL","SubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL","SubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL","SubgroupAvcMceGetInterDirectionsINTEL","SubgroupAvcMceGetInterDistortionsINTEL","SubgroupAvcMceGetInterMajorShapeINTEL","SubgroupAvcMceGetInterMinorShapeINTEL","SubgroupAvcMceGetInterMotionVectorCountINTEL","SubgroupAvcMceGetInterReferenceIdsINTEL","SubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL","SubgroupAvcMceGetMotionVectorsINTEL","SubgroupAvcMceSetAcOnlyHaarINTEL","SubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL","SubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL","SubgroupAvcMceSetInterDirectionPenaltyINTEL","SubgroupAvcMceSetInterShapePenaltyINTEL","SubgroupAvcMceSetMotionVectorCostFunctionINTEL","SubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL","SubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL","SubgroupAvcRefConvertToMcePayloadINTEL","SubgroupAvcRefConvertToMceResultINTEL","SubgroupAvcRefEvaluateWithDualReferenceINTEL","SubgroupAvcRefEvaluateWithMultiReferenceINTEL","SubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL","SubgroupAvcRefEvaluateWithSingleReferenceINTEL","SubgroupAvcRefSetBidirectionalMixDisableINTEL","SubgroupAvcRefSetBilinearFilterEnableINTEL","SubgroupAvcSicConfigureIpeLumaChromaINTEL","SubgroupAvcSicConfigureIpeLumaINTEL","SubgroupAvcSicConfigureSkcINTEL","SubgroupAvcSicConvertToMcePayloadINTEL","SubgroupAvcSicConvertToMceResultINTEL","SubgroupAvcSicEvaluateIpeINTEL","SubgroupAvcSicEvaluateWithDualReferenceINTEL","SubgroupAvcSicEvaluateWithMultiReferenceINTEL","SubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL","SubgroupAvcSicEvaluateWithSingleReferenceINTEL","SubgroupAvcSicGetBestIpeChromaDistortionINTEL","SubgroupAvcSicGetBestIpeLumaDistortionINTEL","SubgroupAvcSicGetInterRawSadsINTEL","SubgroupAvcSicGetIpeChromaModeINTEL","SubgroupAvcSicGetIpeLumaShapeINTEL","SubgroupAvcSicGetMotionVectorMaskINTEL","SubgroupAvcSicGetPackedIpeLumaModesINTEL","SubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL","SubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL","SubgroupAvcSicInitializeINTEL","SubgroupAvcSicSetBilinearFilterEnableINTEL","SubgroupAvcSicSetBlockBasedRawSkipSadINTEL","SubgroupAvcSicSetIntraChromaModeCostFunctionINTEL","SubgroupAvcSicSetIntraLumaModeCostFunctionINTEL","SubgroupAvcSicSetIntraLumaShapePenaltyINTEL","SubgroupAvcSicSetSkcForwardTransformEnableINTEL","SubgroupBallotKHR","SubgroupBlockReadINTEL","SubgroupBlockWriteINTEL","SubgroupFirstInvocationKHR","SubgroupImageBlockReadINTEL","SubgroupImageBlockWriteINTEL","SubgroupImageMediaBlockReadINTEL","SubgroupImageMediaBlockWriteINTEL","SubgroupReadInvocationKHR","SubgroupShuffleDownINTEL","SubgroupShuffleINTEL","SubgroupShuffleUpINTEL","SubgroupShuffleXorINTEL","Switch","TerminateInvocation","TerminateRayKHR","TerminateRayNV","Terminator","TraceNV","TraceRayKHR","Transpose","TypeAccelerationStructureNV","TypeAvcImeDualReferenceStreaminINTEL","TypeAvcImePayloadINTEL","TypeAvcImeResultDualReferenceStreamoutINTEL","TypeAvcImeResultINTEL","TypeAvcImeResultSingleReferenceStreamoutINTEL","TypeAvcImeSingleReferenceStreaminINTEL","TypeAvcMcePayloadINTEL","TypeAvcMceResultINTEL","TypeAvcRefPayloadINTEL","TypeAvcRefResultINTEL","TypeAvcSicPayloadINTEL","TypeAvcSicResultINTEL","TypeVmeImageINTEL","UAddSatINTEL","UAverageINTEL","UAverageRoundedINTEL","UConvert","UCountLeadingZerosINTEL","UCountTrailingZerosINTEL","UDiv","UGreaterThan","UGreaterThanEqual","ULessThan","ULessThanEqual","UMod","UMul32x16INTEL","UMulExtended","USubSatINTEL","Undef","Unordered","Unreachable","Variable","VectorExtractDynamic","VectorInsertDynamic","VectorShuffle","VectorTimesMatrix","VectorTimesScalar","VmeImageINTEL","WritePackedPrimitiveIndices4x8NV","WritePipe","WritePipeBlockingINTEL","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","into","into","into","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","branch_weights","condition","continue_target","default","false_label","loop_control","merge_block","merge_block","pointer","pointer","selection_control","selector","size","size","target","target_label","true_label","value","variable_parent","a","accel","accel","accel","accel","array_member","b","backward_reference_field_polarity","base","base","base","base","base","base","base","base","base","base","base","base","bidirectional_weight","bidirectional_weight","block_based_skip_type","bwd_ref_image","bwd_ref_image","bwd_ref_image","bwd_ref_image","bwd_ref_image","bwd_ref_image","bwd_ref_offset","c","callable_data","callable_data_id","capacity","chroma_mode_base_penalty","cluster_size","cluster_size","cluster_size","cluster_size","cluster_size","cluster_size","cluster_size","cluster_size","cluster_size","cluster_size","cluster_size","cluster_size","cluster_size","cluster_size","cluster_size","cluster_size","coarse","column","column_major","column_major","comparator","comparator","component","component","component","components","composite","composite","condition","constituents","continued_source","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","coordinate","cost_precision","count","count","count","cull_mask","cull_mask","cull_mask","current","current","d_ref","d_ref","d_ref","d_ref","d_ref","d_ref","d_ref","d_ref","d_ref","d_ref","data","data","data","data","data","decoration","decoration","decoration","decoration","decoration","decoration","decoration","decoration_group","decoration_group","delta","delta","delta","delta","destination","direction","direction","direction","direction","direction","direction","direction","direction_cost","dual_ref","element","element","equal","equal","event","event","event","event","event","event","events_list","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","execution","extension","file","file","flags","float_value","float_value","float_value","forward_reference_field_polarity","fragment_index","function","fwd_ref_image","fwd_ref_image","fwd_ref_image","fwd_ref_image","fwd_ref_image","fwd_ref_image","fwd_ref_offset","global_work_offset","global_work_size","granularity","height","height","hit","hit","hit_kind","hit_kind","hit_t","id","id","id_search_window_config","image","image","image","image","image","image","image","image","image","image","image","image","image","image","image","image","image","image","image","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_operands","image_select","image_size","image_type","image_type","index","index","index","index","index","index","index","index_offset","indexes","indexes","indexes","indexes","indexes","indexes","initializer","input","insert","integer_value","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intra_neighbour_availabilty","intra_neighbour_availabilty","invocation_id","invoke","invoke","invoke","invoke","invoke","invoke","invoke","left_edge_chroma_pixels","left_edge_luma_pixels","left_edge_luma_pixels","left_matrix","level_of_detail","line","local_id","local_size","local_work_size","loop_control_parameters","luma_intra_partition_mask","luma_intra_partition_mask","luma_mode_penalty","luma_packed_neighbor_modes","luma_packed_non_dc_penalty","major_shape","major_shape","major_shape","major_shape","major_shape","major_shape","major_shapes","major_shapes","mask","matrix","matrix","matrix","matrix","max_motion_vector_count","member","member","member","member","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory","memory_access","memory_access","memory_access","memory_access","memory_access","memory_access","memory_access_2","memory_access_2","minor_shapes","minor_shapes","miss_index","miss_index","motion_vectors","motion_vectors","motion_vectors","name","name","named_barrier","nd_range","nd_range","nd_range","next","num_elements","num_events","num_events","num_events","num_packets","num_packets","num_packets","num_packets","object","object","object","object_1","object_2","offset","offset","offset","operand","operand","operand","operand","operand","operand","operand","operand","operand","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_1","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operand_2","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","operation","p","p","p","p","p","p","p","p","p","packed_cost_center_delta","packed_cost_table","packed_indices","packed_reference_field_polarities","packed_reference_field_polarities","packed_reference_ids","packed_reference_ids","packed_reference_ids","packed_reference_ids","packed_reference_ids","packed_reference_parameter_field_polarities","packed_sad_coefficients","packed_sad_weights","packed_shape_penalty","packed_shape_penalty","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_alignment","packet_size","packet_size","packet_size","packet_size","packet_size","packet_size","packet_size","packet_size","packet_size","packet_size","packet_size","packet_size","packet_size","packet_size","packet_size","packet_size","packet_size","param","param","param","param","param","param","param","param_align","param_align","param_align","param_align","param_align","param_align","param_align","param_size","param_size","param_size","param_size","param_size","param_size","param_size","partition_mask","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload","payload_id","pipe","pipe","pipe","pipe","pipe","pipe","pipe","pipe","pipe","pipe","pipe","pipe","pipe","pipe","pipe_storage","pixel_resolution","pixel_resolution","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","pointer","predicate","predicate","predicate","predicate","predicate","predicate","predicate","predicate","predicate","previous","process","profiling_info","ptr","ptr","qp","qp","qp","qp","qp","qp","queue","queue","ray_direction","ray_direction","ray_direction","ray_flags","ray_flags","ray_flags","ray_origin","ray_origin","ray_origin","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_query","ray_t_max","ray_t_min","ray_tmax","ray_tmax","ray_tmin","ray_tmin","ref_image","ref_image","ref_image","ref_image","ref_image","ref_image","ref_offset","ref_offset","ref_window_size","reference_base_penalty","reference_field_polarity","reserve_id","reserve_id","reserve_id","reserve_id","reserve_id","reserve_id","reserve_id","resident_code","result","ret_event","ret_event","right_matrix","sad_adjustment","sad_adjustment","sad_adjustment","sad_adjustment","sad_adjustment","sad_adjustment","sample","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampled_image","sampler","sampler","sbt_index","sbt_index","sbt_offset","sbt_offset","sbt_stride","sbt_stride","scalar","scalar","search_window_config","search_window_config","semantics","semantics","semantics","semantics","semantics","semantics","semantics","semantics","semantics","semantics","semantics","semantics","semantics","semantics","semantics","semantics","semantics","semantics","semantics","semantics","shift","shift","shift","signed_value","signed_value","signed_value","size","skip_block_partition_type","skip_block_partition_type","skip_motion_vector_mask","slice_type","slice_type","slice_type","slice_type","slice_type","slice_type","source","source","source","source","source_field_polarity","source_language","src_coord","src_coord","src_coord","src_coord","src_coord","src_image","src_image","src_image","src_image","src_image","src_image","src_image","src_image","src_image","src_image","src_image","src_image","src_image","src_image","src_image","src_image","src_image","status","storage","storage_class","stream","stream","streamin_components","streamin_components","streamin_components","streamin_components","stride","stride","stride","string","struct_type","struct_type","structure","structure_type","subgroup_count","subgroup_count","target","target","target","target","target","target","target","targets","targets","texel","threshold","ty","ty","unequal","unequal","unsigned_value","unsigned_value","unsigned_value","upper_edge_chroma_pixels","upper_edge_luma_pixels","upper_edge_luma_pixels","upper_left_corner_chroma_pixel","upper_left_corner_luma_pixel","upper_left_corner_luma_pixel","upper_right_edge_luma_pixels","upper_right_edge_luma_pixels","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","vector","vector","vector","vector","vector","vector","vector","vector_1","vector_1","vector_1","vector_2","vector_2","vector_2","version","wait_events","wait_events","width","width","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","y","y","y","Block","EntryPoint","Function","Jump","Module","arguments","arguments","block","blocks","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","clone","clone_into","constants","control","entry_points","eq","equivalent","execution_model","ext_inst_imports","extensions","fmt","fmt","fmt","from","from","from","from","from","function","functions","into","into","into","into","into","memory_model","name","ops","ops","parameters","result","start_block","terminator","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","types","version","Storage","Token","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","eq","equivalent","fetch_or_append","fmt","fmt","from","from","index","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"rspirv"],[6,"rspirv::binary"],[177,"rspirv::dr"],[1381,"rspirv::grammar"],[1543,"rspirv::grammar::reflect"],[1555,"rspirv::lift"],[1630,"rspirv::sr"],[1827,"rspirv::sr::Constant"],[1830,"rspirv::sr::Type"],[1862,"rspirv::sr::autogen_instructions"],[2042,"rspirv::sr::autogen_ops"],[2600,"rspirv::sr::autogen_ops::Branch"],[2619,"rspirv::sr::autogen_ops::Op"],[3766,"rspirv::sr::module"],[3837,"rspirv::sr::storage"],[3866,"spirv"],[3867,"core::result"],[3868,"spirv"],[3869,"spirv"],[3870,"spirv"],[3871,"core::fmt"],[3872,"spirv"],[3873,"core::option"],[3874,"core::iter::traits::collect"],[3875,"core::iter::traits::iterator"],[3876,"core::convert"],[3877,"core::cmp"],[3878,"core::default"],[3879,"core::cmp"]],"d":["Module for SPIR-V binary processing.","Data representation of various SPIR-V language constructs.","The module containing the whole SPIR-V syntax grammar.","Infrastructure of lifting the data representation (DR) …","","<strong>S</strong>tructured <strong>r</strong>epresentation of various SPIR-V language …","","","Trait for assembling functionalities.","","","Parsing completed","The binary consumer trait.","Consumer errored out with the given error","Consumer requested to stop parse","Continue the parsing","Decoder Error","Failed to decode a string.","The SPIR-V binary decoder.","","","Trait for disassembling functionalities.","Unsupported endianness","Contains the error value","Error out with the given error","","","","","","","","","Incomplete module header","Incorrect module header","","","","","","","","","","","","","Contains the success value","Unknown opcode at (byte offset, inst number, opcode)","Errored out when decoding operand with the given error","found redundant operands (byte offset, inst number)","Expected more operands (byte offset, inst number)","Orders consumer sent to the parser after each consuming …","","Parser State.","The SPIR-V binary parser.","","","","","","","","","","Incorrect SpecConstantOp Integer (byte offset, inst number)","Normally stop the parsing","","","Unsupported type (byte offset, inst number)","Zero instruction word count at (byte offset, inst number)","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Assembles the current object and returns the binary code. …","Assembles the current object and returns the binary code. …","Assembles the current object into the <code>result</code> vector, …","","","","","","","","","","","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Clear the previously set limit (if any).","Consume the module header.","Consume the given instruction.","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V Dim …","Disassembles the current object and returns the assembly …","","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a 32-bit …","Finalize the consumer.","Decodes and returns the next SPIR-V word as a 32-bit …","Decodes and returns the next two SPIR-V words as a 64-bit …","","","","","","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Returns true if a limit has been set on this decoder.","Decodes and returns the next SPIR-V word as an id.","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Intialize the consumer.","Decodes and returns the next SPIR-V word as a 32-bit …","Decodes and returns the next two SPIR-V words as a 64-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Returns true if the previously set limit has been reached.","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Creates a new <code>Decoder</code> instance.","Creates a new parser to parse the given <code>binary</code> and send …","Returns the offset of the byte to decode next.","Does the parsing.","Parses the given <code>binary</code> and consumes the module using the …","Parses the given <code>binary</code> and consumes the module using the …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V Scope …","Decodes and returns the next SPIR-V word as a SPIR-V …","Sets the limit to <code>num_words</code> words.","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns the next SPIR-V word as a SPIR-V …","Decodes and returns a literal string.","","","","","","","","","","","","","","","","","","Decodes and returns the next raw SPIR-V word.","Decodes and returns the next <code>n</code> raw SPIR-V words.","","","","Data representation of a SPIR-V block.","","The data representation builder.","","","","","","","","","","Data representation loading errors.","","","","","","","","Data representation of a SPIR-V function.","","","","","","","","","","","","","Data representation of a SPIR-V instruction.","","","","","","","","","","","The data representation loader.","","","","","","","Data representation of a SPIR-V module.","Data representation of a SPIR-V module header.","","","Data representation of a SPIR-V operand.","","","","","","","","","","","","","","","","","","Appends an OpAbsISubINTEL instruction to the current block.","Appends an OpAbsUSubINTEL instruction to the current block.","Appends an OpAccessChain instruction to the current block.","","Appends an OpAll instruction to the current block.","Returns a iterator over all instructions.","","Returns a mut iterator over all instructions.","","All annotation instructions.","Appends an OpAny instruction to the current block.","Appends an OpArrayLength instruction to the current block.","","","","","","","Appends an OpAtomicAnd instruction to the current block.","Appends an OpAtomicCompareExchange instruction to the …","Appends an OpAtomicCompareExchangeWeak instruction to the …","Appends an OpAtomicExchange instruction to the current …","Appends an OpAtomicFAddEXT instruction to the current …","Appends an OpAtomicFlagClear instruction to the current …","Appends an OpAtomicFlagTestAndSet instruction to the …","Appends an OpAtomicIAdd instruction to the current block.","Appends an OpAtomicIDecrement instruction to the current …","Appends an OpAtomicIIncrement instruction to the current …","Appends an OpAtomicISub instruction to the current block.","Appends an OpAtomicLoad instruction to the current block.","Appends an OpAtomicOr instruction to the current block.","Appends an OpAtomicSMax instruction to the current block.","Appends an OpAtomicSMin instruction to the current block.","Appends an OpAtomicStore instruction to the current block.","Appends an OpAtomicUMax instruction to the current block.","Appends an OpAtomicUMin instruction to the current block.","Appends an OpAtomicXor instruction to the current block.","Begins building of a new block.","Begins building of a new block.","Begins building of a new function.","Appends an OpBeginInvocationInterlockEXT instruction to …","Appends an OpBitCount instruction to the current block.","Appends an OpBitFieldInsert instruction to the current …","Appends an OpBitFieldSExtract instruction to the current …","Appends an OpBitFieldUExtract instruction to the current …","Appends an OpBitReverse instruction to the current block.","Appends an OpBitcast instruction to the current block.","Appends an OpBitwiseAnd instruction to the current block.","Appends an OpBitwiseOr instruction to the current block.","Appends an OpBitwiseXor instruction to the current block.","Blocks in this function.","","","","","","","","","","","","","","","","","","","","","","Appends an OpBranch instruction and ends the current block.","Appends an OpBranchConditional instruction and ends the …","Appends an OpBuildNDRange instruction to the current block.","All OpCapability instructions.","Appends an OpCapability instruction.","Appends an OpCaptureEventProfilingInfo instruction to the …","The class (grammar specification) of this instruction.","","","","","","","","","","","","","Appends an OpCommitReadPipe instruction to the current …","Appends an OpCommitWritePipe instruction to the current …","Appends an OpCompositeConstruct instruction to the current …","Appends an OpCompositeExtract instruction to the current …","Appends an OpCompositeInsert instruction to the current …","Appends an OpConstantComposite instruction.","Appends an OpConstant instruction with the given 32-bit …","Appends an OpConstant instruction with the given 64-bit …","Appends an OpConstantFalse instruction.","Appends an OpConstantNull instruction.","Appends an OpConstantPipeStorage instruction to the …","Appends an OpConstantSampler instruction.","Appends an OpConstantTrue instruction.","Appends an OpConstant instruction with the given 32-bit …","Appends an OpConstant instruction with the given 64-bit …","","","Appends an OpControlBarrier instruction to the current …","Appends an OpConvertFToS instruction to the current block.","Appends an OpConvertFToU instruction to the current block.","Appends an OpConvertPtrToU instruction to the current …","Appends an OpConvertSToF instruction to the current block.","Appends an OpConvertUToAccelerationStructureKHR …","Appends an OpConvertUToF instruction to the current block.","Appends an OpConvertUToPtr instruction to the current …","Appends an OpCooperativeMatrixLengthNV instruction to the …","Appends an OpCooperativeMatrixLoadNV instruction to the …","Appends an OpCooperativeMatrixMulAddNV instruction to the …","Appends an OpCooperativeMatrixStoreNV instruction to the …","Appends an OpCopyLogical instruction to the current block.","Appends an OpCopyMemory instruction to the current block.","Appends an OpCopyMemorySized instruction to the current …","Appends an OpCopyObject instruction to the current block.","Appends an OpCreatePipeFromPipeStorage instruction to the …","Appends an OpCreateUserEvent instruction to the current …","Appends an OpDPdx instruction to the current block.","Appends an OpDPdxCoarse instruction to the current block.","Appends an OpDPdxFine instruction to the current block.","Appends an OpDPdy instruction to the current block.","Appends an OpDPdyCoarse instruction to the current block.","Appends an OpDPdyFine instruction to the current block.","Debug subsection: All OpModuleProcessed instructions.","Debug subsection: All OpName and all OpMemberName.","Debug subsection: All OpString, OpSourceExtension, …","Appends an OpDecorate instruction.","Appends an OpDecorateId instruction.","Appends an OpDecorateString instruction.","Appends an OpDecorateStringGOOGLE instruction.","Appends an OpDecorationGroup instruction and returns the …","Insert a OpType instruction, deduplicate it if needed and …","First (defining) instruction in this function.","","","","","","","Appends an OpDemoteToHelperInvocationEXT instruction to …","Disassembles this module and returns the disassembly text.","","","","","","Appends an OpDot instruction to the current block.","Appends an OpEmitStreamVertex instruction to the current …","Appends an OpEmitVertex instruction to the current block.","Last (ending) instruction in this function.","Ends building of the current function.","Appends an OpEndInvocationInterlockEXT instruction to the …","Appends an OpEndPrimitive instruction to the current block.","Appends an OpEndStreamPrimitive instruction to the current …","Appends an OpEnqueueKernel instruction to the current …","Appends an OpEnqueueMarker instruction to the current …","Appends an OpEntryPoint instruction.","All entry point declarations, using OpEntryPoint.","","","","Appends an OpExecuteCallableKHR instruction to the current …","Appends an OpExecuteCallableNV instruction to the current …","Appends an OpExecutionMode instruction.","Appends an OpExecutionModeId instruction.","All execution mode declarations, using OpExecutionMode.","","Appends an OpExtInstImport instruction and returns the …","All OpExtInstImport instructions.","Appends an OpExtension instruction.","All OpExtension instructions.","Appends an OpFAdd instruction to the current block.","Appends an OpFConvert instruction to the current block.","Appends an OpFDiv instruction to the current block.","Appends an OpFMod instruction to the current block.","Appends an OpFMul instruction to the current block.","Appends an OpFNegate instruction to the current block.","Appends an OpFOrdEqual instruction to the current block.","Appends an OpFOrdGreaterThan instruction to the current …","Appends an OpFOrdGreaterThanEqual instruction to the …","Appends an OpFOrdLessThan instruction to the current block.","Appends an OpFOrdLessThanEqual instruction to the current …","Appends an OpFOrdNotEqual instruction to the current block.","Appends an OpFRem instruction to the current block.","Appends an OpFSub instruction to the current block.","Appends an OpFUnordEqual instruction to the current block.","Appends an OpFUnordGreaterThan instruction to the current …","Appends an OpFUnordGreaterThanEqual instruction to the …","Appends an OpFUnordLessThan instruction to the current …","Appends an OpFUnordLessThanEqual instruction to the …","Appends an OpFUnordNotEqual instruction to the current …","","Find all blocks that end in OpReturn","","","","","","","","","","Appends an OpFPGARegINTEL instruction to the current block.","Appends an OpFragmentFetchAMD instruction to the current …","Appends an OpFragmentMaskFetchAMD instruction to the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Appends an OpFunctionCall instruction to the current block.","Declares a formal parameter for the current function.","All functions.","Appends an OpFwidth instruction to the current block.","Appends an OpFwidthCoarse instruction to the current block.","Appends an OpFwidthFine instruction to the current block.","Returns the generator’s name and version as a tuple.","","Appends an OpGenericCastToPtr instruction to the current …","Appends an OpGenericCastToPtrExplicit instruction to the …","Appends an OpGenericPtrMemSemantics instruction to the …","Appends an OpGetDefaultQueue instruction to the current …","Appends an OpGetKernelLocalSizeForSubgroupCount …","Appends an OpGetKernelMaxNumSubgroups instruction to the …","Appends an OpGetKernelNDrangeMaxSubGroupSize instruction …","Appends an OpGetKernelNDrangeSubGroupCount instruction to …","Appends an OpGetKernelPreferredWorkGroupSizeMultiple …","Appends an OpGetKernelWorkGroupSize instruction to the …","Appends an OpGetMaxPipePackets instruction to the current …","Appends an OpGetNumPipePackets instruction to the current …","Returns an iterator over all global instructions.","Returns a mut iterator over all global instructions.","Appends an OpGroupAll instruction to the current block.","Appends an OpGroupAny instruction to the current block.","Appends an OpGroupAsyncCopy instruction to the current …","Appends an OpGroupBroadcast instruction to the current …","Appends an OpGroupCommitReadPipe instruction to the …","Appends an OpGroupCommitWritePipe instruction to the …","Appends an OpGroupDecorate instruction.","Appends an OpGroupFAdd instruction to the current block.","Appends an OpGroupFAddNonUniformAMD instruction to the …","Appends an OpGroupFMax instruction to the current block.","Appends an OpGroupFMaxNonUniformAMD instruction to the …","Appends an OpGroupFMin instruction to the current block.","Appends an OpGroupFMinNonUniformAMD instruction to the …","Appends an OpGroupIAdd instruction to the current block.","Appends an OpGroupIAddNonUniformAMD instruction to the …","Appends an OpGroupMemberDecorate instruction.","Appends an OpGroupNonUniformAll instruction to the current …","Appends an OpGroupNonUniformAllEqual instruction to the …","Appends an OpGroupNonUniformAny instruction to the current …","Appends an OpGroupNonUniformBallot instruction to the …","Appends an OpGroupNonUniformBallotBitCount instruction to …","Appends an OpGroupNonUniformBallotBitExtract instruction …","Appends an OpGroupNonUniformBallotFindLSB instruction to …","Appends an OpGroupNonUniformBallotFindMSB instruction to …","Appends an OpGroupNonUniformBitwiseAnd instruction to the …","Appends an OpGroupNonUniformBitwiseOr instruction to the …","Appends an OpGroupNonUniformBitwiseXor instruction to the …","Appends an OpGroupNonUniformBroadcast instruction to the …","Appends an OpGroupNonUniformBroadcastFirst instruction to …","Appends an OpGroupNonUniformElect instruction to the …","Appends an OpGroupNonUniformFAdd instruction to the …","Appends an OpGroupNonUniformFMax instruction to the …","Appends an OpGroupNonUniformFMin instruction to the …","Appends an OpGroupNonUniformFMul instruction to the …","Appends an OpGroupNonUniformIAdd instruction to the …","Appends an OpGroupNonUniformIMul instruction to the …","Appends an OpGroupNonUniformInverseBallot instruction to …","Appends an OpGroupNonUniformLogicalAnd instruction to the …","Appends an OpGroupNonUniformLogicalOr instruction to the …","Appends an OpGroupNonUniformLogicalXor instruction to the …","Appends an OpGroupNonUniformPartitionNV instruction to the …","Appends an OpGroupNonUniformQuadBroadcast instruction to …","Appends an OpGroupNonUniformQuadSwap instruction to the …","Appends an OpGroupNonUniformSMax instruction to the …","Appends an OpGroupNonUniformSMin instruction to the …","Appends an OpGroupNonUniformShuffle instruction to the …","Appends an OpGroupNonUniformShuffleDown instruction to the …","Appends an OpGroupNonUniformShuffleUp instruction to the …","Appends an OpGroupNonUniformShuffleXor instruction to the …","Appends an OpGroupNonUniformUMax instruction to the …","Appends an OpGroupNonUniformUMin instruction to the …","Appends an OpGroupReserveReadPipePackets instruction to …","Appends an OpGroupReserveWritePipePackets instruction to …","Appends an OpGroupSMax instruction to the current block.","Appends an OpGroupSMaxNonUniformAMD instruction to the …","Appends an OpGroupSMin instruction to the current block.","Appends an OpGroupSMinNonUniformAMD instruction to the …","Appends an OpGroupUMax instruction to the current block.","Appends an OpGroupUMaxNonUniformAMD instruction to the …","Appends an OpGroupUMin instruction to the current block.","Appends an OpGroupUMinNonUniformAMD instruction to the …","Appends an OpGroupWaitEvents instruction to the current …","The module header.","Appends an OpIAdd instruction to the current block.","Appends an OpIAddCarry instruction to the current block.","Appends an OpIAddSatINTEL instruction to the current block.","Appends an OpIAverageINTEL instruction to the current …","Appends an OpIAverageRoundedINTEL instruction to the …","Appends an OpIEqual instruction to the current block.","Appends an OpIMul instruction to the current block.","Appends an OpIMul32x16INTEL instruction to the current …","Appends an OpINotEqual instruction to the current block.","Appends an OpISub instruction to the current block.","Appends an OpISubBorrow instruction to the current block.","Appends an OpISubSatINTEL instruction to the current block.","Returns the next unused id.","","","Appends an OpIgnoreIntersectionKHR instruction and ends …","Appends an OpIgnoreIntersectionNV instruction to the …","Appends an OpImage instruction to the current block.","Appends an OpImageDrefGather instruction to the current …","Appends an OpImageFetch instruction to the current block.","Appends an OpImageGather instruction to the current block.","Appends an OpImageQueryFormat instruction to the current …","Appends an OpImageQueryLevels instruction to the current …","Appends an OpImageQueryLod instruction to the current …","Appends an OpImageQueryOrder instruction to the current …","Appends an OpImageQuerySamples instruction to the current …","Appends an OpImageQuerySize instruction to the current …","Appends an OpImageQuerySizeLod instruction to the current …","Appends an OpImageRead instruction to the current block.","Appends an OpImageSampleDrefExplicitLod instruction to the …","Appends an OpImageSampleDrefImplicitLod instruction to the …","Appends an OpImageSampleExplicitLod instruction to the …","Appends an OpImageSampleFootprintNV instruction to the …","Appends an OpImageSampleImplicitLod instruction to the …","Appends an OpImageSampleProjDrefExplicitLod instruction to …","Appends an OpImageSampleProjDrefImplicitLod instruction to …","Appends an OpImageSampleProjExplicitLod instruction to the …","Appends an OpImageSampleProjImplicitLod instruction to the …","Appends an OpImageSparseDrefGather instruction to the …","Appends an OpImageSparseFetch instruction to the current …","Appends an OpImageSparseGather instruction to the current …","Appends an OpImageSparseRead instruction to the current …","Appends an OpImageSparseSampleDrefExplicitLod instruction …","Appends an OpImageSparseSampleDrefImplicitLod instruction …","Appends an OpImageSparseSampleExplicitLod instruction to …","Appends an OpImageSparseSampleImplicitLod instruction to …","Appends an OpImageSparseSampleProjDrefExplicitLod …","Appends an OpImageSparseSampleProjDrefImplicitLod …","Appends an OpImageSparseSampleProjExplicitLod instruction …","Appends an OpImageSparseSampleProjImplicitLod instruction …","Appends an OpImageSparseTexelsResident instruction to the …","Appends an OpImageTexelPointer instruction to the current …","Appends an OpImageWrite instruction to the current block.","Appends an OpInBoundsAccessChain instruction to the …","Appends an OpInBoundsPtrAccessChain instruction to the …","","Appends an OpAbsISubINTEL instruction to the current block.","Appends an OpAbsUSubINTEL instruction to the current block.","Appends an OpAccessChain instruction to the current block.","Appends an OpAll instruction to the current block.","Appends an OpAny instruction to the current block.","Appends an OpArrayLength instruction to the current block.","Appends an OpAtomicAnd instruction to the current block.","Appends an OpAtomicCompareExchange instruction to the …","Appends an OpAtomicCompareExchangeWeak instruction to the …","Appends an OpAtomicExchange instruction to the current …","Appends an OpAtomicFAddEXT instruction to the current …","Appends an OpAtomicFlagClear instruction to the current …","Appends an OpAtomicFlagTestAndSet instruction to the …","Appends an OpAtomicIAdd instruction to the current block.","Appends an OpAtomicIDecrement instruction to the current …","Appends an OpAtomicIIncrement instruction to the current …","Appends an OpAtomicISub instruction to the current block.","Appends an OpAtomicLoad instruction to the current block.","Appends an OpAtomicOr instruction to the current block.","Appends an OpAtomicSMax instruction to the current block.","Appends an OpAtomicSMin instruction to the current block.","Appends an OpAtomicStore instruction to the current block.","Appends an OpAtomicUMax instruction to the current block.","Appends an OpAtomicUMin instruction to the current block.","Appends an OpAtomicXor instruction to the current block.","Appends an OpBeginInvocationInterlockEXT instruction to …","Appends an OpBitCount instruction to the current block.","Appends an OpBitFieldInsert instruction to the current …","Appends an OpBitFieldSExtract instruction to the current …","Appends an OpBitFieldUExtract instruction to the current …","Appends an OpBitReverse instruction to the current block.","Appends an OpBitcast instruction to the current block.","Appends an OpBitwiseAnd instruction to the current block.","Appends an OpBitwiseOr instruction to the current block.","Appends an OpBitwiseXor instruction to the current block.","Insert an OpBranch instruction and ends the current block.","Insert an OpBranchConditional instruction and ends the …","Appends an OpBuildNDRange instruction to the current block.","Appends an OpCaptureEventProfilingInfo instruction to the …","Appends an OpCommitReadPipe instruction to the current …","Appends an OpCommitWritePipe instruction to the current …","Appends an OpCompositeConstruct instruction to the current …","Appends an OpCompositeExtract instruction to the current …","Appends an OpCompositeInsert instruction to the current …","Appends an OpConstantPipeStorage instruction to the …","Appends an OpControlBarrier instruction to the current …","Appends an OpConvertFToS instruction to the current block.","Appends an OpConvertFToU instruction to the current block.","Appends an OpConvertPtrToU instruction to the current …","Appends an OpConvertSToF instruction to the current block.","Appends an OpConvertUToAccelerationStructureKHR …","Appends an OpConvertUToF instruction to the current block.","Appends an OpConvertUToPtr instruction to the current …","Appends an OpCooperativeMatrixLengthNV instruction to the …","Appends an OpCooperativeMatrixLoadNV instruction to the …","Appends an OpCooperativeMatrixMulAddNV instruction to the …","Appends an OpCooperativeMatrixStoreNV instruction to the …","Appends an OpCopyLogical instruction to the current block.","Appends an OpCopyMemory instruction to the current block.","Appends an OpCopyMemorySized instruction to the current …","Appends an OpCopyObject instruction to the current block.","Appends an OpCreatePipeFromPipeStorage instruction to the …","Appends an OpCreateUserEvent instruction to the current …","Appends an OpDPdx instruction to the current block.","Appends an OpDPdxCoarse instruction to the current block.","Appends an OpDPdxFine instruction to the current block.","Appends an OpDPdy instruction to the current block.","Appends an OpDPdyCoarse instruction to the current block.","Appends an OpDPdyFine instruction to the current block.","Appends an OpDemoteToHelperInvocationEXT instruction to …","Appends an OpDot instruction to the current block.","Appends an OpEmitStreamVertex instruction to the current …","Appends an OpEmitVertex instruction to the current block.","Appends an OpEndInvocationInterlockEXT instruction to the …","Appends an OpEndPrimitive instruction to the current block.","Appends an OpEndStreamPrimitive instruction to the current …","Appends an OpEnqueueKernel instruction to the current …","Appends an OpEnqueueMarker instruction to the current …","Appends an OpExecuteCallableKHR instruction to the current …","Appends an OpExecuteCallableNV instruction to the current …","Appends an OpFAdd instruction to the current block.","Appends an OpFConvert instruction to the current block.","Appends an OpFDiv instruction to the current block.","Appends an OpFMod instruction to the current block.","Appends an OpFMul instruction to the current block.","Appends an OpFNegate instruction to the current block.","Appends an OpFOrdEqual instruction to the current block.","Appends an OpFOrdGreaterThan instruction to the current …","Appends an OpFOrdGreaterThanEqual instruction to the …","Appends an OpFOrdLessThan instruction to the current block.","Appends an OpFOrdLessThanEqual instruction to the current …","Appends an OpFOrdNotEqual instruction to the current block.","Appends an OpFRem instruction to the current block.","Appends an OpFSub instruction to the current block.","Appends an OpFUnordEqual instruction to the current block.","Appends an OpFUnordGreaterThan instruction to the current …","Appends an OpFUnordGreaterThanEqual instruction to the …","Appends an OpFUnordLessThan instruction to the current …","Appends an OpFUnordLessThanEqual instruction to the …","Appends an OpFUnordNotEqual instruction to the current …","Appends an OpFPGARegINTEL instruction to the current block.","Appends an OpFragmentFetchAMD instruction to the current …","Appends an OpFragmentMaskFetchAMD instruction to the …","Appends an OpFunctionCall instruction to the current block.","Appends an OpFwidth instruction to the current block.","Appends an OpFwidthCoarse instruction to the current block.","Appends an OpFwidthFine instruction to the current block.","Appends an OpGenericCastToPtr instruction to the current …","Appends an OpGenericCastToPtrExplicit instruction to the …","Appends an OpGenericPtrMemSemantics instruction to the …","Appends an OpGetDefaultQueue instruction to the current …","Appends an OpGetKernelLocalSizeForSubgroupCount …","Appends an OpGetKernelMaxNumSubgroups instruction to the …","Appends an OpGetKernelNDrangeMaxSubGroupSize instruction …","Appends an OpGetKernelNDrangeSubGroupCount instruction to …","Appends an OpGetKernelPreferredWorkGroupSizeMultiple …","Appends an OpGetKernelWorkGroupSize instruction to the …","Appends an OpGetMaxPipePackets instruction to the current …","Appends an OpGetNumPipePackets instruction to the current …","Appends an OpGroupAll instruction to the current block.","Appends an OpGroupAny instruction to the current block.","Appends an OpGroupAsyncCopy instruction to the current …","Appends an OpGroupBroadcast instruction to the current …","Appends an OpGroupCommitReadPipe instruction to the …","Appends an OpGroupCommitWritePipe instruction to the …","Appends an OpGroupFAdd instruction to the current block.","Appends an OpGroupFAddNonUniformAMD instruction to the …","Appends an OpGroupFMax instruction to the current block.","Appends an OpGroupFMaxNonUniformAMD instruction to the …","Appends an OpGroupFMin instruction to the current block.","Appends an OpGroupFMinNonUniformAMD instruction to the …","Appends an OpGroupIAdd instruction to the current block.","Appends an OpGroupIAddNonUniformAMD instruction to the …","Appends an OpGroupNonUniformAll instruction to the current …","Appends an OpGroupNonUniformAllEqual instruction to the …","Appends an OpGroupNonUniformAny instruction to the current …","Appends an OpGroupNonUniformBallot instruction to the …","Appends an OpGroupNonUniformBallotBitCount instruction to …","Appends an OpGroupNonUniformBallotBitExtract instruction …","Appends an OpGroupNonUniformBallotFindLSB instruction to …","Appends an OpGroupNonUniformBallotFindMSB instruction to …","Appends an OpGroupNonUniformBitwiseAnd instruction to the …","Appends an OpGroupNonUniformBitwiseOr instruction to the …","Appends an OpGroupNonUniformBitwiseXor instruction to the …","Appends an OpGroupNonUniformBroadcast instruction to the …","Appends an OpGroupNonUniformBroadcastFirst instruction to …","Appends an OpGroupNonUniformElect instruction to the …","Appends an OpGroupNonUniformFAdd instruction to the …","Appends an OpGroupNonUniformFMax instruction to the …","Appends an OpGroupNonUniformFMin instruction to the …","Appends an OpGroupNonUniformFMul instruction to the …","Appends an OpGroupNonUniformIAdd instruction to the …","Appends an OpGroupNonUniformIMul instruction to the …","Appends an OpGroupNonUniformInverseBallot instruction to …","Appends an OpGroupNonUniformLogicalAnd instruction to the …","Appends an OpGroupNonUniformLogicalOr instruction to the …","Appends an OpGroupNonUniformLogicalXor instruction to the …","Appends an OpGroupNonUniformPartitionNV instruction to the …","Appends an OpGroupNonUniformQuadBroadcast instruction to …","Appends an OpGroupNonUniformQuadSwap instruction to the …","Appends an OpGroupNonUniformSMax instruction to the …","Appends an OpGroupNonUniformSMin instruction to the …","Appends an OpGroupNonUniformShuffle instruction to the …","Appends an OpGroupNonUniformShuffleDown instruction to the …","Appends an OpGroupNonUniformShuffleUp instruction to the …","Appends an OpGroupNonUniformShuffleXor instruction to the …","Appends an OpGroupNonUniformUMax instruction to the …","Appends an OpGroupNonUniformUMin instruction to the …","Appends an OpGroupReserveReadPipePackets instruction to …","Appends an OpGroupReserveWritePipePackets instruction to …","Appends an OpGroupSMax instruction to the current block.","Appends an OpGroupSMaxNonUniformAMD instruction to the …","Appends an OpGroupSMin instruction to the current block.","Appends an OpGroupSMinNonUniformAMD instruction to the …","Appends an OpGroupUMax instruction to the current block.","Appends an OpGroupUMaxNonUniformAMD instruction to the …","Appends an OpGroupUMin instruction to the current block.","Appends an OpGroupUMinNonUniformAMD instruction to the …","Appends an OpGroupWaitEvents instruction to the current …","Appends an OpIAdd instruction to the current block.","Appends an OpIAddCarry instruction to the current block.","Appends an OpIAddSatINTEL instruction to the current block.","Appends an OpIAverageINTEL instruction to the current …","Appends an OpIAverageRoundedINTEL instruction to the …","Appends an OpIEqual instruction to the current block.","Appends an OpIMul instruction to the current block.","Appends an OpIMul32x16INTEL instruction to the current …","Appends an OpINotEqual instruction to the current block.","Appends an OpISub instruction to the current block.","Appends an OpISubBorrow instruction to the current block.","Appends an OpISubSatINTEL instruction to the current block.","Insert an OpIgnoreIntersectionKHR instruction and ends the …","Appends an OpIgnoreIntersectionNV instruction to the …","Appends an OpImage instruction to the current block.","Appends an OpImageDrefGather instruction to the current …","Appends an OpImageFetch instruction to the current block.","Appends an OpImageGather instruction to the current block.","Appends an OpImageQueryFormat instruction to the current …","Appends an OpImageQueryLevels instruction to the current …","Appends an OpImageQueryLod instruction to the current …","Appends an OpImageQueryOrder instruction to the current …","Appends an OpImageQuerySamples instruction to the current …","Appends an OpImageQuerySize instruction to the current …","Appends an OpImageQuerySizeLod instruction to the current …","Appends an OpImageRead instruction to the current block.","Appends an OpImageSampleDrefExplicitLod instruction to the …","Appends an OpImageSampleDrefImplicitLod instruction to the …","Appends an OpImageSampleExplicitLod instruction to the …","Appends an OpImageSampleFootprintNV instruction to the …","Appends an OpImageSampleImplicitLod instruction to the …","Appends an OpImageSampleProjDrefExplicitLod instruction to …","Appends an OpImageSampleProjDrefImplicitLod instruction to …","Appends an OpImageSampleProjExplicitLod instruction to the …","Appends an OpImageSampleProjImplicitLod instruction to the …","Appends an OpImageSparseDrefGather instruction to the …","Appends an OpImageSparseFetch instruction to the current …","Appends an OpImageSparseGather instruction to the current …","Appends an OpImageSparseRead instruction to the current …","Appends an OpImageSparseSampleDrefExplicitLod instruction …","Appends an OpImageSparseSampleDrefImplicitLod instruction …","Appends an OpImageSparseSampleExplicitLod instruction to …","Appends an OpImageSparseSampleImplicitLod instruction to …","Appends an OpImageSparseSampleProjDrefExplicitLod …","Appends an OpImageSparseSampleProjDrefImplicitLod …","Appends an OpImageSparseSampleProjExplicitLod instruction …","Appends an OpImageSparseSampleProjImplicitLod instruction …","Appends an OpImageSparseTexelsResident instruction to the …","Appends an OpImageTexelPointer instruction to the current …","Appends an OpImageWrite instruction to the current block.","Appends an OpInBoundsAccessChain instruction to the …","Appends an OpInBoundsPtrAccessChain instruction to the …","","Appends an OpIsFinite instruction to the current block.","Appends an OpIsHelperInvocationEXT instruction to the …","Appends an OpIsInf instruction to the current block.","Appends an OpIsNan instruction to the current block.","Appends an OpIsNormal instruction to the current block.","Appends an OpIsValidEvent instruction to the current block.","Appends an OpIsValidReserveId instruction to the current …","Insert an OpKill instruction and ends the current block.","Appends an OpLessOrGreater instruction to the current …","Insert an OpLifetimeStart instruction and ends the current …","Insert an OpLifetimeStop instruction and ends the current …","Appends an OpLoad instruction to the current block.","Appends an OpLogicalAnd instruction to the current block.","Appends an OpLogicalEqual instruction to the current block.","Appends an OpLogicalNot instruction to the current block.","Appends an OpLogicalNotEqual instruction to the current …","Appends an OpLogicalOr instruction to the current block.","Appends an OpLoopControlINTEL instruction to the current …","Insert an OpLoopMerge instruction and ends the current …","Appends an OpMatrixTimesMatrix instruction to the current …","Appends an OpMatrixTimesScalar instruction to the current …","Appends an OpMatrixTimesVector instruction to the current …","Appends an OpMemoryBarrier instruction to the current …","Appends an OpMemoryNamedBarrier instruction to the current …","Appends an OpNamedBarrierInitialize instruction to the …","Appends an OpNop instruction to the current block.","Appends an OpNot instruction to the current block.","Appends an OpOrdered instruction to the current block.","Appends an OpOuterProduct instruction to the current block.","Appends an OpPhi instruction to the current block.","Appends an OpPtrAccessChain instruction to the current …","Appends an OpPtrCastToGeneric instruction to the current …","Appends an OpPtrDiff instruction to the current block.","Appends an OpPtrEqual instruction to the current block.","Appends an OpPtrNotEqual instruction to the current block.","Appends an OpQuantizeToF16 instruction to the current …","Appends an OpRayQueryConfirmIntersectionKHR instruction to …","Appends an OpRayQueryGenerateIntersectionKHR instruction …","Appends an OpRayQueryGetIntersectionBarycentricsKHR …","Appends an OpRayQueryGetIntersectionCandidateAABBOpaqueKHR …","Appends an OpRayQueryGetIntersectionFrontFaceKHR …","Appends an OpRayQueryGetIntersectionGeometryIndexKHR …","Appends an OpRayQueryGetIntersectionInstanceCustomIndexKHR …","Appends an OpRayQueryGetIntersectionInstanceIdKHR …","Appends an …","Appends an OpRayQueryGetIntersectionObjectRayDirectionKHR …","Appends an OpRayQueryGetIntersectionObjectRayOriginKHR …","Appends an OpRayQueryGetIntersectionObjectToWorldKHR …","Appends an OpRayQueryGetIntersectionPrimitiveIndexKHR …","Appends an OpRayQueryGetIntersectionTKHR instruction to …","Appends an OpRayQueryGetIntersectionTypeKHR instruction to …","Appends an OpRayQueryGetIntersectionWorldToObjectKHR …","Appends an OpRayQueryGetRayFlagsKHR instruction to the …","Appends an OpRayQueryGetRayTMinKHR instruction to the …","Appends an OpRayQueryGetWorldRayDirectionKHR instruction …","Appends an OpRayQueryGetWorldRayOriginKHR instruction to …","Appends an OpRayQueryInitializeKHR instruction to the …","Appends an OpRayQueryProceedKHR instruction to the current …","Appends an OpRayQueryTerminateKHR instruction to the …","Appends an OpReadClockKHR instruction to the current block.","Appends an OpReadPipe instruction to the current block.","Appends an OpReadPipeBlockingINTEL instruction to the …","Appends an OpReleaseEvent instruction to the current block.","Appends an OpReportIntersectionKHR instruction to the …","Appends an OpReportIntersectionNV instruction to the …","Appends an OpReserveReadPipePackets instruction to the …","Appends an OpReserveWritePipePackets instruction to the …","Appends an OpReservedReadPipe instruction to the current …","Appends an OpReservedWritePipe instruction to the current …","Insert an OpReturn instruction and ends the current block.","Insert an OpReturnValue instruction and ends the current …","Appends an OpRetainEvent instruction to the current block.","Appends an OpSConvert instruction to the current block.","Appends an OpSDiv instruction to the current block.","Appends an OpSGreaterThan instruction to the current block.","Appends an OpSGreaterThanEqual instruction to the current …","Appends an OpSLessThan instruction to the current block.","Appends an OpSLessThanEqual instruction to the current …","Appends an OpSMod instruction to the current block.","Appends an OpSMulExtended instruction to the current block.","Appends an OpSNegate instruction to the current block.","Appends an OpSRem instruction to the current block.","Appends an OpSampledImage instruction to the current block.","Appends an OpSatConvertSToU instruction to the current …","Appends an OpSatConvertUToS instruction to the current …","Appends an OpSelect instruction to the current block.","Insert an OpSelectionMerge instruction and ends the …","Appends an OpSetUserEventStatus instruction to the current …","Appends an OpShiftLeftLogical instruction to the current …","Appends an OpShiftRightArithmetic instruction to the …","Appends an OpShiftRightLogical instruction to the current …","Appends an OpSignBitSet instruction to the current block.","Appends an OpSizeOf instruction to the current block.","Appends an OpStore instruction to the current block.","Appends an OpSubgroupAllEqualKHR instruction to the …","Appends an OpSubgroupAllKHR instruction to the current …","Appends an OpSubgroupAnyKHR instruction to the current …","Appends an OpSubgroupBallotKHR instruction to the current …","Appends an OpSubgroupBlockReadINTEL instruction to the …","Appends an OpSubgroupBlockWriteINTEL instruction to the …","Appends an OpSubgroupFirstInvocationKHR instruction to the …","Appends an OpSubgroupImageBlockReadINTEL instruction to …","Appends an OpSubgroupImageBlockWriteINTEL instruction to …","Appends an OpSubgroupImageMediaBlockReadINTEL instruction …","Appends an OpSubgroupImageMediaBlockWriteINTEL instruction …","Appends an OpSubgroupReadInvocationKHR instruction to the …","Appends an OpSubgroupShuffleDownINTEL instruction to the …","Appends an OpSubgroupShuffleINTEL instruction to the …","Appends an OpSubgroupShuffleUpINTEL instruction to the …","Appends an OpSubgroupShuffleXorINTEL instruction to the …","Insert an OpSwitch instruction and ends the current block.","Insert an OpTerminateInvocation instruction and ends the …","Insert an OpTerminateRayKHR instruction and ends the …","Appends an OpTerminateRayNV instruction to the current …","Appends an OpTraceNV instruction to the current block.","Appends an OpTraceRayKHR instruction to the current block.","Appends an OpTranspose instruction to the current block.","","Appends an OpUAddSatINTEL instruction to the current block.","Appends an OpUAverageINTEL instruction to the current …","Appends an OpUAverageRoundedINTEL instruction to the …","Appends an OpUConvert instruction to the current block.","Appends an OpUCountLeadingZerosINTEL instruction to the …","Appends an OpUCountTrailingZerosINTEL instruction to the …","Appends an OpUDiv instruction to the current block.","Appends an OpUGreaterThan instruction to the current block.","Appends an OpUGreaterThanEqual instruction to the current …","Appends an OpULessThan instruction to the current block.","Appends an OpULessThanEqual instruction to the current …","Appends an OpUMod instruction to the current block.","Appends an OpUMul32x16INTEL instruction to the current …","Appends an OpUMulExtended instruction to the current block.","Appends an OpUSubSatINTEL instruction to the current block.","Appends an OpUnordered instruction to the current block.","Insert an OpUnreachable instruction and ends the current …","Appends an OpVectorExtractDynamic instruction to the …","Appends an OpVectorInsertDynamic instruction to the …","Appends an OpVectorShuffle instruction to the current …","Appends an OpVectorTimesMatrix instruction to the current …","Appends an OpVectorTimesScalar instruction to the current …","Appends an OpWritePackedPrimitiveIndices4x8NV instruction …","Appends an OpWritePipe instruction to the current block.","Appends an OpWritePipeBlockingINTEL instruction to the …","Instructions in this block.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Appends an OpIsFinite instruction to the current block.","Appends an OpIsHelperInvocationEXT instruction to the …","Appends an OpIsInf instruction to the current block.","Appends an OpIsNan instruction to the current block.","Appends an OpIsNormal instruction to the current block.","Compare two instructions by opcode and operands; this is …","Appends an OpIsValidEvent instruction to the current block.","Appends an OpIsValidReserveId instruction to the current …","Appends an OpKill instruction and ends the current block.","The label starting this block.","","Appends an OpLessOrGreater instruction to the current …","Appends an OpLifetimeStart instruction and ends the …","Appends an OpLifetimeStop instruction and ends the current …","Appends an <code>OpLine</code> instruction.","Appends an OpLoad instruction to the current block.","Loads the SPIR-V <code>binary</code> into memory and returns a <code>Module</code>.","Loads the SPIR-V <code>binary</code> into memory and returns a <code>Module</code>.","Appends an OpLogicalAnd instruction to the current block.","Appends an OpLogicalEqual instruction to the current block.","Appends an OpLogicalNot instruction to the current block.","Appends an OpLogicalNotEqual instruction to the current …","Appends an OpLogicalOr instruction to the current block.","Appends an OpLoopControlINTEL instruction to the current …","Appends an OpLoopMerge instruction and ends the current …","","Appends an OpMatrixTimesMatrix instruction to the current …","Appends an OpMatrixTimesScalar instruction to the current …","Appends an OpMatrixTimesVector instruction to the current …","Appends an OpMemberDecorate instruction.","Appends an OpMemberDecorateString instruction.","Appends an OpMemberDecorateStringGOOGLE instruction.","Appends an OpMemberName instruction.","Appends an OpMemoryBarrier instruction to the current …","Appends an OpMemoryModel instruction.","The OpMemoryModel instruction.","Appends an OpMemoryNamedBarrier instruction to the current …","Returns the <code>Module</code> under construction.","Returns the <code>Module</code> under construction.","Returns the <code>Module</code> under construction as a mutable …","Appends an OpModuleProcessed instruction.","Returns the <code>Module</code> under construction as a reference. Note …","Appends an OpName instruction.","Appends an OpNamedBarrierInitialize instruction to the …","Creates a new empty builder.","Creates a new empty <code>Module</code> instance.","Creates a new <code>ModuleHeader</code> instance.","Creates a new empty <code>Function</code> instance.","Creates a new empty <code>Block</code> instance.","Creates a new <code>Instruction</code> instance.","Creates a new empty loader.","Create a new builder from an existing module","Appends an <code>OpNoLine</code> instruction.","Appends an OpNop instruction to the current block.","Appends an OpNot instruction to the current block.","Operands.","Appends an OpOrdered instruction to the current block.","Appends an OpOuterProduct instruction to the current block.","Function parameters.","Appends an OpPhi instruction to the current block.","","Appends an OpPtrAccessChain instruction to the current …","Appends an OpPtrCastToGeneric instruction to the current …","Appends an OpPtrDiff instruction to the current block.","Appends an OpPtrEqual instruction to the current block.","Appends an OpPtrNotEqual instruction to the current block.","Appends an OpQuantizeToF16 instruction to the current …","Appends an OpRayQueryConfirmIntersectionKHR instruction to …","Appends an OpRayQueryGenerateIntersectionKHR instruction …","Appends an OpRayQueryGetIntersectionBarycentricsKHR …","Appends an OpRayQueryGetIntersectionCandidateAABBOpaqueKHR …","Appends an OpRayQueryGetIntersectionFrontFaceKHR …","Appends an OpRayQueryGetIntersectionGeometryIndexKHR …","Appends an OpRayQueryGetIntersectionInstanceCustomIndexKHR …","Appends an OpRayQueryGetIntersectionInstanceIdKHR …","Appends an …","Appends an OpRayQueryGetIntersectionObjectRayDirectionKHR …","Appends an OpRayQueryGetIntersectionObjectRayOriginKHR …","Appends an OpRayQueryGetIntersectionObjectToWorldKHR …","Appends an OpRayQueryGetIntersectionPrimitiveIndexKHR …","Appends an OpRayQueryGetIntersectionTKHR instruction to …","Appends an OpRayQueryGetIntersectionTypeKHR instruction to …","Appends an OpRayQueryGetIntersectionWorldToObjectKHR …","Appends an OpRayQueryGetRayFlagsKHR instruction to the …","Appends an OpRayQueryGetRayTMinKHR instruction to the …","Appends an OpRayQueryGetWorldRayDirectionKHR instruction …","Appends an OpRayQueryGetWorldRayOriginKHR instruction to …","Appends an OpRayQueryInitializeKHR instruction to the …","Appends an OpRayQueryProceedKHR instruction to the current …","Appends an OpRayQueryTerminateKHR instruction to the …","Appends an OpReadClockKHR instruction to the current block.","Appends an OpReadPipe instruction to the current block.","Appends an OpReadPipeBlockingINTEL instruction to the …","Appends an OpReleaseEvent instruction to the current block.","Appends an OpReportIntersectionKHR instruction to the …","Appends an OpReportIntersectionNV instruction to the …","","","Appends an OpReserveReadPipePackets instruction to the …","Appends an OpReserveWritePipePackets instruction to the …","Appends an OpReservedReadPipe instruction to the current …","","Appends an OpReservedWritePipe instruction to the current …","Result id.","Result type id.","Appends an OpReturn instruction and ends the current block.","Appends an OpReturnValue instruction and ends the current …","Appends an OpRetainEvent instruction to the current block.","Appends an OpSConvert instruction to the current block.","Appends an OpSDiv instruction to the current block.","Appends an OpSGreaterThan instruction to the current block.","Appends an OpSGreaterThanEqual instruction to the current …","Appends an OpSLessThan instruction to the current block.","Appends an OpSLessThanEqual instruction to the current …","Appends an OpSMod instruction to the current block.","Appends an OpSMulExtended instruction to the current block.","Appends an OpSNegate instruction to the current block.","Appends an OpSRem instruction to the current block.","Appends an OpSampledImage instruction to the current block.","Appends an OpSatConvertSToU instruction to the current …","Appends an OpSatConvertUToS instruction to the current …","Appends an OpSelect instruction to the current block.","Select a basic block (by index) to insert instructions …","Select a function to insert instructions into by index …","Select a function to insert instructions into by name","","","Appends an OpSelectionMerge instruction and ends the …","Appends an OpSetUserEventStatus instruction to the current …","Sets the SPIR-V version to the given major.minor version.","Sets the SPIR-V version to the given major.minor version.","Appends an OpShiftLeftLogical instruction to the current …","Appends an OpShiftRightArithmetic instruction to the …","Appends an OpShiftRightLogical instruction to the current …","Appends an OpSignBitSet instruction to the current block.","Appends an OpSizeOf instruction to the current block.","Appends an OpSource instruction.","Appends an OpSourceContinued instruction.","Appends an OpSourceExtension instruction.","Appends an OpSpecConstantComposite instruction.","Appends an OpSpecConstant instruction with the given …","Appends an OpSpecConstant instruction with the given …","Appends an OpSpecConstantFalse instruction.","Appends an OpSpecConstantOp instruction.","Appends an OpSpecConstantTrue instruction.","Appends an OpSpecConstant instruction with the given …","Appends an OpSpecConstant instruction with the given …","Appends an OpStore instruction to the current block.","","Appends an OpSubgroupAllEqualKHR instruction to the …","Appends an OpSubgroupAllKHR instruction to the current …","Appends an OpSubgroupAnyKHR instruction to the current …","Appends an OpSubgroupBallotKHR instruction to the current …","Appends an OpSubgroupBlockReadINTEL instruction to the …","Appends an OpSubgroupBlockWriteINTEL instruction to the …","Appends an OpSubgroupFirstInvocationKHR instruction to the …","Appends an OpSubgroupImageBlockReadINTEL instruction to …","Appends an OpSubgroupImageBlockWriteINTEL instruction to …","Appends an OpSubgroupImageMediaBlockReadINTEL instruction …","Appends an OpSubgroupImageMediaBlockWriteINTEL instruction …","Appends an OpSubgroupReadInvocationKHR instruction to the …","Appends an OpSubgroupShuffleDownINTEL instruction to the …","Appends an OpSubgroupShuffleINTEL instruction to the …","Appends an OpSubgroupShuffleUpINTEL instruction to the …","Appends an OpSubgroupShuffleXorINTEL instruction to the …","Appends an OpSwitch instruction and ends the current block.","Appends an OpTerminateInvocation instruction and ends the …","Appends an OpTerminateRayKHR instruction and ends the …","Appends an OpTerminateRayNV instruction to the current …","","","","","","","","","Appends an OpTraceNV instruction to the current block.","Appends an OpTraceRayKHR instruction to the current block.","Appends an OpTranspose instruction to the current block.","","","","","","","","","","","","","","","","","","","","","Appends an OpTypeAccelerationStructureKHR instruction and …","Appends an OpTypeAccelerationStructureKHR instruction and …","Appends an OpTypeArray instruction and returns the result …","Appends an OpTypeArray instruction and returns the result …","Appends an OpTypeBool instruction and returns the result …","Appends an OpTypeBool instruction and returns the result …","Appends an OpTypeCooperativeMatrixNV instruction and …","Appends an OpTypeCooperativeMatrixNV instruction and …","Appends an OpTypeDeviceEvent instruction and returns the …","Appends an OpTypeDeviceEvent instruction and returns the …","Appends an OpTypeEvent instruction and returns the result …","Appends an OpTypeEvent instruction and returns the result …","Appends an OpTypeFloat instruction and returns the result …","Appends an OpTypeFloat instruction and returns the result …","Appends an OpTypeForwardPointer instruction.","Appends an OpTypeFunction instruction and returns the …","Appends an OpTypeFunction instruction and returns the …","","","","","","","","","","","Appends an OpTypeImage instruction and returns the result …","Appends an OpTypeImage instruction and returns the result …","Appends an OpTypeInt instruction and returns the result …","Appends an OpTypeInt instruction and returns the result …","Appends an OpTypeMatrix instruction and returns the result …","Appends an OpTypeMatrix instruction and returns the result …","Appends an OpTypeNamedBarrier instruction and returns the …","Appends an OpTypeNamedBarrier instruction and returns the …","Appends an OpTypeOpaque instruction and returns the result …","Appends an OpTypePipe instruction and returns the result …","Appends an OpTypePipe instruction and returns the result …","Appends an OpTypePipeStorage instruction and returns the …","Appends an OpTypePipeStorage instruction and returns the …","Appends an OpTypePointer instruction and returns the …","Appends an OpTypeQueue instruction and returns the result …","Appends an OpTypeQueue instruction and returns the result …","Appends an OpTypeRayQueryKHR instruction and returns the …","Appends an OpTypeRayQueryKHR instruction and returns the …","Appends an OpTypeReserveId instruction and returns the …","Appends an OpTypeReserveId instruction and returns the …","Appends an OpTypeRuntimeArray instruction and returns the …","Appends an OpTypeRuntimeArray instruction and returns the …","Appends an OpTypeSampledImage instruction and returns the …","Appends an OpTypeSampledImage instruction and returns the …","Appends an OpTypeSampler instruction and returns the …","Appends an OpTypeSampler instruction and returns the …","Appends an OpTypeStruct instruction and returns the result …","Appends an OpTypeStruct instruction and returns the result …","Appends an OpTypeVector instruction and returns the result …","Appends an OpTypeVector instruction and returns the result …","Appends an OpTypeVoid instruction and returns the result …","Appends an OpTypeVoid instruction and returns the result …","All types, constants, and global variables.","Appends an OpUAddSatINTEL instruction to the current block.","Appends an OpUAverageINTEL instruction to the current …","Appends an OpUAverageRoundedINTEL instruction to the …","Appends an OpUConvert instruction to the current block.","Appends an OpUCountLeadingZerosINTEL instruction to the …","Appends an OpUCountTrailingZerosINTEL instruction to the …","Appends an OpUDiv instruction to the current block.","Appends an OpUGreaterThan instruction to the current block.","Appends an OpUGreaterThanEqual instruction to the current …","Appends an OpULessThan instruction to the current block.","Appends an OpULessThanEqual instruction to the current …","Appends an OpUMod instruction to the current block.","Appends an OpUMul32x16INTEL instruction to the current …","Appends an OpUMulExtended instruction to the current block.","Appends an OpUSubSatINTEL instruction to the current block.","Appends an OpUndef instruction to either the current block …","Appends an OpUnordered instruction to the current block.","Appends an OpUnreachable instruction and ends the current …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends an OpVariable instruction to either the current …","Appends an OpVectorExtractDynamic instruction to the …","Appends an OpVectorInsertDynamic instruction to the …","Appends an OpVectorShuffle instruction to the current …","Appends an OpVectorTimesMatrix instruction to the current …","Appends an OpVectorTimesScalar instruction to the current …","Get the SPIR-V version as a (major, minor) tuple","Returns the major and minor version numbers as a tuple.","","Appends an OpWritePackedPrimitiveIndices4x8NV instruction …","Appends an OpWritePipe instruction to the current block.","Appends an OpWritePipeBlockingINTEL instruction to the …","","","","","The table for all SPIR-V core instructions.","","","","","Grammar for an extended instruction.","","","","","","The table for all <code>GLSLstd450</code> extended instructions.","","","","","","","","","","","Grammar for a SPIR-V instruction.","","","","","","","","","Grammar for a SPIR-V logical operand.","","","","","This operand appears exactly one time.","The table for all <code>OpenCLstd100</code> extended instructions.","All operand kinds in the SPIR-V grammar.","The repeat specification for a SPIR-V logical operand.","","","","","","","","","","","","","","This operand can appear zero or more times.","This operand can appear zero or one time.","","","","","","","","","","","","","","","","","Capabilities required for this instruction.","Capabilities required for this instruction.","","","","","","","","","","","","","","","Extensions required for this instruction.","Extensions required for this instruction.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the instruction grammar entry with …","Returns a reference to the instruction grammar entry with …","Returns a reference to the instruction grammar entry with …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","The kind of this logical operand.","Looks up the given <code>opcode</code> in the instruction table and …","Looks up the given <code>opcode</code> in the instruction table and …","Looks up the given <code>opcode</code> in the instruction table and …","Opcode.","Opcode.","Logical operands for this instruction.","Logical operands for this instruction.","OpName.","Opname.","The repeat specification for this logical operand.","Reflect functions for SPIR-V instructions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the given opcode aborts execution.","Returns true if the given opcode is for an annotation …","Returns true if the given opcode is for a terminator …","Returns true if the given opcode is a branch instruction.","Returns true if the given opcode is for a …","Returns true if the given opcode is for a debug …","Returns true if the given opcode is for a location debug …","Returns true if the given opcode is for a non-location …","Returns true if the given opcode is a return instruction.","Returns true if the given opcode is a return instruction …","Returns true if the given opcode is for a type-declaring …","Returns true if the given opcode is for a …","Error that may occur during the convesion from the data …","","Error lifting a data representation of an instruction.","","Operand is missing from the list.","","","","","Instruction is missing a result  or type.","","One of the operands can not be lifted.","Error lifting a data representation of an operand into the …","Operand is an integer value that corresponds to a …","Instruction has a wrong opcode.","Operand has a wrong type.","","","","","","","","","","","","","","","Convert a module from the data representation into …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a SPIR-V constant.","","","","SPIR-V decorations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeump destination parameters.","","","The argument values corresponding to the block arguments.","The block to jump to.","All blocks in this function.","","","","","","","","","","","All OpCapability instructions.","","","All constants.","","All entry point declarations.","","","","All OpExtInstImport instructions.","All OpExtension instructions.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","All functions.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The OpMemoryModel instruction.","","All operations.","","Function parameters.","Function result type.","The first block of this function.","","","","","","","","","","","","","","","","","","All types","Version of the specification.","A structure holding some kind of SPIR-V entity (e.g., …","A strongly typed reference to a SPIR-V element.","Adds a new value to the storage, returning a typed token.","","","","","","","","","","Adds a value with a check for uniqueness: returns a token …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,3,3,0,3,3,24,0,24,24,12,0,3,0,3,3,0,24,49,12,3,3,3,3,3,3,3,3,24,24,3,3,3,3,3,3,3,3,3,3,3,3,49,24,24,24,24,0,0,0,0,3,3,3,3,3,3,3,3,3,24,12,3,3,24,24,1,1,118,118,118,1,47,3,24,12,1,47,3,24,12,1,1,1,46,46,1,1,119,3,1,1,1,46,1,1,3,3,24,24,12,1,1,1,1,47,3,24,24,12,1,1,1,1,1,1,1,1,1,46,1,1,1,47,3,24,12,1,1,1,1,1,1,1,1,1,47,1,47,0,0,1,1,1,1,1,1,1,1,1,1,1,1,3,24,1,47,3,24,12,1,47,3,24,12,1,47,3,24,12,1,1,66,66,77,0,64,0,66,66,66,64,64,64,66,64,77,0,66,66,66,66,66,77,77,0,66,64,66,66,66,66,66,66,66,66,66,0,0,66,66,66,66,66,66,66,66,66,66,0,66,66,66,66,64,64,0,0,64,64,0,66,66,66,66,66,66,66,66,66,66,64,64,64,64,64,64,64,62,62,62,66,62,68,70,68,70,68,62,62,68,11,70,71,13,66,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,70,77,62,68,11,70,71,13,66,64,72,77,62,68,11,70,71,13,66,64,72,11,62,62,62,68,62,62,13,68,11,70,71,13,66,68,11,70,71,13,66,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,72,72,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,68,68,68,62,62,62,62,62,62,70,70,62,68,70,71,72,62,68,11,70,71,13,66,62,62,62,70,62,62,62,62,62,62,62,68,11,13,66,62,62,62,62,68,62,62,68,62,68,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,72,62,68,11,70,71,13,66,66,64,64,62,62,62,77,62,68,11,70,71,13,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,64,72,62,62,68,62,62,62,11,11,62,62,62,62,62,62,62,62,62,62,62,62,68,68,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,68,62,62,62,62,62,62,62,62,62,62,62,62,62,66,66,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,72,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,71,77,62,68,11,70,71,13,66,64,72,62,62,62,62,62,13,62,62,62,71,71,62,62,62,62,62,0,0,62,62,62,62,62,62,62,11,62,62,62,62,62,62,62,62,62,68,62,62,72,62,62,62,62,62,62,68,11,70,71,13,72,62,62,62,62,13,62,62,70,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,66,66,62,62,62,11,62,13,13,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,11,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,68,11,70,71,13,66,66,64,62,62,62,77,62,68,11,70,71,13,66,64,72,77,62,68,11,70,71,13,66,64,72,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,77,62,68,11,70,71,13,66,64,72,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,68,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,62,62,62,62,62,62,62,11,11,62,62,62,79,79,79,79,0,79,79,79,79,0,79,79,79,79,79,0,79,79,79,79,79,79,79,79,79,79,0,79,79,79,79,79,79,79,79,0,79,79,79,79,78,0,0,0,79,79,79,79,79,79,79,79,79,79,79,79,79,78,78,82,120,121,122,80,67,78,79,82,120,121,122,80,67,78,79,82,80,67,78,79,67,78,79,80,67,78,79,80,67,78,79,82,80,80,67,78,79,82,120,121,122,80,67,78,79,120,121,122,80,67,78,79,82,120,121,122,80,67,78,79,120,121,122,67,120,121,122,82,80,82,80,82,80,67,0,67,78,79,82,120,121,122,80,67,78,79,82,120,121,122,80,67,78,79,82,120,121,122,80,67,78,79,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,85,87,87,87,87,86,87,86,0,85,86,85,89,85,86,87,89,85,86,87,85,86,87,85,86,87,89,85,86,87,89,85,86,86,87,87,89,85,86,87,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,85,86,87,89,85,86,87,89,85,86,87,89,85,86,87,105,106,106,106,106,106,105,106,106,106,106,106,107,105,106,106,106,106,106,106,106,107,0,106,105,106,0,106,105,106,105,106,106,106,106,107,105,106,105,106,105,106,106,106,106,105,106,106,107,105,106,106,106,105,106,106,106,106,106,106,106,105,106,106,106,106,106,106,106,106,107,106,106,105,106,106,106,106,106,106,106,105,105,105,105,105,106,106,106,105,106,106,106,106,105,106,105,107,105,106,106,106,106,107,107,107,106,107,107,107,106,105,0,0,107,106,106,106,106,105,106,105,106,106,106,0,0,106,107,108,105,106,107,108,105,106,107,108,105,106,107,108,105,106,108,106,107,105,106,106,107,108,105,106,107,108,105,0,106,107,108,105,105,107,107,105,107,107,107,105,107,105,107,107,107,0,108,0,106,0,106,107,108,105,108,106,107,108,105,106,107,108,105,106,107,108,105,123,123,123,124,124,125,125,126,127,127,126,124,124,128,129,126,124,130,128,131,124,132,133,134,132,126,124,124,135,136,133,137,136,135,138,0,0,0,0,0,0,0,0,0,0,0,0,102,99,97,96,95,102,92,93,91,98,101,100,99,94,97,96,95,102,92,93,91,98,101,100,99,94,91,97,96,95,102,92,93,91,98,101,100,99,94,97,96,95,102,92,93,91,98,101,100,99,94,92,93,94,97,96,95,102,92,93,91,94,97,96,95,102,92,93,91,94,92,97,96,95,102,92,93,91,98,101,100,99,94,97,96,95,102,92,93,91,98,101,100,99,94,99,98,98,95,92,97,96,95,102,92,93,91,98,101,100,99,94,102,93,94,97,96,92,95,95,97,96,95,102,92,93,91,98,101,100,99,94,97,96,95,102,92,93,91,98,101,100,99,94,97,96,95,102,92,93,91,98,101,100,99,94,97,96,95,102,92,93,91,98,101,100,99,94,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,90,104,90,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,104,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,90,90,103,90,90,103,103,103,103,103,103,103,103,90,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,103,103,90,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,90,90,103,103,103,103,103,103,103,103,103,103,103,103,103,103,90,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,90,90,104,103,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,90,103,103,103,103,103,103,103,103,103,103,90,104,103,90,104,103,90,104,103,90,104,103,90,104,103,90,104,103,90,104,103,90,104,103,90,104,103,90,104,103,90,104,103,90,104,103,90,104,103,139,139,140,141,139,140,140,142,143,144,142,141,143,144,141,145,139,146,147,148,149,150,151,152,153,148,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,148,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,204,222,223,224,225,226,227,228,229,230,231,232,233,234,205,235,236,237,238,197,239,240,241,242,243,162,163,164,149,151,152,244,245,215,216,219,220,222,228,229,232,233,235,246,247,248,240,242,249,250,251,252,253,254,255,256,257,258,259,244,245,260,261,262,263,264,265,167,266,267,268,157,158,201,202,260,269,270,271,272,273,274,275,260,274,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,258,259,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,305,261,306,307,308,309,310,311,312,313,314,315,316,198,317,318,319,320,154,238,321,170,171,172,173,174,175,176,322,322,197,241,242,323,324,323,324,325,295,303,176,212,326,221,223,224,327,328,329,330,331,332,234,236,237,238,239,240,241,242,213,214,215,216,217,218,219,220,221,204,222,223,224,226,227,228,229,230,231,232,233,234,205,235,236,197,333,334,335,336,337,203,338,339,299,305,340,341,155,156,157,158,207,208,342,343,162,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,246,317,360,361,362,363,364,365,359,358,359,366,329,198,278,317,322,367,358,359,368,368,368,369,370,371,262,263,264,265,167,304,372,373,374,375,376,377,250,254,255,275,378,379,380,381,201,202,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,199,200,399,400,265,167,149,152,265,167,168,401,377,395,317,360,361,244,260,274,402,317,403,404,287,288,398,208,200,209,209,162,163,164,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,279,280,281,282,283,284,285,286,300,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,306,307,308,309,310,311,312,313,477,478,479,480,481,482,483,484,485,243,243,341,486,487,488,489,486,490,487,488,491,492,493,494,495,496,338,339,403,404,497,498,499,500,287,288,289,290,179,501,502,495,496,338,339,403,404,497,498,499,500,287,288,289,290,179,501,502,317,360,361,362,363,364,365,317,360,361,362,363,364,365,317,360,361,362,363,364,365,503,149,504,493,267,243,505,506,507,154,508,509,510,511,512,513,514,515,516,517,518,519,520,521,488,522,176,523,376,524,525,492,526,170,527,171,528,172,529,173,530,531,532,533,534,369,370,371,262,263,264,333,535,536,537,538,539,540,541,542,174,489,486,543,168,358,359,544,494,368,180,545,491,169,546,547,175,490,487,548,549,550,551,552,553,554,555,556,152,495,496,338,339,403,404,497,498,499,500,287,288,289,290,557,265,167,397,398,558,559,560,561,562,379,380,381,201,202,382,383,384,385,386,387,388,389,390,391,392,495,496,338,339,393,394,563,199,200,396,276,277,292,293,297,564,565,566,567,245,568,273,569,248,570,571,572,573,574,575,402,317,149,151,152,149,151,152,149,151,152,151,576,325,577,578,345,579,580,346,347,348,349,350,351,352,353,581,354,355,582,583,356,357,151,151,149,152,149,152,526,527,528,529,542,547,522,334,334,504,507,338,339,497,498,584,289,290,585,343,402,317,366,503,265,167,168,358,359,212,213,214,215,216,217,218,219,220,204,222,586,225,226,227,228,229,230,231,232,233,205,235,197,326,335,177,178,149,152,149,152,587,373,522,268,275,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,159,160,161,588,589,590,400,168,266,168,570,571,572,573,574,575,316,399,400,260,506,316,503,334,265,167,591,526,170,527,171,528,172,529,173,542,174,489,486,546,547,175,490,487,272,562,342,592,593,527,171,529,173,260,199,200,594,254,255,153,250,364,595,401,399,400,249,251,252,253,256,257,224,525,377,596,201,202,597,598,599,359,358,359,359,358,359,358,359,600,380,381,201,202,384,385,386,387,388,389,390,391,392,278,273,294,295,296,298,299,300,301,302,303,304,258,259,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,305,261,601,340,602,247,396,337,203,587,374,375,603,604,206,605,606,206,605,606,316,402,317,241,242,607,608,609,610,611,612,613,614,279,280,281,282,283,284,285,286,306,307,308,309,310,311,312,313,612,613,614,0,0,0,0,0,113,111,111,615,615,88,112,113,111,615,88,112,113,111,88,111,111,88,615,88,111,111,112,88,88,112,113,111,615,88,112,113,111,112,88,615,88,112,113,111,88,112,88,113,615,615,615,113,111,615,88,112,113,111,615,88,112,113,111,615,88,112,113,111,88,88,0,0,114,110,114,110,114,110,110,114,110,110,114,110,114,110,114,110,114,110,114,114,110,110,114,110,114,110,114],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[4,[2,3]]]],[1,[[4,[5,3]]]],[-1,[[7,[6]]],[]],[-1,[[7,[6]]],[]],[[-1,[7,[6]]],8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[4,[9,3]]]],[1,[[4,[10,3]]]],[1,8],[[-1,11],12,[]],[[-1,13],12,[]],[1,[[4,[14,3]]]],[1,[[4,[15,3]]]],[-1,16,[]],[[3,3],17],[1,[[4,[18,3]]]],[1,[[4,[19,3]]]],[1,[[4,[6,3]]]],[-1,12,[]],[1,[[4,[20,3]]]],[1,[[4,[21,3]]]],[[3,22],23],[[3,22],23],[[24,22],23],[[24,22],23],[[12,22],23],[1,[[4,[25,3]]]],[1,[[4,[26,3]]]],[1,[[4,[27,3]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[3,24],[-1,-1,[]],[-1,-1,[]],[1,[[4,[28,3]]]],[1,[[4,[29,3]]]],[1,[[4,[30,3]]]],[1,17],[1,[[4,[31,3]]]],[1,[[4,[32,3]]]],[1,[[4,[33,3]]]],[1,[[4,[34,3]]]],[1,[[4,[35,3]]]],[-1,12,[]],[1,[[4,[6,3]]]],[1,[[4,[36,3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[4,[37,3]]]],[1,[[4,[38,3]]]],[1,17],[1,[[4,[39,3]]]],[1,[[4,[40,3]]]],[1,[[4,[41,3]]]],[1,[[4,[42,3]]]],[1,[[4,[43,3]]]],[[[45,[44]]],1],[[[45,[44]],46],47],[1,48],[47,[[49,[8]]]],[[-1,46],[[49,[8]]],[[50,[[45,[44]]]]]],[[-1,46],[[49,[8]]],[[50,[[45,[6]]]]]],[1,[[4,[51,3]]]],[1,[[4,[52,3]]]],[1,[[4,[53,3]]]],[1,[[4,[54,3]]]],[1,[[4,[55,3]]]],[1,[[4,[56,3]]]],[1,[[4,[57,3]]]],[1,[[4,[58,3]]]],[[1,48],8],[1,[[4,[59,3]]]],[1,[[4,[60,3]]]],[1,[[4,[16,3]]]],[-1,16,[]],[-1,16,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[1,[[4,[31,3]]]],[[1,48],[[4,[[7,[31]],3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,-1],[[4,[31,64]]],65],[66,[[7,[67]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[68,[[0,[69]]]],[70,[[0,[69]]]],[68,[[0,[69]]]],[70,[[0,[69]]]],0,[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,6],[[4,[31,64]]]],[[68,[7,[6]]],8],[[11,[7,[6]]],8],[[70,[7,[6]]],8],[[71,[7,[6]]],8],[[13,[7,[6]]],8],[[66,[7,[6]]],8],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,31,31],[[4,[8,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,31,31,31],[[4,[8,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,[63,[31]]],[[4,[31,64]]]],[[62,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],28,31],[[4,[31,64]]]],[62,[[4,[8,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[62,31],[[4,[8,64]]]],[[62,31,31,31,-1],[[4,[8,64]]],65],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],0,[[62,10],8],[[62,31,31,31],[[4,[8,64]]]],0,[68,68],[11,11],[70,70],[71,71],[13,13],[66,66],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[62,31,31,31,31],[[4,[8,64]]]],[[62,31,31,31,31],[[4,[8,64]]]],[[62,31,[63,[31]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,-1],[[4,[31,64]]],65],[[62,31,-1],31,65],[[62,31,20],31],[[62,31,21],31],[[62,31],31],[[62,31],31],[[62,31,[63,[31]],6,6,6],[[4,[31,64]]]],[[62,31,55,6,56],31],[[62,31],31],[[62,31,6],31],[[62,31,36],31],[[72,11],12],[[72,13],12],[[62,31,31,31],[[4,[8,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,[63,[41]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,31,31,31,[63,[41]],-1],[[4,[8,64]]],65],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,31,[63,[41]],[63,[41]],-1],[[4,[8,64]]],65],[[62,31,31,31,[63,[41]],[63,[41]],-1],[[4,[8,64]]],65],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],0,0,0,[[62,31,14,-1],8,65],[[62,31,14,-1],8,65],[[62,31,14,-1],8,65],[[62,31,14,-1],8,65],[62,31],[[62,13],[[63,[31]]]],0,[70,[[63,[31]]]],[[],62],[[],68],[[],70],[[],71],[[],72],[62,[[4,[8,64]]]],[68,16],[11,16],[70,16],[71,16],[13,16],[66,16],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31],[[4,[8,64]]]],[62,[[4,[8,64]]]],0,[62,[[4,[8,64]]]],[62,[[4,[8,64]]]],[62,[[4,[8,64]]]],[[62,31],[[4,[8,64]]]],[[62,31,[63,[31]],31,31,31,31,31,31,31,31,31,31,-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,19,31,-1,-2],8,[[73,[16]]],[[50,[[45,[31]]]]]],0,[[11,11],17],[[13,13],17],[[66,66],17],[[62,31,31],[[4,[8,64]]]],[[62,31,31],[[4,[8,64]]]],[[62,31,18,-1],8,[[50,[[45,[6]]]]]],[[62,31,18,-1],8,[[50,[[45,[6]]]]]],0,[[62,31,[63,[31]],31,31,-1],[[4,[31,64]]],65],[[62,-1],31,[[73,[16]]]],0,[[62,-1],8,[[73,[16]]]],0,[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[72,12],[62,[[7,[48]]]],[[68,22],23],[[11,22],23],[[70,22],23],[[71,22],23],[[13,22],23],[[66,22],23],[[66,22],23],[[64,22],23],[[64,22],23],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[21,66],[20,66],[43,66],[54,66],[26,66],[28,66],[9,66],[29,66],[52,66],[-1,-1,[]],[42,66],[53,66],[30,66],[15,66],[2,66],[37,66],[5,66],[57,66],[16,66],[40,66],[51,66],[34,66],[33,66],[36,66],[58,66],[41,66],[74,66],[19,66],[35,66],[32,66],[25,66],[60,66],[6,66],[18,66],[56,66],[10,66],[27,66],[55,66],[59,66],[38,66],[39,66],[14,66],[75,66],[-1,-1,[]],[-1,-1,[]],[[62,31,[63,[31]],31,-1],[[4,[31,64]]],65],[[62,31],[[4,[31,64]]]],0,[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[11,[[8,[74,76]]]],0,[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,60],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[68,[[0,[69]]]],[68,[[0,[69]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,31,31,31,31],[[4,[8,64]]]],[[62,31,31,31,31,31],[[4,[8,64]]]],[[62,31,-1],8,65],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,-1],8,65],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,31,31,31],[[4,[8,64]]]],0,[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[62,31],[66,[[63,[31]]]],[66,[[63,[31]]]],[62,[[4,[8,64]]]],[62,[[4,[8,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31,35,-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,35,-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31,35,-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,35,-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31,35,-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,35,-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31,35,-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,35,-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,31,31,[63,[35]],-1],[[4,[8,64]]],65],[[62,31,[63,[31]],31,-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31,-1],[[4,[31,64]]],65],[72,12],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,6],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,31,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77],[[4,[8,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31],[[4,[8,64]]]],[[62,77,31,31,31,-1],[[4,[8,64]]],65],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,31,31],[[4,[8,64]]]],[[62,77,31,31,31,31],[[4,[8,64]]]],[[62,77,31,31,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],6,6,6],[[4,[31,64]]]],[[62,77,31,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,[63,[41]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,31,31,31,[63,[41]],-1],[[4,[8,64]]],65],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,31,[63,[41]],[63,[41]],-1],[[4,[8,64]]],65],[[62,77,31,31,31,[63,[41]],[63,[41]],-1],[[4,[8,64]]],65],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31],[[4,[8,64]]]],[[62,77],[[4,[8,64]]]],[[62,77],[[4,[8,64]]]],[[62,77],[[4,[8,64]]]],[[62,77,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31,31,31,31,31,31,31,31,31,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,31],[[4,[8,64]]]],[[62,77,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,60],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,31,31,31,31],[[4,[8,64]]]],[[62,77,31,31,31,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,30,31],[[4,[31,64]]]],[[62,77,31,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77],[[4,[8,64]]]],[[62,77],[[4,[8,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31,35,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,35,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31,35,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,35,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31,35,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,35,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31,35,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,35,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,[63,[35]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,31,31,[63,[35]],-1],[[4,[8,64]]],65],[[62,77,31,[63,[31]],31,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,-1],[[4,[31,64]]],65],[[62,77,13],[[4,[8,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]]],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,6],[[4,[8,64]]]],[[62,77,31,6],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,[63,[41]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,-1],[[4,[8,64]]],65],[[62,77,31,31,40,-1],[[4,[8,64]]],65],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,31],[[4,[8,64]]]],[[62,77,31,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77],[[4,[8,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31],[[4,[8,64]]]],[[62,77,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,31,31,31,31,31,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31,31,31,31],[[4,[31,64]]]],[[62,77],[[4,[8,64]]]],[[62,77,31],[[4,[8,64]]]],[[62,77,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,58],[[4,[8,64]]]],[[62,77,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,31,[63,[41]],-1],[[4,[8,64]]],65],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,31,31,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,31,-1],[[4,[8,64]]],65],[[62,77],[[4,[8,64]]]],[[62,77],[[4,[8,64]]]],[[62,77],[[4,[8,64]]]],[[62,77,31,31,31,31,31,31,31,31,31,31,31],[[4,[8,64]]]],[[62,77,31,31,31,31,31,31,31,31,31,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,13],8],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31,-1],[[4,[31,64]]],65],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,77,31,31],[[4,[8,64]]]],[[62,77,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,77,31,[63,[31]],31,31],[[4,[31,64]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]]],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[13,13],17],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[62,[[4,[8,64]]]],0,[71,[[63,[31]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,6],[[4,[8,64]]]],[[62,31,6],[[4,[8,64]]]],[[62,31,6,6],8],[[62,31,[63,[31]],31,[63,[41]],-1],[[4,[31,64]]],65],[-1,[[49,[68]]],[[50,[[45,[44]]]]]],[-1,[[49,[68]]],[[50,[[45,[6]]]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,-1],[[4,[8,64]]],65],[[62,31,31,40,-1],[[4,[8,64]]],65],0,[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,6,14,-1],8,65],[[62,31,6,14,-1],8,65],[[62,31,6,14,-1],8,65],[[62,31,6,-1],8,[[73,[16]]]],[[62,31,31],[[4,[8,64]]]],[[62,5,42],8],0,[[62,31,31,31],[[4,[8,64]]]],[62,68],[72,68],[62,68],[[62,-1],8,[[73,[16]]]],[62,68],[[62,31,-1],8,[[73,[16]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[],62],[[],68],[31,11],[[],70],[[],71],[[75,[63,[31]],[63,[31]],[7,[66]]],13],[[],72],[68,62],[62,8],[62,[[4,[8,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],0,[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],0,[[62,31,[63,[31]],-1],[[4,[31,64]]],65],[62,[[4,[13,64]]]],[[62,31,[63,[31]],31,31,-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31],[[4,[8,64]]]],[[62,31,31],[[4,[8,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,31,31,31,31,31,31,31],[[4,[8,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31],[[4,[8,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31],[[4,[8,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[66,[[7,[10]]]],[66,[[7,[74]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31,31,31,31],[[4,[31,64]]]],0,[[62,31,[63,[31]],31,31,31,31,31,31],[[4,[31,64]]]],0,0,[62,[[4,[8,64]]]],[[62,31],[[4,[8,64]]]],[[62,31],[[4,[8,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,[63,[48]]],[[4,[8,64]]]],[[62,[63,[48]]],[[4,[8,64]]]],[[62,74],[[4,[8,64]]]],[62,[[63,[48]]]],[62,[[63,[48]]]],[[62,31,58],[[4,[8,64]]]],[[62,31,31],[[4,[8,64]]]],[[62,44,44],8],[[11,44,44],8],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,59,6,[63,[31]],[63,[-1]]],8,[[73,[16]]]],[[62,-1],8,[[73,[16]]]],[[62,-1],8,[[73,[16]]]],[[62,31,-1],31,65],[[62,31,20],31],[[62,31,21],31],[[62,31],31],[[62,31,75],31],[[62,31],31],[[62,31,6],31],[[62,31,36],31],[[62,31,31,[63,[41]],-1],[[4,[8,64]]],65],[[62,-1],31,[[73,[16]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,31],[[4,[8,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,31,31],[[4,[8,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,31,31,31,31],[[4,[8,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,31,-1],[[4,[8,64]]],65],[62,[[4,[8,64]]]],[62,[[4,[8,64]]]],[62,[[4,[8,64]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[-1,16,[]],[[62,31,31,31,31,31,31,31,31,31,31,31],[[4,[8,64]]]],[[62,31,31,31,31,31,31,31,31,31,31,31],[[4,[8,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[62,31],[[62,[63,[31]]],31],[[62,31,31],31],[[62,[63,[31]],31,31],31],[62,31],[[62,[63,[31]]],31],[[62,31,31,31,31],31],[[62,[63,[31]],31,31,31,31],31],[62,31],[[62,[63,[31]]],31],[62,31],[[62,[63,[31]]],31],[[62,6],31],[[62,[63,[31]],6],31],[[62,31,60],8],[[62,31,-1],31,65],[[62,[63,[31]],31,-1],31,65],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[[62,31,15,6,6,6,6,34,[63,[2]]],31],[[62,[63,[31]],31,15,6,6,6,6,34,[63,[2]]],31],[[62,6,6],31],[[62,[63,[31]],6,6],31],[[62,31,6],31],[[62,[63,[31]],31,6],31],[62,31],[[62,[63,[31]]],31],[[62,-1],31,[[73,[16]]]],[[62,2],31],[[62,[63,[31]],2],31],[62,31],[[62,[63,[31]]],31],[[62,[63,[31]],60,31],31],[62,31],[[62,[63,[31]]],31],[62,31],[[62,[63,[31]]],31],[62,31],[[62,[63,[31]]],31],[[62,31],31],[[62,[63,[31]],31],31],[[62,31],31],[[62,[63,[31]],31],31],[62,31],[[62,[63,[31]]],31],[[62,-1],31,65],[[62,[63,[31]],-1],31,65],[[62,31,6],31],[[62,[63,[31]],31,6],31],[62,31],[[62,[63,[31]]],31],0,[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]]],31],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[62,[[4,[8,64]]]],[66,2],[66,5],[66,9],[66,10],[66,14],[66,15],[66,18],[66,19],[66,25],[66,26],[66,27],[66,28],[66,29],[66,30],[66,31],[66,31],[66,31],[66,32],[66,33],[66,34],[66,35],[66,37],[66,38],[66,39],[66,6],[66,20],[66,21],[66,6],[66,36],[66,75],[66,74],[66,40],[66,41],[66,42],[66,43],[66,51],[66,52],[66,53],[66,54],[66,55],[66,56],[66,57],[66,58],[66,59],[66,60],[[62,31,[63,[31]],60,[63,[31]]],31],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31,-1],[[4,[31,64]]],65],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],[62,[[63,[[8,[44,44]]]]]],[11,[[8,[44,44]]]],0,[[62,31,31],[[4,[8,64]]]],[[62,31,[63,[31]],31,31,31,31],[[4,[31,64]]]],[[62,31,[63,[31]],31,31],[[4,[31,64]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[67,67],[78,78],[79,79],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[80,80],17],[[67,67],17],[[78,78],17],[[79,79],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],0,0,[[80,22],23],[[67,22],23],[[78,22],23],[[79,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[75,80],[81,82],[83,82],[[80,-1],8,84],[[67,-1],8,84],[[78,-1],8,84],[[79,-1],8,84],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[69]]]],[[],[[0,[69]]]],[[],[[0,[69]]]],0,[76,[[63,[80]]]],[6,[[63,[82]]]],[6,[[63,[82]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[75,17],[75,17],[75,17],[75,17],[75,17],[75,17],[75,17],[75,17],[75,17],[75,17],[75,17],[75,17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[85,85],[86,86],[87,87],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[68,[[4,[88,87]]]],[[85,22],23],[[86,22],23],[[87,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[85,86],[-1,-1,[]],[86,87],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[89,13],[[4,[90,86]]]],[[89,13],[[4,[91,86]]]],[[89,13],[[4,[92,86]]]],[[89,13],[[4,[93,86]]]],[[89,13],[[4,[94,86]]]],[[89,13],[[4,[95,86]]]],[[89,13],[[4,[96,86]]]],[[89,13],[[4,[97,86]]]],[[89,13],[[4,[98,86]]]],[[89,13],[[4,[99,86]]]],[[89,13],[[4,[100,86]]]],[[89,13],[[4,[101,86]]]],[[89,13],[[4,[102,86]]]],[[89,13],[[4,[103,86]]]],[[89,13],[[4,[104,86]]]],[[89,13],[[4,[105,86]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[106,106],[107,107],[108,108],[105,105],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[106,106],109],0,[[106,106],17],[[107,107],17],[[105,105],17],[[-1,-2],17,[],[]],[[106,22],23],[[107,22],23],[[108,22],23],[[105,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[105,17],[107,17],[107,17],[105,17],[107,17],[107,17],[107,17],[105,17],[107,17],[105,17],[107,17],[107,17],[107,17],0,[[[110,[105]]],108],0,[[106,106],[[63,[109]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[97,97],[96,96],[95,95],[102,102],[92,92],[93,93],[91,91],[98,98],[101,101],[100,100],[99,99],[94,94],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],0,0,0,[[97,97],17],[[96,96],17],[[95,95],17],[[102,102],17],[[92,92],17],[[93,93],17],[[91,91],17],[[94,94],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],0,[[97,22],23],[[96,22],23],[[95,22],23],[[102,22],23],[[92,22],23],[[93,22],23],[[91,22],23],[[98,22],23],[[101,22],23],[[100,22],23],[[99,22],23],[[94,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[90,90],[104,104],[103,103],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[90,90],17],[[104,104],17],[[103,103],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[90,22],23],[[104,22],23],[[103,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[111,111],[[-1,-2],8,[],[]],0,0,0,[[111,111],17],[[-1,-2],17,[],[]],0,0,0,[[112,22],23],[[113,22],23],[[111,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],0,0,0,0,[[[114,[-1]],-1],[[110,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[110,[-1]]],[[110,[-1]]],[]],[[-1,-2],8,[],[]],[[],[[114,[-1]]],115],[[[110,[-1]],[110,[-1]]],17,[]],[[-1,-2],17,[],[]],[[[114,[-1]],-1],[[110,[-1]]],116],[[[110,[-1]],22],23,[]],[[[114,[-1]],22],23,117],[-1,-1,[]],[-1,-1,[]],[[[110,[-1]]],6,[]],[[[114,[-1]],[110,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[114,[-1]]],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,61,[]],[-1,61,[]]],"c":[],"p":[[3,"Decoder",6],[4,"AccessQualifier",3866],[4,"DecodeError",6],[4,"Result",3867],[4,"AddressingModel",3866],[15,"u32"],[3,"Vec",3868],[15,"tuple"],[4,"BuiltIn",3866],[4,"Capability",3866],[3,"ModuleHeader",177],[4,"ParseAction",6],[3,"Instruction",177],[4,"Decoration",3866],[4,"Dim",3866],[3,"String",3869],[15,"bool"],[4,"ExecutionMode",3866],[4,"ExecutionModel",3866],[15,"f32"],[15,"f64"],[3,"Formatter",3870],[6,"Result",3870],[4,"ParseState",6],[3,"FPFastMathMode",3866],[4,"FPRoundingMode",3866],[3,"FragmentShadingRate",3866],[3,"FunctionControl",3866],[4,"FunctionParameterAttribute",3866],[4,"GroupOperation",3866],[6,"Word",3866],[4,"ImageChannelDataType",3866],[4,"ImageChannelOrder",3866],[4,"ImageFormat",3866],[3,"ImageOperands",3866],[15,"u64"],[4,"KernelEnqueueFlags",3866],[3,"KernelProfilingInfo",3866],[4,"LinkageType",3866],[3,"LoopControl",3866],[3,"MemoryAccess",3866],[4,"MemoryModel",3866],[3,"MemorySemantics",3866],[15,"u8"],[15,"slice"],[8,"Consumer",6],[3,"Parser",6],[15,"usize"],[6,"ParseResult",6],[8,"AsRef",3871],[3,"RayFlags",3866],[4,"RayQueryCandidateIntersectionType",3866],[4,"RayQueryCommittedIntersectionType",3866],[4,"RayQueryIntersection",3866],[4,"SamplerAddressingMode",3866],[4,"SamplerFilterMode",3866],[4,"Scope",3866],[3,"SelectionControl",3866],[4,"SourceLanguage",3866],[4,"StorageClass",3866],[3,"TypeId",3872],[3,"Builder",177],[4,"Option",3873],[4,"Error",177],[8,"IntoIterator",3874],[4,"Operand",177],[3,"LogicalOperand",1381],[3,"Module",177],[8,"Iterator",3875],[3,"Function",177],[3,"Block",177],[3,"Loader",177],[8,"Into",3871],[15,"str"],[4,"Op",3866],[15,"u16"],[4,"InsertPoint",177],[4,"OperandQuantifier",1381],[4,"OperandKind",1381],[3,"Instruction",1381],[4,"GLOp",3866],[3,"ExtendedInstruction",1381],[4,"CLOp",3866],[8,"Hasher",3876],[4,"OperandError",1555],[4,"InstructionError",1555],[4,"ConversionError",1555],[3,"Module",3766],[3,"LiftContext",1555],[4,"Branch",2042],[3,"Capability",1862],[3,"EntryPoint",1862],[3,"ExecutionMode",1862],[3,"ExecutionModeId",1862],[3,"ExtInst",1862],[3,"ExtInstImport",1862],[3,"Extension",1862],[3,"Function",1862],[3,"FunctionCall",1862],[3,"FunctionEnd",1862],[3,"FunctionParameter",1862],[3,"MemoryModel",1862],[4,"Op",2042],[4,"Terminator",2042],[4,"Type",1630],[4,"Decoration",1630],[4,"Constant",1630],[3,"StructMember",1630],[4,"Ordering",3877],[3,"Token",3837],[3,"Jump",3766],[3,"EntryPoint",3766],[3,"Block",3766],[3,"Storage",3837],[8,"Default",3878],[8,"PartialEq",3877],[8,"Debug",3870],[8,"Assemble",6],[8,"Disassemble",6],[3,"CoreInstructionTable",1381],[3,"GlslStd450InstructionTable",1381],[3,"OpenCLStd100InstructionTable",1381],[13,"Sampler",1827],[13,"Image",1830],[13,"Matrix",1830],[13,"CooperativeMatrixNV",1830],[13,"Vector",1830],[13,"Array",1830],[13,"RuntimeArray",1830],[13,"SampledImage",1830],[13,"Struct",1830],[13,"Function",1830],[13,"ForwardPointer",1830],[13,"Pipe",1830],[13,"Int",1830],[13,"Pointer",1830],[13,"Opaque",1830],[13,"Float",1830],[13,"BranchConditional",2600],[13,"LoopMerge",2600],[13,"Switch",2600],[13,"SelectionMerge",2600],[13,"LifetimeStart",2600],[13,"LifetimeStop",2600],[13,"Branch",2600],[13,"ReturnValue",2600],[13,"Phi",2600],[13,"CooperativeMatrixMulAddNV",2619],[13,"TraceRayKHR",2619],[13,"ConvertUToAccelerationStructureKHR",2619],[13,"RayQueryInitializeKHR",2619],[13,"TraceNV",2619],[13,"ArrayLength",2619],[13,"SubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL",2619],[13,"AccessChain",2619],[13,"InBoundsAccessChain",2619],[13,"PtrAccessChain",2619],[13,"InBoundsPtrAccessChain",2619],[13,"ShiftRightLogical",2619],[13,"ShiftRightArithmetic",2619],[13,"ShiftLeftLogical",2619],[13,"BitFieldInsert",2619],[13,"BitFieldSExtract",2619],[13,"BitFieldUExtract",2619],[13,"BitReverse",2619],[13,"BitCount",2619],[13,"SubgroupAvcBmeInitializeINTEL",2619],[13,"SubgroupAvcSicConfigureSkcINTEL",2619],[13,"SubgroupAvcSicSetBlockBasedRawSkipSadINTEL",2619],[13,"SubgroupAvcImeEvaluateWithDualReferenceINTEL",2619],[13,"SubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL",2619],[13,"SubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL",2619],[13,"SubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL",2619],[13,"SubgroupAvcRefEvaluateWithDualReferenceINTEL",2619],[13,"SubgroupAvcSicEvaluateWithDualReferenceINTEL",2619],[13,"SubgroupAvcImeSetDualReferenceINTEL",2619],[13,"ExecuteCallableKHR",2619],[13,"ExecuteCallableNV",2619],[13,"ConstantPipeStorage",2619],[13,"SubgroupAvcSicSetIntraChromaModeCostFunctionINTEL",2619],[13,"GroupNonUniformIAdd",2619],[13,"GroupNonUniformFAdd",2619],[13,"GroupNonUniformIMul",2619],[13,"GroupNonUniformFMul",2619],[13,"GroupNonUniformSMin",2619],[13,"GroupNonUniformUMin",2619],[13,"GroupNonUniformFMin",2619],[13,"GroupNonUniformSMax",2619],[13,"GroupNonUniformUMax",2619],[13,"GroupNonUniformFMax",2619],[13,"GroupNonUniformBitwiseAnd",2619],[13,"GroupNonUniformBitwiseOr",2619],[13,"GroupNonUniformBitwiseXor",2619],[13,"GroupNonUniformLogicalAnd",2619],[13,"GroupNonUniformLogicalOr",2619],[13,"GroupNonUniformLogicalXor",2619],[13,"ImageSampleFootprintNV",2619],[13,"Line",2619],[13,"CooperativeMatrixLoadNV",2619],[13,"CooperativeMatrixStoreNV",2619],[13,"AtomicCompareExchange",2619],[13,"AtomicCompareExchangeWeak",2619],[13,"VectorInsertDynamic",2619],[13,"ImageGather",2619],[13,"ImageSparseGather",2619],[13,"VectorShuffle",2619],[13,"CompositeExtract",2619],[13,"CompositeInsert",2619],[13,"Select",2619],[13,"CompositeConstruct",2619],[13,"SourceContinued",2619],[13,"ImageTexelPointer",2619],[13,"ImageSampleImplicitLod",2619],[13,"ImageSampleExplicitLod",2619],[13,"ImageSampleDrefImplicitLod",2619],[13,"ImageSampleDrefExplicitLod",2619],[13,"ImageSampleProjImplicitLod",2619],[13,"ImageSampleProjExplicitLod",2619],[13,"ImageSampleProjDrefImplicitLod",2619],[13,"ImageSampleProjDrefExplicitLod",2619],[13,"ImageFetch",2619],[13,"ImageDrefGather",2619],[13,"ImageRead",2619],[13,"ImageWrite",2619],[13,"ImageQueryLod",2619],[13,"ImageSparseSampleImplicitLod",2619],[13,"ImageSparseSampleExplicitLod",2619],[13,"ImageSparseSampleDrefImplicitLod",2619],[13,"ImageSparseSampleDrefExplicitLod",2619],[13,"ImageSparseSampleProjImplicitLod",2619],[13,"ImageSparseSampleProjExplicitLod",2619],[13,"ImageSparseSampleProjDrefImplicitLod",2619],[13,"ImageSparseSampleProjDrefExplicitLod",2619],[13,"ImageSparseFetch",2619],[13,"ImageSparseDrefGather",2619],[13,"ImageSparseRead",2619],[13,"FragmentMaskFetchAMD",2619],[13,"FragmentFetchAMD",2619],[13,"SubgroupImageBlockReadINTEL",2619],[13,"SubgroupImageBlockWriteINTEL",2619],[13,"SubgroupImageMediaBlockReadINTEL",2619],[13,"SubgroupImageMediaBlockWriteINTEL",2619],[13,"SubgroupAvcMceSetMotionVectorCostFunctionINTEL",2619],[13,"SubgroupShuffleDownINTEL",2619],[13,"SubgroupShuffleUpINTEL",2619],[13,"SubgroupShuffleINTEL",2619],[13,"SubgroupShuffleXorINTEL",2619],[13,"SubgroupBlockWriteINTEL",2619],[13,"Decorate",2619],[13,"MemberDecorate",2619],[13,"DecorateId",2619],[13,"DecorateString",2619],[13,"DecorateStringGOOGLE",2619],[13,"MemberDecorateString",2619],[13,"MemberDecorateStringGOOGLE",2619],[13,"GroupDecorate",2619],[13,"GroupMemberDecorate",2619],[13,"GroupNonUniformShuffleUp",2619],[13,"GroupNonUniformShuffleDown",2619],[13,"GroupAsyncCopy",2619],[13,"GroupNonUniformQuadSwap",2619],[13,"SubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL",2619],[13,"SubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL",2619],[13,"SubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL",2619],[13,"SubgroupAvcFmeInitializeINTEL",2619],[13,"SubgroupAvcSicGetMotionVectorMaskINTEL",2619],[13,"SubgroupAvcMceSetInterDirectionPenaltyINTEL",2619],[13,"SubgroupAvcImeRefWindowSizeINTEL",2619],[13,"RetainEvent",2619],[13,"ReleaseEvent",2619],[13,"IsValidEvent",2619],[13,"SetUserEventStatus",2619],[13,"CaptureEventProfilingInfo",2619],[13,"GroupWaitEvents",2619],[13,"ControlBarrier",2619],[13,"GroupAll",2619],[13,"GroupAny",2619],[13,"GroupBroadcast",2619],[13,"GroupIAdd",2619],[13,"GroupFAdd",2619],[13,"GroupFMin",2619],[13,"GroupUMin",2619],[13,"GroupSMin",2619],[13,"GroupFMax",2619],[13,"GroupUMax",2619],[13,"GroupSMax",2619],[13,"GroupReserveReadPipePackets",2619],[13,"GroupReserveWritePipePackets",2619],[13,"GroupCommitReadPipe",2619],[13,"GroupCommitWritePipe",2619],[13,"GroupNonUniformElect",2619],[13,"GroupNonUniformAll",2619],[13,"GroupNonUniformAny",2619],[13,"GroupNonUniformAllEqual",2619],[13,"GroupNonUniformBroadcast",2619],[13,"GroupNonUniformBroadcastFirst",2619],[13,"GroupNonUniformBallot",2619],[13,"GroupNonUniformInverseBallot",2619],[13,"GroupNonUniformBallotBitExtract",2619],[13,"GroupNonUniformBallotBitCount",2619],[13,"GroupNonUniformBallotFindLSB",2619],[13,"GroupNonUniformBallotFindMSB",2619],[13,"GroupNonUniformShuffle",2619],[13,"GroupNonUniformShuffleXor",2619],[13,"GroupNonUniformQuadBroadcast",2619],[13,"GroupIAddNonUniformAMD",2619],[13,"GroupFAddNonUniformAMD",2619],[13,"GroupFMinNonUniformAMD",2619],[13,"GroupUMinNonUniformAMD",2619],[13,"GroupSMinNonUniformAMD",2619],[13,"GroupFMaxNonUniformAMD",2619],[13,"GroupUMaxNonUniformAMD",2619],[13,"GroupSMaxNonUniformAMD",2619],[13,"ReadClockKHR",2619],[13,"SourceExtension",2619],[13,"Source",2619],[13,"EnqueueKernel",2619],[13,"ConvertFToU",2619],[13,"ConvertFToS",2619],[13,"FConvert",2619],[13,"FunctionPointerINTEL",2619],[13,"BuildNDRange",2619],[13,"ReportIntersectionNV",2619],[13,"ReportIntersectionKHR",2619],[13,"RayQueryGenerateIntersectionKHR",2619],[13,"SampledImage",2619],[13,"ImageQueryFormat",2619],[13,"ImageQueryOrder",2619],[13,"ImageQuerySizeLod",2619],[13,"ImageQuerySize",2619],[13,"ImageQueryLevels",2619],[13,"ImageQuerySamples",2619],[13,"SubgroupAvcImeGetBorderReachedINTEL",2619],[13,"SubgroupAvcImeAdjustRefOffsetINTEL",2619],[13,"VmeImageINTEL",2619],[13,"TypeVmeImageINTEL",2619],[13,"VectorExtractDynamic",2619],[13,"ReservedReadPipe",2619],[13,"ReservedWritePipe",2619],[13,"SubgroupReadInvocationKHR",2619],[13,"WritePackedPrimitiveIndices4x8NV",2619],[13,"Variable",2619],[13,"FPGARegINTEL",2619],[13,"ConvertUToPtr",2619],[13,"RayQueryGetIntersectionTypeKHR",2619],[13,"RayQueryGetIntersectionTKHR",2619],[13,"RayQueryGetIntersectionInstanceCustomIndexKHR",2619],[13,"RayQueryGetIntersectionInstanceIdKHR",2619],[13,"RayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR",2619],[13,"RayQueryGetIntersectionGeometryIndexKHR",2619],[13,"RayQueryGetIntersectionPrimitiveIndexKHR",2619],[13,"RayQueryGetIntersectionBarycentricsKHR",2619],[13,"RayQueryGetIntersectionFrontFaceKHR",2619],[13,"RayQueryGetIntersectionObjectRayDirectionKHR",2619],[13,"RayQueryGetIntersectionObjectRayOriginKHR",2619],[13,"RayQueryGetIntersectionObjectToWorldKHR",2619],[13,"RayQueryGetIntersectionWorldToObjectKHR",2619],[13,"SubgroupAvcSicConfigureIpeLumaINTEL",2619],[13,"SubgroupAvcSicConfigureIpeLumaChromaINTEL",2619],[13,"GetKernelNDrangeSubGroupCount",2619],[13,"GetKernelNDrangeMaxSubGroupSize",2619],[13,"GetKernelWorkGroupSize",2619],[13,"GetKernelPreferredWorkGroupSizeMultiple",2619],[13,"GetKernelLocalSizeForSubgroupCount",2619],[13,"GetKernelMaxNumSubgroups",2619],[13,"MatrixTimesMatrix",2619],[13,"LoopControlINTEL",2619],[13,"SubgroupAvcSicSetIntraLumaModeCostFunctionINTEL",2619],[13,"SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL",2619],[13,"SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL",2619],[13,"SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL",2619],[13,"Transpose",2619],[13,"MatrixTimesScalar",2619],[13,"VectorTimesMatrix",2619],[13,"MatrixTimesVector",2619],[13,"SubgroupAvcImeSetMaxMotionVectorCountINTEL",2619],[13,"MemberName",2619],[13,"MemoryBarrier",2619],[13,"AtomicLoad",2619],[13,"AtomicStore",2619],[13,"AtomicExchange",2619],[13,"AtomicIIncrement",2619],[13,"AtomicIDecrement",2619],[13,"AtomicIAdd",2619],[13,"AtomicISub",2619],[13,"AtomicSMin",2619],[13,"AtomicUMin",2619],[13,"AtomicSMax",2619],[13,"AtomicUMax",2619],[13,"AtomicAnd",2619],[13,"AtomicOr",2619],[13,"AtomicXor",2619],[13,"AtomicFlagTestAndSet",2619],[13,"AtomicFlagClear",2619],[13,"MemoryNamedBarrier",2619],[13,"AtomicFAddEXT",2619],[13,"Load",2619],[13,"Store",2619],[13,"CopyMemory",2619],[13,"CopyMemorySized",2619],[13,"Name",2619],[13,"EnqueueMarker",2619],[13,"ReserveReadPipePackets",2619],[13,"ReserveWritePipePackets",2619],[13,"CopyObject",2619],[13,"Bitcast",2619],[13,"SNegate",2619],[13,"FNegate",2619],[13,"LogicalNot",2619],[13,"Not",2619],[13,"CopyLogical",2619],[13,"UCountLeadingZerosINTEL",2619],[13,"UCountTrailingZerosINTEL",2619],[13,"IAdd",2619],[13,"FAdd",2619],[13,"ISub",2619],[13,"FSub",2619],[13,"IMul",2619],[13,"FMul",2619],[13,"UDiv",2619],[13,"SDiv",2619],[13,"FDiv",2619],[13,"UMod",2619],[13,"SRem",2619],[13,"SMod",2619],[13,"FRem",2619],[13,"FMod",2619],[13,"IAddCarry",2619],[13,"ISubBorrow",2619],[13,"UMulExtended",2619],[13,"SMulExtended",2619],[13,"LogicalEqual",2619],[13,"LogicalNotEqual",2619],[13,"LogicalOr",2619],[13,"LogicalAnd",2619],[13,"IEqual",2619],[13,"INotEqual",2619],[13,"UGreaterThan",2619],[13,"SGreaterThan",2619],[13,"UGreaterThanEqual",2619],[13,"SGreaterThanEqual",2619],[13,"ULessThan",2619],[13,"SLessThan",2619],[13,"ULessThanEqual",2619],[13,"SLessThanEqual",2619],[13,"FOrdEqual",2619],[13,"FUnordEqual",2619],[13,"FOrdNotEqual",2619],[13,"FUnordNotEqual",2619],[13,"FOrdLessThan",2619],[13,"FUnordLessThan",2619],[13,"FOrdGreaterThan",2619],[13,"FUnordGreaterThan",2619],[13,"FOrdLessThanEqual",2619],[13,"FUnordLessThanEqual",2619],[13,"FOrdGreaterThanEqual",2619],[13,"FUnordGreaterThanEqual",2619],[13,"BitwiseOr",2619],[13,"BitwiseXor",2619],[13,"BitwiseAnd",2619],[13,"PtrEqual",2619],[13,"PtrNotEqual",2619],[13,"PtrDiff",2619],[13,"AbsISubINTEL",2619],[13,"AbsUSubINTEL",2619],[13,"IAddSatINTEL",2619],[13,"UAddSatINTEL",2619],[13,"IAverageINTEL",2619],[13,"UAverageINTEL",2619],[13,"IAverageRoundedINTEL",2619],[13,"UAverageRoundedINTEL",2619],[13,"ISubSatINTEL",2619],[13,"USubSatINTEL",2619],[13,"IMul32x16INTEL",2619],[13,"UMul32x16INTEL",2619],[13,"FunctionPointerCallINTEL",2619],[13,"DPdx",2619],[13,"DPdy",2619],[13,"Fwidth",2619],[13,"DPdxFine",2619],[13,"DPdyFine",2619],[13,"FwidthFine",2619],[13,"DPdxCoarse",2619],[13,"DPdyCoarse",2619],[13,"FwidthCoarse",2619],[13,"SubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL",2619],[13,"SubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL",2619],[13,"SubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL",2619],[13,"SubgroupAvcRefEvaluateWithMultiReferenceINTEL",2619],[13,"SubgroupAvcSicEvaluateWithMultiReferenceINTEL",2619],[13,"SubgroupAvcSicSetSkcForwardTransformEnableINTEL",2619],[13,"SubgroupAvcImeSetWeightedSadINTEL",2619],[13,"SubgroupAvcMceSetInterShapePenaltyINTEL",2619],[13,"SubgroupAvcSicSetIntraLumaShapePenaltyINTEL",2619],[13,"ReadPipe",2619],[13,"WritePipe",2619],[13,"CommitReadPipe",2619],[13,"CommitWritePipe",2619],[13,"GetNumPipePackets",2619],[13,"GetMaxPipePackets",2619],[13,"ReadPipeBlockingINTEL",2619],[13,"WritePipeBlockingINTEL",2619],[13,"SubgroupAvcImeInitializeINTEL",2619],[13,"SubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL",2619],[13,"SubgroupAvcMceSetAcOnlyHaarINTEL",2619],[13,"SubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL",2619],[13,"SubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL",2619],[13,"SubgroupAvcMceConvertToImePayloadINTEL",2619],[13,"SubgroupAvcMceConvertToImeResultINTEL",2619],[13,"SubgroupAvcMceConvertToRefPayloadINTEL",2619],[13,"SubgroupAvcMceConvertToRefResultINTEL",2619],[13,"SubgroupAvcMceConvertToSicPayloadINTEL",2619],[13,"SubgroupAvcMceConvertToSicResultINTEL",2619],[13,"SubgroupAvcMceGetMotionVectorsINTEL",2619],[13,"SubgroupAvcMceGetInterDistortionsINTEL",2619],[13,"SubgroupAvcMceGetBestInterDistortionsINTEL",2619],[13,"SubgroupAvcMceGetInterMajorShapeINTEL",2619],[13,"SubgroupAvcMceGetInterMinorShapeINTEL",2619],[13,"SubgroupAvcMceGetInterDirectionsINTEL",2619],[13,"SubgroupAvcMceGetInterMotionVectorCountINTEL",2619],[13,"SubgroupAvcMceGetInterReferenceIdsINTEL",2619],[13,"SubgroupAvcImeSetSingleReferenceINTEL",2619],[13,"SubgroupAvcImeConvertToMcePayloadINTEL",2619],[13,"SubgroupAvcImeSetUnidirectionalMixDisableINTEL",2619],[13,"SubgroupAvcImeSetEarlySearchTerminationThresholdINTEL",2619],[13,"SubgroupAvcImeEvaluateWithSingleReferenceINTEL",2619],[13,"SubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL",2619],[13,"SubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL",2619],[13,"SubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL",2619],[13,"SubgroupAvcImeConvertToMceResultINTEL",2619],[13,"SubgroupAvcImeGetSingleReferenceStreaminINTEL",2619],[13,"SubgroupAvcImeGetDualReferenceStreaminINTEL",2619],[13,"SubgroupAvcImeStripSingleReferenceStreamoutINTEL",2619],[13,"SubgroupAvcImeStripDualReferenceStreamoutINTEL",2619],[13,"SubgroupAvcImeGetTruncatedSearchIndicationINTEL",2619],[13,"SubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL",2619],[13,"SubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL",2619],[13,"SubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL",2619],[13,"SubgroupAvcRefConvertToMcePayloadINTEL",2619],[13,"SubgroupAvcRefSetBidirectionalMixDisableINTEL",2619],[13,"SubgroupAvcRefSetBilinearFilterEnableINTEL",2619],[13,"SubgroupAvcRefEvaluateWithSingleReferenceINTEL",2619],[13,"SubgroupAvcRefConvertToMceResultINTEL",2619],[13,"SubgroupAvcSicConvertToMcePayloadINTEL",2619],[13,"SubgroupAvcSicSetBilinearFilterEnableINTEL",2619],[13,"SubgroupAvcSicEvaluateIpeINTEL",2619],[13,"SubgroupAvcSicEvaluateWithSingleReferenceINTEL",2619],[13,"SubgroupAvcSicConvertToMceResultINTEL",2619],[13,"SubgroupAvcSicGetIpeLumaShapeINTEL",2619],[13,"SubgroupAvcSicGetBestIpeLumaDistortionINTEL",2619],[13,"SubgroupAvcSicGetBestIpeChromaDistortionINTEL",2619],[13,"SubgroupAvcSicGetPackedIpeLumaModesINTEL",2619],[13,"SubgroupAvcSicGetIpeChromaModeINTEL",2619],[13,"SubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL",2619],[13,"SubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL",2619],[13,"SubgroupAvcSicGetInterRawSadsINTEL",2619],[13,"CreatePipeFromPipeStorage",2619],[13,"GenericPtrMemSemantics",2619],[13,"ConvertPtrToU",2619],[13,"PtrCastToGeneric",2619],[13,"GenericCastToPtr",2619],[13,"GenericCastToPtrExplicit",2619],[13,"SizeOf",2619],[13,"SubgroupBallotKHR",2619],[13,"SubgroupAllKHR",2619],[13,"SubgroupAnyKHR",2619],[13,"SubgroupAllEqualKHR",2619],[13,"ModuleProcessed",2619],[13,"SubgroupBlockReadINTEL",2619],[13,"SubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL",2619],[13,"SubgroupAvcMceGetDefaultInterShapePenaltyINTEL",2619],[13,"SubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL",2619],[13,"SubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL",2619],[13,"SubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL",2619],[13,"SubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL",2619],[13,"RayQueryTerminateKHR",2619],[13,"RayQueryConfirmIntersectionKHR",2619],[13,"RayQueryProceedKHR",2619],[13,"RayQueryGetRayTMinKHR",2619],[13,"RayQueryGetRayFlagsKHR",2619],[13,"RayQueryGetIntersectionCandidateAABBOpaqueKHR",2619],[13,"RayQueryGetWorldRayDirectionKHR",2619],[13,"RayQueryGetWorldRayOriginKHR",2619],[13,"IsValidReserveId",2619],[13,"ImageSparseTexelsResident",2619],[13,"Image",2619],[13,"VectorTimesScalar",2619],[13,"ConvertSToF",2619],[13,"SConvert",2619],[13,"SatConvertSToU",2619],[13,"SubgroupAvcSicInitializeINTEL",2619],[13,"EmitStreamVertex",2619],[13,"EndStreamPrimitive",2619],[13,"String",2619],[13,"NamedBarrierInitialize",2619],[13,"CooperativeMatrixLengthNV",2619],[13,"ConvertUToF",2619],[13,"UConvert",2619],[13,"SatConvertUToS",2619],[13,"QuantizeToF16",2619],[13,"SubgroupFirstInvocationKHR",2619],[13,"GroupNonUniformPartitionNV",2619],[13,"Any",2619],[13,"All",2619],[13,"OuterProduct",2619],[13,"Dot",2619],[13,"IsNan",2619],[13,"IsInf",2619],[13,"IsFinite",2619],[13,"IsNormal",2619],[13,"SignBitSet",2619],[13,"LessOrGreater",2619],[13,"Ordered",2619],[13,"Unordered",2619],[3,"Function",3766]]},\
"rustc_codegen_spirv":{"doc":"Welcome to the API documentation for the <code>rust-gpu</code> project, …","t":"F","n":["__rustc_codegen_backend"],"q":[[0,"rustc_codegen_spirv"],[1,"rustc_codegen_ssa::traits::backend"],[2,"alloc::boxed"]],"d":["This is the entrypoint for a hot plugged …"],"i":[0],"f":[[[],[[2,[1]]]]],"c":[],"p":[[8,"CodegenBackend",1],[3,"Box",2]]},\
"rustc_codegen_spirv_types":{"doc":"<code>rustc_codegen_spirv-types</code>","t":"NNNNNNENDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSNSNNNNNNNNNNNNNNENNNNNNSNNNNNNNNNNNSNNNNNNNNSNNNNNSNNNNSNSNNNNNNNNSNNSNNNNNNNNSNSSSNNNNNNNNNNNNNNNNNSNSNSNNNNNNSSRLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLL","n":["Addresses","AtomicFloat32AddEXT","AtomicFloat64AddEXT","AtomicStorage","AtomicStorageOps","BlockingPipesINTEL","Capability","ClipDistance","CompileResult","ComputeDerivativeGroupLinearNV","ComputeDerivativeGroupQuadsNV","CooperativeMatrixNV","CullDistance","DemoteToHelperInvocationEXT","DenormFlushToZero","DenormPreserve","DerivativeControl","DeviceEnqueue","DeviceGroup","DrawParameters","FPGAKernelAttributesINTEL","FPGALoopControlsINTEL","FPGAMemoryAttributesINTEL","FPGARegINTEL","Float16","Float16Buffer","Float16ImageAMD","Float64","FragmentBarycentricNV","FragmentDensityEXT","FragmentFullyCoveredEXT","FragmentMaskAMD","FragmentShaderPixelInterlockEXT","FragmentShaderSampleInterlockEXT","FragmentShaderShadingRateInterlockEXT","FragmentShadingRateKHR","FunctionPointersINTEL","GenericPointer","Geometry","GeometryPointSize","GeometryShaderPassthroughNV","GeometryStreams","GroupNonUniform","GroupNonUniformArithmetic","GroupNonUniformBallot","GroupNonUniformClustered","GroupNonUniformPartitionedNV","GroupNonUniformQuad","GroupNonUniformShuffle","GroupNonUniformShuffleRelative","GroupNonUniformVote","Groups","Image1D","ImageBasic","ImageBuffer","ImageCubeArray","ImageFootprintNV","ImageGatherBiasLodAMD","ImageGatherExtended","ImageMSArray","ImageMipmap","ImageQuery","ImageReadWrite","ImageReadWriteLodAMD","ImageRect","IndirectReferencesINTEL","InputAttachment","InputAttachmentArrayDynamicIndexing","InputAttachmentArrayDynamicIndexingEXT","InputAttachmentArrayNonUniformIndexing","InputAttachmentArrayNonUniformIndexingEXT","Int16","Int64","Int64Atomics","Int64ImageEXT","Int8","IntegerFunctions2INTEL","InterpolationFunction","Kernel","KernelAttributesINTEL","Linkage","LiteralSampler","Matrix","MeshShadingNV","MinLod","ModuleResult","MultiModule","MultiView","MultiViewport","NamedBarrier","PerViewAttributesNV","PhysicalStorageBufferAddresses","PhysicalStorageBufferAddressesEXT","PipeStorage","Pipes","RayQueryKHR","RayQueryProvisionalKHR","RayTracingKHR","RayTracingNV","RayTracingProvisionalKHR","RayTraversalPrimitiveCullingKHR","RoundingModeRTE","RoundingModeRTZ","RuntimeDescriptorArray","RuntimeDescriptorArrayEXT","SampleMaskOverrideCoverageNV","SampleMaskPostDepthCoverage","SampleRateShading","Sampled1D","SampledBuffer","SampledCubeArray","SampledImageArrayDynamicIndexing","SampledImageArrayNonUniformIndexing","SampledImageArrayNonUniformIndexingEXT","SampledRect","Shader","ShaderClockKHR","ShaderLayer","ShaderNonUniform","ShaderNonUniformEXT","ShaderSMBuiltinsNV","ShaderStereoViewNV","ShaderViewportIndex","ShaderViewportIndexLayerEXT","ShaderViewportIndexLayerNV","ShaderViewportMaskNV","ShadingRateNV","SignedZeroInfNanPreserve","SingleModule","SparseResidency","StencilExportEXT","StorageBuffer16BitAccess","StorageBuffer8BitAccess","StorageBufferArrayDynamicIndexing","StorageBufferArrayNonUniformIndexing","StorageBufferArrayNonUniformIndexingEXT","StorageImageArrayDynamicIndexing","StorageImageArrayNonUniformIndexing","StorageImageArrayNonUniformIndexingEXT","StorageImageExtendedFormats","StorageImageMultisample","StorageImageReadWithoutFormat","StorageImageWriteWithoutFormat","StorageInputOutput16","StoragePushConstant16","StoragePushConstant8","StorageTexelBufferArrayDynamicIndexing","StorageTexelBufferArrayDynamicIndexingEXT","StorageTexelBufferArrayNonUniformIndexing","StorageTexelBufferArrayNonUniformIndexingEXT","StorageUniform16","StorageUniformBufferBlock16","SubgroupAvcMotionEstimationChromaINTEL","SubgroupAvcMotionEstimationINTEL","SubgroupAvcMotionEstimationIntraINTEL","SubgroupBallotKHR","SubgroupBufferBlockIOINTEL","SubgroupDispatch","SubgroupImageBlockIOINTEL","SubgroupImageMediaBlockIOINTEL","SubgroupShuffleINTEL","SubgroupVoteKHR","Tessellation","TessellationPointSize","TransformFeedback","UniformAndStorageBuffer16BitAccess","UniformAndStorageBuffer8BitAccess","UniformBufferArrayDynamicIndexing","UniformBufferArrayNonUniformIndexing","UniformBufferArrayNonUniformIndexingEXT","UniformTexelBufferArrayDynamicIndexing","UniformTexelBufferArrayDynamicIndexingEXT","UniformTexelBufferArrayNonUniformIndexing","UniformTexelBufferArrayNonUniformIndexingEXT","UnstructuredLoopControlsINTEL","VariablePointers","VariablePointersStorageBuffer","Vector16","VulkanMemoryModel","VulkanMemoryModelDeviceScope","VulkanMemoryModelDeviceScopeKHR","VulkanMemoryModelKHR","a","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","codegen_entry_point_strings","deserialize","deserialize","entry_points","eq","equivalent","fmt","fmt","fmt","from","from","from","from_i64","from_str","from_u64","hash","into","into","into","module","partial_cmp","serialize","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap_multi","unwrap_single"],"q":[[0,"rustc_codegen_spirv_types"],[227,"core::cmp"],[228,"alloc::string"],[229,"core::result"],[230,"serde::de"],[231,"core::fmt"],[232,"core::fmt"],[233,"core::hash"],[234,"serde::ser"],[235,"core::any"],[236,"std::path"],[237,"alloc::collections::btree::map"],[238,"std::path"]],"d":["","","","","","","/// SPIR-V operand kind: Capabilityeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,6,4,1,6,4,1,1,1,1,4,6,4,4,1,1,6,4,1,6,4,1,1,1,1,1,6,4,1,4,1,6,4,1,6,4,1,6,4,1,6,4,1,6,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],3],[4,5],[-1,[[7,[6]]],8],[-1,[[7,[4]]],8],0,[[1,1],9],[[-1,-2],9,[],[]],[[6,10],11],[[4,10],11],[[1,10],[[7,[2,12]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[13,[[14,[1]]]],[15,[[7,[1]]]],[16,[[14,[1]]]],[[1,-1],2,17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[1,1],[[14,[3]]]],[[6,-1],7,18],[[4,-1],7,18],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[6,[[21,[5,20]]]],[6,22]],"c":[],"p":[[4,"Capability",0],[15,"tuple"],[4,"Ordering",227],[3,"CompileResult",0],[3,"String",228],[4,"ModuleResult",0],[4,"Result",229],[8,"Deserializer",230],[15,"bool"],[3,"Formatter",231],[6,"Result",231],[3,"Error",231],[15,"i64"],[4,"Option",232],[15,"str"],[15,"u64"],[8,"Hasher",233],[8,"Serializer",234],[3,"TypeId",235],[3,"PathBuf",236],[3,"BTreeMap",237],[3,"Path",236]]},\
"rustc_demangle":{"doc":"Demangle Rust compiler symbol names.","t":"DDLLLLLLFLLLLLLLFLLLLLL","n":["Demangle","TryDemangleError","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","demangle","fmt","fmt","fmt","from","from","into","into","try_demangle","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"rustc_demangle"],[23,"core::fmt"],[24,"core::fmt"],[25,"core::any"]],"d":["Representation of a demangled symbol name.","Error returned from the <code>try_demangle</code> function below when …","Returns the underlying string that’s being demangled.","","","","","","De-mangles a Rust symbol into a more readable version","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The same as <code>demangle</code>, except return an <code>Err</code> if the string …","","","","","",""],"i":[0,0,1,1,3,1,3,3,0,1,1,3,1,3,1,3,0,1,3,1,3,1,3],"f":[0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[2,1],[[1,4],5],[[1,4],5],[[3,4],5],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,[[6,[1,3]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[],"p":[[3,"Demangle",0],[15,"str"],[3,"TryDemangleError",0],[3,"Formatter",23],[6,"Result",23],[4,"Result",24],[3,"TypeId",25]]},\
"rustc_hash":{"doc":"Fast, non-cryptographic hash used by rustc and Firefox.","t":"GGDLLLLLLLLLLLLLLL","n":["FxHashMap","FxHashSet","FxHasher","borrow","borrow_mut","default","finish","from","into","try_from","try_into","type_id","write","write_u16","write_u32","write_u64","write_u8","write_usize"],"q":[[0,"rustc_hash"],[18,"core::result"],[19,"core::any"]],"d":["Type alias for a hashmap using the <code>fx</code> hash algorithm.","Type alias for a hashmap using the <code>fx</code> hash algorithm.","A speedy hash algorithm for use within rustc. The hashmap …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[1,2],[-1,-1,[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[[1,[6,[5]]],7],[[1,8],7],[[1,9],7],[[1,2],7],[[1,5],7],[[1,10],7]],"c":[],"p":[[3,"FxHasher",0],[15,"u64"],[4,"Result",18],[3,"TypeId",19],[15,"u8"],[15,"slice"],[15,"tuple"],[15,"u16"],[15,"u32"],[15,"usize"]]},\
"rustix":{"doc":"<code>rustix</code> provides efficient memory-safe and I/O-safe …","t":"OAAAAAAIIDIIDGKLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSDDNSSSRNDDNSSSNGDDINSSSSNSDCNIEIEDNNNSIDSSSSSSNNNGDISSSSSSSSSSSSSSSGNSSSSSSSSGENNGGDDNSGDRRDNNSSSSSSSSSDFFLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFDKKKFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMFFFFCFCFFFFFCFFFLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFKLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLKFLLKLLLLLLLLLLLLLLLLLLMMFFFFFFFFFFFFFKKKKLLKLLLLLLLLLFFKLKLLLFFFLLLLLLLLLFFFLFFLLLLLLLLLFKMMMMMMMMMMMMMMMMMMMMMMFLFFLFLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLKLLLLLLLLLFFFLKLSSSSSSSSSSSSSSSSSSSSSDSNDSSSDSSSSSSSSSSDDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSNSSSSSSSSSSSSSSGSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLFFFLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLFFFFFLFFFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFDIEDSIGDNDSSDQGNDNDDDNDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKKKKK","n":["cstr","fd","ffi","fs","io","ioctl","path","AsFd","AsRawFd","BorrowedFd","FromRawFd","IntoRawFd","OwnedFd","RawFd","as_fd","as_fd","as_fd","as_raw_fd","as_raw_fd","as_raw_fd","borrow","borrow","borrow_mut","borrow_mut","borrow_raw","clone","clone_into","drop","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_raw_fd","from_raw_fd","into","into","into_raw_fd","into_raw_fd","is_terminal","is_terminal","to_owned","try_clone","try_clone_to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CStr","CString","FromBytesWithNulError","NulError","as_bytes","as_bytes_with_nul","as_c_str","as_cow_c_str","as_cow_c_str","as_cow_c_str","as_ptr","as_ref","as_ref","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_char","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","count_bytes","default","default","deref","description","description","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes_until_nul","from_bytes_with_nul","from_bytes_with_nul_unchecked","from_ptr","from_raw","from_vec_unchecked","from_vec_with_nul","from_vec_with_nul_unchecked","hash","hash","index","index","into","into","into","into_boxed_c_str","into_bytes","into_bytes_with_nul","into_c_str","into_c_str","into_c_str","into_c_string","into_raw","into_string","into_vec","into_with_c_str","into_with_c_str","into_with_c_str","is_empty","new","nul_position","partial_cmp","partial_cmp","to_bytes","to_bytes_with_nul","to_owned","to_owned","to_owned","to_owned","to_str","to_string","to_string","to_string_lossy","to_string_lossy","to_string_lossy","to_string_lossy","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ACCMODE","ACL","ALL","APPEND","Access","AtFlags","BlockDevice","CLOEXEC","CREATE","CREATE","CWD","CharacterDevice","CloneFlags","CopyfileFlags","Current","DATA","DIRECTORY","DSYNC","Data","Dev","Dir","DirEntry","DirEntryExt","Directory","EACCESS","EXCL","EXEC_OK","EXISTS","End","FSYNC","FallocateFlags","FdFlags","Fifo","FileExt","FileType","FileTypeExt","FlockOperation","Gid","Hole","LockExclusive","LockShared","METADATA","MetadataExt","Mode","NOCTTY","NOFOLLOW","NOFOLLOW","NONBLOCK","NOOWNERCOPY","NOSUID","NonBlockingLockExclusive","NonBlockingLockShared","NonBlockingUnlock","Nsecs","OFlags","OpenOptionsExt","RDONLY","RDONLY","RDWR","READ_OK","REMOVEDIR","REPLACE","RGRP","ROOT","ROOT","ROTH","RUSR","RWMODE","RWXG","RWXO","RWXU","RawMode","RegularFile","SECURITY","SGID","STAT","SUID","SVTX","SYMLINK_FOLLOW","SYMLINK_NOFOLLOW","SYNC","Secs","SeekFrom","Socket","Start","Stat","StatFs","StatVfs","StatVfsMountFlags","Symlink","TRUNC","Timespec","Timestamps","UTIME_NOW","UTIME_OMIT","Uid","Unknown","Unlock","WGRP","WOTH","WRITE_OK","WRONLY","WUSR","XATTR","XGRP","XOTH","XUSR","XattrFlags","access","accessat","all","all","all","all","all","all","all","all","all","as_raw","as_raw","as_raw_mode","as_raw_mode","atime","atime_nsec","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","blksize","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmod","chmodat","chown","chownat","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complement","complement","complement","complement","complement","complement","complement","complement","complement","contains","contains","contains","contains","contains","contains","contains","contains","contains","copyfile_state_alloc","copyfile_state_free","copyfile_state_get","copyfile_state_get_copied","copyfile_state_t","ctime","ctime_nsec","custom_flags","cwd","dev","difference","difference","difference","difference","difference","difference","difference","difference","difference","drop","empty","empty","empty","empty","empty","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","extend","extend","extend","extend","extend","extend","extend","f_bavail","f_bavail","f_bfree","f_bfree","f_blocks","f_blocks","f_bsize","f_bsize","f_favail","f_ffree","f_ffree","f_files","f_files","f_flag","f_flags","f_flags_ext","f_frsize","f_fsid","f_fsid","f_fssubtype","f_fstypename","f_iosize","f_mntfromname","f_mntonname","f_namemax","f_owner","f_reserved","f_type","fallocate","fchmod","fchown","fclonefileat","fcntl_dupfd_cloexec","fcntl_fullfsync","fcntl_getfd","fcntl_getfl","fcntl_global_nocache","fcntl_lock","fcntl_nocache","fcntl_rdadvise","fcntl_setfd","fcntl_setfl","fcopyfile","fgetxattr","file_name","file_type","flistxattr","flock","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fremovexattr","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_name","from_name","from_name","from_name","from_name","from_name","from_name","from_name","from_name","from_raw","from_raw","from_raw_mode","from_raw_mode","fsetxattr","fstat","fstatfs","fstatvfs","fsync","ftruncate","futimens","getpath","getxattr","gid","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","ino","ino","ino","insert","insert","insert","insert","insert","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_block_device","is_char_device","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_fifo","is_file_read_write","is_root","is_root","is_socket","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter_names","iter_names","iter_names","iter_names","iter_names","iter_names","iter_names","iter_names","iter_names","last_access","last_modification","lgetxattr","link","linkat","listxattr","llistxattr","lremovexattr","lsetxattr","lstat","major","makedev","minor","mkdir","mkdirat","mode","mode","mtime","mtime_nsec","new","next","nlink","not","not","not","not","not","not","not","not","not","open","openat","rdev","read","read_at","read_exact_at","read_from","read_vectored_at","readlink","readlinkat","readlinkat_raw","remove","remove","remove","remove","remove","remove","remove","remove","remove","removexattr","rename","renameat","rewind","rmdir","seek","set","set","set","set","set","set","set","set","set","setxattr","size","st_atime","st_atime_nsec","st_birthtime","st_birthtime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_flags","st_gen","st_gid","st_ino","st_lspare","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_qspare","st_rdev","st_size","st_uid","stat","stat","statat","statfs","statfs","statvfs","statvfs","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symlink","symlinkat","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","sync","tell","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tv_nsec","tv_sec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","union","union","union","union","union","union","union","union","union","unlink","unlinkat","utimensat","write_all_at","write_at","write_vectored_at","ACCESS","ADDRINUSE","ADDRNOTAVAIL","AFNOSUPPORT","AGAIN","ALREADY","AUTH","BADF","BADMSG","BADRPC","BUSY","CANCELED","CHILD","CLOEXEC","CONNABORTED","CONNREFUSED","CONNRESET","DEADLK","DESTADDRREQ","DOM","DQUOT","DupFlags","EXIST","Err","Errno","FAULT","FBIG","FTYPE","FdFlags","HOSTDOWN","HOSTUNREACH","IDRM","ILSEQ","INPROGRESS","INTR","INVAL","IO","ISCONN","ISDIR","IoSlice","IoSliceMut","LOOP","MFILE","MLINK","MSGSIZE","MULTIHOP","NAMETOOLONG","NEEDAUTH","NETDOWN","NETRESET","NETUNREACH","NFILE","NOATTR","NOBUFS","NODATA","NODEV","NOENT","NOEXEC","NOLCK","NOLINK","NOMEM","NOMSG","NOPROTOOPT","NOSPC","NOSR","NOSTR","NOSYS","NOTBLK","NOTCONN","NOTDIR","NOTEMPTY","NOTRECOVERABLE","NOTSOCK","NOTSUP","NOTTY","NXIO","OPNOTSUPP","OVERFLOW","OWNERDEAD","Ok","PERM","PFNOSUPPORT","PIPE","PROCLIM","PROCUNAVAIL","PROGMISMATCH","PROGUNAVAIL","PROTO","PROTONOSUPPORT","PROTOTYPE","RANGE","REMOTE","ROFS","RPCMISMATCH","Result","SHUTDOWN","SOCKTNOSUPPORT","SPIPE","SRCH","STALE","TIME","TIMEDOUT","TOOBIG","TOOMANYREFS","TXTBSY","USERS","WOULDBLOCK","XDEV","advance","advance","advance_slices","advance_slices","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","close","complement","complement","contains","contains","deref","deref","deref_mut","difference","difference","dup","dup2","dup3","empty","empty","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","fcntl_dupfd_cloexec","fcntl_getfd","fcntl_setfd","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_io_error","from_iter","from_iter","from_name","from_name","from_raw_os_error","hash","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into_iter","into_iter","ioctl_fioclex","ioctl_fionbio","ioctl_fionread","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","kind","new","new","not","not","pread","pread_uninit","preadv","pwrite","pwritev","raw_os_error","read","read_uninit","readv","remove","remove","retry_on_intr","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_string","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","union","write","writev","BadOpcode","CompileTimeOpcode","Direction","Getter","IS_MUTATING","Ioctl","IoctlOutput","NoArg","None","NoneOpcode","OPCODE","OPCODE","Opcode","Output","RawOpcode","Read","ReadOpcode","ReadWrite","ReadWriteOpcode","Setter","Updater","Write","WriteOpcode","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_components","hash","hash","into","into","into","into","into","into","into","into","into","into","into","ioctl","new","new","new","new","none","old","output_from_ptr","output_from_ptr","output_from_ptr","output_from_ptr","output_from_ptr","partial_cmp","partial_cmp","raw","read","read_write","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","Arg","as_cow_c_str","as_str","into_c_str","into_with_c_str","to_string_lossy"],"q":[[0,"rustix"],[7,"rustix::fd"],[59,"rustix::ffi"],[178,"rustix::fs"],[1067,"rustix::io"],[1352,"rustix::ioctl"],[1495,"rustix::path"],[1501,"core::fmt"],[1502,"core::fmt"],[1503,"std::process"],[1504,"std::fs"],[1505,"std::os::unix::net::stream"],[1506,"std::process"],[1507,"std::process"],[1508,"std::net::udp"],[1509,"std::os::unix::net::listener"],[1510,"std::net::tcp"],[1511,"core::any"],[1512,"alloc::borrow"],[1513,"core::cmp"],[1514,"alloc::alloc"],[1515,"alloc::boxed"],[1516,"core::num::nonzero"],[1517,"alloc::vec"],[1518,"core::ffi::c_str"],[1519,"alloc::ffi::c_str"],[1520,"core::hash"],[1521,"core::ops::range"],[1522,"core::ops::range"],[1523,"alloc::ffi::c_str"],[1524,"core::convert"],[1525,"core::option"],[1526,"core::str::error"],[1527,"libc::unix"],[1528,"libc::unix"],[1529,"core::iter::traits::collect"],[1530,"libc::unix::bsd::apple"],[1531,"core::fmt"],[1532,"bitflags::iter"],[1533,"std::io::error"]],"d":["A macro for <code>CStr</code> literals.","Export the <code>*Fd</code> types and traits that are used in rustix’…","Utilities related to FFI bindings.","Filesystem operations.","I/O operations.","Unsafe <code>ioctl</code> API.","Filesystem path operations.","A trait to borrow the file descriptor from an underlying …","A trait to extract the raw file descriptor from an …","A borrowed file descriptor.","A trait to express the ability to construct an object from …","A trait to express the ability to consume an object and …","An owned file descriptor.","Raw file descriptors.","Borrows the file descriptor.","","","Extracts the raw file descriptor.","","","","","","","Return a <code>BorrowedFd</code> holding the given raw file descriptor.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new instance of <code>Self</code> from the given raw file …","Constructs a new instance of <code>Self</code> from the given raw file …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this object, returning the raw underlying file …","","","","","Creates a new <code>OwnedFd</code> instance that shares the same …","Creates a new <code>OwnedFd</code> instance that shares the same …","","","","","","","Representation of a borrowed C string.","A type representing an owned, C-compatible, nul-terminated …","An error indicating that a nul byte was not in the …","An error indicating that an interior nul byte was found.","Returns the contents of this <code>CString</code> as a slice of bytes.","Equivalent to <code>CString::as_bytes()</code> except that the returned …","Extracts a <code>CStr</code> slice containing the entire string.","","","","Returns the inner pointer to this C string.","","","","","","","","","","","","","","","Equivalent to C’s <code>char</code> type.","","","","","","","","","","Returns the length of <code>self</code>. Like C’s <code>strlen</code>, this does …","Creates an empty <code>CString</code>.","","","","","","","","","","","","","","","","","","","","Converts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>CString</code>, by copying the …","Converts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …","","Converts a Vec&lt;NonZeroU8&gt; into a <code>CString</code> without copying …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a C string wrapper from a byte slice with any …","Creates a C string wrapper from a byte slice with exactly …","Unsafely creates a C string wrapper from a byte slice.","Wraps a raw C string with a safe C string wrapper.","Retakes ownership of a <code>CString</code> that was transferred to C …","Creates a C-compatible string by consuming a byte vector, …","Attempts to converts a Vec&lt;u8&gt; to a <code>CString</code>.","Converts a Vec&lt;u8&gt; to a <code>CString</code> without checking the …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>CString</code> into a boxed <code>CStr</code>.","Consumes the <code>CString</code> and returns the underlying byte …","Equivalent to <code>CString::into_bytes()</code> except that the …","","","","Converts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …","Consumes the <code>CString</code> and transfers ownership of the string …","Converts the <code>CString</code> into a <code>String</code> if it contains valid …","Consumes this error, returning the underlying vector of …","","","","Returns <code>true</code> if <code>self.to_bytes()</code> has a length of 0.","Creates a new C-compatible string from a container of …","Returns the position of the nul byte in the slice that …","","","Converts this C string to a byte slice.","Converts this C string to a byte slice containing the …","","","","","Yields a &amp;str slice if the <code>CStr</code> contains valid UTF-8.","","","","","","Converts a <code>CStr</code> into a Cow&lt;str&gt;.","","","","","","","","","","","<code>O_ACCMODE</code>","<code>COPYFILE_ACL</code>","<code>COPYFILE_ALL</code>","<code>O_APPEND</code>","<code>*_OK</code> constants for use with <code>accessat</code>.","<code>AT_*</code> constants for use with <code>openat</code>, <code>statat</code>, and other <code>*at</code> …","<code>S_IFBLK</code>","<code>O_CLOEXEC</code>","<code>O_CREAT</code>","<code>XATTR_CREATE</code>","<code>AT_FDCWD</code>—A handle representing the current working …","<code>S_IFCHR</code>","<code>CLONE_*</code> constants for use with <code>fclonefileat</code>.","<code>COPYFILE_*</code> constants for use with <code>fcopyfile</code>.","Sets the offset to the current position plus the specified …","<code>COPYFILE_DATA</code>","<code>O_DIRECTORY</code>","<code>O_DSYNC</code>","Sets the offset to the current position plus the specified …","<code>dev_t</code>","<code>DIR*</code>","<code>struct dirent</code>","Re-export types common to POSIX-ish platforms. …","<code>S_IFDIR</code>","<code>AT_EACCESS</code>","<code>O_EXCL</code>","<code>X_OK</code>","<code>F_OK</code>","Sets the offset to the size of this object plus the …","<code>O_FSYNC</code>","<code>FALLOC_FL_*</code> constants for use with <code>fallocate</code>.","","<code>S_IFIFO</code>","Re-export types common to POSIX-ish platforms. …","<code>S_IF*</code> constants for use with <code>mknodat</code> and <code>Stat</code>’s <code>st_mode</code> …","Re-export types common to POSIX-ish platforms. …","<code>LOCK_*</code> constants for use with <code>flock</code> and <code>fcntl_lock</code>.","<code>gid_t</code>—A Unix group ID.","Sets the offset to the current position plus the specified …","<code>LOCK_EX</code>","<code>LOCK_SH</code>","<code>COPYFILE_METADATA</code>","Re-export types common to POSIX-ish platforms. …","<code>S_I*</code> constants for use with <code>openat</code>, <code>chmodat</code>, and <code>fchmod</code>.","<code>O_NOCTTY</code>","<code>O_NOFOLLOW</code>","<code>CLONE_NOFOLLOW</code>","<code>O_NONBLOCK</code>","<code>CLONE_NOOWNERCOPY</code>","<code>ST_NOSUID</code>","<code>LOCK_EX | LOCK_NB</code>","<code>LOCK_SH | LOCK_NB</code>","<code>LOCK_UN | LOCK_NB</code>","A type for the <code>tv_nsec</code> field of <code>Timespec</code>.","<code>O_*</code> constants for use with <code>openat</code>.","Re-export types common to POSIX-ish platforms. …","<code>O_RDONLY</code>","<code>ST_RDONLY</code>","<code>O_RDWR</code>","<code>R_OK</code>","<code>AT_REMOVEDIR</code>","<code>XATTR_REPLACE</code>","<code>S_IRGRP</code>","A <code>Uid</code> corresponding to the root user (uid 0).","A <code>Gid</code> corresponding to the root group (gid 0).","<code>S_IROTH</code>","<code>S_IRUSR</code>","Similar to <code>ACCMODE</code>, but just includes the read/write …","<code>S_IRWXG</code>","<code>S_IRWXO</code>","<code>S_IRWXU</code>","<code>mode_t</code>","<code>S_IFREG</code>","<code>COPYFILE_SECURITY</code>","<code>S_ISGID</code>","<code>COPYFILE_STAT</code>","<code>S_ISUID</code>","<code>S_ISVTX</code>","<code>AT_SYMLINK_FOLLOW</code>","<code>AT_SYMLINK_NOFOLLOW</code>","<code>O_SYNC</code>","A type for the <code>tv_sec</code> field of <code>Timespec</code>.","Enumeration of possible methods to seek within an I/O …","<code>S_IFSOCK</code>","Sets the offset to the provided number of bytes.","<code>struct stat</code> for use with <code>statat</code> and <code>fstat</code>.","<code>struct statfs</code> for use with <code>statfs</code> and <code>fstatfs</code>.","<code>struct statvfs</code> for use with <code>statvfs</code> and <code>fstatvfs</code>.","<code>ST_*</code> constants for use with <code>StatVfs</code>.","<code>S_IFLNK</code>","<code>O_TRUNC</code>","<code>struct timespec</code>","Timestamps used by <code>utimensat</code> and <code>futimens</code>.","<code>UTIME_NOW</code> for use with <code>utimensat</code>.","<code>UTIME_OMIT</code> for use with <code>utimensat</code>.","<code>uid_t</code>—A Unix user ID.","An unknown filesystem object.","<code>LOCK_UN</code>","<code>S_IWGRP</code>","<code>S_IWOTH</code>","<code>W_OK</code>","<code>O_WRONLY</code>","<code>S_IWUSR</code>","<code>COPYFILE_XATTR</code>","<code>S_IXGRP</code>","<code>S_IXOTH</code>","<code>S_IXUSR</code>","<code>XATTR_*</code> constants for use with <code>setxattr</code>, and other …","<code>access(path, access)</code>—Tests permissions for a file or …","<code>faccessat(dirfd, path, access, flags)</code>—Tests permissions …","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Converts a <code>Uid</code> into a <code>RawUid</code>.","Converts a <code>Gid</code> into a <code>RawGid</code>.","Construct an <code>st_mode</code> value from a <code>Mode</code>.","Construct an <code>st_mode</code> value from a <code>FileType</code>.","Returns the last access time of the file, in seconds since …","Returns the last access time of the file, in nanoseconds …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","","Get the underlying bits value.","Get the underlying bits value.","","","Get the underlying bits value.","","Get the underlying bits value.","","Get the underlying bits value.","","Get the underlying bits value.","","Get the underlying bits value.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","Returns the block size for filesystem I/O.","Returns the number of blocks allocated to the file, in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>chmod(path, mode)</code>—Sets file or directory permissions.","<code>fchmodat(dirfd, path, mode, flags)</code>—Sets file or …","<code>chown(path, owner, group)</code>—Sets open file or directory …","<code>fchownat(dirfd, path, owner, group, flags)</code>—Sets file or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","<code>copyfile_state_alloc()</code>","<code>copyfile_state_free(state)</code>","<code>copyfile_state_get(state, flags, dst)</code>","<code>copyfile_state_get(state, COPYFILE_STATE_COPIED)</code>","<code>copyfile_state_t</code>—State for use with <code>fcopyfile</code>.","Returns the last status change time of the file, in …","Returns the last status change time of the file, in …","Pass custom flags to the <code>flags</code> argument of <code>open</code>.","Return the value of <code>CWD</code>.","Returns the ID of the device containing the file.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>fallocate(fd, mode, offset, len)</code>—Adjusts file allocation.","<code>fchmod(fd, mode)</code>—Sets open file or directory permissions.","<code>fchown(fd, owner, group)</code>—Sets open file or directory …","<code>fclonefileat(src, dst_dir, dst, flags)</code>—Efficiently …","","<code>fcntl(fd, F_FULLFSYNC)</code>","","<code>fcntl(fd, F_GETFL)</code>—Returns a file descriptor’s access …","<code>fcntl(fd, F_GLOBAL_NOCACHE, value)</code>—Turn data caching off …","<code>fcntl(fd, F_SETLK)</code>—Acquire or release an <code>fcntl</code>-style …","<code>fcntl(fd, F_NOCACHE, value)</code>—Turn data caching off or on …","<code>fcntl(fd, F_RDADVISE, radvisory { offset, len })</code>","","<code>fcntl(fd, F_SETFL, flags)</code>—Sets a file descriptor’s …","<code>fcopyfile(from, to, state, flags)</code>","<code>fgetxattr(fd, name, value.as_ptr(), value.len())</code>—Get …","Returns the file name of this directory entry.","Returns the type of this directory entry.","<code>flistxattr(fd, list.as_ptr(), list.len())</code>—List extended …","<code>flock(fd, operation)</code>—Acquire or release an advisory lock …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>fremovexattr(fd, name)</code>—Remove an extended filesystem …","Returns the argument unchanged.","Returns the argument unchanged.","Support conversions from <code>Mode</code> to raw mode values.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Support conversions from raw mode values to <code>Mode</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value exactly.","","","Convert from a bits value exactly.","Convert from a bits value exactly.","","Convert from a bits value exactly.","","","Convert from a bits value exactly.","Convert from a bits value exactly.","","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Converts a <code>RawUid</code> into a <code>Uid</code>.","Converts a <code>RawGid</code> into a <code>Gid</code>.","Construct a <code>Mode</code> from the mode bits of the <code>st_mode</code> field …","Construct a <code>FileType</code> from the <code>S_IFMT</code> bits of the <code>st_mode</code> …","<code>fsetxattr(fd, name, value.as_ptr(), value.len(), flags)</code>…","<code>fstat(fd)</code>—Queries metadata for an open file or directory.","<code>fstatfs(fd)</code>—Queries filesystem statistics for an open …","<code>fstatvfs(fd)</code>—Queries filesystem statistics for an open …","<code>fsync(fd)</code>—Ensures that file data and metadata is written …","<code>ftruncate(fd, length)</code>—Sets the length of a file.","<code>futimens(fd, times)</code>—Sets timestamps for an open file or …","<code>fcntl(fd, F_GETPATH)</code>","<code>getxattr(path, name, value.as_ptr(), value.len())</code>—Get …","Returns the group ID of the owner of this file.","","","","","","","","","","","","Returns the inode number.","Returns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …","Return the inode number of this directory entry.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Returns <code>true</code> if this file type is a block device.","Returns <code>true</code> if this file type is a char device.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Returns <code>true</code> if this file type is a fifo.","<code>fcntl(fd, F_GETFL) &amp; O_ACCMODE</code>","Test whether this uid represents the root user (uid 0).","Test whether this gid represents the root group (gid 0).","Returns <code>true</code> if this file type is a socket.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","The timestamp of the last access to a filesystem object.","The timestamp of the last modification of a filesystem …","<code>lgetxattr(path, name, value.as_ptr(), value.len())</code>—Get …","<code>link(old_path, new_path)</code>—Creates a hard link.","<code>linkat(old_dirfd, old_path, new_dirfd, new_path, flags)</code>…","<code>listxattr(path, list.as_ptr(), list.len())</code>—List extended …","<code>llistxattr(path, list.as_ptr(), list.len())</code>—List …","<code>lremovexattr(path, name)</code>—Remove an extended filesystem …","<code>setxattr(path, name, value.as_ptr(), value.len(), flags)</code>…","<code>lstat(path)</code>—Queries metadata for a file or directory, …","<code>major(dev)</code>","<code>makedev(maj, min)</code>","<code>minor(dev)</code>","<code>mkdir(path, mode)</code>—Creates a directory.","<code>mkdirat(fd, path, mode)</code>—Creates a directory.","Sets the mode bits that a new file will be created with.","Returns the rights applied to this file.","Returns the last modification time of the file, in seconds …","Returns the last modification time of the file, in …","Take ownership of <code>fd</code> and construct a <code>Dir</code> that reads …","","Returns the number of hard links pointing to this file.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","<code>open(path, oflags, mode)</code>—Opens a file.","<code>openat(dirfd, path, oflags, mode)</code>—Opens a file.","Returns the device ID of this file (if it is a special …","<code>readdir(self)</code>, where <code>None</code> means the end of the directory.","Reads a number of bytes starting from a given offset.","Reads the exact number of byte required to fill <code>buf</code> from …","Borrow <code>fd</code> and construct a <code>Dir</code> that reads entries from the …","Like <code>read_at</code>, except that it reads into a slice of buffers.","<code>readlink(path)</code>—Reads the contents of a symlink.","<code>readlinkat(fd, path)</code>—Reads the contents of a symlink.","<code>readlinkat(fd, path)</code>—Reads the contents of a symlink, …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","<code>removexattr(path, name)</code>—Remove an extended filesystem …","<code>rename(old_path, new_path)</code>—Renames a file or directory.","<code>renameat(old_dirfd, old_path, new_dirfd, new_path)</code>…","<code>rewinddir(self)</code>","<code>rmdir(path)</code>—Removes a directory.","<code>lseek(fd, offset, whence)</code>—Repositions a file descriptor …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","<code>setxattr(path, name, value.as_ptr(), value.len(), flags)</code>…","Returns the total size of this file in bytes.","","","","","","","","","","","","","","","","","","","","","","","<code>stat(path)</code>—Queries metadata for a file or directory.","<code>fstat(self)</code>","<code>fstatat(dirfd, path, flags)</code>—Queries metadata for a file …","<code>statfs</code>—Queries filesystem metadata.","<code>fstatfs(self)</code>","<code>statvfs</code>—Queries filesystem metadata, POSIX version.","<code>fstatvfs(self)</code>","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","<code>symlink(old_path, new_path)</code>—Creates a symlink.","<code>symlinkat(old_path, new_dirfd, new_path)</code>—Creates a …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","<code>sync</code>—Flush cached filesystem data for all filesystems.","<code>lseek(fd, 0, SEEK_CUR)</code>—Returns the current position …","","","","","","","","","","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the user ID of the owner of this file.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","<code>unlink(path)</code>—Unlinks a file.","<code>unlinkat(fd, path, flags)</code>—Unlinks a file or remove a …","<code>utimensat(dirfd, path, times, flags)</code>—Sets file or …","Attempts to write an entire buffer starting from a given …","Writes a number of bytes starting from a given offset.","Like <code>write_at</code>, except that it writes from a slice of …","<code>EACCES</code>","<code>EADDRINUSE</code>","<code>EADDRNOTAVAIL</code>","<code>EAFNOSUPPORT</code>","<code>EAGAIN</code>","<code>EALREADY</code>","<code>EAUTH</code>","<code>EBADF</code>","<code>EBADMSG</code>","<code>EBADRPC</code>","<code>EBUSY</code>","<code>ECANCELED</code>","<code>ECHILD</code>","<code>FD_CLOEXEC</code>","<code>ECONNABORTED</code>","<code>ECONNREFUSED</code>","<code>ECONNRESET</code>","<code>EDEADLK</code>","<code>EDESTADDRREQ</code>","<code>EDOM</code>","<code>EDQUOT</code>","<code>O_*</code> constants for use with <code>dup2</code>.","<code>EEXIST</code>","Contains the error value","<code>errno</code>—An error code.","<code>EFAULT</code>","<code>EFBIG</code>","<code>EFTYPE</code>","<code>FD_*</code> constants for use with <code>fcntl_getfd</code> and <code>fcntl_setfd</code>.","<code>EHOSTDOWN</code>","<code>EHOSTUNREACH</code>","<code>EIDRM</code>","<code>EILSEQ</code>","<code>EINPROGRESS</code>","<code>EINTR</code>","<code>EINVAL</code>","<code>EIO</code>","<code>EISCONN</code>","<code>EISDIR</code>","A buffer type used with <code>Write::write_vectored</code>.","A buffer type used with <code>Read::read_vectored</code>.","<code>ELOOP</code>","<code>EMFILE</code>","<code>EMLINK</code>","<code>EMSGSIZE</code>","<code>EMULTIHOP</code>","<code>ENAMETOOLONG</code>","<code>ENEEDAUTH</code>","<code>ENETDOWN</code>","<code>ENETRESET</code>","<code>ENETUNREACH</code>","<code>ENFILE</code>","<code>ENOATTR</code>","<code>ENOBUFS</code>","<code>ENODATA</code>","<code>ENODEV</code>","<code>ENOENT</code>","<code>ENOEXEC</code>","<code>ENOLCK</code>","<code>ENOLINK</code>","<code>ENOMEM</code>","<code>ENOMSG</code>","<code>ENOPROTOOPT</code>","<code>ENOSPC</code>","<code>ENOSR</code>","<code>ENOSTR</code>","<code>ENOSYS</code>","<code>ENOTBLK</code>","<code>ENOTCONN</code>","<code>ENOTDIR</code>","<code>ENOTEMPTY</code>","<code>ENOTRECOVERABLE</code>","<code>ENOTSOCK</code>","<code>ENOTSUP</code>","<code>ENOTTY</code>","<code>ENXIO</code>","<code>EOPNOTSUPP</code>","<code>EOVERFLOW</code>","<code>EOWNERDEAD</code>","Contains the success value","<code>EPERM</code>","<code>EPFNOSUPPORT</code>","<code>EPIPE</code>","<code>EPROCLIM</code>","<code>EPROCUNAVAIL</code>","<code>EPROGMISMATCH</code>","<code>EPROGUNAVAIL</code>","<code>EPROTO</code>","<code>EPROTONOSUPPORT</code>","<code>EPROTOTYPE</code>","<code>ERANGE</code>","<code>EREMOTE</code>","<code>EROFS</code>","<code>ERPCMISMATCH</code>","A specialized <code>Result</code> type for <code>rustix</code> APIs.","<code>ESHUTDOWN</code>","<code>ESOCKTNOSUPPORT</code>","<code>ESPIPE</code>","<code>ESRCH</code>","<code>ESTALE</code>","<code>ETIME</code>","<code>ETIMEDOUT</code>","<code>E2BIG</code>","<code>ETOOMANYREFS</code>","<code>ETXTBSY</code>","<code>EUSERS</code>","<code>EWOULDBLOCK</code>","<code>EXDEV</code>","Advance the internal cursor of the slice.","Advance the internal cursor of the slice.","Advance a slice of slices.","Advance a slice of slices.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","<code>close(raw_fd)</code>—Closes a <code>RawFd</code> directly.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","<code>dup(fd)</code>—Creates a new <code>OwnedFd</code> instance that shares the …","<code>dup2(fd, new)</code>—Changes the file description of a file …","<code>dup3(fd, new, flags)</code>—Changes the file description of a …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","<code>fcntl(fd, F_DUPFD_CLOEXEC)</code>—Creates a new <code>OwnedFd</code> …","<code>fcntl(fd, F_GETFD)</code>—Returns a file descriptor’s flags.","<code>fcntl(fd, F_SETFD, flags)</code>—Sets a file descriptor’s …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Extract an <code>Errno</code> value from a <code>std::io::Error</code>.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Construct an <code>Errno</code> from a raw OS error number.","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","<code>ioctl(fd, FIOCLEX, NULL)</code>—Set the close-on-exec flag.","<code>ioctl(fd, FIONBIO, &amp;value)</code>—Enables or disables …","<code>ioctl(fd, FIONREAD)</code>—Returns the number of bytes ready to …","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Shorthand for <code>std::io::Error::from(self).kind()</code>.","Creates a new <code>IoSliceMut</code> wrapping a byte slice.","Creates a new <code>IoSlice</code> wrapping a byte slice.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","<code>pread(fd, buf, offset)</code>—Reads from a file at a given …","<code>pread(fd, buf, offset)</code>—Reads from a file at a given …","<code>preadv(fd, bufs, offset)</code>—Reads from a file at a given …","<code>pwrite(fd, bufs)</code>—Writes to a file at a given position.","<code>pwritev(fd, bufs, offset)</code>—Writes to a file at a given …","Extract the raw OS error number from this error.","<code>read(fd, buf)</code>—Reads from a stream.","<code>read(fd, buf)</code>—Reads from a stream.","<code>readv(fd, bufs)</code>—Reads from a stream into multiple …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>f</code> until it either succeeds or fails other than …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","<code>write(fd, buf)</code>—Writes to a stream.","<code>writev(fd, bufs)</code>—Writes to a stream from multiple …","Provides a bad opcode at compile time.","Trait for something that provides an <code>ioctl</code> opcode at …","The direction that an <code>ioctl</code> is going.","Implements the traditional “getter” pattern for <code>ioctl</code>s.","Does the <code>ioctl</code> mutate any data in the userspace?","A trait defining the properties of an <code>ioctl</code> command.","The type used by the <code>ioctl</code> to signify the output.","Implements an <code>ioctl</code> with no real arguments.","None of the above.","Provides a <code>None</code> code at compile time.","The opcode.","The opcode used by this <code>ioctl</code> command.","The opcode used by an <code>Ioctl</code>.","The type of the output data.","The type used by the <code>ioctl</code> to signify the command.","Read data from the kernel.","Provides a read code at compile time.","Read and write data to the kernel.","Provides a read/write code at compile time.","Implements the pattern for <code>ioctl</code>s where a pointer argument …","Implements an “updater” pattern for <code>ioctl</code>s.","Write data to the kernel.","Provides a write code at compile time.","Get a pointer to the data to be passed to the <code>ioctl</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new opcode from a direction, group, number, and …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Perform an <code>ioctl</code> call.","Create a new no-argument <code>ioctl</code> object.","Create a new getter-style <code>ioctl</code> object.","Create a new pointer setter-style <code>ioctl</code> object.","Create a new pointer updater-style <code>ioctl</code> object.","Create a new non-mutating opcode from a group, a number, …","Create a new old <code>Opcode</code> from a raw opcode.","Cast the output data to the correct type.","","","","","","","Get the raw opcode.","Create a new reading opcode from a group, a number and the …","Create a new reading and writing opcode from a group, a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new writing opcode from a group, a number and the …","A trait for passing path arguments.","Returns a view of this string as a maybe-owned <code>CStr</code>.","Returns a view of this string as a string slice.","Consumes <code>self</code> and returns a view of this string as a …","Runs a closure with <code>self</code> passed in as a <code>&amp;CStr</code>.","Returns a potentially-lossy rendering of this string as a …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,2,1,107,2,1,2,1,2,1,1,1,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,108,2,2,1,109,2,2,1,1,2,1,2,1,2,1,2,1,0,0,0,0,21,21,21,21,21,24,24,21,24,21,21,24,21,21,29,24,30,21,29,24,30,0,21,29,30,21,29,24,30,21,24,24,21,24,21,29,30,21,21,29,24,30,21,29,24,30,21,29,29,24,30,30,21,21,21,21,21,29,30,24,24,24,24,21,21,21,21,21,24,21,24,21,29,30,21,21,21,21,21,24,24,21,21,29,21,21,24,24,21,29,21,24,24,24,21,29,24,30,24,29,30,21,21,24,24,21,29,30,21,29,30,21,29,24,30,53,55,55,53,0,0,64,53,53,58,0,64,0,0,73,55,53,53,73,0,0,0,0,64,50,53,48,48,73,53,0,0,64,0,0,0,0,0,73,70,70,55,0,0,53,53,54,53,54,57,70,70,70,0,0,0,53,57,53,48,50,58,52,59,61,52,52,53,52,52,52,0,64,55,52,55,52,52,50,50,53,0,0,64,73,0,0,0,0,64,53,0,0,0,0,0,64,70,52,52,48,53,52,55,52,52,52,0,0,0,48,50,52,53,54,55,56,57,58,59,61,52,64,110,110,48,50,52,53,54,55,56,57,58,48,50,52,53,54,55,56,57,58,48,50,52,53,54,55,56,57,58,48,50,52,53,54,55,56,57,58,48,48,50,50,52,52,53,53,54,54,55,55,56,56,57,57,58,58,48,50,52,53,54,55,56,57,58,48,50,52,53,54,55,56,57,58,110,110,75,82,77,48,50,52,53,54,55,64,56,57,70,71,72,73,58,59,61,75,82,77,48,50,52,53,54,55,64,56,57,70,71,72,73,58,59,61,0,0,0,0,48,50,52,53,54,55,64,56,57,70,71,72,73,58,59,61,48,50,52,53,54,55,64,56,57,70,71,72,73,58,59,61,48,50,52,53,54,55,56,57,58,48,50,52,53,54,55,56,57,58,0,0,0,0,0,110,110,111,0,110,48,50,52,53,54,55,56,57,58,75,48,50,52,53,54,55,56,57,58,48,50,52,53,54,55,64,56,57,70,73,58,59,61,48,50,52,53,54,55,64,56,57,70,73,58,59,61,48,50,52,53,54,55,56,57,58,81,82,81,82,81,82,81,82,82,81,82,81,82,82,81,81,82,81,82,81,81,81,81,81,82,81,81,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,77,0,0,75,77,48,48,48,48,48,50,50,50,50,50,52,52,52,52,52,53,53,53,53,53,54,54,54,54,54,55,55,55,55,55,64,56,56,56,56,56,57,57,57,57,57,70,72,73,58,58,58,58,58,59,61,0,75,82,63,77,48,50,52,52,53,54,55,64,56,57,70,71,72,73,58,59,61,48,50,52,53,54,55,56,57,58,48,48,50,50,52,52,53,53,54,54,55,55,56,56,57,57,58,58,48,50,52,53,54,55,56,57,58,48,50,52,53,54,55,56,57,58,48,50,52,53,54,55,56,57,58,59,61,52,64,0,0,0,0,0,0,0,0,0,110,48,50,52,53,54,55,56,57,58,59,61,110,112,77,48,50,52,53,54,55,56,57,58,48,50,52,53,54,55,56,57,58,48,50,52,53,54,55,56,57,58,75,82,77,48,50,52,53,54,55,64,56,57,70,71,72,73,58,59,61,75,48,50,52,53,54,55,56,57,58,48,50,52,53,54,55,56,57,58,113,113,48,50,52,53,54,55,56,57,58,113,0,59,61,113,48,50,52,53,54,55,56,57,58,48,50,52,53,54,55,56,57,58,72,72,0,0,0,0,0,0,0,0,0,0,0,0,0,111,110,110,110,75,75,110,48,50,52,53,54,55,56,57,58,0,0,110,75,114,114,75,114,0,0,0,48,50,52,53,54,55,56,57,58,0,0,0,75,0,0,48,50,52,53,54,55,56,57,58,0,110,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,75,0,0,75,0,75,48,50,52,53,54,55,56,57,58,48,50,52,53,54,55,56,57,58,0,0,48,50,52,53,54,55,56,57,58,0,0,48,50,52,53,54,55,64,56,57,70,71,72,73,58,59,61,48,50,52,53,54,55,56,57,58,75,82,77,48,50,52,53,54,55,64,56,57,70,71,72,73,58,59,61,75,82,77,48,50,52,53,54,55,64,56,57,70,71,72,73,58,59,61,115,115,75,82,77,48,50,52,53,54,55,64,56,57,70,71,72,73,58,59,61,110,48,50,52,53,54,55,56,57,58,0,0,0,114,114,114,91,91,91,91,91,91,91,91,91,91,91,91,91,89,91,91,91,91,91,91,91,0,91,26,0,91,91,91,0,91,91,91,91,91,91,91,91,91,91,0,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,26,91,91,91,91,91,91,91,91,91,91,91,91,91,91,0,91,91,91,91,91,91,91,91,91,91,91,91,91,86,88,86,88,89,90,89,90,89,90,89,90,89,90,89,89,90,90,89,90,89,90,91,89,86,90,88,91,89,86,90,88,91,89,90,88,91,89,90,88,0,89,90,89,90,86,88,86,89,90,0,0,0,89,90,91,89,90,91,89,90,89,90,0,0,0,91,91,89,89,89,89,89,86,90,90,90,90,90,88,91,89,86,90,88,89,90,89,89,90,90,89,90,91,89,90,89,90,91,91,89,90,89,90,89,90,89,90,91,89,86,90,88,89,90,0,0,0,89,90,89,90,89,90,89,90,91,86,88,89,90,0,0,0,0,0,91,0,0,0,89,90,0,89,90,89,90,89,90,89,90,91,89,90,88,91,89,90,91,89,86,90,88,91,89,86,90,88,91,89,86,90,88,89,90,0,0,0,0,0,0,103,0,0,0,101,0,96,103,0,103,0,101,0,101,0,0,0,101,0,103,95,97,98,99,95,97,98,99,116,117,118,119,120,100,101,95,97,98,99,116,117,118,119,120,100,101,100,101,100,101,100,101,100,101,100,101,95,97,98,100,101,95,97,98,99,116,117,118,119,120,100,101,100,100,101,95,97,98,99,116,117,118,119,120,100,101,0,95,97,98,99,100,100,103,95,97,98,99,100,101,100,100,100,100,101,95,97,98,99,116,117,118,119,120,100,101,95,97,98,99,116,117,118,119,120,100,101,95,97,98,99,116,117,118,119,120,100,101,100,0,49,49,49,49,49],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[2,1],[1,1],[-1,3,[]],[2,3],[1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,1],[1,1],[[-1,-2],4,[],[]],[2,4],[[2,5],[[7,[4,6]]]],[[1,5],[[7,[4,6]]]],[8,2],[9,2],[10,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[-1,-1,[]],[-1,-1,[]],[3,-1,[]],[3,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,3,[]],[2,3],[2,18],[1,18],[-1,-2,[],[]],[2,[[7,[2,19]]]],[1,[[7,[2,19]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],0,0,0,0,[21,[[23,[22]]]],[21,[[23,[22]]]],[21,24],[21,[[26,[[25,[24]]]]]],[21,[[26,[[25,[24]]]]]],[24,[[26,[[25,[24]]]]]],[24,27],[21,24],[24,24],[21,[[26,[28]]]],[21,[[26,[28]]]],[24,[[26,[28]]]],[-1,-2,[],[]],[21,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[21,21],[29,29],[30,30],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[24,21],4],[[-1,-2],4,[],[]],[[21,21],31],[[24,24],31],[24,32],[[],21],[[],24],[21,24],[29,28],[30,28],[21,4],[[21,21],18],[[29,29],18],[[24,24],18],[[30,30],18],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[21,5],[[7,[4,6]]]],[[29,5],[[7,[4,6]]]],[[29,5],[[7,[4,6]]]],[[24,5],[[7,[4,6]]]],[[30,5],[[7,[4,6]]]],[[30,5],[[7,[4,6]]]],[[[25,[24]]],21],[[[34,[24,33]]],21],[24,21],[[[36,[35,33]]],21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[23,[22]]],[[7,[24,37]]]],[[[23,[22]]],[[7,[24,30]]]],[[[23,[22]]],24],[27,24],[27,21],[[[36,[22,33]]],21],[[[36,[22,33]]],[[7,[21,38]]]],[[[36,[22,33]]],21],[[21,-1],4,39],[[24,-1],4,39],[[21,40],24],[[24,[41,[32]]],24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,[[34,[24,33]]]],[21,[[36,[22,33]]]],[21,[[36,[22,33]]]],[21,[[26,[[25,[24]]]]]],[21,[[26,[[25,[24]]]]]],[24,[[26,[[25,[24]]]]]],[[[34,[24,33]]],21],[21,27],[21,[[7,[42,43]]]],[29,[[36,[22,33]]]],[[21,-1],[[26,[-2]]],44,[]],[[21,-1],[[26,[-2]]],44,[]],[[24,-1],[[26,[-2]]],44,[]],[24,18],[-1,[[7,[21,29]]],[[45,[[36,[22,33]]]]]],[29,32],[[21,21],[[46,[31]]]],[[24,24],[[46,[31]]]],[24,[[23,[22]]]],[24,[[23,[22]]]],[-1,-2,[],[]],[-1,-2,[],[]],[24,21],[-1,-2,[],[]],[24,[[7,[28,47]]]],[-1,42,[]],[-1,42,[]],[21,[[25,[28]]]],[21,[[25,[28]]]],[24,[[25,[28]]]],[24,[[25,[28]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,48],[[26,[4]]],49],[[-1,-2,48,50],[[26,[4]]],51,49],[[],48],[[],50],[[],52],[[],53],[[],54],[[],55],[[],56],[[],57],[[],58],[59,60],[61,62],[52,63],[64,63],[-1,65,[]],[-1,65,[]],[[48,48],48],[[50,50],50],[[52,52],52],[[53,53],53],[[54,54],54],[[55,55],55],[[56,56],56],[[57,57],57],[[58,58],58],[[48,48],4],[[50,50],4],[[52,52],4],[[53,53],4],[[54,54],4],[[55,55],4],[[56,56],4],[[57,57],4],[[58,58],4],[[48,48],48],[[50,50],50],[[52,52],52],[[53,53],53],[[54,54],54],[[55,55],55],[[56,56],56],[[57,57],57],[[58,58],58],[[48,48],4],[[50,50],4],[[52,52],4],[[53,53],4],[[54,54],4],[[55,55],4],[[56,56],4],[[57,57],4],[[58,58],4],[48,66],[48,66],[50,67],[50,67],[52,63],[52,63],[53,67],[53,67],[54,67],[54,67],[55,68],[55,68],[56,67],[56,67],[57,69],[57,69],[58,68],[58,68],[[48,48],48],[[50,50],50],[[52,52],52],[[53,53],53],[[54,54],54],[[55,55],55],[[56,56],56],[[57,57],57],[[58,58],58],[[48,48],4],[[50,50],4],[[52,52],4],[[53,53],4],[[54,54],4],[[55,55],4],[[56,56],4],[[57,57],4],[[58,58],4],[-1,69,[]],[-1,69,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,52],[[26,[4]]],49],[[-1,-2,52,50],[[26,[4]]],51,49],[[-1,[46,[59]],[46,[61]]],[[26,[4]]],49],[[-1,-2,[46,[59]],[46,[61]],50],[[26,[4]]],51,49],[48,48],[50,50],[52,52],[53,53],[54,54],[55,55],[64,64],[56,56],[57,57],[70,70],[71,71],[72,72],[73,73],[58,58],[59,59],[61,61],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[48,48],[50,50],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[[48,48],18],[[50,50],18],[[52,52],18],[[53,53],18],[[54,54],18],[[55,55],18],[[56,56],18],[[57,57],18],[[58,58],18],[[],[[26,[71]]]],[71,[[26,[4]]]],[[71,67,74],[[26,[4]]]],[71,[[26,[69]]]],0,[-1,65,[]],[-1,65,[]],[[-1,3],-1,[]],[[],1],[-1,69,[]],[[48,48],48],[[50,50],50],[[52,52],52],[[53,53],53],[[54,54],54],[[55,55],55],[[56,56],56],[[57,57],57],[[58,58],58],[75,4],[[],48],[[],50],[[],52],[[],53],[[],54],[[],55],[[],56],[[],57],[[],58],[[48,48],18],[[50,50],18],[[52,52],18],[[53,53],18],[[54,54],18],[[55,55],18],[[64,64],18],[[56,56],18],[[57,57],18],[[70,70],18],[[73,73],18],[[58,58],18],[[59,59],18],[[61,61],18],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[48,-1],4,76],[[50,-1],4,76],[[52,-1],4,76],[[53,-1],4,76],[[54,-1],4,76],[[55,-1],4,76],[[56,-1],4,76],[[57,-1],4,76],[[58,-1],4,76],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,56,69,69],[[26,[4]]],51],[[-1,52],[[26,[4]]],51],[[-1,[46,[59]],[46,[61]]],[[26,[4]]],51],[[-1,-2,-3,54],[[26,[4]]],51,51,49],0,[-1,[[26,[4]]],51],0,[-1,[[26,[53]]],51],[[-1,18],[[26,[4]]],51],[[-1,70],[[26,[4]]],51],[[-1,18],[[26,[4]]],51],[[-1,69,69],[[26,[4]]],51],0,[[-1,53],[[26,[4]]],51],[[-1,-2,71,55],[[26,[4]]],51,51],[[-1,-2,[23,[22]]],[[26,[32]]],51,49],[77,24],[77,64],[[-1,[23,[78]]],[[26,[32]]],51],[[-1,70],[[26,[4]]],51],[[75,5],79],[[77,5],79],[[48,5],79],[[48,5],79],[[48,5],79],[[48,5],79],[[48,5],79],[[50,5],79],[[50,5],79],[[50,5],79],[[50,5],79],[[50,5],79],[[52,5],79],[[52,5],79],[[52,5],79],[[52,5],79],[[52,5],79],[[53,5],79],[[53,5],79],[[53,5],79],[[53,5],79],[[53,5],79],[[54,5],79],[[54,5],79],[[54,5],79],[[54,5],79],[[54,5],79],[[55,5],79],[[55,5],79],[[55,5],79],[[55,5],79],[[55,5],79],[[64,5],79],[[56,5],79],[[56,5],79],[[56,5],79],[[56,5],79],[[56,5],79],[[57,5],79],[[57,5],79],[[57,5],79],[[57,5],79],[[57,5],79],[[70,5],79],[[72,5],79],[[73,5],79],[[58,5],79],[[58,5],79],[[58,5],79],[[58,5],79],[[58,5],79],[[59,5],79],[[61,5],79],[[-1,-2],[[26,[4]]],51,49],[-1,-1,[]],[-1,-1,[]],[52,63],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[63,52],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[66,[[46,[48]]]],[67,[[46,[50]]]],[63,[[46,[52]]]],[67,[[46,[53]]]],[67,[[46,[54]]]],[68,[[46,[55]]]],[67,[[46,[56]]]],[69,[[46,[57]]]],[68,[[46,[58]]]],[66,48],[66,48],[67,50],[67,50],[63,52],[63,52],[67,53],[67,53],[67,54],[67,54],[68,55],[68,55],[67,56],[67,56],[69,57],[69,57],[68,58],[68,58],[66,48],[67,50],[63,52],[67,53],[67,54],[68,55],[67,56],[69,57],[68,58],[-1,48,76],[-1,50,76],[-1,52,76],[-1,53,76],[-1,54,76],[-1,55,76],[-1,56,76],[-1,57,76],[-1,58,76],[28,[[46,[48]]]],[28,[[46,[50]]]],[28,[[46,[52]]]],[28,[[46,[53]]]],[28,[[46,[54]]]],[28,[[46,[55]]]],[28,[[46,[56]]]],[28,[[46,[57]]]],[28,[[46,[58]]]],[60,59],[62,61],[63,52],[63,64],[[-1,-2,[23,[22]],58],[[26,[4]]],51,49],[-1,[[26,[80]]],51],[-1,[[26,[81]]],51],[-1,[[26,[82]]],51],[-1,[[26,[4]]],51],[[-1,69],[[26,[4]]],51],[[-1,72],[[26,[4]]],51],[-1,[[26,[21]]],51],[[-1,-2,[23,[22]]],[[26,[32]]],49,49],[-1,67,[]],[[48,-1],4,39],[[50,-1],4,39],[[52,-1],4,39],[[53,-1],4,39],[[54,-1],4,39],[[55,-1],4,39],[[56,-1],4,39],[[57,-1],4,39],[[58,-1],4,39],[[59,-1],4,39],[[61,-1],4,39],[-1,69,[]],[-1,69,[]],[77,69],[[48,48],4],[[50,50],4],[[52,52],4],[[53,53],4],[[54,54],4],[[55,55],4],[[56,56],4],[[57,57],4],[[58,58],4],[[48,48],48],[[50,50],50],[[52,52],52],[[53,53],53],[[54,54],54],[[55,55],55],[[56,56],56],[[57,57],57],[[58,58],58],[[48,48],18],[[50,50],18],[[52,52],18],[[53,53],18],[[54,54],18],[[55,55],18],[[56,56],18],[[57,57],18],[[58,58],18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[48],[50],[52],[53],[54],[55],[56],[57],[58],[48,18],[50,18],[52,18],[53,18],[54,18],[55,18],[56,18],[57,18],[58,18],[-1,18,[]],[-1,18,[]],[48,18],[50,18],[52,18],[53,18],[54,18],[55,18],[56,18],[57,18],[58,18],[-1,18,[]],[-1,[[26,[[4,[18,18]]]]],51],[59,18],[61,18],[-1,18,[]],[48,[[83,[48]]]],[50,[[83,[50]]]],[52,[[83,[52]]]],[53,[[83,[53]]]],[54,[[83,[54]]]],[55,[[83,[55]]]],[56,[[83,[56]]]],[57,[[83,[57]]]],[58,[[83,[58]]]],[48,[[84,[48]]]],[50,[[84,[50]]]],[52,[[84,[52]]]],[53,[[84,[53]]]],[54,[[84,[54]]]],[55,[[84,[55]]]],[56,[[84,[56]]]],[57,[[84,[57]]]],[58,[[84,[58]]]],0,0,[[-1,-2,[23,[22]]],[[26,[32]]],49,49],[[-1,-2],[[26,[4]]],49,49],[[-1,-2,-3,-4,50],[[26,[4]]],51,49,51,49],[[-1,[23,[78]]],[[26,[32]]],49],[[-1,[23,[78]]],[[26,[32]]],49],[[-1,-2],[[26,[4]]],49,49],[[-1,-2,[23,[22]],58],[[26,[4]]],49,49],[-1,[[26,[80]]],49],[85,67],[[67,67],85],[85,67],[[-1,52],[[26,[4]]],49],[[-1,-2,52],[[26,[4]]],51,49],[[-1,67],-1,[]],[-1,67,[]],[-1,65,[]],[-1,65,[]],[-1,[[26,[75]]],[[45,[2]]]],[75,46],[-1,69,[]],[48,48],[50,50],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[[-1,53,52],[[26,[2]]],49],[[-1,-2,53,52],[[26,[2]]],51,49],[-1,69,[]],[75,[[46,[[26,[77]]]]]],[[-1,[23,[22]],69],[[7,[32,19]]],[]],[[-1,[23,[22]],69],[[7,[4,19]]],[]],[-1,[[26,[75]]],51],[[-1,[23,[86]],69],[[7,[32,19]]],[]],[[-1,-2],[[26,[21]]],49,[[45,[[36,[22]]]]]],[[-1,-2,-3],[[26,[21]]],51,49,[[45,[[36,[22]]]]]],[[-1,-2,[23,[[87,[22]]]]],[[26,[[4,[[23,[22]],[23,[[87,[22]]]]]]]]],51,49],[[48,48],4],[[50,50],4],[[52,52],4],[[53,53],4],[[54,54],4],[[55,55],4],[[56,56],4],[[57,57],4],[[58,58],4],[[-1,-2],[[26,[4]]],49,49],[[-1,-2],[[26,[4]]],49,49],[[-1,-2,-3,-4],[[26,[4]]],51,49,51,49],[75,4],[-1,[[26,[4]]],49],[[-1,73],[[26,[69]]],51],[[48,48,18],4],[[50,50,18],4],[[52,52,18],4],[[53,53,18],4],[[54,54,18],4],[[55,55,18],4],[[56,56,18],4],[[57,57,18],4],[[58,58,18],4],[[-1,-2,[23,[22]],58],[[26,[4]]],49,49],[-1,69,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[26,[80]]],49],[75,[[26,[80]]]],[[-1,-2,50],[[26,[80]]],51,49],[-1,[[26,[81]]],49],[75,[[26,[81]]]],[-1,[[26,[82]]],49],[75,[[26,[82]]]],[[48,48],48],[[50,50],50],[[52,52],52],[[53,53],53],[[54,54],54],[[55,55],55],[[56,56],56],[[57,57],57],[[58,58],58],[[48,48],4],[[50,50],4],[[52,52],4],[[53,53],4],[[54,54],4],[[55,55],4],[[56,56],4],[[57,57],4],[[58,58],4],[[-1,-2],[[26,[4]]],49,49],[[-1,-2,-3],[[26,[4]]],49,51,49],[[48,48],48],[[50,50],50],[[52,52],52],[[53,53],53],[[54,54],54],[[55,55],55],[[56,56],56],[[57,57],57],[[58,58],58],[[],4],[-1,[[26,[69]]],51],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[48,48],4],[[50,50],4],[[52,52],4],[[53,53],4],[[54,54],4],[[55,55],4],[[56,56],4],[[57,57],4],[[58,58],4],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,0,[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,67,[]],[[48,48],48],[[50,50],50],[[52,52],52],[[53,53],53],[[54,54],54],[[55,55],55],[[56,56],56],[[57,57],57],[[58,58],58],[-1,[[26,[4]]],49],[[-1,-2,50],[[26,[4]]],51,49],[[-1,-2,72,50],[[26,[4]]],51,49],[[-1,[23,[22]],69],[[7,[4,19]]],[]],[[-1,[23,[22]],69],[[7,[32,19]]],[]],[[-1,[23,[88]],69],[[7,[32,19]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[86,32],4],[[88,32],4],[[[23,[86]],32],4],[[[23,[88]],32],4],[[],89],[[],90],[[89,89],89],[[90,90],90],[[89,89],4],[[90,90],4],[[89,89],89],[[90,90],90],[[89,89],4],[[90,90],4],[89,67],[89,67],[90,67],[90,67],[[89,89],89],[[90,90],90],[[89,89],4],[[90,90],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[91,91],[89,89],[90,90],[88,88],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[92,4],[89,89],[90,90],[[89,89],18],[[90,90],18],[86,[[23,[22]]]],[88,[[23,[22]]]],[86,[[23,[22]]]],[[89,89],89],[[90,90],90],[-1,[[26,[2]]],51],[[-1,2],[[26,[4]]],51],[[-1,2,90],[[26,[4]]],51],[[],89],[[],90],[[91,91],18],[[89,89],18],[[90,90],18],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[89,-1],4,76],[[90,-1],4,76],[[-1,92],[[26,[2]]],51],[-1,[[26,[89]]],51],[[-1,89],[[26,[4]]],51],[[91,5],79],[[91,5],79],[[89,5],79],[[89,5],79],[[89,5],79],[[89,5],79],[[89,5],79],[[86,5],[[7,[4,6]]]],[[90,5],79],[[90,5],79],[[90,5],79],[[90,5],79],[[90,5],79],[[88,5],[[7,[4,6]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[67,[[46,[89]]]],[67,[[46,[90]]]],[67,89],[67,89],[67,90],[67,90],[67,89],[67,90],[19,[[46,[91]]]],[-1,89,76],[-1,90,76],[28,[[46,[89]]]],[28,[[46,[90]]]],[3,91],[[91,-1],4,39],[[89,-1],4,39],[[90,-1],4,39],[[89,89],4],[[90,90],4],[[89,89],89],[[90,90],90],[[89,89],18],[[90,90],18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[89],[90],[-1,[[26,[4]]],51],[[-1,18],[[26,[4]]],51],[-1,[[26,[69]]],51],[89,18],[90,18],[89,18],[90,18],[89,[[83,[89]]]],[90,[[83,[90]]]],[89,[[84,[89]]]],[90,[[84,[90]]]],[91,93],[[[23,[22]]],86],[[[23,[22]]],88],[89,89],[90,90],[[-1,[23,[22]],69],[[26,[32]]],51],[[-1,[23,[[87,[22]]]],69],[[26,[[4,[[23,[22]],[23,[[87,[22]]]]]]]]],51],[[-1,[23,[86]],69],[[26,[32]]],51],[[-1,[23,[22]],69],[[26,[32]]],51],[[-1,[23,[88]],69],[[26,[32]]],51],[91,3],[[-1,[23,[22]]],[[26,[32]]],51],[[-1,[23,[[87,[22]]]]],[[26,[[4,[[23,[22]],[23,[[87,[22]]]]]]]]],51],[[-1,[23,[86]]],[[26,[32]]],51],[[89,89],4],[[90,90],4],[-1,[[26,[-2]]],94,[]],[[89,89,18],4],[[90,90,18],4],[[89,89],89],[[90,90],90],[[89,89],4],[[90,90],4],[[89,89],89],[[90,90],90],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,42,[]],[[89,89],4],[[90,90],4],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[[89,89],89],[[90,90],90],[[-1,[23,[22]]],[[26,[32]]],51],[[-1,[23,[88]]],[[26,[32]]],51],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,74,[]],[[[95,[-1]]],74,96],[[[97,[-1,-2]]],74,96,[]],[[[98,[-1,-2]]],74,96,[]],[[[99,[-1,-2]]],74,96,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[100,100],[101,101],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[100,100],31],[[101,101],31],[[100,100],18],[[101,101],18],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[[95,[-1]],5],79,96],[[[97,[-1,-2]],5],79,96,[]],[[[98,[-1,-2]],5],79,96,102],[[100,5],79],[[101,5],79],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[101,22,22,32],100],[[100,-1],4,39],[[101,-1],4,39],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],26,51,103],[[],[[95,[-1]]],96],[[],[[97,[-1,-2]]],96,[]],[-1,[[98,[-2,-1]]],[],96],[-1,[[99,[-2,-1]]],[],96],[[22,22],100],[104,100],[[105,74],26],[[105,74],26],[[105,74],26],[[105,74],26],[[105,74],[[26,[4]]]],[[100,100],[[46,[31]]]],[[101,101],[[46,[31]]]],[100,104],[[22,22],100],[[22,22],100],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[[22,22],100],0,[-1,[[26,[[25,[24]]]]],[]],[-1,[[26,[28]]],[]],[-1,[[26,[[25,[24]]]]],[]],[[-1,-2],[[26,[-3]]],106,44,[]],[-1,[[25,[28]]],[]]],"c":[477],"p":[[3,"BorrowedFd",7],[3,"OwnedFd",7],[15,"i32"],[15,"tuple"],[3,"Formatter",1501],[3,"Error",1501],[4,"Result",1502],[3,"ChildStderr",1503],[3,"File",1504],[3,"UnixStream",1505],[3,"ChildStdout",1503],[3,"TcpStream",1506],[3,"ChildStdin",1503],[3,"UnixDatagram",1507],[3,"UdpSocket",1508],[3,"UnixListener",1509],[3,"TcpListener",1506],[15,"bool"],[3,"Error",1510],[3,"TypeId",1511],[3,"CString",59],[15,"u8"],[15,"slice"],[3,"CStr",59],[4,"Cow",1512],[6,"Result",1067],[15,"i8"],[15,"str"],[3,"NulError",59],[3,"FromBytesWithNulError",59],[4,"Ordering",1513],[15,"usize"],[3,"Global",1514],[3,"Box",1515],[3,"NonZeroU8",1516],[3,"Vec",1517],[3,"FromBytesUntilNulError",1518],[3,"FromVecWithNulError",1519],[8,"Hasher",1520],[3,"RangeFull",1521],[3,"RangeFrom",1521],[3,"String",1522],[3,"IntoStringError",1519],[8,"FnOnce",1523],[8,"Into",1524],[4,"Option",1525],[3,"Utf8Error",1526],[3,"Access",178],[8,"Arg",1495],[3,"AtFlags",178],[8,"AsFd",7],[3,"Mode",178],[3,"OFlags",178],[3,"CloneFlags",178],[3,"CopyfileFlags",178],[3,"FallocateFlags",178],[3,"StatVfsMountFlags",178],[3,"XattrFlags",178],[3,"Uid",178],[6,"uid_t",1527],[3,"Gid",178],[6,"gid_t",1527],[6,"RawMode",178],[4,"FileType",178],[15,"i64"],[6,"c_int",1527],[15,"u32"],[6,"c_uint",1527],[15,"u64"],[4,"FlockOperation",178],[3,"copyfile_state_t",178],[3,"Timestamps",178],[4,"SeekFrom",178],[4,"c_void",1528],[3,"Dir",178],[8,"IntoIterator",1529],[3,"DirEntry",178],[6,"c_char",1530],[6,"Result",1501],[6,"Stat",178],[6,"StatFs",178],[3,"StatVfs",178],[3,"Iter",1531],[3,"IterNames",1531],[6,"Dev",178],[3,"IoSliceMut",1067],[19,"MaybeUninit",1532],[3,"IoSlice",1067],[3,"FdFlags",1067],[3,"DupFlags",1067],[3,"Errno",1067],[6,"RawFd",7],[4,"ErrorKind",1510],[8,"FnMut",1523],[3,"NoArg",1352],[8,"CompileTimeOpcode",1352],[3,"Getter",1352],[3,"Setter",1352],[3,"Updater",1352],[3,"Opcode",1352],[4,"Direction",1352],[8,"Debug",1501],[8,"Ioctl",1352],[6,"RawOpcode",1352],[6,"IoctlOutput",1352],[8,"Sized",1533],[8,"AsRawFd",7],[8,"FromRawFd",7],[8,"IntoRawFd",7],[8,"MetadataExt",178],[8,"OpenOptionsExt",178],[8,"DirEntryExt",178],[8,"FileTypeExt",178],[8,"FileExt",178],[6,"Timespec",178],[3,"BadOpcode",1352],[3,"ReadOpcode",1352],[3,"WriteOpcode",1352],[3,"ReadWriteOpcode",1352],[3,"NoneOpcode",1352]],"a":{"2big":[1169],"acces":[1067],"at_fdcwd":[188],"creat":[186],"errno":[1091],"f_dupfd_cloexec":[1238],"f_fullsync":[568],"f_getfd":[1239],"f_getfl":[570],"f_global_nocache":[571],"f_nocache":[573],"f_rdadvise":[574],"f_setfd":[1240],"f_setfl":[576],"f_setlk":[572],"f_setlkw":[572],"faccessat":[287],"fchmodat":[416],"fchownat":[418],"fd_cloexec":[1290],"fioclex":[1290],"fionbio":[1291],"fionread":[1292],"fstatat":[931],"ifo":[210],"len":[94],"lseek":[895,966],"posix_fallocate":[563],"strlen":[94]}},\
"ryu":{"doc":"github crates-io docs-rs","t":"DILLLLLLLLLALLLFF","n":["Buffer","Float","borrow","borrow_mut","clone","default","format","format_finite","from","into","new","raw","try_from","try_into","type_id","format32","format64"],"q":[[0,"ryu"],[15,"ryu::raw"],[17,"core::result"],[18,"core::any"]],"d":["Safe API for formatting floating point numbers to text.","A floating point number, f32 or f64, that can be written …","","","","","Print a floating point number into this buffer and return …","Print a floating point number into this buffer and return …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","Unsafe functions that mirror the API of the C …","","","","Print f32 to the given buffer and return number of bytes …","Print f64 to the given buffer and return number of bytes …"],"i":[0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[],1],[[1,-1],2,3],[[1,-1],2,3],[-1,-1,[]],[-1,-2,[],[]],[[],1],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]],[[6,7],8],[[9,7],8]],"c":[],"p":[[3,"Buffer",0],[15,"str"],[8,"Float",0],[4,"Result",17],[3,"TypeId",18],[15,"f32"],[15,"u8"],[15,"usize"],[15,"f64"]]},\
"sanitize_filename":{"doc":"","t":"DDLLLLLLLLLLLLLLFFMFFLLMMLLLLLLMM","n":["Options","OptionsForCheck","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","from","from","into","into","is_sanitized","is_sanitized_with_options","replacement","sanitize","sanitize_with_options","to_owned","to_owned","truncate","truncate","try_from","try_from","try_into","try_into","type_id","type_id","windows","windows"],"q":[[0,"sanitize_filename"],[33,"core::convert"],[34,"alloc::string"],[35,"core::result"],[36,"core::any"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,0,1,0,0,1,2,1,2,1,2,1,2,1,2,1,2],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],1],[[],2],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,4,[[6,[5]]]],[[-1,2],4,[[6,[5]]]],0,[-1,7,[[6,[5]]]],[[-1,1],7,[[6,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],0,0],"c":[],"p":[[3,"Options",0],[3,"OptionsForCheck",0],[15,"tuple"],[15,"bool"],[15,"str"],[8,"AsRef",33],[3,"String",34],[4,"Result",35],[3,"TypeId",36]]},\
"serde":{"doc":"Serde","t":"IYIQQQIYQQQQQQQILLLAKKKKKKKKKLKKKKKKKKKKKKKKKLKKKKKKOLLAKKKKKKLKKKKKKKKKKKKKKKKLKKKKKKKNNNIIIIQNIIQQQQQINDININNNNNINCNNNENNNQQQIILLLLLLLLKLKKLKKKKKKKKLKKKKKKKKKKKKKKKLKKKKKKLLLKLKLLLLLLLLLKLLLLLLKLKLLLKLKLLKLLLLLLLKLLKLLALKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIQQQQQQQQDQQQQQQQQIIQIQIQIQIQIQIQICLLLLLKKKKKKKKLLLLLLLLLLKKKKKKLLLKKKKKKLLLLLKKKKKLKKKKKKKKKKKKLKKKKKKKKLLLLLL","n":["Deserialize","Deserialize","Deserializer","Error","Error","Ok","Serialize","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","StdError","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","EnumAccessDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","StdError","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":[[0,"serde"],[87,"serde::de"],[265,"serde::de::value"],[1531,"serde::ser"],[1642,"core::result"],[1643,"core::iter::traits::collect"],[1644,"core::fmt"],[1645,"core::marker"],[1646,"core::option"],[1647,"core::fmt"],[1648,"core::any"],[1649,"alloc::vec"],[1650,"core::iter::traits::iterator"],[1651,"core::clone"],[1652,"core::fmt"]],"d":["A <strong>data structure</strong> that can be deserialized from any data …","Derive macro available if serde is built with …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Derive macro available if serde is built with …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>&amp;[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A deserializer holding an <code>EnumAccess</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new borrowed deserializer from the given string.","","","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given borrowed …","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","","","","","","","","","","","","","","","","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>EnumAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,0,5,11,11,0,0,11,11,11,11,11,11,11,0,11,11,11,0,34,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,11,0,22,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,28,28,28,0,0,0,0,79,28,0,0,5,42,41,40,80,0,28,0,0,28,0,28,28,28,28,28,0,28,0,28,28,28,0,28,28,28,35,6,40,0,0,27,28,27,28,27,28,27,28,38,27,34,35,27,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,38,27,28,6,27,32,32,27,27,28,28,27,28,27,28,79,38,38,38,5,38,80,80,42,42,41,41,41,41,41,41,42,41,80,27,28,28,27,28,27,28,80,27,28,80,38,38,0,40,40,6,27,6,6,6,6,27,6,6,27,6,6,27,6,27,6,6,6,27,6,6,27,6,27,6,27,6,27,6,27,6,27,6,6,27,6,6,6,27,6,6,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,54,54,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,51,70,54,43,44,45,46,47,48,49,50,51,54,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,51,70,51,51,51,51,51,70,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,44,45,46,47,48,72,0,11,81,82,83,84,85,86,87,0,11,81,82,83,84,85,86,87,0,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,0,77,77,11,11,11,78,81,82,83,84,85,86,87,77,77,77,77,77,77,77,77,77,11,22,11,11,11,81,82,77,77,85,11,11,83,84,86,87,77,77,77,77,11,11,11,11,11,85,77,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,85,77,86,87,77,77,77],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],1,[],2],[[-1,-2],1,[],2],[[-1,-2],1,[],[3,4]],0,[-1,[[1,[-2]]],5,[]],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,9,-2],1,[],6],[[-1,7,9,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],0,[-1,10,[]],[-1,10,[]],0,[[-1,-2],1,[],11],[[-1,10],1,[]],[[-1,[8,[12]]],1,[]],[[-1,13],1,[]],[[-1,14],1,[]],[[-1,15],1,[]],[[-1,16],1,[]],[[-1,17],1,[]],[[-1,18],1,[]],[[-1,19],1,[]],[[-1,20],1,[]],[[-1,[21,[9]]],1,[]],[[-1,7,-2],1,[],[22,4]],[[-1,7,23,7,-2],1,[],[22,4]],[-1,1,[]],[[-1,[21,[9]]],1,[]],[[-1,-2],1,[],[22,4]],[[-1,7],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,9],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,24],1,[]],[[-1,25],1,[]],[[-1,23],1,[]],[[-1,26],1,[]],[[-1,12],1,[]],[-1,1,[]],[[-1,7],1,[]],[[-1,7,23,7],1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[28,28],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[-1,-2,3,[]],[[],27],[-1,[[1,[-2]]],5,[]],[[-1,-2],1,[],5],[-1,[[1,[27]]],5],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,9,-2],1,[],6],[[-1,7,9,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],[7,-1,[]],[[27,27],10],[[28,28],10],[[-1,30],31,[]],[[27,30],31],[[-1,30],31,[]],[[32,30],31],[[-1,30],[[1,[29,33]]],[]],[[27,30],31],[[28,30],31],[[28,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[9,32],-1,[]],[[28,32],-1,[]],[[28,32],-1,[]],[-1,10,[]],[7,-1,[]],[-1,[[1,[-2]]],[],34],[[-1,-2],1,[],35],[-1,[[1,[[21,[-2]]]]],[],34],[[-1,-2],[[1,[21]]],[],35],[-1,[[1,[[21,[[29,[-2,-3]]]]]]],[],34,34],[[-1,-2,-3],[[1,[[21,[29]]]]],[],35,35],[-1,[[1,[[21,[-2]]]]],[],34],[[-1,-2],[[1,[21]]],[],35],[-1,[[1,[-2]]],[],34],[[-1,-2],1,[],35],[-1,[[21,[9]]],[]],[-1,[[21,[9]]],[]],[[-1,[8,[7]],-2],1,[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[-1,9,-2],1,[],6],[-1,37,[]],[-1,37,[]],[-1,[[1,[29]]],[]],[[7,[8,[7]]],-1,[]],[[7,[8,[7]]],-1,[]],0,[-1,[[1,[[29,[-2]]]]],[],34],[[-1,-2],[[1,[29]]],[],35],[[-1,10],[[1,[-2]]],[],38],[[27,10],[[1,[-1]]],[]],[[-1,[8,[12]]],[[1,[-2]]],[],38],[[-1,7],[[1,[-2]]],[],38],[[-1,[39,[12]]],[[1,[-2]]],[],38],[[-1,[8,[12]]],[[1,[-2]]],[],38],[[27,[8,[12]]],[[1,[-1]]],38],[[-1,13],[[1,[-2]]],[],38],[[-1,-2],1,[],40],[[27,-1],1,40],[[-1,14],[[1,[-2]]],[],38],[[-1,15],[[1,[-2]]],[],38],[[27,15],[[1,[-1]]],[]],[[-1,16],[[1,[-2]]],[],38],[[27,16],[[1,[-1]]],[]],[[-1,17],[[1,[-2]]],[],38],[[-1,18],[[1,[-2]]],[],38],[[-1,19],[[1,[-2]]],[],38],[[27,19],[[1,[-1]]],[]],[[-1,20],[[1,[-2]]],[],38],[[-1,-2],1,[],41],[[27,-1],1,41],[[-1,-2],1,[],5],[[27,-1],1,5],[-1,[[1,[-2]]],[],38],[27,[[1,[-1]]],[]],[[-1,-2],1,[],42],[[27,-1],1,42],[[-1,-2],1,[],5],[[27,-1],1,5],[[-1,7],[[1,[-2]]],[],38],[[27,7],[[1,[-1]]],38],[[-1,36],[[1,[-2]]],[],38],[[-1,24],[[1,[-2]]],[],38],[[27,24],[[1,[-1]]],[]],[[-1,25],[[1,[-2]]],[],38],[[-1,23],[[1,[-2]]],[],38],[[-1,26],[[1,[-2]]],[],38],[[27,26],[[1,[-1]]],[]],[[-1,12],[[1,[-2]]],[],38],[-1,[[1,[-2]]],[],38],[27,[[1,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]]],[[43,[-1]]],[]],[[[44,[-1]]],[[44,[-1]]],[]],[[[45,[-1]]],[[45,[-1]]],[]],[[[46,[-1]]],[[46,[-1]]],[]],[[[47,[-1]]],[[47,[-1]]],[]],[[[48,[-1]]],[[48,[-1]]],[]],[[[49,[-1]]],[[49,[-1]]],[]],[[[50,[-1]]],[[50,[-1]]],[]],[[[51,[-1,-2]]],[[51,[-1,-2]]],[52,53],[]],[54,54],[[[55,[-1]]],[[55,[-1]]],[]],[[[56,[-1]]],[[56,[-1]]],[]],[[[57,[-1]]],[[57,[-1]]],[]],[[[58,[-1]]],[[58,[-1]]],[]],[[[59,[-1]]],[[59,[-1]]],[]],[[[60,[-1]]],[[60,[-1]]],[]],[[[61,[-1]]],[[61,[-1]]],[]],[[[62,[-1]]],[[62,[-1]]],[]],[[[63,[-1]]],[[63,[-1]]],[]],[[[64,[-1]]],[[64,[-1]]],[]],[[[65,[-1]]],[[65,[-1]]],[]],[[[66,[-1]]],[[66,[-1]]],[]],[[[67,[-1]]],[[67,[-1]]],[]],[[[68,[-1]]],[[68,[-1]]],[]],[[[69,[-1]]],[[69,[-1]]],[]],[[[70,[-1,-2]]],[[70,[-1,-2]]],53,53],[[[71,[-1]]],[[71,[-1]]],53],[[[72,[-1]]],[[72,[-1]]],53],[[[73,[-1]]],[[73,[-1]]],53],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[-1,54,3],[-1,54,3],[54,7],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,[8,[7]],-2],1,38,6],[[[44,[-1]],7,[8,[7]],-2],1,38,6],[[[45,[-1]],7,[8,[7]],-2],1,38,6],[[[46,[-1]],7,[8,[7]],-2],1,38,6],[[[47,[-1]],7,[8,[7]],-2],1,38,6],[[[48,[-1]],7,[8,[7]],-2],1,38,6],[[[49,[-1]],7,[8,[7]],-2],1,38,6],[[[50,[-1]],7,[8,[7]],-2],1,38,6],[[[51,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[55,[-1]],7,[8,[7]],-2],1,38,6],[[[56,[-1]],7,[8,[7]],-2],1,38,6],[[[57,[-1]],7,[8,[7]],-2],1,38,6],[[[58,[-1]],7,[8,[7]],-2],1,38,6],[[[59,[-1]],7,[8,[7]],-2],1,38,6],[[[60,[-1]],7,[8,[7]],-2],1,38,6],[[[61,[-1]],7,[8,[7]],-2],1,38,6],[[[62,[-1]],7,[8,[7]],-2],1,38,6],[[[63,[-1]],7,[8,[7]],-2],1,38,6],[[[64,[-1]],7,[8,[7]],-2],1,38,6],[[[65,[-1]],7,[8,[7]],-2],1,38,6],[[[66,[-1]],7,[8,[7]],-2],1,38,6],[[[67,[-1]],7,[8,[7]],-2],1,38,6],[[[68,[-1]],7,[8,[7]],-2],1,38,6],[[[69,[-1]],7,[8,[7]],-2],1,38,6],[[[70,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[71,[-1]],7,[8,[7]],-2],1,42,6],[[[72,[-1]],7,[8,[7]],-2],1,41,6],[[[73,[-1]],7,[8,[7]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,-2],1,38,6],[[[44,[-1]],7,-2],1,38,6],[[[45,[-1]],7,-2],1,38,6],[[[46,[-1]],7,-2],1,38,6],[[[47,[-1]],7,-2],1,38,6],[[[48,[-1]],7,-2],1,38,6],[[[49,[-1]],7,-2],1,38,6],[[[50,[-1]],7,-2],1,38,6],[[[51,[-1,-2]],7,-3],1,52,38,6],[[[55,[-1]],7,-2],1,38,6],[[[56,[-1]],7,-2],1,38,6],[[[57,[-1]],7,-2],1,38,6],[[[58,[-1]],7,-2],1,38,6],[[[59,[-1]],7,-2],1,38,6],[[[60,[-1]],7,-2],1,38,6],[[[61,[-1]],7,-2],1,38,6],[[[62,[-1]],7,-2],1,38,6],[[[63,[-1]],7,-2],1,38,6],[[[64,[-1]],7,-2],1,38,6],[[[65,[-1]],7,-2],1,38,6],[[[66,[-1]],7,-2],1,38,6],[[[67,[-1]],7,-2],1,38,6],[[[68,[-1]],7,-2],1,38,6],[[[69,[-1]],7,-2],1,38,6],[[[70,[-1,-2]],7,-3],1,52,38,6],[[[71,[-1]],7,-2],1,42,6],[[[72,[-1]],7,-2],1,41,6],[[[73,[-1]],7,-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,[8,[7]],-2],1,38,6],[[[44,[-1]],7,[8,[7]],-2],1,38,6],[[[45,[-1]],7,[8,[7]],-2],1,38,6],[[[46,[-1]],7,[8,[7]],-2],1,38,6],[[[47,[-1]],7,[8,[7]],-2],1,38,6],[[[48,[-1]],7,[8,[7]],-2],1,38,6],[[[49,[-1]],7,[8,[7]],-2],1,38,6],[[[50,[-1]],7,[8,[7]],-2],1,38,6],[[[51,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[55,[-1]],7,[8,[7]],-2],1,38,6],[[[56,[-1]],7,[8,[7]],-2],1,38,6],[[[57,[-1]],7,[8,[7]],-2],1,38,6],[[[58,[-1]],7,[8,[7]],-2],1,38,6],[[[59,[-1]],7,[8,[7]],-2],1,38,6],[[[60,[-1]],7,[8,[7]],-2],1,38,6],[[[61,[-1]],7,[8,[7]],-2],1,38,6],[[[62,[-1]],7,[8,[7]],-2],1,38,6],[[[63,[-1]],7,[8,[7]],-2],1,38,6],[[[64,[-1]],7,[8,[7]],-2],1,38,6],[[[65,[-1]],7,[8,[7]],-2],1,38,6],[[[66,[-1]],7,[8,[7]],-2],1,38,6],[[[67,[-1]],7,[8,[7]],-2],1,38,6],[[[68,[-1]],7,[8,[7]],-2],1,38,6],[[[69,[-1]],7,[8,[7]],-2],1,38,6],[[[70,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[71,[-1]],7,[8,[7]],-2],1,42,6],[[[72,[-1]],7,[8,[7]],-2],1,41,6],[[[73,[-1]],7,[8,[7]],-2],1,40,6],[[[43,[-1]],9,-2],1,38,6],[[[44,[-1]],9,-2],1,38,6],[[[45,[-1]],9,-2],1,38,6],[[[46,[-1]],9,-2],1,38,6],[[[47,[-1]],9,-2],1,38,6],[[[48,[-1]],9,-2],1,38,6],[[[49,[-1]],9,-2],1,38,6],[[[50,[-1]],9,-2],1,38,6],[[[51,[-1,-2]],9,-3],1,52,38,6],[[[55,[-1]],9,-2],1,38,6],[[[56,[-1]],9,-2],1,38,6],[[[57,[-1]],9,-2],1,38,6],[[[58,[-1]],9,-2],1,38,6],[[[59,[-1]],9,-2],1,38,6],[[[60,[-1]],9,-2],1,38,6],[[[61,[-1]],9,-2],1,38,6],[[[62,[-1]],9,-2],1,38,6],[[[63,[-1]],9,-2],1,38,6],[[[64,[-1]],9,-2],1,38,6],[[[65,[-1]],9,-2],1,38,6],[[[66,[-1]],9,-2],1,38,6],[[[67,[-1]],9,-2],1,38,6],[[[68,[-1]],9,-2],1,38,6],[[[69,[-1]],9,-2],1,38,6],[[[70,[-1,-2]],9,-3],1,52,38,6],[[[71,[-1]],9,-2],1,42,6],[[[72,[-1]],9,-2],1,41,6],[[[73,[-1]],9,-2],1,40,6],[[[43,[-1]],7,9,-2],1,38,6],[[[44,[-1]],7,9,-2],1,38,6],[[[45,[-1]],7,9,-2],1,38,6],[[[46,[-1]],7,9,-2],1,38,6],[[[47,[-1]],7,9,-2],1,38,6],[[[48,[-1]],7,9,-2],1,38,6],[[[49,[-1]],7,9,-2],1,38,6],[[[50,[-1]],7,9,-2],1,38,6],[[[51,[-1,-2]],7,9,-3],1,52,38,6],[[[55,[-1]],7,9,-2],1,38,6],[[[56,[-1]],7,9,-2],1,38,6],[[[57,[-1]],7,9,-2],1,38,6],[[[58,[-1]],7,9,-2],1,38,6],[[[59,[-1]],7,9,-2],1,38,6],[[[60,[-1]],7,9,-2],1,38,6],[[[61,[-1]],7,9,-2],1,38,6],[[[62,[-1]],7,9,-2],1,38,6],[[[63,[-1]],7,9,-2],1,38,6],[[[64,[-1]],7,9,-2],1,38,6],[[[65,[-1]],7,9,-2],1,38,6],[[[66,[-1]],7,9,-2],1,38,6],[[[67,[-1]],7,9,-2],1,38,6],[[[68,[-1]],7,9,-2],1,38,6],[[[69,[-1]],7,9,-2],1,38,6],[[[70,[-1,-2]],7,9,-3],1,52,38,6],[[[71,[-1]],7,9,-2],1,42,6],[[[72,[-1]],7,9,-2],1,41,6],[[[73,[-1]],7,9,-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,-2],1,38,6],[[[44,[-1]],7,-2],1,38,6],[[[45,[-1]],7,-2],1,38,6],[[[46,[-1]],7,-2],1,38,6],[[[47,[-1]],7,-2],1,38,6],[[[48,[-1]],7,-2],1,38,6],[[[49,[-1]],7,-2],1,38,6],[[[50,[-1]],7,-2],1,38,6],[[[51,[-1,-2]],7,-3],1,52,38,6],[[[55,[-1]],7,-2],1,38,6],[[[56,[-1]],7,-2],1,38,6],[[[57,[-1]],7,-2],1,38,6],[[[58,[-1]],7,-2],1,38,6],[[[59,[-1]],7,-2],1,38,6],[[[60,[-1]],7,-2],1,38,6],[[[61,[-1]],7,-2],1,38,6],[[[62,[-1]],7,-2],1,38,6],[[[63,[-1]],7,-2],1,38,6],[[[64,[-1]],7,-2],1,38,6],[[[65,[-1]],7,-2],1,38,6],[[[66,[-1]],7,-2],1,38,6],[[[67,[-1]],7,-2],1,38,6],[[[68,[-1]],7,-2],1,38,6],[[[69,[-1]],7,-2],1,38,6],[[[70,[-1,-2]],7,-3],1,52,38,6],[[[71,[-1]],7,-2],1,42,6],[[[72,[-1]],7,-2],1,41,6],[[[73,[-1]],7,-2],1,40,6],[[[51,[-1,-2]]],[[1,[29,-2]]],52,38],[[[70,[-1,-2]]],[[1,[29,-2]]],52,38],[[54,54],10],[[[43,[-1]],30],31,[]],[[[44,[-1]],30],31,[]],[[[45,[-1]],30],31,[]],[[[46,[-1]],30],31,[]],[[[47,[-1]],30],31,[]],[[[48,[-1]],30],31,[]],[[[49,[-1]],30],31,[]],[[[50,[-1]],30],31,[]],[[[51,[-1,-2]],30],31,[52,74],[]],[[54,30],31],[[54,30],31],[[[55,[-1]],30],31,[]],[[[56,[-1]],30],31,[]],[[[57,[-1]],30],31,[]],[[[58,[-1]],30],31,[]],[[[59,[-1]],30],31,[]],[[[60,[-1]],30],31,[]],[[[61,[-1]],30],31,[]],[[[62,[-1]],30],31,[]],[[[63,[-1]],30],31,[]],[[[64,[-1]],30],31,[]],[[[65,[-1]],30],31,[]],[[[66,[-1]],30],31,[]],[[[67,[-1]],30],31,[]],[[[68,[-1]],30],31,[]],[[[69,[-1]],30],31,[]],[[[70,[-1,-2]],30],31,74,[]],[[[71,[-1]],30],31,74],[[[72,[-1]],30],31,74],[[[73,[-1]],30],31,74],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[43,[-1]]],[]],[23,[[44,[-1]]],[]],[7,[[45,[-1]]],[]],[7,[[46,[-1]]],[]],[36,[[47,[-1]]],[]],[[[75,[7]]],[[48,[-1]]],[]],[[[8,[12]]],[[49,[-1]]],[]],[[[8,[12]]],[[50,[-1]]],[]],[-1,[[51,[-1,-2]]],52,[]],[10,[[55,[-1]]],[]],[20,[[56,[-1]]],[]],[17,[[57,[-1]]],[]],[18,[[58,[-1]]],[]],[19,[[59,[-1]]],[]],[16,[[60,[-1]]],[]],[76,[[61,[-1]]],[]],[12,[[62,[-1]]],[]],[25,[[63,[-1]]],[]],[26,[[64,[-1]]],[]],[24,[[65,[-1]]],[]],[9,[[66,[-1]]],[]],[14,[[67,[-1]]],[]],[15,[[68,[-1]]],[]],[13,[[69,[-1]]],[]],[-1,[[70,[-1,-2]]],52,[]],[-1,[[71,[-1]]],[]],[-1,[[72,[-1]]],[]],[-1,[[73,[-1]]],[]],[[[51,[-1,-2]],-3],[[1,[21]]],52,38,35],[[[70,[-1,-2]],-3],[[1,[21]]],52,38,35],[[[51,[-1,-2]],-3,-4],[[1,[[21,[29]]]]],52,38,35,35],[[[51,[-1,-2]],-3],[[1,[21]]],52,38,35],[[[51,[-1,-2]],-3],1,52,38,35],[[[51,[-1,-2]]],[[21,[9]]],52,38],[[[51,[-1,-2]]],[[21,[9]]],52,38],[[[70,[-1,-2]]],[[21,[9]]],52,38],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[[[44,[-1]],-2],[[1,[29]]],38,35],[[[45,[-1]],-2],[[1,[29]]],38,35],[[[46,[-1]],-2],[[1,[29]]],38,35],[[[47,[-1]],-2],[[1,[29]]],38,35],[[[48,[-1]],-2],[[1,[29]]],38,35],[[[72,[-1]],-2],[[1,[29]]],41,35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],1,[],2],[[-1,-2],1,[],2],[[-1,-2],1,[],[3,4]],[-1,-2,3,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[-1,-1,[]],[-1,-2,[],[]],[-1,10,[]],[[-1,-2],1,[],11],[[-1,10],1,[]],[[-1,[8,[12]]],1,[]],[[-1,13],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[-1,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,-2,-3],[[1,[29]]],[],[22,4],[22,4]],[[-1,14],1,[]],[[-1,15],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[-1,-2],[[1,[29]]],[],[22,4]],[[-1,7,-2],[[1,[29]]],[],[22,4]],[[-1,7,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],7,-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],7,-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,16],1,[]],[[-1,17],1,[]],[[-1,18],1,[]],[[-1,19],1,[]],[[-1,20],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,[21,[9]]],1,[]],[[-1,7,-2],1,[],[22,4]],[[-1,7,23,7,-2],1,[],[22,4]],[-1,1,[]],[[-1,[21,[9]]],1,[]],[[-1,-2],1,[],[22,4]],[[-1,7],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,9],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,24],1,[]],[[-1,25],1,[]],[[-1,23],1,[]],[[-1,26],1,[]],[[-1,12],1,[]],[-1,1,[]],[[-1,7],1,[]],[[-1,7,23,7],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,7],[[1,[29]]],[]],[[-1,7],[[1,[29]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,37,[]]],"c":[],"p":[[4,"Result",1642],[8,"IntoIterator",1643],[8,"Display",1644],[8,"Sized",1645],[8,"Deserializer",0],[8,"Visitor",87],[15,"str"],[15,"slice"],[15,"usize"],[15,"bool"],[8,"Serializer",0],[15,"u8"],[15,"char"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[4,"Option",1646],[8,"Serialize",0],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[3,"IgnoredAny",87],[4,"Unexpected",87],[15,"tuple"],[3,"Formatter",1644],[6,"Result",1644],[8,"Expected",87],[3,"Error",1644],[8,"Deserialize",0],[8,"DeserializeSeed",87],[3,"String",1647],[3,"TypeId",1648],[8,"Error",87],[3,"Vec",1649],[8,"EnumAccess",87],[8,"MapAccess",87],[8,"SeqAccess",87],[3,"UnitDeserializer",265],[3,"U32Deserializer",265],[3,"StrDeserializer",265],[3,"BorrowedStrDeserializer",265],[3,"StringDeserializer",265],[3,"CowStrDeserializer",265],[3,"BytesDeserializer",265],[3,"BorrowedBytesDeserializer",265],[3,"MapDeserializer",265],[8,"Iterator",1650],[8,"Clone",1651],[3,"Error",265],[3,"BoolDeserializer",265],[3,"I8Deserializer",265],[3,"I16Deserializer",265],[3,"I32Deserializer",265],[3,"I64Deserializer",265],[3,"I128Deserializer",265],[3,"IsizeDeserializer",265],[3,"U8Deserializer",265],[3,"U16Deserializer",265],[3,"U64Deserializer",265],[3,"U128Deserializer",265],[3,"UsizeDeserializer",265],[3,"F32Deserializer",265],[3,"F64Deserializer",265],[3,"CharDeserializer",265],[3,"SeqDeserializer",265],[3,"SeqAccessDeserializer",265],[3,"MapAccessDeserializer",265],[3,"EnumAccessDeserializer",265],[8,"Debug",1644],[4,"Cow",1652],[15,"isize"],[3,"Impossible",1531],[8,"Error",1531],[8,"IntoDeserializer",87],[8,"VariantAccess",87],[8,"SerializeSeq",1531],[8,"SerializeTuple",1531],[8,"SerializeTupleStruct",1531],[8,"SerializeTupleVariant",1531],[8,"SerializeMap",1531],[8,"SerializeStruct",1531],[8,"SerializeStructVariant",1531]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":"YY","n":["Deserialize","Serialize"],"q":[[0,"serde_derive"]],"d":["",""],"i":[0,0],"f":[0,0],"c":[],"p":[]},\
"serde_json":{"doc":"Serde JSON","t":"NNDNDDNDNNNGDDNELLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLFLLLLLLLLLLLLLLLLLOALALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLFFFFFFLLLLLLLLLLLLLLLLLLADDIDDDLLLLLLLLLLLFLFLFLLLLLLLLLLLLLLLLLLLENNNDNNGNLLLLLLLLLLLLLLLLLLLLLEDDDDDNDNDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNEDNINDNNDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNICNDNNDNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLL","n":["Array","Bool","Deserializer","Err","Error","Map","Null","Number","Number","Object","Ok","Result","Serializer","StreamDeserializer","String","Value","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_from","clone_into","clone_into","collect_str","custom","custom","de","default","default","deserialize","deserialize","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","error","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_reader","from_slice","from_str","from_str","from_value","index","index","index_mut","index_mut","into","into","into","into","into","into","into_deserializer","into_deserializer","into_iter","into_iter","into_iter","into_iter","invalid_type","json","map","next","ser","serialize","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","source","to_owned","to_owned","to_string","to_string","to_string","to_string_pretty","to_value","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","Deserializer","IoRead","Read","SliceRead","StrRead","StreamDeserializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_offset","end","from","from","from","from_reader","from_reader","from_slice","from_slice","from_str","from_str","into","into","into","into_iter","new","new","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Category","Data","Eof","Err","Error","Io","Ok","Result","Syntax","borrow","borrow_mut","classify","clone","clone_into","column","eq","equivalent","fmt","from","into","io_error_kind","is_data","is_eof","is_io","is_syntax","line","to_owned","try_from","try_into","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","ValuesMut","and_modify","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","contains_key","entry","from","from","from","from","from","from","from","from","from","get","get","get_key_value","get_mut","get_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","remove_entry","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","AsciiControl","Backspace","CarriageReturn","CharEscape","CompactFormatter","FormFeed","Formatter","LineFeed","PrettyFormatter","Quote","ReverseSolidus","Serializer","Solidus","Tab","begin_array","begin_array","begin_array_value","begin_array_value","begin_object","begin_object","begin_object_key","begin_object_key","begin_object_value","begin_object_value","begin_string","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","end_array","end_array","end_array_value","end_array_value","end_object","end_object","end_object_key","end_object_value","end_object_value","end_string","fmt","fmt","from","from","from","into","into","into","into_inner","new","new","pretty","to_owned","to_owned","to_string","to_string_pretty","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_formatter","with_indent","write_bool","write_byte_array","write_char_escape","write_f32","write_f64","write_i128","write_i16","write_i32","write_i64","write_i8","write_null","write_number_str","write_raw_fragment","write_string_fragment","write_u128","write_u16","write_u32","write_u64","write_u8","Array","Bool","Index","Map","Null","Number","Number","Object","Serializer","String","Value","as_array","as_array_mut","as_bool","as_f64","as_f64","as_i64","as_i64","as_null","as_number","as_object","as_object_mut","as_str","as_u64","as_u64","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","collect_str","deserialize","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","eq","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_f64","from_str","from_value","get","get_mut","hash","into","into","is_array","is_boolean","is_f64","is_f64","is_i64","is_i64","is_null","is_number","is_object","is_string","is_u64","is_u64","pointer","pointer_mut","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","take","to_owned","to_string","to_value","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"serde_json"],[307,"serde_json::de"],[348,"serde_json::error"],[378,"serde_json::map"],[515,"serde_json::ser"],[611,"serde_json::value"],[785,"alloc::string"],[786,"std::io"],[787,"core::marker"],[788,"core::fmt"],[789,"core::result"],[790,"serde::de"],[791,"serde::de"],[792,"core::fmt"],[793,"core::convert"],[794,"alloc::vec"],[795,"core::option"],[796,"alloc::borrow"],[797,"std::io"],[798,"core::cmp"],[799,"serde::de"],[800,"serde::ser"],[801,"core::any"],[802,"std::io::error"],[803,"core::ops::function"],[804,"core::ops::function"]],"d":["Represents a JSON array.","Represents a JSON boolean.","A structure that deserializes JSON into Rust values.","Contains the error value","This type represents all possible errors that can occur …","Represents a JSON key/value type.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Contains the success value","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","A structure for serializing Rust values into JSON.","Iterator that deserializes a stream into multiple JSON …","Represents a JSON string.","Represents any valid JSON value.","","","","","","","","","","","","","","","","","","","","","Deserialize JSON data to a Rust data structure.","","","","","","","","","","","","","","Parses a JSON string as bytes. Note that this function …","","","","","","Parses an enum as an object like <code>{&quot;$KEY&quot;:$VALUE}</code>, where …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a newtype struct as the underlying value.","","","Parses a <code>null</code> as a None, and any other values as a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When serializing or deserializing JSON goes wrong.","","","","","","Display a JSON value as a string.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert 64-bit floating point number to <code>Value::Number</code>, or …","Returns the argument unchanged.","","Convert map (with string keys) to <code>Value::Object</code>.","","Convert <code>String</code> to <code>Value::String</code>.","Convert <code>Number</code> to <code>Value::Number</code>.","Convert a slice to <code>Value::Array</code>.","","","Convert 32-bit floating point number to <code>Value::Number</code>, or …","Convert string slice to <code>Value::String</code>.","Convert <code>()</code> to <code>Value::Null</code>.","","Convert a <code>Vec</code> to <code>Value::Array</code>.","Convert boolean to <code>Value::Bool</code>.","","","","Convert copy-on-write string to <code>Value::String</code>.","","","","Create a <code>Value::Array</code> by collecting an iterator of array …","Create a <code>Value::Object</code> by collecting an iterator of …","Deserialize an instance of type <code>T</code> from an I/O stream of …","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or","","Write into a <code>serde_json::Value</code> using the syntax …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Construct a <code>serde_json::Value</code> from a JSON literal.","A map of String to serde_json::Value.","","Serialize a Rust data structure into JSON data.","","","","","","","","","","","","","","Serialize newtypes without an object wrapper.","","","","","","","","","","","","","","","","","","","","","","Serialize the given data structure as a String of JSON.","","","Serialize the given data structure as a pretty-printed …","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the I/O …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","","","","","","","","","","The Value enum, a loosely typed way of representing any …","A structure that deserializes JSON into Rust values.","JSON input source that reads from a std::io input stream.","Trait used by the deserializer for iterating over input. …","JSON input source that reads from a slice of bytes.","JSON input source that reads from a UTF-8 string.","Iterator that deserializes a stream into multiple JSON …","","","","","","","Returns the number of bytes so far deserialized into a …","The <code>Deserializer::end</code> method should be called after a …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize an instance of type <code>T</code> from an I/O stream of …","Creates a JSON deserializer from an <code>io::Read</code>.","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Creates a JSON deserializer from a <code>&amp;[u8]</code>.","Deserialize an instance of type <code>T</code> from a string of JSON …","Creates a JSON deserializer from a <code>&amp;str</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Turn a JSON deserializer into an iterator over values of …","Create a JSON deserializer from one of the possible …","Create a JSON stream deserializer from one of the possible …","Create a JSON input source to read from a std::io input …","Create a JSON input source to read from a slice of bytes.","Create a JSON input source to read from a UTF-8 string.","","","","","","","","","","Categorizes the cause of a <code>serde_json::Error</code>.","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","Contains the error value","This type represents all possible errors that can occur …","The error was caused by a failure to read or write bytes …","Contains the success value","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","The error was caused by input that was not syntactically …","","","Categorizes the cause of this error.","","","One-based column number at which the error was detected.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The kind reported by the underlying standard library I/O …","Returns true if this error was caused by input data that …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to read …","Returns true if this error was caused by input that was not","One-based line number at which the error was detected.","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s entries.","A mutable iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s keys.","Represents a JSON key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a serde_json::Map’s values.","A mutable iterator over a serde_json::Map’s values.","Provides in-place mutable access to an occupied entry …","Moves all elements from other into self, leaving other …","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","Returns true if the map contains a value for the specified …","Gets the given key’s corresponding entry in the map for …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns the key-value pair matching the given key.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","","Makes a new empty Map.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Removes a key from the map, returning the value at the key …","Takes the value of the entry out of the map, and returns …","Removes a key from the map, returning the stored key and …","Retains only the elements specified by the predicate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Gets an iterator over mutable values of the map.","Makes a new empty Map with the given initial capacity.","An escaped ASCII plane control character (usually escaped …","An escaped backspace character (usually escaped as <code>\\\\b</code>)","An escaped carriage return character (usually escaped as <code>\\\\r</code>…","Represents a character escape code in a type-safe manner.","This structure compacts a JSON value with no extra …","An escaped form feed character (usually escaped as <code>\\\\f</code>)","This trait abstracts away serializing the JSON control …","An escaped line feed character (usually escaped as <code>\\\\n</code>)","This structure pretty prints a JSON value to make it human …","An escaped quote <code>&quot;</code>","An escaped reverse solidus <code>\\\\</code>","A structure for serializing Rust values into JSON.","An escaped solidus <code>/</code>","An escaped tab character (usually escaped as <code>\\\\t</code>)","Called before every array.  Writes a <code>[</code> to the specified …","","Called before every array value.  Writes a <code>,</code> if needed to …","","Called before every object.  Writes a <code>{</code> to the specified …","","Called before every object key.","","Called before every object value.  A <code>:</code> should be written to","","Called before each series of <code>write_string_fragment</code> and …","","","","","","","","","","","","Called after every array.  Writes a <code>]</code> to the specified …","","Called after every array value.","","Called after every object.  Writes a <code>}</code> to the specified …","","Called after every object key.  A <code>:</code> should be written to …","Called after every object value.","","Called after each series of <code>write_string_fragment</code> and …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","Creates a new JSON serializer.","Construct a pretty printer formatter that defaults to …","Creates a new JSON pretty print serializer.","","","Serialize the given data structure as a String of JSON.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the I/O …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","Creates a new JSON visitor whose output will be written to …","Construct a pretty printer formatter that uses the <code>indent</code> …","Writes a <code>true</code> or <code>false</code> value to the specified writer.","Writes the representation of a byte array. Formatters can …","Writes a character escape code to the specified writer.","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes a <code>null</code> value to the specified writer.","Writes a number that has already been rendered to a string.","Writes a raw JSON fragment that doesn’t need any …","Writes a string fragment that doesn’t need any escaping …","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Represents a JSON array.","Represents a JSON boolean.","A type that can be used to index into a <code>serde_json::Value</code>.","","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Serializer whose output is a <code>Value</code>.","Represents a JSON string.","Represents any valid JSON value.","If the <code>Value</code> is an Array, returns the associated vector. …","If the <code>Value</code> is an Array, returns the associated mutable …","If the <code>Value</code> is a Boolean, returns the associated bool. …","If the <code>Value</code> is a number, represent it as f64 if possible. …","Represents the number as f64 if possible. Returns None …","If the <code>Value</code> is an integer, represent it as i64 if …","If the <code>Number</code> is an integer, represent it as i64 if …","If the <code>Value</code> is a Null, returns (). Returns None otherwise.","If the <code>Value</code> is a Number, returns the associated <code>Number</code>. …","If the <code>Value</code> is an Object, returns the associated Map. …","If the <code>Value</code> is an Object, returns the associated mutable …","If the <code>Value</code> is a String, returns the associated str. …","If the <code>Value</code> is an integer, represent it as u64 if …","If the <code>Number</code> is an integer, represent it as u64 if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","Index into a JSON array or map. A string index can be used …","Mutably index into a JSON array or map. A string index can …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the <code>Value</code> is an Array. Returns false …","Returns true if the <code>Value</code> is a Boolean. Returns false …","Returns true if the <code>Value</code> is a number that can be …","Returns true if the <code>Number</code> can be represented by f64.","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Value</code> is a Null. Returns false …","Returns true if the <code>Value</code> is a Number. Returns false …","Returns true if the <code>Value</code> is an Object. Returns false …","Returns true if the <code>Value</code> is a String. Returns false …","Returns true if the <code>Value</code> is an integer between zero and …","Returns true if the <code>Number</code> is an integer between zero and …","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …","","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","","","","","",""],"i":[2,2,0,6,0,0,2,0,2,2,6,0,0,0,2,0,14,51,11,3,5,2,14,51,11,3,5,2,3,2,3,3,2,5,11,11,0,3,2,3,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,0,3,11,11,3,2,2,14,51,11,3,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,0,0,0,2,0,3,2,3,2,14,51,11,3,5,2,2,2,51,3,3,3,11,0,0,51,0,3,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,3,2,0,11,2,0,0,0,0,0,0,14,51,11,3,5,2,14,51,11,3,5,2,14,51,11,3,5,2,0,0,0,0,0,0,0,59,60,61,59,60,61,51,14,59,60,61,0,14,0,14,0,14,59,60,61,14,14,51,59,60,61,59,60,61,59,60,61,59,60,61,0,62,62,6,0,62,6,0,62,62,62,11,62,62,11,62,62,62,62,62,11,11,11,11,11,11,62,62,62,62,0,0,0,0,0,0,64,0,64,0,0,0,64,3,64,67,66,68,69,71,70,72,73,64,67,66,68,69,71,70,72,73,3,3,3,64,67,66,68,69,71,70,72,73,3,66,3,3,66,3,67,66,64,67,66,68,69,71,70,72,73,68,69,71,70,72,73,66,3,3,3,64,67,66,3,3,68,69,71,70,72,73,3,68,69,71,70,72,73,68,69,71,70,72,73,64,64,3,66,3,3,68,69,71,70,72,73,64,67,66,68,69,71,70,72,73,64,67,66,68,69,71,70,72,73,64,67,66,68,69,71,70,72,73,3,3,3,78,78,78,0,0,78,0,78,0,78,78,0,78,78,8,76,8,76,8,76,8,76,8,76,8,78,77,76,78,77,76,77,76,77,76,76,8,76,8,76,8,76,8,8,76,8,77,76,78,77,76,78,77,76,5,5,76,5,77,76,0,0,0,0,0,0,78,77,76,78,77,76,78,77,76,5,76,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2,2,0,0,2,0,2,2,0,2,0,2,2,2,2,36,2,36,2,2,2,2,2,2,36,79,36,79,36,36,36,79,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,79,36,36,36,36,36,36,36,36,36,36,36,36,36,0,2,2,36,79,36,2,2,2,36,2,36,2,2,2,2,2,36,2,2,36,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,2,36,36,0,79,36,79,36,79,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[1,2]]],[[3,[1,2]]]],[2,2],[[[3,[1,2]],[3,[1,2]]],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[5,[-1,-2]],-3],[[6,[4]]],7,8,[9,10]],[-1,11,10],[-1,11,10],0,[[],[[3,[1,2]]]],[[],2],[-1,[[12,[[3,[1,2]]]]],13],[-1,[[12,[2]]],13],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,[18,[17]],-2],6,15,16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,-2],6,15,16],[[2,17,-1],[[12,[11]]],16],[[2,17,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,[18,[17]],-2],6,15,16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[[14,[-1]],19,-2],6,15,16],[[2,19,-1],[[12,[11]]],16],[[2,19,-1],[[12,[11]]],16],[[[14,[-1]],17,19,-2],6,15,16],[[2,17,19,-1],[[12,[11]]],16],[[2,17,19,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,-2],6,15,16],[[2,17,-1],[[12,[11]]],16],[[2,17,-1],[[12,[11]]],16],[[[3,[1,2]],[3,[1,2]]],20],[[2,21],20],[[2,19],20],[[2,22],20],[[2,20],20],[[2,22],20],[[2,23],20],[[2,24],20],[[2,25],20],[[2,25],20],[[2,25],20],[[2,26],20],[[2,26],20],[[2,26],20],[[2,27],20],[[2,2],20],[[2,17],20],[[2,28],20],[[2,20],20],[[2,20],20],[[2,23],20],[[2,27],20],[[2,28],20],[[2,29],20],[[2,17],20],[[2,30],20],[[2,19],20],[[2,31],20],[[2,19],20],[[2,24],20],[[2,28],20],[[2,30],20],[[2,22],20],[[2,30],20],[[2,29],20],[[2,31],20],[[2,27],20],[[2,31],20],[[2,21],20],[[2,23],20],[[2,21],20],[[2,1],20],[[2,29],20],[[2,24],20],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],0,[[[3,[1,2]],-1],4,32],[[11,33],34],[[11,33],34],[[[3,[1,2]],33],[[12,[4,35]]]],[[2,33],34],[[2,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[25,2],[24,2],[-1,-1,[]],[28,2],[[[3,[1,2]]],2],[21,2],[1,2],[36,2],[[[18,[-1]]],2,[37,[38,[2]]]],[27,2],[26,2],[23,2],[17,2],[4,2],[22,2],[[[39,[-1]]],2,[[38,[2]]]],[20,2],[[[40,[-1]]],2,[[38,[2]]]],[29,2],[19,2],[[[41,[17]]],2],[30,2],[31,2],[-1,[[3,[1,2]]],32],[-1,2,32],[-1,2,32],[-1,[[6,[-2]]],42,43],[[[18,[30]]],[[6,[-1]]],44],[17,[[6,[-1]]],44],[17,[[12,[2,11]]]],[2,[[12,[-1,11]]],43],[[[3,[1,2]],-1],2,[9,45,46,47]],[[2,-1],2,48],[[[3,[1,2]],-1],2,[9,45,46,47]],[[2,-1],2,48],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2],[2],[-1,-2,[],[]],[[[3,[1,2]]]],[[[3,[1,2]]]],[[[3,[1,2]]]],[[49,50],11],0,0,[[[51,[-1,-2]]],[[40,[[6,[-2]]]]],15,44],0,[[[3,[1,2]],-1],12,52],[[2,-1],12,52],[[[5,[-1,-2]],20],[[6,[4]]],7,8],[[[5,[-1,-2]],[18,[30]]],[[6,[4]]],7,8],[[[5,[-1,-2]],53],[[6,[4]]],7,8],[[[5,[-1,-2]],23],[[6,[4]]],7,8],[[[5,[-1,-2]],24],[[6,[4]]],7,8],[[[5,[-1,-2]],54],[[6,[4]]],7,8],[[[5,[-1,-2]],26],[[6,[4]]],7,8],[[[5,[-1,-2]],25],[[6,[4]]],7,8],[[[5,[-1,-2]],22],[[6,[4]]],7,8],[[[5,[-1,-2]],31],[[6,[4]]],7,8],[[[5,[-1,-2]],[40,[19]]],6,7,8],[[[5,[-1,-2]],17,-3],[[6,[4]]],7,8,[9,55]],[[[5,[-1,-2]],17,27,17,-3],[[6,[4]]],7,8,[9,55]],[[[5,[-1,-2]]],[[6,[4]]],7,8],[[[5,[-1,-2]],[40,[19]]],6,7,8],[[[5,[-1,-2]],-3],[[6,[4]]],7,8,[9,55]],[[[5,[-1,-2]],17],[[6,[4]]],7,8],[[[5,[-1,-2]],17,19],6,7,8],[[[5,[-1,-2]],17,27,17,19],6,7,8],[[[5,[-1,-2]],19],6,7,8],[[[5,[-1,-2]],17,19],6,7,8],[[[5,[-1,-2]],17,27,17,19],6,7,8],[[[5,[-1,-2]],56],[[6,[4]]],7,8],[[[5,[-1,-2]],29],[[6,[4]]],7,8],[[[5,[-1,-2]],27],[[6,[4]]],7,8],[[[5,[-1,-2]],28],[[6,[4]]],7,8],[[[5,[-1,-2]],30],[[6,[4]]],7,8],[[[5,[-1,-2]]],[[6,[4]]],7,8],[[[5,[-1,-2]],17],[[6,[4]]],7,8],[[[5,[-1,-2]],17,27,17],[[6,[4]]],7,8],[11,[[40,[57]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[1]]],[9,55]],[-1,1,[]],[-1,1,[]],[-1,[[6,[1]]],[9,55]],[-1,[[12,[2,11]]],55],[-1,[[6,[[39,[30]]]]],[9,55]],[-1,[[6,[[39,[30]]]]],[9,55]],[[-1,-2],[[6,[4]]],7,[9,55]],[[-1,-2],[[6,[4]]],7,[9,55]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1,-2]]],19,15,44],[[[14,[-1]]],[[6,[4]]],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[6,[-2]]],42,43],[-1,[[14,[[59,[-1]]]]],42],[[[18,[30]]],[[6,[-1]]],44],[[[18,[30]]],[[14,[60]]]],[17,[[6,[-1]]],44],[17,[[14,[61]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]]],[[51,[-1,-2]]],15,44],[-1,[[14,[-1]]],15],[-1,[[51,[-1,-2]]],15,44],[-1,[[59,[-1]]],42],[[[18,[30]]],60],[17,61],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[11,62],[62,62],[[-1,-2],4,[],[]],[11,19],[[62,62],20],[[-1,-2],20,[],[]],[[62,33],34],[-1,-1,[]],[-1,-2,[],[]],[11,[[40,[63]]]],[11,20],[11,20],[11,20],[11,20],[11,19],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[64,-1],64,65],[[[3,[1,2]],[3,[1,2]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[1,2]]],4],[[[3,[1,2]],-1],20,[9,45,46,47]],[[[3,[1,2]],-1],64,[[38,[1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[3,[1,2]],-1],[[40,[2]]],[9,45,46,47]],[66,2],[[[3,[1,2]],-1],[[40,[[4,[1,2]]]]],[9,45,46,47]],[[[3,[1,2]],-1],[[40,[2]]],[9,45,46,47]],[66,2],[[[3,[1,2]],1,2],[[40,[2]]]],[[67,2],2],[[66,2],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[66,2],[[[3,[1,2]]],20],[[[3,[1,2]]],68],[[[3,[1,2]]],69],[64,1],[67,1],[66,1],[[[3,[1,2]]],70],[[[3,[1,2]]],19],[68,19],[69,19],[71,19],[70,19],[72,19],[73,19],[[],[[3,[1,2]]]],[68,40],[69,40],[71,40],[70,40],[72,40],[73,40],[68,40],[69,40],[71,40],[70,40],[72,40],[73,40],[[64,2],2],[[64,-1],2,65],[[[3,[1,2]],-1],[[40,[2]]],[9,45,46,47]],[66,2],[[[3,[1,2]],-1],[[40,[[4,[1,2]]]]],[9,45,46,47]],[[[3,[1,2]],-1],4,74],[68,[[4,[19,[40,[19]]]]]],[69,[[4,[19,[40,[19]]]]]],[71,[[4,[19,[40,[19]]]]]],[70,[[4,[19,[40,[19]]]]]],[72,[[4,[19,[40,[19]]]]]],[73,[[4,[19,[40,[19]]]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[[[3,[1,2]]],72],[[[3,[1,2]]],73],[19,[[3,[1,2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2,20],[[75,[4]]],[],[9,7]],[[76,-1,20],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2,20],[[75,[4]]],[],[9,7]],[[76,-1,20],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[77,77],[76,76],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],76],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[77,33],34],[[76,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1,-2]]],-1,7,8],[-1,[[5,[-1]]],7],[[],76],[-1,[[5,[-1,76]]],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[1]]],[9,55]],[-1,[[6,[1]]],[9,55]],[-1,[[6,[[39,[30]]]]],[9,55]],[-1,[[6,[[39,[30]]]]],[9,55]],[[-1,-2],[[6,[4]]],7,[9,55]],[[-1,-2],[[6,[4]]],7,[9,55]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[[-1,-2],[[5,[-1,-2]]],7,8],[[[18,[30]]],76],[[-1,-2,20],[[75,[4]]],[],[9,7]],[[-1,-2,[18,[30]]],[[75,[4]]],[],[9,7]],[[-1,-2,78],[[75,[4]]],[],[9,7]],[[-1,-2,23],[[75,[4]]],[],[9,7]],[[-1,-2,24],[[75,[4]]],[],[9,7]],[[-1,-2,54],[[75,[4]]],[],[9,7]],[[-1,-2,26],[[75,[4]]],[],[9,7]],[[-1,-2,25],[[75,[4]]],[],[9,7]],[[-1,-2,22],[[75,[4]]],[],[9,7]],[[-1,-2,31],[[75,[4]]],[],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[-1,-2,17],[[75,[4]]],[],[9,7]],[[-1,-2,17],[[75,[4]]],[],[9,7]],[[-1,-2,17],[[75,[4]]],[],[9,7]],[[-1,-2,56],[[75,[4]]],[],[9,7]],[[-1,-2,29],[[75,[4]]],[],[9,7]],[[-1,-2,27],[[75,[4]]],[],[9,7]],[[-1,-2,28],[[75,[4]]],[],[9,7]],[[-1,-2,30],[[75,[4]]],[],[9,7]],0,0,0,0,0,0,0,0,0,0,0,[2,[[40,[[39,[2]]]]]],[2,[[40,[[39,[2]]]]]],[2,[[40,[20]]]],[2,[[40,[24]]]],[36,[[40,[24]]]],[2,[[40,[22]]]],[36,[[40,[22]]]],[2,[[40,[4]]]],[2,[[40,[36]]]],[2,[[40,[[3,[1,2]]]]]],[2,[[40,[[3,[1,2]]]]]],[2,[[40,[17]]]],[2,[[40,[28]]]],[36,[[40,[28]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[[-1,-2],4,[],[]],[[79,-1],[[6,[2]]],[9,10]],[-1,[[12,[36]]],13],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,17,[18,[17]],-1],12,16],[[36,17,[18,[17]],-1],12,16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,17,-1],12,16],[[36,17,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,17,[18,[17]],-1],12,16],[[36,17,[18,[17]],-1],12,16],[[36,19,-1],12,16],[[36,19,-1],12,16],[[36,17,19,-1],12,16],[[36,17,19,-1],12,16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],12,16],[[36,-1],12,16],[[36,17,-1],12,16],[[36,17,-1],12,16],[[36,36],20],[[-1,-2],20,[],[]],[[36,33],34],[[36,33],34],[-1,-1,[]],[25,36],[26,36],[29,36],[27,36],[21,36],[31,36],[22,36],[28,36],[-1,-1,[]],[19,36],[30,36],[24,[[40,[36]]]],[17,[[12,[36]]]],[2,[[12,[-1,11]]],43],[[2,-1],[[40,[2]]],48],[[2,-1],[[40,[2]]],48],[[36,-1],4,80],[-1,-2,[],[]],[-1,-2,[],[]],[2,20],[2,20],[2,20],[36,20],[2,20],[36,20],[2,20],[2,20],[2,20],[2,20],[2,20],[36,20],[[2,17],[[40,[2]]]],[[2,17],[[40,[2]]]],[[36,-1],12,52],[[79,20],[[6,[2]]]],[[79,[18,[30]]],[[6,[2]]]],[[79,53],[[6,[2]]]],[[79,23],[[6,[2]]]],[[79,24],[[6,[2]]]],[[79,54],[[6,[2]]]],[[79,26],[[6,[2]]]],[[79,25],[[6,[2]]]],[[79,22],[[6,[2]]]],[[79,31],[[6,[2]]]],[[79,[40,[19]]],6],[[79,17,-1],[[6,[2]]],[9,55]],[[79,17,27,17,-1],[[6,[2]]],[9,55]],[79,[[6,[2]]]],[[79,[40,[19]]],6],[[79,-1],[[6,[2]]],[9,55]],[[79,17],[[6,[2]]]],[[79,17,19],6],[[79,17,27,17,19],6],[[79,19],6],[[79,17,19],6],[[79,17,27,17,19],6],[[79,56],[[6,[2]]]],[[79,29],[[6,[2]]]],[[79,27],[[6,[2]]]],[[79,28],[[6,[2]]]],[[79,30],[[6,[2]]]],[79,[[6,[2]]]],[[79,17],[[6,[2]]]],[[79,17,27,17],[[6,[2]]]],[2,2],[-1,-2,[],[]],[-1,1,[]],[-1,[[12,[2,11]]],55],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]]],"c":[],"p":[[3,"String",785],[4,"Value",0],[3,"Map",0],[15,"tuple"],[3,"Serializer",0],[6,"Result",0],[8,"Write",786],[8,"Formatter",515],[8,"Sized",787],[8,"Display",788],[3,"Error",0],[4,"Result",789],[8,"Deserializer",790],[3,"Deserializer",0],[8,"Read",307],[8,"Visitor",790],[15,"str"],[15,"slice"],[15,"usize"],[15,"bool"],[15,"isize"],[15,"i64"],[15,"f32"],[15,"f64"],[15,"i32"],[15,"i16"],[15,"u32"],[15,"u64"],[15,"u16"],[15,"u8"],[15,"i8"],[8,"IntoIterator",791],[3,"Formatter",788],[6,"Result",788],[3,"Error",788],[3,"Number",611],[8,"Clone",792],[8,"Into",793],[3,"Vec",794],[4,"Option",795],[4,"Cow",796],[8,"Read",786],[8,"DeserializeOwned",790],[8,"Deserialize",790],[8,"Ord",797],[8,"Eq",797],[8,"Hash",798],[8,"Index",611],[4,"Unexpected",790],[8,"Expected",790],[3,"StreamDeserializer",0],[8,"Serializer",799],[15,"char"],[15,"i128"],[8,"Serialize",799],[15,"u128"],[8,"Error",800],[3,"TypeId",801],[3,"IoRead",307],[3,"SliceRead",307],[3,"StrRead",307],[4,"Category",348],[4,"ErrorKind",802],[4,"Entry",378],[8,"FnOnce",803],[3,"OccupiedEntry",378],[3,"VacantEntry",378],[3,"Iter",378],[3,"IterMut",378],[3,"Keys",378],[3,"IntoIter",378],[3,"Values",378],[3,"ValuesMut",378],[8,"FnMut",803],[6,"Result",802],[3,"PrettyFormatter",515],[3,"CompactFormatter",515],[4,"CharEscape",515],[3,"Serializer",611],[8,"Hasher",798]]},\
"smallvec":{"doc":"Small vectors in various sizes. These store a certain …","t":"NINEDDQDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLOLLLLKLLLLLLLLLLLLLLLLLLM","n":["AllocErr","Array","CapacityOverflow","CollectionAllocErr","Drain","IntoIter","Item","SmallVec","ToSmallVec","append","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ref","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","cmp","dedup","dedup_by","dedup_by_key","default","deref","deref_mut","deserialize","drain","drop","drop","drop","eq","equivalent","extend","extend_from_slice","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_buf","from_buf_and_len","from_buf_and_len_unchecked","from_elem","from_iter","from_raw_parts","from_slice","from_vec","grow","hash","index","index_mut","inline_size","insert","insert_from_slice","insert_many","into","into","into","into","into_boxed_slice","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_vec","is_empty","len","len","new","next","next","next_back","next_back","partial_cmp","pop","push","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","serialize","set_len","shrink_to_fit","size","size_hint","size_hint","smallvec","spilled","swap_remove","to_owned","to_owned","to_smallvec","to_string","truncate","try_from","try_from","try_from","try_from","try_grow","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","with_capacity","layout"],"q":[[0,"smallvec"],[141,"smallvec::CollectionAllocErr"],[142,"core::clone"],[143,"core::cmp"],[144,"core::ops::function"],[145,"core::result"],[146,"serde::de"],[147,"core::ops::range"],[148,"core::iter::traits::collect"],[149,"core::fmt"],[150,"core::fmt"],[151,"core::alloc::layout"],[152,"core::mem::maybe_uninit"],[153,"core::hash"],[154,"core::slice::index"],[155,"alloc::boxed"],[156,"core::option"],[157,"serde::ser"],[158,"alloc::string"],[159,"core::any"]],"d":["The allocator return an error","Types that can be used as the backing store for a <code>SmallVec</code>.","Overflow <code>usize::MAX</code> or other error during size computation","Error type for APIs with fallible heap allocation","An iterator that removes the items from a <code>SmallVec</code> and …","An iterator that consumes a <code>SmallVec</code> and yields its items …","The type of the array’s elements.","A <code>Vec</code>-like container that can store a small number of …","Convenience trait for constructing a <code>SmallVec</code>","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","","Returns a raw mutable pointer to the vector’s buffer.","Extracts a mutable slice of the entire vector.","Returns the remaining items of this iterator as a mutable …","Returns a raw pointer to the vector’s buffer.","","Extracts a slice containing the entire vector.","Returns the remaining items of this iterator as a slice.","","","","","","","","","","","The number of items the vector can hold without …","Remove all elements from the vector.","","","","","","","Removes consecutive duplicate elements.","Removes consecutive duplicate elements using the given …","Removes consecutive elements that map to the same key.","","","","","Creates a draining iterator that removes the specified …","","","","","","","Copy elements from a slice and append them to the vector.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Creates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.","","Creates a <code>SmallVec</code> directly from the raw components of …","Copy the elements from a slice into a new <code>SmallVec</code>.","Construct a new <code>SmallVec</code> from a <code>Vec&lt;A::Item&gt;</code>.","Re-allocate to set the capacity to …","","","","The maximum number of elements this vector can hold inline","Insert an element at position <code>index</code>, shifting all elements …","Copy elements from a slice into the vector at position …","Insert multiple elements at position <code>index</code>, shifting all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a <code>SmallVec</code> into a <code>Box&lt;[T]&gt;</code> without reallocating …","Convert the <code>SmallVec</code> into an <code>A</code> if possible. Otherwise …","","","","","","Convert a <code>SmallVec</code> to a <code>Vec</code>, without reallocating if the …","Returns <code>true</code> if the vector is empty","","The number of elements stored in the vector","Construct an empty vector","","","","","","Remove an item from the end of the vector and return it, …","Append an item to the vector.","Remove and return the element at position <code>index</code>, shifting …","Reserve capacity for <code>additional</code> more elements to be …","Reserve the minimum capacity for <code>additional</code> more elements …","Resizes the vector so that its length is equal to <code>len</code>.","Resizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to …","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","","Sets the length of a vector.","Shrink the capacity of the vector as much as possible.","Returns the number of items the array can hold.","","","Creates a <code>SmallVec</code> containing the arguments.","Returns <code>true</code> if the data has spilled into a separate …","Remove the element at position <code>index</code>, replacing it with …","","","Construct a new <code>SmallVec</code> from a slice.","","Shorten the vector, keeping the first <code>len</code> elements and …","","","","","Re-allocate to set the capacity to …","","","","","Reserve capacity for <code>additional</code> more elements to be …","Reserve the minimum capacity for <code>additional</code> more elements …","","","","","Construct an empty vector with enough capacity …","The layout that was passed to the allocator"],"i":[18,0,18,0,0,0,3,0,0,1,1,1,1,5,1,1,1,5,12,1,1,5,18,12,1,1,5,18,1,1,1,5,1,1,5,1,1,1,1,1,1,1,1,1,12,1,5,1,1,1,1,12,1,5,18,18,12,1,1,1,1,1,5,18,18,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,5,18,1,1,12,1,1,1,5,1,1,12,1,1,12,5,12,5,1,1,1,1,1,1,1,1,1,1,1,1,1,3,12,5,0,1,1,1,5,30,18,1,12,1,5,18,1,12,1,5,18,1,1,12,1,5,18,1,31],"f":[0,0,0,0,0,0,0,0,0,[[[1,[-1]],[1,[-2]]],2,3,3],[[[1,[-1]]],4,3],[[[1,[-1]]],[],3],[[[1,[-1]]],4,3],[[[5,[-1]]],4,3],[[[1,[-1]]],[],3],[[[1,[-1]]],4,3],[[[1,[-1]]],4,3],[[[5,[-1]]],4,3],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],4,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],4,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],6,3],[[[1,[-1]]],2,3],[[[1,[-1]]],[[1,[-1]]],3],[[[5,[-1]]],[[5,[-1]]],[3,7]],[[[1,[-1]],[1,[-1]]],2,3],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[1,[-1]],[1,[-1]]],8,3],[[[1,[-1]]],2,3],[[[1,[-1]],-2],2,3,9],[[[1,[-1]],-2],2,3,9],[[],[[1,[-1]]],3],[[[1,[-1]]],4,3],[[[1,[-1]]],4,3],[-1,[[10,[[1,[-2]]]]],11,3],[[[1,[-1]],-2],[[12,[-1]]],3,[[13,[6]]]],[[[12,[-1]]],2,3],[[[1,[-1]]],2,3],[[[5,[-1]]],2,3],[[[1,[-1]],[1,[-2]]],14,3,3],[[-1,-2],14,[],[]],[[[1,[-1]],-2],2,3,15],[[[1,[-1]],4],2,3],[[[12,[-1]],16],17,3],[[[1,[-1]],16],17,3],[[[5,[-1]],16],17,3],[[18,16],17],[[18,16],17],[-1,-1,[]],[19,-1,[]],[-1,-1,[]],[20,[[1,[-1]]],3],[-1,[[1,[-1]]],3],[4,[[1,[-1]]],3],[-1,-1,[]],[21,18],[-1,-1,[]],[-1,[[1,[-1]]],3],[[-1,6],[[1,[-1]]],3],[[[22,[-1]],6],[[1,[-1]]],3],[6,[[1,[-1]]],3],[-1,[[1,[-2]]],15,3],[[6,6],[[1,[-1]]],3],[4,[[1,[-1]]],3],[20,[[1,[-1]]],3],[[[1,[-1]],6],2,3],[[[1,[-1]],-2],2,3,23],[[[1,[-1]],-2],[],3,[[24,[4]]]],[[[1,[-1]],-2],[],3,[[24,[4]]]],[[[1,[-1]]],6,3],[[[1,[-1]],6],2,3],[[[1,[-1]],6,4],2,3],[[[1,[-1]],6,-2],2,3,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[25,[4]]],3],[[[1,[-1]]],[[10,[-1,[1,[-1]]]]],3],[-1,-2,[],[]],[[[1,[-1]]],[],3],[[[1,[-1]]],[],3],[[[1,[-1]]],[],3],[-1,-2,[],[]],[[[1,[-1]]],20,3],[[[1,[-1]]],14,3],[[[12,[-1]]],6,3],[[[1,[-1]]],6,3],[[],[[1,[-1]]],3],[[[12,[-1]]],26,3],[[[5,[-1]]],26,3],[[[12,[-1]]],26,3],[[[5,[-1]]],26,3],[[[1,[-1]],[1,[-1]]],[[26,[8]]],3],[[[1,[-1]]],26,3],[[[1,[-1]]],2,3],[[[1,[-1]],6],[],3],[[[1,[-1]],6],2,3],[[[1,[-1]],6],2,3],[[[1,[-1]],6],2,3],[[[1,[-1]],6,-2],2,3,9],[[[1,[-1]],-2],2,3,9],[[[1,[-1]],-2],2,3,9],[[[1,[-1]],-2],10,3,27],[[[1,[-1]],6],2,3],[[[1,[-1]]],2,3],[[],6],[[[12,[-1]]],[[2,[6,[26,[6]]]]],3],[[[5,[-1]]],[[2,[6,[26,[6]]]]],3],0,[[[1,[-1]]],14,3],[[[1,[-1]],6],[],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,28,[]],[[[1,[-1]],6],2,3],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[1,[-1]],6],[[10,[2,18]]],3],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[1,[-1]],6],[[10,[2,18]]],3],[[[1,[-1]],6],[[10,[2,18]]],3],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[6,[[1,[-1]]],3],0],"c":[],"p":[[3,"SmallVec",0],[15,"tuple"],[8,"Array",0],[15,"slice"],[3,"IntoIter",0],[15,"usize"],[8,"Clone",142],[4,"Ordering",143],[8,"FnMut",144],[4,"Result",145],[8,"Deserializer",146],[3,"Drain",0],[8,"RangeBounds",147],[15,"bool"],[8,"IntoIterator",148],[3,"Formatter",149],[6,"Result",149],[4,"CollectionAllocErr",0],[15,"never"],[3,"Vec",150],[6,"LayoutErr",151],[19,"MaybeUninit",152],[8,"Hasher",153],[8,"SliceIndex",154],[3,"Box",155],[4,"Option",156],[8,"Serializer",157],[3,"String",158],[3,"TypeId",159],[8,"ToSmallVec",0],[13,"AllocErr",141]]},\
"spirt":{"doc":"<code>SPIR-🇹</code>","t":"EEDDNNNNDNNNEDDDDENDDDNDDDDDENEQDEENQDDDDINEEDNNDDDDNDDNENDNNNDEEDNNNNNNNNENNNNNNNNNNNNNNDNNEEDENMLLLLLLLLLLLMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLMMMMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMLLKLLLLLKLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLMLLLLLMMMMLLALALLLLLLLLLLLLLLLLLLLLLLLALLLMMLLAKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMNDDENENNNDNMLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLMLLLLMMLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLAAAFFFFFFDQDIDMLLLLLLLMLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNDNNNNEDEEENNNSNNSSSMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMAMAMMLLLALLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMDLLLLLLLLLDLLLLLLLLLLDLLLLLLLLLLNEENDDNNNMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMDDDGEDDNNDNMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLMFMLLLLLLLLLLMMLLLLLLLMAAMMMMLLLALLAMMMMALLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLMANNNNNNNNEDLLLLLLLLFLLFMLLLLLLDLLLMLLLLLLLLMMNDMMMNNMDMDDNMMRMNMMMMEDMMNMMMEMMMMNMNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDDEENNMDMNEMMMDMNNMNDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLAMMLLLLLLLLLLLLLLLMLMLLMLLLLLMMMLLLAMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMEIEEDDQILLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLNNNDENEDNDDNNDDEDNNENNMLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLMMMMMLLLLLLLLLLLLMMMMLLLLLLLLLLLMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMDLLLLLLLLLMLNIIEINLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLIIIIKKLLKLKLLLLKLKLKLLLLLLLKLK","n":["AddrSpace","Attr","AttrSet","AttrSetDef","Attrs","Block","BoolCond","Bug","Const","Const","Const","Const","ConstCtor","ConstDef","Context","ControlNode","ControlNodeDef","ControlNodeKind","ControlNodeOutput","ControlNodeOutputDecl","ControlRegion","ControlRegionDef","ControlRegionInput","ControlRegionInputDecl","DataInst","DataInstDef","DataInstForm","DataInstFormDef","DataInstKind","DataInstOutput","DeclDef","DenseValueSlots","Diag","DiagLevel","DiagMsgPart","Diagnostics","Entity","EntityDefs","EntityList","EntityListIter","EntityOrientedDenseMap","EntityOrientedMapKey","Error","ExportKey","Exportee","Func","Func","FuncCall","FuncDecl","FuncDefBody","FuncParam","GlobalVar","GlobalVar","GlobalVarDecl","GlobalVarDefBody","Handles","Import","Imported","InternedStr","LinkName","LinkName","Loop","Module","ModuleDebugInfo","ModuleDialect","OrdAssertEq","Plain","Present","PtrToGlobalVar","QPtr","QPtr","QPtr","QPtrUsage","Select","SelectionKind","Spv","Spv","SpvAnnotation","SpvBitflagsOperand","SpvDebugLine","SpvEntryPoint","SpvExtInst","SpvInst","SpvInst","SpvInst","SpvInst","SpvStorageClass","SpvStringLiteralForExtInst","SpvStringLiteralForExtInst","Type","Type","Type","TypeCtor","TypeCtorArg","TypeDef","Value","Warning","addr_space","append","append_diag","append_diag","as_ref","as_ref","as_ref","as_ref","at","at_body","at_mut","at_mut_body","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bug","cfg","children","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","compare","compare","control_nodes","control_regions","ctor","ctor","ctor_args","ctor_args","cx","cx_ref","data_insts","debug_info","def","def","default","default","default","default","default","default","define","dialect","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","empty","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","err","exports","first","form","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func_at","funcs","get","get_custom_ext_inst_set_by_lowercase_name","get_dense_value_slot","get_dense_value_slot","get_dense_value_slot","get_dense_value_slot","get_dense_value_slot","get_dense_value_slot","get_dense_value_slot_mut","get_dense_value_slot_mut","get_dense_value_slot_mut","get_dense_value_slot_mut","get_dense_value_slot_mut","get_dense_value_slot_mut","get_mut","global_vars","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index_mut","index_mut","initializer","inner_in_place_transform_with","inner_in_place_transform_with","inner_in_place_transform_with","inner_in_place_transform_with","inner_in_place_transform_with","inner_in_place_transform_with","inner_in_place_transform_with","inner_in_place_transform_with","inner_transform_with","inner_transform_with","inner_transform_with","inner_transform_with","inner_transform_with","inner_transform_with","inner_transform_with","inner_transform_with","inner_transform_with","inner_transform_with","inner_transform_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inner_visit_with","inputs","inputs","insert","insert_before","insert_first","insert_last","intern","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","iter","kind","kind","last","level","lift_to_spv_file","lift_to_spv_module_emitter","lower_from_spv_bytes","lower_from_spv_file","lower_from_spv_module_parser","message","new","new","new","new","new","output_type","outputs","outputs","params","partial_cmp","partial_cmp","passes","prepend","print","print","print","print","print","print","print","print","print","print","print","print","print","print","print","print","print","print","print","print","print","print","push_diag","push_diag","qptr","register_custom_ext_inst_set","remove","remove","ret_type","shape","split_first","split_last","spv","to_entity","to_entity","to_entity","to_entity","to_entity","to_entity","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_of_ptr_to","unstructured_cfg","visit","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","warn","col","file_path","line","body","cases","initial_inputs","insts","kind","repeat_condition","scrutinee","ext_set","inst","imms","interface_global_vars","control_node","input_idx","output_idx","region","Branch","ControlFlowGraph","ControlInst","ControlInstKind","ExitInvocation","ExitInvocationKind","Return","SelectBranch","SpvInst","Structurizer","Unreachable","attrs","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","control_inst_on_exit_from","default","dyn_inner_visit_with","from","from","from","from","from","inner_in_place_transform_with","inner_visit_with","inputs","into","into","into","into","into","kind","new","print","rev_post_order","structurize_func","target_inputs","targets","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","FuncAt","FuncAtMut","at","at","at_children","at_children","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","control_nodes","control_nodes","control_regions","control_regions","data_insts","data_insts","def","def","def","def","def","def","freeze","from","from","inner_in_place_transform_with","inner_in_place_transform_with","inner_in_place_transform_with","inner_in_place_transform_with","inner_visit_with","inner_visit_with","inner_visit_with","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","next","next","next","next","next_back","position","position","print","print","print","print","reborrow","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","type_of","legalize","link","qptr","structurize_func_cfgs","minimize_exports","resolve_imports","analyze_uses","lift_to_spv_ptrs","lower_from_spv_ptrs","AttrsAndDef","Output","Plan","Print","Printer","attrs","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cx","def_without_name","default","for_module","for_root","for_versions","from","from","from","into","into","into","pretty_print","pretty_print_deps_and_root_separately","print","print","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","visit_attr","visit_attr_set_use","visit_const_def","visit_const_use","visit_data_inst_form_use","visit_func_decl","visit_func_use","visit_global_var_decl","visit_global_var_use","visit_module","visit_module_debug_info","visit_module_dialect","visit_type_use","visit_value_use","BufferData","BufferDynLen","DirectAccess","DynOffset","DynOffsetBase","FromSpvPtrOutput","FuncLocalVar","HandleArrayIndex","Handles","LayoutConfig","Load","Memory","Offset","OffsetBase","QPtrAttr","QPtrMemUsage","QPtrMemUsageKind","QPtrOp","QPtrUsage","Store","StrictlyTyped","ToSpvPtrInput","UNUSED","Unused","Usage","VULKAN_EXTENDED_ALIGN_UBO_LAYOUT","VULKAN_SCALAR_LAYOUT","VULKAN_STANDARD_LAYOUT","abstract_bool_size_align","analyze","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","dyn_inner_visit_with","dyn_inner_visit_with","dyn_inner_visit_with","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","from","from","from","from","from","from","hash","hash","hash","hash","hash","ignore_legacy_align","inner_transform_with","inner_transform_with","inner_visit_with","inner_visit_with","inner_visit_with","into","into","into","into","into","into","kind","lift","logical_ptr_size_align","lower","max_size","min_aggregate_legacy_align","partial_cmp","print","print","shapes","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","addr_space","input_idx","pointee","pointee","element","stride","dyn_unit_stride","fixed_base_size","index_bounds","stride","InferUsage","borrow","borrow_mut","from","infer_usage_in_module","into","new","try_from","try_into","type_id","LiftToSpvPtrs","borrow","borrow_mut","from","into","lift_all_funcs","lift_global_var","new","try_from","try_into","type_id","LowerFromSpvPtrs","borrow","borrow_mut","from","into","lower_func","lower_global_var","new","try_from","try_into","type_id","Buffer","GlobalVarShape","Handle","Handles","MaybeDynMemLayout","MemLayout","Opaque","TypedInterface","UntypedData","align","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","dyn_unit_stride","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fixed_base","fmt","fmt","from","from","from","from","hash","hash","into","into","into","into","legacy_align","size","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","fixed_count","handle","DebugSourceLang","DebugSources","Dialect","Id","Imm","Inst","InstWithIds","LongCont","LongStart","ModuleDebugInfo","Short","addressing_model","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","compare","compare","compare","default","deref","deref_mut","encode_literal_string","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extension_insts","extensions","extract_literal_string","file_contents","from","from","from","from","from","from","from","from","hash","hash","ids","imms","into","into","into","into","into","into","into","lang","lift","lower","memory_model","module_processes","opcode","original_generator_magic","partial_cmp","partial_cmp","partial_cmp","print","print","print","read","result_id","result_type_id","source_extensions","source_languages","spec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version_major","version_minor","visit_with","visit_with","without_ids","write","EnumerandName","Error","Id","NumericLiteral","OperandKindNamespacePrefix","OperandName","Punctuation","StringLiteral","Token","TokensForOperand","borrow","borrow","borrow_mut","borrow_mut","concat_to_plain_text","default","from","from","inst_operands","into","into","operand_from_imms","tokens","try_from","try_from","try_into","try_into","type_id","type_id","ModuleParser","borrow","borrow_mut","from","header","into","into_iter","next","read_from_spv_bytes","read_from_spv_file","try_from","try_into","type_id","AddressingModel","ArrayStride","BitEnum","BitIdx","Block","CallableDataKHR","Capability","Const","ControlFlow","Decoration","Enumerant","Export","ExtInstSetDesc","ExtInstSetInstructionDesc","FromContextualType","Function","FunctionControl","HEADER_LEN","HitAttributeKHR","Id","Import","IncomingCallableDataKHR","IncomingRayPayloadKHR","Input","InstructionCategory","InstructionDef","LinkageAttributes","LinkageType","Literal","LiteralContextDependentNumber","LiteralExtInstInteger","LiteralInteger","LiteralSize","LiteralString","Logical","LoopControl","MemoryModel","NulTerminated","Offset","One","OpAccessChain","OpArrayLength","OpBitcast","OpBranch","OpBranchConditional","OpCapability","OpConstant","OpConstantFalse","OpConstantTrue","OpDecorate","OpDecorateId","OpDecorateString","OpDecorationGroup","OpEntryPoint","OpExecutionMode","OpExecutionModeId","OpExtInst","OpExtInstImport","OpExtension","OpFunction","OpFunctionCall","OpFunctionEnd","OpFunctionParameter","OpGroupDecorate","OpGroupMemberDecorate","OpInBoundsAccessChain","OpInBoundsPtrAccessChain","OpLabel","OpLine","OpLoad","OpLoopMerge","OpMemberDecorate","OpMemberDecorateString","OpMemberName","OpMemoryModel","OpModuleProcessed","OpName","OpNoLine","OpNop","OpPhi","OpPtrAccessChain","OpReturn","OpReturnValue","OpSelectionMerge","OpSource","OpSourceContinued","OpSourceExtension","OpStore","OpString","OpSwitch","OpTypeAccelerationStructureKHR","OpTypeArray","OpTypeBool","OpTypeFloat","OpTypeForwardPointer","OpTypeFunction","OpTypeImage","OpTypeInt","OpTypeMatrix","OpTypePointer","OpTypeRuntimeArray","OpTypeSampledImage","OpTypeSampler","OpTypeStruct","OpTypeVector","OpTypeVoid","OpUndef","OpUnreachable","OpVariable","Opcode","OperandKind","OperandKindDef","OperandMode","Optional","Other","Output","PackedOperandNameAndKind","RayPayloadKHR","Required","RestOperandsUnit","RowMajor","SelectionControl","SourceLanguage","Spec","StorageClass","Two","Type","UniformConstant","ValueEnum","WellKnown","Word","all_operands","all_operands_with_names","all_params","all_params_with_names","as_u16","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","category","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","compare","compare","compare","def","def","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get_ext_inst_set_by_lowercase_name","has_result_id","has_result_type_id","hash","hash","hash","indexed","instructions","instructions","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_debuginfo","kind","magic","name","name","name","name_and_def","name_and_def","name_and_kind","of_all_set_bits","of_single_set_bit","operand_kinds","operand_names","opt_operands","partial_cmp","partial_cmp","partial_cmp","raw","req_operands","req_params","rest_operands","rest_params","short_alias","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_usize","to_usize","to_usize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_u16_with_name_and_def","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","well_known","bits","empty_name","size","variants","Flat","FlatIdx","FlatWithHoles","KhrSegmented","KhrSegmentedVec","NamedIdxMap","Storage","StorageShape","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from_in_order_iter","get","get_by_idx","get_by_idx","get_by_idx","get_by_idx","get_named","index","into","into","into","into","into","lookup","to_usize","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","BitEnum","Borrowed","Composite","CoreGrammar","CowStr","Dec","DecOrHex","ExtInstGrammar","Id","Instruction","InstructionPrintingClass","Literal","MaybeHex","Operand","OperandKind","OperandKindCategory","OperandKindEnumerant","Optional","Owned","Quantifier","Rest","ValueEnum","bases","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","capabilities","capability","category","class","copyright","copyright","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","doc","enumerant","enumerants","extensions","extensions","fmt","from","from","from","from","from","from","from","from","from","from","from","heading","instruction_printing_class","instructions","instructions","into","into","into","into","into","into","into","into","into","into","into","kind","kind","last_version","last_version","magic_number","major_version","minor_version","name","opcode","operand_kinds","operand_kinds","operands","opname","parameters","quantifier","revision","revision","tag","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","version","version","version","ModuleEmitter","borrow","borrow_mut","from","into","push_inst","try_from","try_into","type_id","with_header","words","write_to_spv_file","Changed","InnerInPlaceTransform","InnerTransform","Transformed","Transformer","Unchanged","apply_to","borrow","borrow_mut","clone","clone_into","from","in_place_transform_control_node_def","in_place_transform_data_inst_def","in_place_transform_func_decl","in_place_transform_global_var_decl","in_place_transform_module","in_place_transform_module_debug_info","in_place_transform_module_dialect","in_place_transform_spv_dialect","in_place_transform_spv_module_debug_info","inner_in_place_transform_with","inner_transform_with","into","map","map_iter","to_owned","transform_attr","transform_attr_set_def","transform_attr_set_use","transform_const_def","transform_const_use","transform_data_inst_form_def","transform_data_inst_form_use","transform_func_use","transform_global_var_use","transform_type_def","transform_type_use","transform_value_use","try_from","try_into","type_id","DynInnerVisit","InnerVisit","Visit","Visitor","dyn_inner_visit_with","inner_visit_with","visit_attr","visit_attr_set_def","visit_attr_set_use","visit_const_def","visit_const_use","visit_control_node_def","visit_control_region_def","visit_data_inst_def","visit_data_inst_form_def","visit_data_inst_form_use","visit_func_decl","visit_func_use","visit_global_var_decl","visit_global_var_use","visit_import","visit_module","visit_module_debug_info","visit_module_dialect","visit_spv_dialect","visit_spv_module_debug_info","visit_type_def","visit_type_use","visit_value_use","visit_with"],"q":[[0,"spirt"],[978,"spirt::Attr"],[981,"spirt::ControlNodeKind"],[988,"spirt::DataInstKind"],[990,"spirt::ExportKey"],[992,"spirt::Value"],[996,"spirt::cfg"],[1068,"spirt::func_at"],[1142,"spirt::passes"],[1145,"spirt::passes::legalize"],[1146,"spirt::passes::link"],[1148,"spirt::passes::qptr"],[1151,"spirt::print"],[1202,"spirt::qptr"],[1340,"spirt::qptr::QPtrAttr"],[1344,"spirt::qptr::QPtrMemUsageKind"],[1346,"spirt::qptr::QPtrOp"],[1350,"spirt::qptr::analyze"],[1360,"spirt::qptr::lift"],[1371,"spirt::qptr::lower"],[1382,"spirt::qptr::shapes"],[1460,"spirt::qptr::shapes::GlobalVarShape"],[1462,"spirt::spv"],[1602,"spirt::spv::print"],[1631,"spirt::spv::read"],[1644,"spirt::spv::spec"],[1998,"spirt::spv::spec::OperandKindDef"],[2002,"spirt::spv::spec::indexed"],[2055,"spirt::spv::spec::raw"],[2206,"spirt::spv::write"],[2218,"spirt::transform"],[2260,"spirt::visit"],[2290,"core::marker"],[2291,"core::iter::traits::collect"],[2292,"core::clone"],[2293,"core::cmp"],[2294,"core::cmp"],[2295,"core::option"],[2296,"core::cmp"],[2297,"core::hash"],[2298,"std::path"],[2299,"core::convert"],[2300,"alloc::vec"],[2301,"core::result"],[2302,"core::any"],[2303,"core::iter::traits::double_ended"],[2304,"core::ops::function"],[2305,"core::fmt"],[2306,"core::fmt"],[2307,"alloc::string"],[2308,"alloc::string"],[2309,"serde::de"]],"d":["","Any semantic or non-semantic (debuginfo) …","Interned handle for an <code>AttrSetDef</code> (a set of <code>Attr</code>s).","Definition for an <code>AttrSet</code>: a set of <code>Attr</code>s.","","Linear chain of <code>DataInst</code>s, executing in sequence.","Two-case selection based on boolean condition, i.e. <code>if</code>-<code>else</code>…","","Interned handle for a <code>ConstDef</code> (a constant value).","","","","<code>Const</code> “constructor”: a <code>ConstDef</code> wiithout any nested …","Definition for a <code>Const</code>: a constant value.","Context object with global resources for SPIR-T.","Entity handle for a <code>ControlNodeDef</code> (a control-flow …","Definition for a <code>ControlNode</code>: a control-flow operator or …","","One of the outputs produced by a <code>ControlNode</code>:","","Entity handle for a <code>ControlRegionDef</code> (a control-flow …","Definition for a <code>ControlRegion</code>: a control-flow region.","One of the inputs to a <code>ControlRegion</code>:","","Entity handle for a <code>DataInstDef</code> (an SSA instruction).","Definition for a <code>DataInst</code>: an SSA instruction.","Interned handle for a <code>DataInstFormDef</code> (a “form”, or “…","“Form” (or “template”) definition for …","","The output value of a <code>DataInst</code>.","Declarations (<code>GlobalVarDecl</code>, <code>FuncDecl</code>) can contain a full …","A type holding enough different <code>Option&lt;V&gt;</code> slots, for all …","Diagnostics produced by SPIR-T passes, and recorded in …","The “severity” level of a <code>Diag</code>nostic.","One part of a <code>Diag</code>nostic message, allowing rich …","Can be used anywhere to record <code>Diag</code>nostics produced during …","The entity type that appears exactly once in every value …","Collection holding the actual definitions for <code>Context</code>…","Doubly-linked list, “intrusively” going through <code>E::Def</code>…","<code>EntityList&lt;E&gt;</code> iterator, but with a different API than …","Map with <code>K</code> keys and <code>V</code> values, that is:","<code>EntityOriented*Map&lt;Self, V&gt;</code> support trait, implemented for …","","An unique identifier (e.g. a link name, or “symbol”) …","A definition exported out of a module (see also <code>ExportKey</code>).","Entity handle for a <code>FuncDecl</code> (a function).","","","Declaration/definition for a <code>Func</code>: a function.","The body of a <code>Func</code> definition.","","Entity handle for a <code>GlobalVarDecl</code> (a global variable).","","Declaration/definition for a <code>GlobalVar</code>: a global variable.","The body of a <code>GlobalVar</code> definition.","Placeholder for <code>GlobalVar</code>s with <code>GlobalVarShape::Handles</code>.","An identifier (e.g. a link name, or “symbol”) for an …","","Interned handle for a <code>str</code>.","","","Execute <code>body</code> repeatedly, until <code>repeat_condition</code> evaluates …","","Non-semantic details (i.e. debuginfo) of a SPIR-Y module …","Semantic properties of a SPIR-T module (not tied to any …","Wrapper to limit <code>Ord</code> for interned index types (e.g. …","","","","<code>QPtr</code>-specific attributes (see <code>qptr::QPtrAttr</code>).","“Quasi-pointer”, an untyped pointer-like abstract …","<code>QPtr</code>-specific operations (see <code>qptr::QPtrOp</code>).","","Choose one <code>ControlRegion</code> out of <code>cases</code> to execute, based on …","","","","","Some SPIR-V instructions, like <code>OpFunction</code>, take a bitflags …","","","","","","","","","The type of a <code>ConstCtor::SpvStringLiteralForExtInst</code> …","SPIR-V <code>OpString</code>, but only when used as an operand for an …","Interned handle for a <code>TypeDef</code>.","","","<code>Type</code> “constructor”: a <code>TypeDef</code> wiithout any <code>TypeCtorArg</code>…","","Definition for a <code>Type</code>.","","","The address space the global variable will be allocated …","Insert all of <code>list_to_append</code>’s nodes at the end of <code>self</code>.","","","","","","","Start immutably traversing the function at <code>position</code>.","Shorthand for <code>func_def_body.at(func_def_body.body)</code>.","Start mutably traversing the function at <code>position</code>.","Shorthand for <code>func_def_body.at_mut(func_def_body.body)</code>.","","","","","","","","","","The <code>ControlRegion</code> representing the whole body of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Control-flow graph (CFG) abstractions and utilitieseturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Traversal helpers for intra-function entities.","","","Return a custom <code>ExtInstSetDesc</code>, if one was registered on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If <code>Some</code>, the global variable will start out with the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inputs to this <code>ControlRegion</code>:","","","Insert <code>new_node</code> (defined in <code>defs</code>) into <code>self</code>, before <code>next</code>.","Insert <code>new_node</code> (defined in <code>defs</code>) at the start of <code>self</code>.","Insert <code>new_node</code> (defined in <code>defs</code>) at the end of <code>self</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Output values from this <code>ControlRegion</code>, provided to the …","Outputs from this <code>ControlNode</code>:","","","","IR transformations (typically whole-<code>Module</code>).","Insert all of <code>list_to_prepend</code>’s nodes at the start of …","Pretty-printing anything in the IR, from whole <code>Module</code>s to …","","","","","","","","","","","","","","","","","","","","","","","","<code>QPtr</code>-related type definitions and passes.","Register a custom <code>ExtInstSetDesc</code> with name …","","Remove <code>node</code> (defined in <code>defs</code>) from <code>self</code>.","","When <code>type_of_ptr_to</code> is <code>QPtr</code>, <code>shape</code> must be used to …","","","SPIR-V support, mainly conversions to/from SPIR-T (<code>lower</code>/…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutable IR traversal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of a pointer to the global variable (as opposed …","The unstructured (part of the) control-flow graph of the …","Immutable IR traversal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unconditional branch to a single target.","The control-flow graph (CFG) of a function, as …","","","Leave the current invocation, similar to returning from …","","Leave the current function, optionally returning a value.","Branch to one of several targets, chosen by a single value …","","Control-flow “structurizer”, which attempts to convert …","Reaching this point in the control-flow is undefined …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Iterate over all <code>ControlRegion</code>s making up <code>func_def_body</code>’…","","<code>target_inputs[region][input_idx]</code> is the <code>Value</code> that …","","","","","","","","","","","","","","","","","","","","","Immutable traversal (i.e. visiting) helper for …","Mutable traversal (i.e. transforming) helper for …","Reposition to <code>new_position</code>.","Reposition to <code>new_position</code>.","","","","","","","","","","","","","","","","","","","","","Demote to a <code>FuncAt</code>, with the same <code>position</code>.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Emulate a “reborrow”, which is automatic only for <code>&amp;mut</code> …","","","","","","","","Return the <code>Type</code> of this <code>Value</code> (<code>Context</code> used for …","","","<code>QPtr</code> transforms.","Apply the <code>cfg::Structurizer</code> algorithm to all function …","Remove exports which aren’t “roots” (…","Remap <code>Import::LinkName</code> to definitions exported as …","","","","A <code>Print</code> <code>Output</code> type that splits the attributes from the …","","“Definitions-before-uses” / “topo-sorted” printing …","","","","","","","","","","","Definition that typically looks like one of these cases:","","Create a <code>Plan</code> with all of <code>module</code>’s contents.","Create a <code>Plan</code> with all of <code>root</code>’s dependencies, followed …","Create a <code>Plan</code> that combines <code>Plan::for_root</code> from each …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Print the whole <code>Plan</code> to a <code>Versions&lt;pretty::Fragment&gt;</code> and …","Like <code>pretty_print</code>, but separately pretty-printing “root …","","","","","","","","","","","","","","","","","","","","","","","","","","Get a <strong>memory</strong> <code>QPtr</code> pointing at the contents of the buffer …","Get the length of the buffer whose handle is (implicitly) …","Used directly to access memory (e.g. <code>QPtrOp::Load</code>, …","Adjust a <strong>memory</strong> <code>QPtr</code> (<code>inputs[0]</code>), by adding a (signed) …","Used as a common base for (dynamic) offsetting, which …","When applied to a <code>DataInst</code> with a <code>QPtr</code>-typed output value, …","","Adjust a <strong>handle array</strong> <code>QPtr</code> (<code>inputs[0]</code>), by selecting the …","Used to access one or more handles (i.e. optionally …","Various toggles for layout-related behavior that is not …","Read a single value from a <code>QPtr</code> (<code>inputs[0]</code>).","","Adjust a <strong>memory</strong> <code>QPtr</code> (<code>inputs[0]</code>), by adding a (signed) …","Used as a common base for (constant) offsetting, which …","<code>QPtr</code>-specific attributes ([<code>Attr::QPtr</code>]).","","","<code>QPtr</code>-specific operations ([<code>DataInstKind::QPtr</code>]).","","Write a single value (<code>inputs[1]</code>) to a <code>QPtr</code> (<code>inputs[0]</code>).","Used as a typed pointer (e.g. via unknown SPIR-V …","When applied to a <code>DataInst</code> with a <code>QPtr</code>-typed …","","Not actually used, which could be caused by pointer …","When applied to a <code>QPtr</code>-typed <code>GlobalVar</code>, <code>DataInst</code>, …","","","","Assumed size and alignment for <code>OpTypeBool</code>, even if unusable","<code>QPtr</code> usage analysis (for legalizing/lifting).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","<code>QPtr</code> lifting (e.g. to SPIR-V).","Assumed size and alignment for logical <code>OpTypePointer</code>s, …","<code>QPtr</code> lowering (e.g. from SPIR-V).","If present, this is a worst-case upper bound on memory …","","","","","Variable shapes (untyped memory layouts vs abstract …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bounds on the dynamic “index” (<code>inputs[1]</code>).","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Context for lifting <code>QPtr</code>s to SPIR-V <code>OpTypePointer</code>s.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Context for lowering SPIR-V <code>OpTypePointer</code>s to <code>QPtr</code>s.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Buffer resources, describing ranges of (technically) …","<code>GlobalVar</code>s are currently used for both chunks of plain …","“Abstract resource” handle, that can be found in …","One or more (i.e. optionally arrayed) “abstract resource…","Untyped memory shape with constant alignment but …","Untyped memory shape with constant alignment and size.","Fully opaque resources (e.g. samplers, images).","Non-memory pipeline interface, which must keep the exact …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Semantic properties of a SPIR-V module (not tied to any …","SPIR-V ID.","SPIR-V immediate (one word, longer immediates are a …","A SPIR-V instruction, in its minimal form (opcode and …","A full SPIR-V instruction (like <code>Inst</code>, but including …","","","Non-semantic details (i.e. debuginfo) of a SPIR-V module …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given a single <code>LiteralString</code> (as one <code>Imm::Short</code> or a …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","SPIR-T to SPIR-V lifting.","SPIR-V to SPIR-T lowering.","","","","","","","","Pretty-printing SPIR-V operands.","","","Low-level parsing of SPIR-V binary form.","","","","","SPIR-V specification parsing/indexing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Low-level emission of SPIR-V binary form.","","An inconsistency was detected in the operands to be …","Unprinted ID operand, of its original type (allowing …","","","","","","The smallest unit produced by printing a (“logical”) …","All the <code>Token</code>s outputted by printing one single (“logical…","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Group (ordered according to <code>opcode</code>) <code>imms</code> and <code>ids</code> into …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Print a single SPIR-V operand from only immediates, …","","","","","","","","","","","Returns the argument unchanged.","Copy of the header words (for convenience).","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Simplified information for pretty-printing “extended …","Simplified <code>InstructionDef</code> for pretty-printing “extended …","The literal uses as many words as required by its type, …","","","","","","","","","","","","","","","","","","","","","","","The literal is a word-encoded byte array, that ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the trailing <code>*</code> “operand” (i.e. repeated …","","","","","","","","","","","The literal is always one word (but may occupy only part …","Return a (potentially infinite) iterator of <code>OperandKind</code>s, …","Like <code>all_operands</code>, but providing access to the operand …","Return a (potentially infinite) iterator of <code>OperandKind</code>s, …","Like <code>all_params</code>, but providing access to the operand names …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lookup the definition for this opcode in the lazily-loaded …","Lookup the definition for this operand kind in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return a lazily-loaded <code>Spec</code> (only does significant work …","Return a lazily-parsed <code>ExtInstSetDesc</code>, if a known one …","","","","","","Utilities for indexing data in a variety of ways (names, …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether this instruction is non-semantic debuginfo and …","Unpack this <code>PackedOperandNameAndKind</code> into just its …","","Lookup the name for this opcode in the lazily-loaded <code>Spec</code>.","Lookup the name for this operand kind in the lazily-loaded …","","Lookup the name &amp; definition for this opcode in the …","Lookup the name &amp; definition for this operand kind in the …","Unpack this <code>PackedOperandNameAndKind</code> into a name and …","Returns an iterator of <code>BitIdx</code>s, from which <code>x</code> can be …","Returns <code>Some(BitIdx(i))</code> if and only if <code>x == (1 &lt;&lt; i)</code>.","","","","","","","Deserialization for the <code>.grammar.json</code> files, without any …","","","","","Shorter name to use during pretty-printing.","","","","","","","","","","","","","","","","","","","","","","","","","Lookup the name &amp; definition for <code>opcode</code> in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pre-cached IDs for “well-known” names.","","","","","Flat array (<code>Vec</code>) storage, likely used with compact indices.","","Like <code>Flat</code>, but the <code>Vec</code> elements are wrapped in <code>Option</code>.","Segmented sparse storage, taking advantage of Khronos’ …","Khronos-oriented segmented sparse array (see <code>KhrSegmented</code>).","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a <code>KhrSegmentedVec</code> out of an iterator with …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get an index from a name.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Output SPIR-V words.","","Some part of the original <code>T</code> value was transformed, and a …","Like <code>InnerTransform</code>, but only for the <code>in_place_transform_X</code> …","Trait implemented on “transformable” types, to further …","The result of a transformation (which is not in-place).","","The original <code>T</code> value remains as it was, at no cost.","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","Map every element of an iterator through <code>transform_elem</code> …","","","","","","","","","","","","","","","","","Dynamic dispatch version of <code>InnerVisit</code>.","Trait implemented on “deeply visitable” types, to …","Trait implemented on “visitable” types (shallowly …","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,36,52,53,35,0,36,39,56,0,0,0,0,0,0,56,0,0,0,56,0,0,0,0,0,0,56,0,19,0,0,0,34,19,0,0,0,0,0,35,0,0,0,33,55,0,0,0,0,33,0,0,44,0,41,0,32,42,52,0,0,0,0,36,41,40,34,38,55,36,52,0,30,31,34,34,34,32,55,38,40,53,55,44,38,40,0,36,39,0,0,0,0,35,43,1,4,7,7,8,9,10,11,11,11,11,7,8,9,43,46,47,49,51,54,11,5,2,18,1,20,21,4,22,23,24,25,26,14,27,28,29,30,31,32,33,7,34,6,35,36,37,8,38,39,9,40,41,42,43,44,45,46,47,11,48,49,50,51,52,53,54,10,55,56,5,2,18,1,20,21,4,22,23,24,25,26,14,27,28,29,30,31,32,33,7,34,6,35,36,37,8,38,39,9,40,41,42,43,44,45,46,47,11,48,49,50,51,52,53,54,10,55,56,6,0,48,2,18,1,20,21,4,22,23,24,25,26,14,27,28,29,30,31,32,33,34,6,35,36,37,38,39,40,41,42,43,44,45,46,47,11,48,49,50,51,52,53,54,10,55,56,2,18,1,20,21,4,22,23,24,25,26,14,27,28,29,30,31,32,33,34,6,35,36,37,38,39,40,41,42,43,44,45,46,47,11,48,49,50,51,52,53,54,10,55,56,34,37,34,37,11,11,8,9,8,9,29,29,11,29,43,46,5,2,18,1,4,7,2,29,29,30,31,32,33,7,34,8,9,41,43,45,46,47,11,49,51,54,10,56,1,18,21,4,22,23,24,25,26,14,27,28,32,7,34,6,35,36,37,8,38,39,9,40,42,44,10,55,56,21,21,21,21,4,4,4,4,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,14,14,14,14,27,27,27,27,28,28,28,28,32,32,32,32,7,7,7,7,34,34,34,34,6,6,6,6,35,35,35,35,36,36,36,36,37,37,37,37,8,8,8,8,38,38,38,38,39,39,39,39,9,9,9,9,40,40,40,40,42,42,42,42,44,44,44,44,10,10,10,10,55,55,55,55,56,56,56,56,6,29,20,54,5,2,18,1,20,21,4,22,23,24,25,26,14,27,28,29,30,31,32,33,7,34,34,6,35,36,36,36,36,36,36,37,8,38,39,9,40,41,42,43,44,45,46,47,11,48,49,50,51,52,53,54,10,55,55,56,0,29,18,5,19,25,26,14,27,28,19,25,26,14,27,28,18,29,21,4,22,23,24,25,26,14,27,28,32,7,34,6,35,36,37,8,38,39,9,40,42,44,10,55,5,2,18,2,18,45,29,30,31,41,43,45,46,11,32,33,7,34,8,9,47,49,51,10,56,29,30,31,32,33,7,34,8,9,41,43,45,46,47,11,49,51,54,10,56,48,54,18,1,1,1,5,5,2,18,1,20,21,4,22,23,24,25,26,14,27,28,29,30,31,32,33,7,34,6,35,36,37,8,38,39,9,40,41,42,43,44,45,46,47,11,48,49,50,51,52,53,54,10,55,56,1,1,50,10,20,6,29,29,29,29,29,6,5,2,18,29,6,10,48,50,46,34,37,0,1,0,4,22,23,25,26,29,30,31,32,33,34,8,9,42,43,44,46,47,49,51,56,4,7,0,5,18,1,46,43,20,20,0,19,25,26,14,27,28,2,18,1,20,21,4,22,23,24,25,26,14,27,28,29,30,31,32,33,34,6,35,36,37,38,39,40,41,42,43,44,45,46,47,11,48,49,50,51,52,53,54,10,55,56,0,5,2,18,1,20,21,4,22,23,24,25,26,14,27,28,29,30,31,32,33,7,34,6,35,36,37,8,38,39,9,40,41,42,43,44,45,46,47,11,48,49,50,51,52,53,54,10,55,56,5,2,18,1,20,21,4,22,23,24,25,26,14,27,28,29,30,31,32,33,7,34,6,35,36,37,8,38,39,9,40,41,42,43,44,45,46,47,11,48,49,50,51,52,53,54,10,55,56,9,47,49,51,5,2,18,1,20,21,4,22,23,24,25,26,14,27,28,29,30,31,32,33,7,34,6,35,36,37,8,38,39,9,40,41,42,43,44,45,46,47,11,48,49,50,51,52,53,54,10,55,56,43,11,0,4,22,23,25,26,29,30,31,7,34,8,9,42,43,46,54,56,6,154,154,154,155,156,155,157,156,155,156,158,158,159,159,160,161,160,161,88,0,0,0,88,0,88,88,89,0,88,87,90,86,87,88,89,90,86,87,88,89,86,87,88,89,86,87,88,89,86,86,87,90,86,87,88,89,87,87,87,90,86,87,88,89,87,90,87,86,90,87,87,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,86,87,88,89,0,0,15,12,15,12,15,12,15,12,12,12,15,12,15,12,15,12,15,15,15,12,12,12,15,15,12,15,15,15,15,12,12,12,15,12,15,15,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,15,15,12,12,12,15,12,12,12,12,12,15,12,15,12,15,12,15,12,12,0,0,0,0,0,0,0,0,0,0,96,0,0,0,83,94,82,83,94,82,83,82,83,83,94,94,94,94,82,83,94,82,83,94,94,96,94,94,82,83,94,82,83,94,82,83,94,94,94,94,94,94,94,94,94,94,94,94,94,94,65,65,98,65,98,63,65,65,64,0,65,64,65,98,0,0,0,0,0,65,98,63,97,98,63,93,93,93,93,0,93,63,64,97,98,65,93,63,64,97,98,65,63,64,97,98,65,63,64,97,98,65,63,63,64,97,98,63,64,97,98,65,63,63,63,63,64,64,64,64,97,97,97,97,98,98,98,98,65,65,65,65,93,63,64,97,98,65,63,64,97,98,65,93,97,98,64,97,98,93,63,64,97,98,65,97,0,93,0,97,93,63,64,97,0,63,64,97,98,65,93,63,64,97,98,65,93,63,64,97,98,65,93,63,64,97,98,65,162,163,163,162,164,164,165,165,166,166,0,99,99,99,99,99,99,99,99,99,0,100,100,100,100,100,100,100,100,100,100,0,101,101,101,101,101,101,101,101,101,101,103,0,0,102,0,0,103,102,102,104,102,103,104,105,102,103,104,105,102,103,104,105,102,103,104,105,105,102,103,104,105,102,102,102,102,103,103,103,103,104,104,104,104,105,105,105,105,105,104,105,102,103,104,105,103,104,102,103,104,105,104,104,102,103,104,105,102,103,104,105,102,103,104,105,102,103,104,105,167,167,0,0,0,0,0,0,0,113,113,0,113,108,114,108,109,110,111,112,113,114,108,109,110,111,112,113,108,108,109,110,111,112,113,108,109,110,111,112,113,110,112,113,110,112,113,111,114,114,0,110,112,113,110,110,110,110,112,112,112,112,113,113,113,113,108,108,0,111,114,108,109,110,111,112,112,113,112,113,114,112,114,108,109,110,111,112,113,110,0,0,108,109,112,109,110,112,113,0,108,109,0,114,114,109,109,0,108,109,110,111,112,113,114,108,109,110,111,112,113,114,108,109,110,111,112,113,114,108,109,110,111,112,113,110,108,108,108,109,114,0,168,168,168,168,168,168,168,168,0,0,168,120,168,120,120,120,168,120,0,168,120,0,120,168,120,168,120,168,120,0,81,81,81,81,81,81,81,81,81,81,81,81,169,169,129,0,169,169,169,124,124,169,0,169,0,0,170,169,169,0,169,129,169,169,169,169,0,0,169,169,129,169,169,169,0,169,169,169,169,170,169,130,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,0,0,0,0,125,124,169,0,169,125,0,169,169,169,0,169,130,124,169,129,0,170,121,121,122,122,119,131,67,171,129,170,169,119,121,124,130,125,126,127,128,122,131,67,171,129,170,169,119,121,124,130,125,126,127,128,122,121,119,124,125,126,127,128,119,124,125,126,127,128,119,126,127,119,126,127,119,126,119,121,124,130,125,126,127,128,122,119,119,119,119,121,121,121,121,124,124,124,124,130,130,130,130,125,125,125,125,126,126,126,126,127,127,127,127,128,128,128,128,122,122,122,122,124,126,127,131,67,171,129,170,169,119,121,124,130,125,126,127,128,122,131,131,121,121,119,126,127,0,131,67,131,67,171,129,170,169,119,121,124,130,125,126,127,128,122,171,127,131,119,126,171,119,126,127,128,128,131,171,121,119,126,127,0,121,122,121,122,67,119,124,125,126,127,128,119,126,128,131,67,171,129,170,169,119,121,124,130,125,126,127,128,122,119,131,67,171,129,170,169,119,121,124,130,125,126,127,128,122,131,67,171,129,170,169,119,121,124,130,125,126,127,128,122,131,172,172,173,174,0,0,0,0,0,0,136,0,175,176,177,134,135,175,176,177,134,135,175,176,177,134,135,134,135,136,175,176,177,135,135,175,176,177,134,135,135,137,175,176,177,134,135,175,176,177,134,135,175,176,177,134,135,146,148,146,0,0,149,0,0,146,0,0,146,149,0,0,0,0,144,148,0,144,146,145,138,140,141,142,143,144,145,146,147,148,149,138,140,141,142,143,144,145,146,147,148,149,142,147,142,145,142,138,140,138,140,141,142,143,144,145,146,147,148,149,145,147,145,142,147,148,138,140,141,142,143,144,145,146,147,148,149,141,138,138,140,138,140,141,142,143,144,145,146,147,148,149,143,145,142,147,138,138,138,143,142,138,140,142,142,147,143,138,140,141,138,140,141,142,143,144,145,146,147,148,149,138,140,141,142,143,144,145,146,147,148,149,149,138,140,141,142,143,144,145,146,147,148,149,147,140,142,147,0,78,78,78,78,78,78,78,78,78,78,78,72,0,0,0,0,72,72,72,72,72,72,72,70,70,70,70,70,70,70,70,70,71,178,72,72,72,72,70,70,70,70,70,70,70,70,70,70,70,70,72,72,72,0,0,0,0,179,74,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,95],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]],[1,[-1]],[2,[-1]]],3,0],[[4,5,6],4],[[7,6],7],[7,7],[8,8],[9,9],[10,10],[[11,-1],[[12,[-1]]],13],[11,[[12,[14]]]],[[11,-1],[[15,[-1]]],13],[11,[[15,[14]]]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,6,16],0,0,[[[2,[-1]]],[[2,[-1]]],[17,0]],[[[18,[-2,-1]]],[[18,[-2,-1]]],17,[17,[19,[-1]]]],[[[1,[-1]]],[[1,[-1]]],[17,0]],[[[20,[-1]]],[[20,[-1]]],[17,0]],[21,21],[4,4],[22,22],[23,23],[24,24],[25,25],[26,26],[14,14],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[6,6],[35,35],[36,36],[[[37,[-1]]],[[37,[-1]]],17],[38,38],[39,39],[40,40],[[[41,[-1]]],[[41,[-1]]],17],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[11,11],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[10,10],[55,55],[56,56],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[34,34],57],[[[37,[-1]],[37,[-1]]],57,58],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],0,0,0,0,0,0,[29,[[59,[5]]]],[29,[[59,[5]]]],0,0,0,0,[[],5],[[],[[2,[-1]]],0],[[],[[18,[-2,-1]]],[],[[19,[-1]]]],[[],[[1,[-1]]],0],[[],4],[[],7],[[[2,[-1]],5],-1,0],0,[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],[[1,[-1]]],0],[[[18,[-2,-1]],-2],[[60,[-1]]],[],[[19,[-1]]]],[[21,21],61],[[4,4],61],[[22,22],61],[[23,23],61],[[24,24],61],[[25,25],61],[[26,26],61],[[14,14],61],[[27,27],61],[[28,28],61],[[32,32],61],[[7,7],61],[[34,34],61],[[6,6],61],[[35,35],61],[[36,36],61],[[[37,[-1]],[37,[-1]]],61,62],[[8,8],61],[[38,38],61],[[39,39],61],[[9,9],61],[[40,40],61],[[42,42],61],[[44,44],61],[[10,10],61],[[55,55],61],[[56,56],61],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[-1,6,16],0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[63,34],[-1,-1,[]],[-1,-1,[]],[22,36],[23,36],[4,36],[64,36],[-1,36,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[65,55],[-1,-1,[]],0,0,[[[18,[-2,-1]],-2],[[60,[-1]]],[],[[19,[-1]]]],[[5,66],[[60,[67]]]],[-1,[[60,[-2]]],[],[]],[[-1,[60,[-2]]],[[60,[-2]]],[],[]],[[-1,[60,[-2]]],[[60,[-2]]],[],[]],[[-1,[60,[-2]]],[[60,[-2]]],[],[]],[[-1,[60,[-2]]],[[60,[-2]]],[],[]],[[-1,[60,[-2]]],[[60,[-2]]],[],[]],[-1,[[60,[-2]]],[],[]],[[-1,[60,[-2]]],[[60,[-2]]],[],[]],[[-1,[60,[-2]]],[[60,[-2]]],[],[]],[[-1,[60,[-2]]],[[60,[-2]]],[],[]],[[-1,[60,[-2]]],[[60,[-2]]],[],[]],[[-1,[60,[-2]]],[[60,[-2]]],[],[]],[[[18,[-2,-1]],-2],[[60,[-1]]],[],[[19,[-1]]]],0,[[21,-1],3,68],[[4,-1],3,68],[[22,-1],3,68],[[23,-1],3,68],[[24,-1],3,68],[[25,-1],3,68],[[26,-1],3,68],[[14,-1],3,68],[[27,-1],3,68],[[28,-1],3,68],[[32,-1],3,68],[[7,-1],3,68],[[34,-1],3,68],[[6,-1],3,68],[[35,-1],3,68],[[36,-1],3,68],[[[37,[-1]],-2],3,69,68],[[8,-1],3,68],[[38,-1],3,68],[[39,-1],3,68],[[9,-1],3,68],[[40,-1],3,68],[[42,-1],3,68],[[44,-1],3,68],[[10,-1],3,68],[[55,-1],3,68],[[5,-1],[],0],[[[2,[-1]],-1],[],0],[[[18,[-2,-1]],-2],-1,[],[[19,[-1]]]],[[[2,[-1]],-1],[],0],[[[18,[-2,-1]],-2],-1,[],[[19,[-1]]]],0,[[29,-1],3,70],[[30,-1],3,70],[[31,-1],3,70],[[[41,[-1]],-2],3,71,70],[[43,-1],3,70],[[45,-1],3,70],[[46,-1],3,70],[[11,-1],3,70],[[32,-1],[[72,[32]]],70],[[33,-1],[[72,[33]]],70],[[7,-1],[[72,[7]]],70],[[34,-1],[[72,[34]]],70],[[8,-1],[[72,[8]]],70],[[9,-1],[[72,[9]]],70],[[47,-1],[[72,[47]]],70],[[49,-1],[[72,[49]]],70],[[51,-1],[[72,[51]]],70],[[10,-1],[[72,[10]]],70],[[56,-1],[[72,[56]]],70],[[29,-1],3,73],[[30,-1],3,73],[[31,-1],3,73],[[32,-1],3,73],[[33,-1],3,73],[[7,-1],3,73],[[34,-1],3,73],[[8,-1],3,73],[[9,-1],3,73],[[[41,[-1]],-2],3,74,73],[[43,-1],3,73],[[45,-1],3,73],[[46,-1],3,73],[[47,-1],3,73],[[11,-1],3,73],[[49,-1],3,73],[[51,-1],3,73],[[54,-1],3,73],[[10,-1],3,73],[[56,-1],3,73],0,0,[[[18,[-2,-1]],-2,-1],[[60,[-1]]],[],[[19,[-1]]]],[[[1,[-1]],-1,-1,[2,[-1]]],3,0],[[[1,[-1]],-1,[2,[-1]]],3,0],[[[1,[-1]],-1,[2,[-1]]],3,0],[[5,-2],-1,[],[[0,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],61,0],[[[1,[-1]]],[[20,[-1]]],0],0,0,0,0,[[29,-1],[[75,[3]]],[[77,[76]]]],[29,[[75,[78]]]],[[[59,[5]],[80,[79]]],[[75,[29]]]],[[[59,[5]],-1],[[75,[29]]],[[77,[76]]]],[[[59,[5]],81],[[75,[29]]]],0,[[],5],[[],[[2,[-1]]],0],[[],[[18,[-2,-1]]],[],[[19,[-1]]]],[[[59,[5]],30,31],29],[[35,-1],6,16],0,0,0,0,[[34,34],[[60,[57]]]],[[[37,[-1]],[37,[-1]]],[[60,[57]]],58],0,[[[1,[-1]],[1,[-1]],[2,[-1]]],3,0],0,0,0,0,0,0,0,[[30,82],83],[[31,82],83],0,0,0,[[8,82],83],[[9,82],83],0,[[43,82],83],0,[[46,82],83],[[47,82],83],[[49,82],83],[[51,82],83],0,[[4,5,6],3],[[7,6],3],0,[[5,66,67],3],[[[18,[-2,-1]],-2],[[60,[-1]]],[],[[19,[-1]]]],[[[1,[-1]],-1,[2,[-1]]],3,0],0,0,[[[20,[-1]],[2,[-1]]],[[60,[[3,[-1,[20,[-1]]]]]]],0],[[[20,[-1]],[2,[-1]]],[[60,[[3,[-1,[20,[-1]]]]]]],0],0,[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],0,0,0,0,[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],0,0,0,[[4,-1],3,73],[[22,-1],3,73],[[23,-1],3,73],[[25,-1],3,73],[[26,-1],3,73],[[29,-1],3,73],[[30,-1],3,73],[[31,-1],3,73],[[7,-1],3,73],[[34,-1],3,73],[[8,-1],3,73],[[9,-1],3,73],[[42,-1],3,73],[[43,-1],3,73],[[46,-1],3,73],[[54,-1],3,73],[[56,-1],3,73],[-1,6,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[86,86],[87,87],[88,88],[89,89],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[],86],[[-1,-2],3,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[87,-1],3,70],[[87,-1],3,73],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[5,11],90],0,[[86,11],[[0,[91]]]],[90,3],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],0,0,[[[15,[-1]],-2],[[15,[-2]]],13,13],[[[12,[-1]],-2],[[12,[-2]]],13,13],[[[15,[14]]],[[15,[[1,[27]]]]]],[[[12,[14]]],[[12,[[1,[27]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1]]],[[12,[-1]]],[17,13]],[[-1,-2],3,[],[]],0,0,0,0,0,0,[[[15,[28]]],54],[[[15,[14]]],48],[[[15,[27]]],50],[[[12,[28]]],54],[[[12,[14]]],48],[[[12,[27]]],50],[[[15,[-1]]],[[12,[-1]]],13],[-1,-1,[]],[-1,-1,[]],[[[15,[28]],-1],3,70],[[[15,[[20,[27]]]],-1],3,70],[[[15,[27]],-1],3,70],[[[15,[14]],-1],3,70],[[[12,[14]],-1],3,73],[[[12,[27]],-1],3,73],[[[12,[[20,[27]]]],-1],3,73],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[[1,[28]]]]],[[15,[[20,[28]]]]]],[[[15,[[1,[27]]]]],[[15,[[20,[27]]]]]],[[[12,[[1,[28]]]]]],[-1,-2,[],[]],[[[12,[[1,[27]]]]]],[-1,[[3,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[3,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[3,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[3,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,3,[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[3,[-2,-3]]],[],[],[]],[-1,[[3,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[3,[-2,-3,-4]]],[],[],[],[]],[-1,[[3,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[3,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[3,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[[[15,[[20,[28]]]]],[[60,[[15,[28]]]]]],[[[15,[[20,[27]]]]],[[60,[[15,[27]]]]]],[[[12,[[20,[27]]]]],60],[[[12,[[20,[28]]]]],60],[[[12,[[20,[28]]]]],60],0,0,0,0,0,0,[[[15,[-1]]],[[15,[-1]]],13],[-1,-2,[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[-1,85,[]],[[[12,[56]],5],22],0,0,0,[29,3],[[29,-1],3,92],[29,3],[[29,93],3],[[29,93],3],[[29,93],3],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[82,5],0,[[],83],[29,94],[[5,-1],94,[95,96]],[[5,-1],94,16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[94,[[0,[0]]]],[94,[[3,[[0,[0]],[0,[0]]]]]],[[-1,82],[],[]],[[94,82],[[0,[0]]]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[[94,34],3],[[94,4],3],[[94,9],3],[[94,23],3],[[94,24],3],[[94,46],3],[[94,26],3],[[94,43],3],[[94,25],3],[[94,29],3],[[94,31],3],[[94,30],3],[[94,22],3],[[94,56],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[63,63],[64,64],[97,97],[98,98],[65,65],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[63,63],57],[[-1,-2],57,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[63,63],61],[[64,64],61],[[97,97],61],[[98,98],61],[[65,65],61],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[63,-1],3,68],[[64,-1],3,68],[[97,-1],3,68],[[98,-1],3,68],[[65,-1],3,68],0,[[97,-1],[[72,[97]]],70],[[98,-1],[[72,[98]]],70],[[64,-1],3,73],[[97,-1],3,73],[[98,-1],3,73],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[63,63],[[60,[57]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[99,29],3],[-1,-2,[],[]],[[[59,[5]],93],99],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[100,29,-1],3,16],[[100,43],3],[[[59,[5]],93],100],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[101,46],3],[[101,43],3],[[[59,[5]],93],101],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[102,102],[[[103,[-1]]],[[103,[-1]]],17],[104,104],[105,105],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[102,102],61],[[[103,[-1]],[103,[-1]]],61,62],[[104,104],61],[[105,105],61],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],0,[[104,106],107],[[105,106],107],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[103,[-1]],-2],3,69,68],[[104,-1],3,68],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[108,108],[109,109],[110,110],[111,111],[112,112],[113,113],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[110,110],57],[[112,112],57],[[113,113],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[],111],[114,112],[114,112],[66,[[0,[115]]]],[[110,110],61],[[112,112],61],[[113,113],61],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[108,[[0,[115]]]],0,[[[116,[113]]],[[84,[117,118]]]],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[119,112],[-1,-1,[]],[[112,-1],3,68],[[113,-1],3,68],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[110,110],[[60,[57]]]],[[112,112],[[60,[57]]]],[[113,113],[[60,[57]]]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],0,0,0,[[108,-1],3,73],[[109,-1],3,73],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[120,[117]]],117],[[],[[120,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[[119,-1,-2],[[0,[115]]],16,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[120,[-2]]],16,[]],0,[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[-1,85,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[81,60],[[[80,[79]]],[[75,[81]]]],[-1,[[75,[81]]],[[77,[76]]]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[121,[[0,[115]]]],[121,[[0,[115]]]],[122,[[0,[115]]]],[122,[[0,[115]]]],[119,123],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[119,119],[124,124],[125,125],[126,126],[127,127],[128,128],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[119,119],57],[[126,126],57],[[127,127],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[119,121],[126,129],[[119,119],61],[[121,121],61],[[124,124],61],[[130,130],61],[[125,125],61],[[126,126],61],[[127,127],61],[[128,128],61],[[122,122],61],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[-1,-2],61,[],[]],[[124,106],107],[[126,106],107],[[127,106],107],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],131],[[131,66],[[60,[67]]]],0,0,[[119,-1],3,68],[[126,-1],3,68],[[127,-1],3,68],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[127,126],0,[119,66],[126,66],0,[119,[[3,[66,121]]]],[126,[[3,[66,129]]]],[127,[[3,[66,126]]]],[132,[[0,[115]]]],[132,[[60,[128]]]],0,0,0,[[119,119],[[60,[57]]]],[[126,126],[[60,[57]]]],[[127,127],[[60,[57]]]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[119,133],[126,133],[128,133],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[123,[[60,[[3,[119,66,121]]]]]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[134,[-3]]],16,92,[]],[[[135,[-1,-2,-3]],-1],[[60,[-2]]],[],[],[[136,[-1,[3,[66,-2]]]]]],[-1,[[60,[-2]]],[],[]],[-1,[[60,[-2]]],137,[]],[-1,[[60,[-2]]],137,[]],[-1,[[60,[-2]]],137,[]],[[[135,[-1,-2,-3]],-1],[[60,[[3,[66,-2]]]]],[],[],[[136,[-1,[3,[66,-2]]]]]],[[[135,[-1,-2,-3]],-1],-2,[],[],[[136,[-1,[3,[66,-2]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[135,[-1,-2,-3]],66],[[60,[-1]]],13,[],[[136,[-1,[3,[66,-2]]]]]],[-1,133,[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,[[84,[138]]],139],[-1,[[84,[140]]],139],[-1,[[84,[141]]],139],[-1,[[84,[142]]],139],[-1,[[84,[143]]],139],[-1,[[84,[144]]],139],[-1,[[84,[145]]],139],[-1,[[84,[146]]],139],[-1,[[84,[147]]],139],[-1,[[84,[148]]],139],[-1,[[84,[[149,[-2]]]]],139,150],0,0,0,0,0,[[148,106],107],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[[[149,[132]]],[[84,[132]]]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[78,114],[[75,[3]]]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[[[151,[132]]],78],0,[[78,-1],[[75,[3]]],[[77,[76]]]],0,0,0,0,0,0,[[[72,[-1]],-1],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[72,[-1]]],[[72,[-1]]],17],[[-1,-2],3,[],[]],[-1,-1,[]],[[-1,[15,[27]]],3,[]],[[-1,[15,[28]]],3,[]],[[-1,46],3,[]],[[-1,43],3,[]],[[-1,29],3,[]],[[-1,31],3,[]],[[-1,30],3,[]],[[-1,108],3,[]],[[-1,109],3,[]],[[-1,-2],3,[],70],[[-1,-2],[[72,[-1]]],[],70],[-1,-2,[],[]],[[[72,[-1]],-2],[[72,[-3]]],[],152,[]],[[-1,-2],[[72,[[0,[115]]]]],[115,17],153],[-1,-2,[],[]],[[-1,34],[[72,[34]]],[]],[[-1,7],[[72,[7]]],[]],[[-1,4],[[72,[4]]],[]],[[-1,9],[[72,[9]]],[]],[[-1,23],[[72,[23]]],[]],[[-1,10],[[72,[10]]],[]],[[-1,24],[[72,[24]]],[]],[[-1,26],[[72,[26]]],[]],[[-1,25],[[72,[25]]],[]],[[-1,8],[[72,[8]]],[]],[[-1,22],[[72,[22]]],[]],[[-1,56],[[72,[56]]],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],0,0,0,0,[[-1,-2],3,[],[]],[[-1,-2],3,[],73],[[-1,34],3,[]],[[-1,7],3,[]],[[-1,4],3,[]],[[-1,9],3,[]],[[-1,23],3,[]],[[-1,[12,[27]]],3,[]],[[-1,[12,[14]]],3,[]],[[-1,54],3,[]],[[-1,10],3,[]],[[-1,24],3,[]],[[-1,46],3,[]],[[-1,26],3,[]],[[-1,43],3,[]],[[-1,25],3,[]],[[-1,42],3,[]],[[-1,29],3,[]],[[-1,31],3,[]],[[-1,30],3,[]],[[-1,108],3,[]],[[-1,109],3,[]],[[-1,8],3,[]],[[-1,22],3,[]],[[-1,56],3,[]],[[-1,-2],3,[],73]],"c":[],"p":[[3,"EntityList",0],[3,"EntityDefs",0],[15,"tuple"],[3,"AttrSet",0],[3,"Context",0],[3,"Diag",0],[3,"AttrSetDef",0],[3,"TypeDef",0],[3,"ConstDef",0],[3,"DataInstFormDef",0],[3,"FuncDefBody",0],[3,"FuncAt",1068],[8,"Copy",2290],[3,"ControlRegion",0],[3,"FuncAtMut",1068],[8,"IntoIterator",2291],[8,"Clone",2292],[3,"EntityOrientedDenseMap",0],[8,"EntityOrientedMapKey",0],[3,"EntityListIter",0],[3,"InternedStr",0],[3,"Type",0],[3,"Const",0],[3,"DataInstForm",0],[3,"GlobalVar",0],[3,"Func",0],[3,"ControlNode",0],[3,"DataInst",0],[3,"Module",0],[4,"ModuleDialect",0],[4,"ModuleDebugInfo",0],[4,"ExportKey",0],[4,"Exportee",0],[4,"Attr",0],[4,"DiagLevel",0],[4,"DiagMsgPart",0],[3,"OrdAssertEq",0],[4,"TypeCtor",0],[4,"TypeCtorArg",0],[4,"ConstCtor",0],[4,"DeclDef",0],[4,"Import",0],[3,"GlobalVarDecl",0],[4,"AddrSpace",0],[3,"GlobalVarDefBody",0],[3,"FuncDecl",0],[3,"FuncParam",0],[3,"ControlRegionDef",0],[3,"ControlRegionInputDecl",0],[3,"ControlNodeDef",0],[3,"ControlNodeOutputDecl",0],[4,"ControlNodeKind",0],[4,"SelectionKind",0],[3,"DataInstDef",0],[4,"DataInstKind",0],[4,"Value",0],[4,"Ordering",2293],[8,"Eq",2293],[3,"Rc",2294],[4,"Option",2295],[15,"bool"],[8,"PartialEq",2293],[4,"QPtrAttr",1202],[4,"QPtrUsage",1202],[4,"QPtrOp",1202],[15,"str"],[3,"ExtInstSetDesc",1644],[8,"Hasher",2296],[8,"Hash",2296],[8,"Transformer",2218],[8,"InnerInPlaceTransform",2218],[4,"Transformed",2218],[8,"Visitor",2260],[8,"InnerVisit",2260],[6,"Result",2297],[3,"Path",2298],[8,"AsRef",2299],[3,"ModuleEmitter",2206],[15,"u8"],[3,"Vec",2300],[3,"ModuleParser",1631],[3,"Printer",1151],[3,"AttrsAndDef",1151],[4,"Result",2301],[3,"TypeId",2302],[3,"ControlFlowGraph",996],[3,"ControlInst",996],[4,"ControlInstKind",996],[4,"ExitInvocationKind",996],[3,"Structurizer",996],[8,"DoubleEndedIterator",2303],[8,"Fn",2304],[3,"LayoutConfig",1202],[3,"Plan",1151],[8,"Visit",2260],[8,"Print",1151],[3,"QPtrMemUsage",1202],[4,"QPtrMemUsageKind",1202],[3,"InferUsage",1350],[3,"LiftToSpvPtrs",1360],[3,"LowerFromSpvPtrs",1371],[4,"GlobalVarShape",1382],[4,"Handle",1382],[3,"MemLayout",1382],[3,"MaybeDynMemLayout",1382],[3,"Formatter",2305],[6,"Result",2305],[3,"Dialect",1462],[3,"ModuleDebugInfo",1462],[3,"DebugSourceLang",1462],[3,"DebugSources",1462],[3,"Inst",1462],[4,"Imm",1462],[3,"InstWithIds",1462],[8,"Iterator",2306],[15,"slice"],[3,"String",2307],[3,"FromUtf8Error",2307],[3,"Opcode",1644],[3,"TokensForOperand",1602],[3,"InstructionDef",1644],[3,"Enumerant",1644],[15,"u16"],[4,"InstructionCategory",1644],[4,"OperandMode",1644],[3,"OperandKind",1644],[3,"PackedOperandNameAndKind",1644],[3,"BitIdx",1644],[4,"OperandKindDef",1644],[4,"RestOperandsUnit",1644],[3,"Spec",1644],[15,"u32"],[15,"usize"],[3,"KhrSegmentedVec",2002],[3,"NamedIdxMap",2002],[8,"StorageShape",2002],[8,"FlatIdx",2002],[3,"CoreGrammar",2055],[8,"Deserializer",2308],[3,"ExtInstGrammar",2055],[3,"InstructionPrintingClass",2055],[3,"Instruction",2055],[3,"Operand",2055],[4,"Quantifier",2055],[3,"OperandKind",2055],[4,"OperandKindCategory",2055],[3,"OperandKindEnumerant",2055],[4,"CowStr",2055],[4,"DecOrHex",2055],[8,"Deserialize",2308],[15,"array"],[8,"FnOnce",2304],[8,"FnMut",2304],[13,"SpvDebugLine",978],[13,"Loop",981],[13,"Select",981],[13,"Block",981],[13,"SpvExtInst",988],[13,"SpvEntryPoint",990],[13,"ControlNodeOutput",992],[13,"ControlRegionInput",992],[13,"FromSpvPtrOutput",1340],[13,"ToSpvPtrInput",1340],[13,"DynOffsetBase",1344],[13,"BufferDynLen",1346],[13,"DynOffset",1346],[13,"Handles",1460],[4,"Token",1602],[3,"WellKnown",1644],[4,"LiteralSize",1644],[3,"ExtInstSetInstructionDesc",1644],[13,"BitEnum",1998],[13,"Literal",1998],[13,"ValueEnum",1998],[4,"Flat",2002],[4,"FlatWithHoles",2002],[4,"KhrSegmented",2002],[8,"InnerTransform",2218],[8,"DynInnerVisit",2260]]},\
"spirv":{"doc":"The SPIR-V header.","t":"NNSSSSNSNNNENNNENNSNNNNSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNESSSSNSSSSSSNSNENNNNNNNNNSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSSSNNNNNNNNNSENNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNENNENNNNNNNSNNNNNSNNNNNNNNNNNNDNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNSNNNNNNNNDNNENNNNNNNENNNNSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNSSNNSNSNNSSNNNNNNSNNNSSNNNNSNNNNNNNEENNNNENNNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSNSNSNNNNNNNSNSNNNNNSNNNNNNNNNNNNNNSNNNNNNSNNNNNNNNNNNEDNSSNSNSNNNNNNNNNNNNENNNNNNNNNNNNNNNNNDNNNRRSSSSSSSSSSSSSSSRSSNNNNNNNNNNNNNNSNDNNENNDNNNNNNSNNNNNNNNNSSSSSSSSSSSSSSSSSSNNNNNNNNNNNNNNNNNSNNNNNNNNNNSSSSSNSNSNNENNNNNNNNNNNNNNNNSSSSNNNNNNNNNNNNNNNNNNNNNNSNSSNNNNNNNNNNNNNNNNNNNNNNNNNNSNNNNNNNNNNNNNNNNNSSRNNNNNNNNNNDSNNSNNNNENNNNENNNNNNNNNNNNNNNNNNNNNENNNNSNSNNNNNNNNNNNNNNNNNNNSNNNNNNNSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSNSNNNNSNNSSSSNNNNNNNNNSNNSNNNNNNNNNNNNNNNSNEENNNENNNNDNNNNNNNNSSNNNNNSNNNNSNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNSENNSNNNNNNNNSNSSSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSNNSNSNNNNNNNNSNNSNNNNNNNNNNNNNSNNNNNNNNNNNNNNNNNNNNSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSNNNNNNNNSNNNSNSNNNNNNNNNNNNNNNNNNNNNNNSSSSSSNNNNNNNNNNNNNNNNNNNNNNNSNNSSSNNNNGNNNNNSNSNSNNNNNNNNSNNNNLLLLLLLLLLNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNLLLLLLLLLLNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNLLLLLLLLLLNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNLLLLLLLLLLNNNNNNNNNNN","n":["A","ABGR","ACQUIRE","ACQUIRE_RELEASE","ALIGNED","ALLOW_RECIP","ARGB","ATOMIC_COUNTER_MEMORY","AbsISubINTEL","AbsUSubINTEL","AccessChain","AccessQualifier","Acos","Acosh","Addresses","AddressingModel","Aliased","AliasedPointer","AliasedPointerEXT","Alignment","AlignmentId","All","Any","AnyHitKHR","AnyHitNV","ArrayLength","ArrayStride","Asin","Asinh","Atan","Atan2","Atanh","AtomicAnd","AtomicCompareExchange","AtomicCompareExchangeWeak","AtomicCounter","AtomicExchange","AtomicFAddEXT","AtomicFlagClear","AtomicFlagTestAndSet","AtomicFloat32AddEXT","AtomicFloat64AddEXT","AtomicIAdd","AtomicIDecrement","AtomicIIncrement","AtomicISub","AtomicLoad","AtomicOr","AtomicSMax","AtomicSMin","AtomicStorage","AtomicStorageOps","AtomicStore","AtomicUMax","AtomicUMin","AtomicXor","BGRA","BIAS","BankBitsINTEL","BankwidthINTEL","BaryCoordNV","BaryCoordNoPerspAMD","BaryCoordNoPerspCentroidAMD","BaryCoordNoPerspNV","BaryCoordNoPerspSampleAMD","BaryCoordPullModelAMD","BaryCoordSmoothAMD","BaryCoordSmoothCentroidAMD","BaryCoordSmoothSampleAMD","BaseInstance","BaseVertex","BeginInvocationInterlockEXT","Binding","BitCount","BitFieldInsert","BitFieldSExtract","BitFieldUExtract","BitReverse","Bitcast","BitwiseAnd","BitwiseOr","BitwiseXor","Block","BlockingPipesINTEL","Branch","BranchConditional","BufferBlock","BuildNDRange","BuiltIn","BuiltIn","ByVal","CLOp","CMD_EXEC_TIME","CONST","CONST_OFFSET","CONST_OFFSETS","CPacked","CROSS_WORKGROUP_MEMORY","CULL_BACK_FACING_TRIANGLES_KHR","CULL_FRONT_FACING_TRIANGLES_KHR","CULL_NO_OPAQUE_KHR","CULL_OPAQUE_KHR","CallableDataKHR","CallableDataNV","CallableKHR","CallableNV","Capability","Capability","CaptureEventProfilingInfo","Ceil","Centroid","Clamp","ClampToEdge","ClipDistance","ClipDistance","ClipDistancePerViewNV","ClosestHitKHR","ClosestHitNV","ClusteredReduce","CodeSectionINTEL","Coherent","ColMajor","CommitReadPipe","CommitWritePipe","Component","CompositeConstruct","CompositeExtract","CompositeInsert","ComputeDerivativeGroupLinearNV","ComputeDerivativeGroupQuadsNV","Constant","Constant","ConstantComposite","ConstantFalse","ConstantNull","ConstantPipeStorage","ConstantSampler","ConstantTrue","ContractionOff","ControlBarrier","ConvertFToS","ConvertFToU","ConvertPtrToU","ConvertSToF","ConvertUToAccelerationStructureKHR","ConvertUToF","ConvertUToPtr","CooperativeMatrixLengthNV","CooperativeMatrixLoadNV","CooperativeMatrixMulAddNV","CooperativeMatrixNV","CooperativeMatrixStoreNV","CopyLogical","CopyMemory","CopyMemorySized","CopyObject","Cos","Cosh","CounterBuffer","CreatePipeFromPipeStorage","CreateUserEvent","Cross","CrossDevice","CrossWorkgroup","CullDistance","CullDistance","CullDistancePerViewNV","DEPENDENCY_ARRAY_INTEL","DEPENDENCY_INFINITE","DEPENDENCY_LENGTH","DONT_FLATTEN","DONT_INLINE","DONT_UNROLL","DPdx","DPdxCoarse","DPdxFine","DPdy","DPdyCoarse","DPdyFine","Decorate","DecorateId","DecorateString","DecorateStringGOOGLE","Decoration","DecorationGroup","Degrees","DemoteToHelperInvocationEXT","DemoteToHelperInvocationEXT","DenormFlushToZero","DenormFlushToZero","DenormPreserve","DenormPreserve","Depth","DepthGreater","DepthLess","DepthReplacing","DepthStencil","DepthUnchanged","DerivativeControl","DerivativeGroupLinearNV","DerivativeGroupQuadsNV","DescriptorSet","Determinant","Device","DeviceEnqueue","DeviceGroup","DeviceIndex","Dim","Dim1D","Dim2D","Dim3D","DimBuffer","DimCube","DimRect","DimSubpassData","Distance","Dot","DoublepumpINTEL","DrawIndex","DrawParameters","ESSL","EarlyFragmentTests","EmitStreamVertex","EmitVertex","EndInvocationInterlockEXT","EndPrimitive","EndStreamPrimitive","EnqueueKernel","EnqueueMarker","EnqueuedWorkgroupSize","EntryPoint","ExclusiveScan","ExecuteCallableKHR","ExecuteCallableNV","ExecutionMode","ExecutionMode","ExecutionModeId","ExecutionModel","Exp","Exp2","ExplicitInterpAMD","Export","ExtInst","ExtInstImport","Extension","FAST","FAbs","FAdd","FClamp","FConvert","FDiv","FLATTEN","FMax","FMin","FMix","FMod","FMul","FNegate","FOrdEqual","FOrdGreaterThan","FOrdGreaterThanEqual","FOrdLessThan","FOrdLessThanEqual","FOrdNotEqual","FPFastMathMode","FPFastMathMode","FPGAKernelAttributesINTEL","FPGALoopControlsINTEL","FPGAMemoryAttributesINTEL","FPGARegINTEL","FPGARegINTEL","FPRoundingMode","FPRoundingMode","FRem","FSign","FSub","FUnordEqual","FUnordGreaterThan","FUnordGreaterThanEqual","FUnordLessThan","FUnordLessThanEqual","FUnordNotEqual","FaceForward","Finalizer","FindILsb","FindSMsb","FindUMsb","Flat","Float","Float16","Float16Buffer","Float16ImageAMD","Float64","Floor","Fma","ForcePow2DepthINTEL","Fract","FragCoord","FragDepth","FragInvocationCountEXT","FragSizeEXT","FragStencilRefEXT","Fragment","FragmentBarycentricNV","FragmentDensityEXT","FragmentFetchAMD","FragmentFullyCoveredEXT","FragmentMaskAMD","FragmentMaskFetchAMD","FragmentShaderPixelInterlockEXT","FragmentShaderSampleInterlockEXT","FragmentShaderShadingRateInterlockEXT","FragmentShadingRate","FragmentShadingRateKHR","FragmentSizeNV","Frexp","FrexpStruct","FrontFacing","FullyCoveredEXT","FuncParamAttr","Function","Function","FunctionCall","FunctionControl","FunctionEnd","FunctionParameter","FunctionParameterAttribute","FunctionPointerCallINTEL","FunctionPointerINTEL","FunctionPointersINTEL","Fwidth","FwidthCoarse","FwidthFine","GLCompute","GLOp","GLSL","GLSL450","GLSLPacked","GLSLShared","GRAD","Generic","GenericCastToPtr","GenericCastToPtrExplicit","GenericPointer","GenericPtrMemSemantics","Geometry","Geometry","GeometryPointSize","GeometryShaderPassthroughNV","GeometryStreams","GetDefaultQueue","GetKernelLocalSizeForSubgroupCount","GetKernelMaxNumSubgroups","GetKernelNDrangeMaxSubGroupSize","GetKernelNDrangeSubGroupCount","GetKernelPreferredWorkGroupSizeMultiple","GetKernelWorkGroupSize","GetMaxPipePackets","GetNumPipePackets","GlobalInvocationId","GlobalLinearId","GlobalOffset","GlobalSize","GroupAll","GroupAny","GroupAsyncCopy","GroupBroadcast","GroupCommitReadPipe","GroupCommitWritePipe","GroupDecorate","GroupFAdd","GroupFAddNonUniformAMD","GroupFMax","GroupFMaxNonUniformAMD","GroupFMin","GroupFMinNonUniformAMD","GroupIAdd","GroupIAddNonUniformAMD","GroupMemberDecorate","GroupNonUniform","GroupNonUniformAll","GroupNonUniformAllEqual","GroupNonUniformAny","GroupNonUniformArithmetic","GroupNonUniformBallot","GroupNonUniformBallot","GroupNonUniformBallotBitCount","GroupNonUniformBallotBitExtract","GroupNonUniformBallotFindLSB","GroupNonUniformBallotFindMSB","GroupNonUniformBitwiseAnd","GroupNonUniformBitwiseOr","GroupNonUniformBitwiseXor","GroupNonUniformBroadcast","GroupNonUniformBroadcastFirst","GroupNonUniformClustered","GroupNonUniformElect","GroupNonUniformFAdd","GroupNonUniformFMax","GroupNonUniformFMin","GroupNonUniformFMul","GroupNonUniformIAdd","GroupNonUniformIMul","GroupNonUniformInverseBallot","GroupNonUniformLogicalAnd","GroupNonUniformLogicalOr","GroupNonUniformLogicalXor","GroupNonUniformPartitionNV","GroupNonUniformPartitionedNV","GroupNonUniformQuad","GroupNonUniformQuadBroadcast","GroupNonUniformQuadSwap","GroupNonUniformSMax","GroupNonUniformSMin","GroupNonUniformShuffle","GroupNonUniformShuffle","GroupNonUniformShuffleDown","GroupNonUniformShuffleRelative","GroupNonUniformShuffleUp","GroupNonUniformShuffleXor","GroupNonUniformUMax","GroupNonUniformUMin","GroupNonUniformVote","GroupOperation","GroupReserveReadPipePackets","GroupReserveWritePipePackets","GroupSMax","GroupSMaxNonUniformAMD","GroupSMin","GroupSMinNonUniformAMD","GroupUMax","GroupUMaxNonUniformAMD","GroupUMin","GroupUMinNonUniformAMD","GroupWaitEvents","Groups","HLSL","HORIZONTAL2_PIXELS","HORIZONTAL4_PIXELS","HalfFloat","HelperInvocation","HitAttributeKHR","HitAttributeNV","HitKindKHR","HitKindNV","HitTNV","HlslCounterBufferGOOGLE","HlslSemanticGOOGLE","IAdd","IAddCarry","IAddSatINTEL","IAverageINTEL","IAverageRoundedINTEL","IEqual","IMAGE_MEMORY","IMix","IMul","IMul32x16INTEL","INITIATION_INTERVAL_INTEL","INLINE","INotEqual","ISub","ISubBorrow","ISubSatINTEL","ITERATION_MULTIPLE","IgnoreIntersectionKHR","IgnoreIntersectionNV","Image","Image","Image1D","ImageBasic","ImageBuffer","ImageChannelDataType","ImageChannelOrder","ImageCubeArray","ImageDrefGather","ImageFetch","ImageFootprintNV","ImageFormat","ImageGather","ImageGatherBiasLodAMD","ImageGatherExtended","ImageMSArray","ImageMipmap","ImageOperands","ImageQuery","ImageQueryFormat","ImageQueryLevels","ImageQueryLod","ImageQueryOrder","ImageQuerySamples","ImageQuerySize","ImageQuerySizeLod","ImageRead","ImageReadWrite","ImageReadWriteLodAMD","ImageRect","ImageSampleDrefExplicitLod","ImageSampleDrefImplicitLod","ImageSampleExplicitLod","ImageSampleFootprintNV","ImageSampleImplicitLod","ImageSampleProjDrefExplicitLod","ImageSampleProjDrefImplicitLod","ImageSampleProjExplicitLod","ImageSampleProjImplicitLod","ImageSparseDrefGather","ImageSparseFetch","ImageSparseGather","ImageSparseRead","ImageSparseSampleDrefExplicitLod","ImageSparseSampleDrefImplicitLod","ImageSparseSampleExplicitLod","ImageSparseSampleImplicitLod","ImageSparseSampleProjDrefExplicitLod","ImageSparseSampleProjDrefImplicitLod","ImageSparseSampleProjExplicitLod","ImageSparseSampleProjImplicitLod","ImageSparseTexelsResident","ImageTexelPointer","ImageWrite","Import","InBoundsAccessChain","InBoundsPtrAccessChain","InclusiveScan","IncomingCallableDataKHR","IncomingCallableDataNV","IncomingRayFlagsKHR","IncomingRayFlagsNV","IncomingRayPayloadKHR","IncomingRayPayloadNV","Index","IndirectReferencesINTEL","Initializer","Input","InputAttachment","InputAttachmentArrayDynamicIndexing","InputAttachmentArrayDynamicIndexingEXT","InputAttachmentArrayNonUniformIndexing","InputAttachmentArrayNonUniformIndexingEXT","InputAttachmentIndex","InputLines","InputLinesAdjacency","InputPoints","InputTrianglesAdjacency","InstanceCustomIndexKHR","InstanceCustomIndexNV","InstanceId","InstanceIndex","Int16","Int64","Int64Atomics","Int64ImageEXT","Int8","IntegerFunctions2INTEL","Intensity","InterpolateAtCentroid","InterpolateAtOffset","InterpolateAtSample","InterpolationFunction","IntersectionKHR","IntersectionNV","Invariant","InverseSqrt","Invocation","InvocationId","Invocations","InvocationsPerPixelNV","IsFinite","IsHelperInvocationEXT","IsInf","IsNan","IsNormal","IsValidEvent","IsValidReserveId","Isolines","Kernel","Kernel","KernelAttributesINTEL","KernelEnqueueFlags","KernelProfilingInfo","Kill","LOD","LOOP_COALESCE_INTEL","Label","LaunchIdKHR","LaunchIdNV","LaunchSizeKHR","LaunchSizeNV","Layer","LayerPerViewNV","Ldexp","Length","LessOrGreater","LifetimeStart","LifetimeStop","Line","Linear","Linkage","LinkageAttributes","LinkageType","LiteralSampler","Load","LocalInvocationId","LocalInvocationIndex","LocalSize","LocalSizeHint","LocalSizeHintId","LocalSizeId","Location","Log","Log2","Logical","LogicalAnd","LogicalEqual","LogicalNot","LogicalNotEqual","LogicalOr","LoopControl","LoopControlINTEL","LoopMerge","Luminance","MAGIC_NUMBER","MAJOR_VERSION","MAKE_AVAILABLE","MAKE_AVAILABLE_KHR","MAKE_POINTER_AVAILABLE","MAKE_POINTER_AVAILABLE_KHR","MAKE_POINTER_VISIBLE","MAKE_POINTER_VISIBLE_KHR","MAKE_TEXEL_AVAILABLE","MAKE_TEXEL_AVAILABLE_KHR","MAKE_TEXEL_VISIBLE","MAKE_TEXEL_VISIBLE_KHR","MAKE_VISIBLE","MAKE_VISIBLE_KHR","MAX_CONCURRENCY_INTEL","MAX_INTERLEAVING_INTEL","MAX_ITERATIONS","MINOR_VERSION","MIN_ITERATIONS","MIN_LOD","Matrix","MatrixInverse","MatrixStride","MatrixTimesMatrix","MatrixTimesScalar","MatrixTimesVector","MaxByteOffset","MaxByteOffsetId","MaxPrivateCopiesINTEL","MaxReplicatesINTEL","MaxWorkDimINTEL","MaxWorkgroupSizeINTEL","MemberDecorate","MemberDecorateString","MemberDecorateStringGOOGLE","MemberName","MemoryAccess","MemoryBarrier","MemoryINTEL","MemoryModel","MemoryModel","MemoryNamedBarrier","MemorySemantics","MergeINTEL","MeshNV","MeshShadingNV","MeshViewCountNV","MeshViewIndicesNV","MinLod","MissKHR","MissNV","Modf","ModfStruct","ModuleProcessed","MultiView","MultiViewport","NClamp","NMax","NMin","NONE","NONE","NONE","NONE","NONE","NONE","NONE","NONE","NONE_KHR","NONTEMPORAL","NON_PRIVATE_POINTER","NON_PRIVATE_POINTER_KHR","NON_PRIVATE_TEXEL","NON_PRIVATE_TEXEL_KHR","NOT_INF","NOT_NAN","NO_OPAQUE_KHR","NSZ","Name","NamedBarrier","NamedBarrierInitialize","Nearest","NoAlias","NoCapture","NoContraction","NoGlobalOffsetINTEL","NoLine","NoPerspective","NoReadWrite","NoSignedWrap","NoUnsignedWrap","NoWait","NoWrite","NonReadable","NonUniform","NonUniformEXT","NonWritable","None","Nop","Normalize","Not","NumEnqueuedSubgroups","NumSIMDWorkitemsINTEL","NumSubgroups","NumWorkgroups","NumbanksINTEL","OFFSET","OPAQUE_KHR","OUTPUT_MEMORY","OUTPUT_MEMORY_KHR","ObjectRayDirectionKHR","ObjectRayDirectionNV","ObjectRayOriginKHR","ObjectRayOriginNV","ObjectToWorldKHR","ObjectToWorldNV","Offset","Op","OpenCL","OpenCL_C","OpenCL_CPP","Ordered","OriginLowerLeft","OriginUpperLeft","OuterProduct","Output","OutputLineStrip","OutputLinesNV","OutputPoints","OutputPrimitivesNV","OutputTriangleStrip","OutputTrianglesNV","OutputVertices","OverrideCoverageNV","PARTIAL_COUNT","PEEL_COUNT","PIPELINE_ENABLE_INTEL","PURE","PackDouble2x32","PackHalf2x16","PackSnorm2x16","PackSnorm4x8","PackUnorm2x16","PackUnorm4x8","PartitionedExclusiveScanNV","PartitionedInclusiveScanNV","PartitionedReduceNV","PassthroughNV","Patch","PatchVertices","PerPrimitiveNV","PerTaskNV","PerVertexNV","PerViewAttributesNV","PerViewNV","Phi","Physical32","Physical64","PhysicalStorageBuffer","PhysicalStorageBuffer64","PhysicalStorageBuffer64EXT","PhysicalStorageBufferAddresses","PhysicalStorageBufferAddressesEXT","PhysicalStorageBufferEXT","PipeStorage","Pipes","PixelCenterInteger","PixelInterlockOrderedEXT","PixelInterlockUnorderedEXT","PointCoord","PointMode","PointSize","Position","PositionPerViewNV","PostDepthCoverage","Pow","PrimitiveCountNV","PrimitiveId","PrimitiveIndicesNV","PrimitiveShadingRateKHR","Private","PtrAccessChain","PtrCastToGeneric","PtrDiff","PtrEqual","PtrNotEqual","PushConstant","Quads","QuantizeToF16","QueueFamily","QueueFamilyKHR","R","R11fG11fB10f","R16","R16Snorm","R16f","R16i","R16ui","R32f","R32i","R32ui","R64i","R64ui","R8","R8Snorm","R8i","R8ui","RA","RELAXED","RELEASE","REVISION","RG","RGB","RGBA","RGBx","RGx","RTE","RTN","RTP","RTZ","Radians","RayFlags","RayGenerationKHR","RayGenerationNV","RayGeometryIndexKHR","RayPayloadKHR","RayPayloadNV","RayQueryCandidateIntersectionAABBKHR","RayQueryCandidateIntersectionKHR","RayQueryCandidateIntersectionTriangleKHR","RayQueryCandidateIntersectionType","RayQueryCommittedIntersectionGeneratedKHR","RayQueryCommittedIntersectionKHR","RayQueryCommittedIntersectionNoneKHR","RayQueryCommittedIntersectionTriangleKHR","RayQueryCommittedIntersectionType","RayQueryConfirmIntersectionKHR","RayQueryGenerateIntersectionKHR","RayQueryGetIntersectionBarycentricsKHR","RayQueryGetIntersectionCandidateAABBOpaqueKHR","RayQueryGetIntersectionFrontFaceKHR","RayQueryGetIntersectionGeometryIndexKHR","RayQueryGetIntersectionInstanceCustomIndexKHR","RayQueryGetIntersectionInstanceIdKHR","RayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR","RayQueryGetIntersectionObjectRayDirectionKHR","RayQueryGetIntersectionObjectRayOriginKHR","RayQueryGetIntersectionObjectToWorldKHR","RayQueryGetIntersectionPrimitiveIndexKHR","RayQueryGetIntersectionTKHR","RayQueryGetIntersectionTypeKHR","RayQueryGetIntersectionWorldToObjectKHR","RayQueryGetRayFlagsKHR","RayQueryGetRayTMinKHR","RayQueryGetWorldRayDirectionKHR","RayQueryGetWorldRayOriginKHR","RayQueryInitializeKHR","RayQueryIntersection","RayQueryKHR","RayQueryProceedKHR","RayQueryProvisionalKHR","RayQueryTerminateKHR","RayTmaxKHR","RayTmaxNV","RayTminKHR","RayTminNV","RayTracingKHR","RayTracingNV","RayTracingProvisionalKHR","RayTraversalPrimitiveCullingKHR","ReadClockKHR","ReadOnly","ReadPipe","ReadPipeBlockingINTEL","ReadWrite","Reduce","ReferencedIndirectlyINTEL","Reflect","Refract","RegisterINTEL","RelaxedPrecision","ReleaseEvent","Repeat","RepeatMirrored","ReportIntersectionKHR","ReportIntersectionNV","ReserveReadPipePackets","ReserveWritePipePackets","ReservedReadPipe","ReservedWritePipe","Restrict","RestrictPointer","RestrictPointerEXT","RetainEvent","Return","ReturnValue","Rg16","Rg16Snorm","Rg16f","Rg16i","Rg16ui","Rg32f","Rg32i","Rg32ui","Rg8","Rg8Snorm","Rg8i","Rg8ui","Rgb10A2","Rgb10a2ui","Rgba16","Rgba16Snorm","Rgba16f","Rgba16i","Rgba16ui","Rgba32f","Rgba32i","Rgba32ui","Rgba8","Rgba8Snorm","Rgba8i","Rgba8ui","Round","RoundEven","RoundingModeRTE","RoundingModeRTE","RoundingModeRTZ","RoundingModeRTZ","RowMajor","RuntimeDescriptorArray","RuntimeDescriptorArrayEXT","Rx","SAMPLE","SAbs","SClamp","SConvert","SDiv","SEQUENTIALLY_CONSISTENT","SGreaterThan","SGreaterThanEqual","SIGN_EXTEND","SKIP_AAB_BS_KHR","SKIP_CLOSEST_HIT_SHADER_KHR","SKIP_TRIANGLES_KHR","SLessThan","SLessThanEqual","SMCountNV","SMIDNV","SMax","SMin","SMod","SMulExtended","SNegate","SPECULATED_ITERATIONS_INTEL","SRem","SSign","SUBGROUP_MEMORY","Sample","SampleId","SampleInterlockOrderedEXT","SampleInterlockUnorderedEXT","SampleMask","SampleMaskOverrideCoverageNV","SampleMaskPostDepthCoverage","SamplePosition","SampleRateShading","Sampled1D","SampledBuffer","SampledCubeArray","SampledImage","SampledImageArrayDynamicIndexing","SampledImageArrayNonUniformIndexing","SampledImageArrayNonUniformIndexingEXT","SampledRect","SamplerAddressingMode","SamplerFilterMode","SatConvertSToU","SatConvertUToS","SaturatedConversion","Scope","SecondaryPositionNV","SecondaryViewportMaskNV","SecondaryViewportRelativeNV","Select","SelectionControl","SelectionMerge","SetUserEventStatus","Sext","Shader","ShaderCallKHR","ShaderClockKHR","ShaderLayer","ShaderNonUniform","ShaderNonUniformEXT","ShaderRecordBufferKHR","ShaderRecordBufferNV","ShaderSMBuiltinsNV","ShaderStereoViewNV","ShaderViewportIndex","ShaderViewportIndexLayerEXT","ShaderViewportIndexLayerNV","ShaderViewportMaskNV","ShadingRateInterlockOrderedEXT","ShadingRateInterlockUnorderedEXT","ShadingRateKHR","ShadingRateNV","ShiftLeftLogical","ShiftRightArithmetic","ShiftRightLogical","SignBitSet","SignedInt16","SignedInt32","SignedInt8","SignedZeroInfNanPreserve","SignedZeroInfNanPreserve","Simple","SimpleDualPortINTEL","Sin","SinglepumpINTEL","Sinh","SizeOf","SmoothStep","SnormInt16","SnormInt8","Source","SourceContinued","SourceExtension","SourceLanguage","SpacingEqual","SpacingFractionalEven","SpacingFractionalOdd","SparseResidency","SpecConstant","SpecConstantComposite","SpecConstantFalse","SpecConstantOp","SpecConstantTrue","SpecId","Sqrt","Sret","StencilExportEXT","StencilRefReplacingEXT","Step","StorageBuffer","StorageBuffer16BitAccess","StorageBuffer8BitAccess","StorageBufferArrayDynamicIndexing","StorageBufferArrayNonUniformIndexing","StorageBufferArrayNonUniformIndexingEXT","StorageClass","StorageImageArrayDynamicIndexing","StorageImageArrayNonUniformIndexing","StorageImageArrayNonUniformIndexingEXT","StorageImageExtendedFormats","StorageImageMultisample","StorageImageReadWithoutFormat","StorageImageWriteWithoutFormat","StorageInputOutput16","StoragePushConstant16","StoragePushConstant8","StorageTexelBufferArrayDynamicIndexing","StorageTexelBufferArrayDynamicIndexingEXT","StorageTexelBufferArrayNonUniformIndexing","StorageTexelBufferArrayNonUniformIndexingEXT","StorageUniform16","StorageUniformBufferBlock16","Store","Stream","String","Subgroup","SubgroupAllEqualKHR","SubgroupAllKHR","SubgroupAnyKHR","SubgroupAvcBmeInitializeINTEL","SubgroupAvcFmeInitializeINTEL","SubgroupAvcImeAdjustRefOffsetINTEL","SubgroupAvcImeConvertToMcePayloadINTEL","SubgroupAvcImeConvertToMceResultINTEL","SubgroupAvcImeEvaluateWithDualReferenceINTEL","SubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL","SubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL","SubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL","SubgroupAvcImeEvaluateWithSingleReferenceINTEL","SubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL","SubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL","SubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL","SubgroupAvcImeGetBorderReachedINTEL","SubgroupAvcImeGetDualReferenceStreaminINTEL","SubgroupAvcImeGetSingleReferenceStreaminINTEL","SubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL","SubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL","SubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL","SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL","SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL","SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL","SubgroupAvcImeGetTruncatedSearchIndicationINTEL","SubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL","SubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL","SubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL","SubgroupAvcImeInitializeINTEL","SubgroupAvcImeRefWindowSizeINTEL","SubgroupAvcImeSetDualReferenceINTEL","SubgroupAvcImeSetEarlySearchTerminationThresholdINTEL","SubgroupAvcImeSetMaxMotionVectorCountINTEL","SubgroupAvcImeSetSingleReferenceINTEL","SubgroupAvcImeSetUnidirectionalMixDisableINTEL","SubgroupAvcImeSetWeightedSadINTEL","SubgroupAvcImeStripDualReferenceStreamoutINTEL","SubgroupAvcImeStripSingleReferenceStreamoutINTEL","SubgroupAvcMceConvertToImePayloadINTEL","SubgroupAvcMceConvertToImeResultINTEL","SubgroupAvcMceConvertToRefPayloadINTEL","SubgroupAvcMceConvertToRefResultINTEL","SubgroupAvcMceConvertToSicPayloadINTEL","SubgroupAvcMceConvertToSicResultINTEL","SubgroupAvcMceGetBestInterDistortionsINTEL","SubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL","SubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL","SubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL","SubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL","SubgroupAvcMceGetDefaultInterShapePenaltyINTEL","SubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL","SubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL","SubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL","SubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL","SubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL","SubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL","SubgroupAvcMceGetInterDirectionsINTEL","SubgroupAvcMceGetInterDistortionsINTEL","SubgroupAvcMceGetInterMajorShapeINTEL","SubgroupAvcMceGetInterMinorShapeINTEL","SubgroupAvcMceGetInterMotionVectorCountINTEL","SubgroupAvcMceGetInterReferenceIdsINTEL","SubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL","SubgroupAvcMceGetMotionVectorsINTEL","SubgroupAvcMceSetAcOnlyHaarINTEL","SubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL","SubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL","SubgroupAvcMceSetInterDirectionPenaltyINTEL","SubgroupAvcMceSetInterShapePenaltyINTEL","SubgroupAvcMceSetMotionVectorCostFunctionINTEL","SubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL","SubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL","SubgroupAvcMotionEstimationChromaINTEL","SubgroupAvcMotionEstimationINTEL","SubgroupAvcMotionEstimationIntraINTEL","SubgroupAvcRefConvertToMcePayloadINTEL","SubgroupAvcRefConvertToMceResultINTEL","SubgroupAvcRefEvaluateWithDualReferenceINTEL","SubgroupAvcRefEvaluateWithMultiReferenceINTEL","SubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL","SubgroupAvcRefEvaluateWithSingleReferenceINTEL","SubgroupAvcRefSetBidirectionalMixDisableINTEL","SubgroupAvcRefSetBilinearFilterEnableINTEL","SubgroupAvcSicConfigureIpeLumaChromaINTEL","SubgroupAvcSicConfigureIpeLumaINTEL","SubgroupAvcSicConfigureSkcINTEL","SubgroupAvcSicConvertToMcePayloadINTEL","SubgroupAvcSicConvertToMceResultINTEL","SubgroupAvcSicEvaluateIpeINTEL","SubgroupAvcSicEvaluateWithDualReferenceINTEL","SubgroupAvcSicEvaluateWithMultiReferenceINTEL","SubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL","SubgroupAvcSicEvaluateWithSingleReferenceINTEL","SubgroupAvcSicGetBestIpeChromaDistortionINTEL","SubgroupAvcSicGetBestIpeLumaDistortionINTEL","SubgroupAvcSicGetInterRawSadsINTEL","SubgroupAvcSicGetIpeChromaModeINTEL","SubgroupAvcSicGetIpeLumaShapeINTEL","SubgroupAvcSicGetMotionVectorMaskINTEL","SubgroupAvcSicGetPackedIpeLumaModesINTEL","SubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL","SubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL","SubgroupAvcSicInitializeINTEL","SubgroupAvcSicSetBilinearFilterEnableINTEL","SubgroupAvcSicSetBlockBasedRawSkipSadINTEL","SubgroupAvcSicSetIntraChromaModeCostFunctionINTEL","SubgroupAvcSicSetIntraLumaModeCostFunctionINTEL","SubgroupAvcSicSetIntraLumaShapePenaltyINTEL","SubgroupAvcSicSetSkcForwardTransformEnableINTEL","SubgroupBallotKHR","SubgroupBallotKHR","SubgroupBlockReadINTEL","SubgroupBlockWriteINTEL","SubgroupBufferBlockIOINTEL","SubgroupDispatch","SubgroupEqMask","SubgroupEqMaskKHR","SubgroupFirstInvocationKHR","SubgroupGeMask","SubgroupGeMaskKHR","SubgroupGtMask","SubgroupGtMaskKHR","SubgroupId","SubgroupImageBlockIOINTEL","SubgroupImageBlockReadINTEL","SubgroupImageBlockWriteINTEL","SubgroupImageMediaBlockIOINTEL","SubgroupImageMediaBlockReadINTEL","SubgroupImageMediaBlockWriteINTEL","SubgroupLeMask","SubgroupLeMaskKHR","SubgroupLocalInvocationId","SubgroupLtMask","SubgroupLtMaskKHR","SubgroupMaxSize","SubgroupReadInvocationKHR","SubgroupShuffleDownINTEL","SubgroupShuffleINTEL","SubgroupShuffleINTEL","SubgroupShuffleUpINTEL","SubgroupShuffleXorINTEL","SubgroupSize","SubgroupSize","SubgroupVoteKHR","SubgroupsPerWorkgroup","SubgroupsPerWorkgroupId","Switch","TERMINATE_ON_FIRST_HIT_KHR","Tan","Tanh","TaskCountNV","TaskNV","TerminateInvocation","TerminateRayKHR","TerminateRayNV","TessCoord","TessLevelInner","TessLevelOuter","Tessellation","TessellationControl","TessellationEvaluation","TessellationPointSize","TraceNV","TraceRayKHR","TransformFeedback","Transpose","Triangles","Trunc","TypeAccelerationStructureKHR","TypeAccelerationStructureNV","TypeArray","TypeAvcImeDualReferenceStreaminINTEL","TypeAvcImePayloadINTEL","TypeAvcImeResultDualReferenceStreamoutINTEL","TypeAvcImeResultINTEL","TypeAvcImeResultSingleReferenceStreamoutINTEL","TypeAvcImeSingleReferenceStreaminINTEL","TypeAvcMcePayloadINTEL","TypeAvcMceResultINTEL","TypeAvcRefPayloadINTEL","TypeAvcRefResultINTEL","TypeAvcSicPayloadINTEL","TypeAvcSicResultINTEL","TypeBool","TypeCooperativeMatrixNV","TypeDeviceEvent","TypeEvent","TypeFloat","TypeForwardPointer","TypeFunction","TypeImage","TypeInt","TypeMatrix","TypeNamedBarrier","TypeOpaque","TypePipe","TypePipeStorage","TypePointer","TypeQueue","TypeRayQueryKHR","TypeReserveId","TypeRuntimeArray","TypeSampledImage","TypeSampler","TypeStruct","TypeVector","TypeVmeImageINTEL","TypeVoid","UAddSatINTEL","UAverageINTEL","UAverageRoundedINTEL","UClamp","UConvert","UCountLeadingZerosINTEL","UCountTrailingZerosINTEL","UDiv","UGreaterThan","UGreaterThanEqual","ULessThan","ULessThanEqual","UMax","UMin","UMod","UMul32x16INTEL","UMulExtended","UNIFORM_MEMORY","UNROLL","USubSatINTEL","Undef","Uniform","Uniform","UniformAndStorageBuffer16BitAccess","UniformAndStorageBuffer8BitAccess","UniformBufferArrayDynamicIndexing","UniformBufferArrayNonUniformIndexing","UniformBufferArrayNonUniformIndexingEXT","UniformConstant","UniformId","UniformTexelBufferArrayDynamicIndexing","UniformTexelBufferArrayDynamicIndexingEXT","UniformTexelBufferArrayNonUniformIndexing","UniformTexelBufferArrayNonUniformIndexingEXT","Unknown","Unknown","Unordered","UnormInt101010","UnormInt101010_2","UnormInt16","UnormInt24","UnormInt8","UnormShort555","UnormShort565","UnpackDouble2x32","UnpackHalf2x16","UnpackSnorm2x16","UnpackSnorm4x8","UnpackUnorm2x16","UnpackUnorm4x8","Unreachable","UnsignedInt16","UnsignedInt32","UnsignedInt8","UnstructuredLoopControlsINTEL","UserSemantic","UserTypeGOOGLE","VERTICAL2_PIXELS","VERTICAL4_PIXELS","VOLATILE","VOLATILE","VOLATILE_TEXEL","VOLATILE_TEXEL_KHR","Variable","VariablePointers","VariablePointersStorageBuffer","VecTypeHint","Vector16","VectorExtractDynamic","VectorInsertDynamic","VectorShuffle","VectorTimesMatrix","VectorTimesScalar","Vertex","VertexId","VertexIndex","VertexOrderCcw","VertexOrderCw","ViewIndex","ViewportIndex","ViewportMaskNV","ViewportMaskPerViewNV","ViewportRelativeNV","VmeImageINTEL","Volatile","Vulkan","VulkanKHR","VulkanMemoryModel","VulkanMemoryModelDeviceScope","VulkanMemoryModelDeviceScopeKHR","VulkanMemoryModelKHR","WORKGROUP_MEMORY","WaitKernel","WaitWorkGroup","WarpIDNV","WarpsPerSMNV","Word","WorkDim","Workgroup","Workgroup","WorkgroupId","WorkgroupSize","WorldRayDirectionKHR","WorldRayDirectionNV","WorldRayOriginKHR","WorldRayOriginNV","WorldToObjectKHR","WorldToObjectNV","WriteOnly","WritePackedPrimitiveIndices4x8NV","WritePipe","WritePipeBlockingINTEL","Xfb","XfbBuffer","XfbStride","ZERO_EXTEND","Zext","acos","acosh","acospi","all","all","all","all","all","all","all","all","all","all","asin","asinh","asinpi","atan","atan2","atan2pi","atanh","atanpi","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bitselect","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","ceil","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clz","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","complement","complement","complement","complement","complement","complement","complement","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","copysign","cos","cosh","cospi","cross","ctz","degrees","difference","difference","difference","difference","difference","difference","difference","difference","difference","difference","distance","empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","erf","erfc","exp","exp10","exp2","expm1","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","fabs","fast_distance","fast_length","fast_normalize","fclamp","fdim","floor","fma","fmax","fmax_common","fmin","fmin_common","fmod","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","frexp","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","half_cos","half_divide","half_exp","half_exp10","half_exp2","half_log","half_log10","half_log2","half_powr","half_recip","half_rsqrt","half_sin","half_sqrt","half_tan","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hypot","ilogb","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","ldexp","length","lgamma","lgamma_r","log","log10","log1p","log2","logb","mad","maxmag","minmag","mix","modf","nan","native_cos","native_divide","native_exp","native_exp10","native_exp2","native_log","native_log10","native_log2","native_powr","native_recip","native_rsqrt","native_sin","native_sqrt","native_tan","nextafter","normalize","not","not","not","not","not","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","popcount","pow","pown","powr","prefetch","printf","radians","remainder","remove","remove","remove","remove","remove","remove","remove","remove","remove","remove","remquo","rint","rootn","rotate","round","rsqrt","sBGRA","sRGB","sRGBA","sRGBx","s_abs","s_abs_diff","s_add_sat","s_clamp","s_hadd","s_mad24","s_mad_hi","s_mad_sat","s_max","s_min","s_mul24","s_mul_hi","s_rhadd","s_sub_sat","s_upsample","select","set","set","set","set","set","set","set","set","set","set","shuffle","shuffle2","sign","sin","sincos","sinh","sinpi","smoothstep","sqrt","step","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","tan","tanh","tanpi","tgamma","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u_abs","u_abs_diff","u_add_sat","u_clamp","u_hadd","u_mad24","u_mad_hi","u_mad_sat","u_max","u_min","u_mul24","u_mul_hi","u_rhadd","u_sub_sat","u_upsample","union","union","union","union","union","union","union","union","union","union","vload_half","vload_halfn","vloada_halfn","vloadn","vstore_half","vstore_half_r","vstore_halfn","vstore_halfn_r","vstorea_halfn","vstorea_halfn_r","vstoren"],"q":[[0,"spirv"],[2612,"core::cmp"],[2613,"core::iter::traits::collect"],[2614,"core::fmt"],[2615,"core::fmt"],[2616,"core::result"],[2617,"core::hash"],[2618,"core::any"]],"d":["","","","","","","","","","","","/// SPIR-V operand kind: AccessQualifier","","","","/// SPIR-V operand kind: AddressingModel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","/// SPIR-V operand kind: BuiltIn","","","OpenCL.std extended instruction opcode","","","","","","","","","","","","","","","/// SPIR-V operand kind: Capability","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","/// SPIR-V operand kind: Decoration","","","","","","","","","","","","","","","","","","","","","","","","/// SPIR-V operand kind: Dim","","","","","","","","","","","","","","","","","","","","","","","","","","","/// SPIR-V operand kind: ExecutionMode","","","/// SPIR-V operand kind: ExecutionModel","","","","","","","","","","","","","","","","","","","","","","","","","","","SPIR-V operand kind: FPFastMathMode","","","","","","","/// SPIR-V operand kind: FPRoundingMode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SPIR-V operand kind: FragmentShadingRate","","","","","","","","","","","SPIR-V operand kind: FunctionControl","","","/// SPIR-V operand kind: FunctionParameterAttribute","","","","","","","","GLSL.std.450 extended instruction opcode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","/// SPIR-V operand kind: GroupOperation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","/// SPIR-V operand kind: ImageChannelDataType","/// SPIR-V operand kind: ImageChannelOrder","","","","","/// SPIR-V operand kind: ImageFormat","","","","","","SPIR-V operand kind: ImageOperands","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","/// SPIR-V operand kind: KernelEnqueueFlags","SPIR-V operand kind: KernelProfilingInfo","","","","","","","","","","","","","","","","","","","","/// SPIR-V operand kind: LinkageType","","","","","","","","","","","","","","","","","","SPIR-V operand kind: LoopControl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SPIR-V operand kind: MemoryAccess","","","/// SPIR-V operand kind: MemoryModel","","","SPIR-V operand kind: MemorySemantics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SPIR-V instructions opcodes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SPIR-V operand kind: RayFlags","","","","","","","","","/// SPIR-V operand kind: RayQueryCandidateIntersectionType","","","","","/// SPIR-V operand kind: RayQueryCommittedIntersectionType","","","","","","","","","","","","","","","","","","","","","","/// SPIR-V operand kind: RayQueryIntersection","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","/// SPIR-V operand kind: SamplerAddressingMode","/// SPIR-V operand kind: SamplerFilterMode","","","","/// SPIR-V operand kind: Scope","","","","","SPIR-V operand kind: SelectionControl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","/// SPIR-V operand kind: SourceLanguage","","","","","","","","","","","","","","","","","","","","","","/// SPIR-V operand kind: StorageClasseturns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","","","","","","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flagseturns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flagseturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","","","","","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","",""],"i":[23,23,6,6,7,2,23,6,38,38,38,0,39,39,34,0,29,29,29,29,29,38,38,14,14,38,29,39,39,39,39,39,38,38,38,18,38,38,38,38,34,34,38,38,38,38,38,38,38,38,34,34,38,38,38,38,23,1,29,29,30,30,30,30,30,30,30,30,30,30,30,38,29,38,38,38,38,38,38,38,38,38,29,34,38,38,29,38,0,29,28,0,8,5,1,1,29,6,9,9,9,9,18,18,14,14,0,38,38,39,29,20,20,30,34,30,14,14,32,18,29,29,38,38,29,38,38,38,34,34,29,38,38,38,38,38,38,38,17,38,38,38,38,38,38,38,38,38,38,38,34,38,38,38,38,38,39,39,29,38,38,39,31,18,30,34,30,4,4,4,3,5,4,38,38,38,38,38,38,38,38,38,38,0,38,39,34,38,17,34,17,34,23,17,17,17,23,17,34,17,17,29,39,31,34,34,30,0,19,19,19,19,19,19,19,39,38,29,30,34,13,17,38,38,38,38,38,38,38,30,38,32,38,38,0,38,38,0,39,39,29,26,38,38,38,2,39,38,39,38,38,3,39,39,39,38,38,38,38,38,38,38,38,38,0,29,34,34,34,34,38,0,29,38,39,38,38,38,38,38,38,38,39,17,39,39,39,29,24,34,34,34,34,39,39,29,39,30,30,30,30,30,14,34,34,38,34,34,38,34,34,34,0,34,30,39,39,30,30,29,18,38,38,0,38,38,0,38,38,34,38,38,38,14,0,13,16,29,29,1,18,38,38,34,38,14,34,34,34,34,38,38,38,38,38,38,38,38,38,30,30,30,30,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,34,38,38,38,34,34,38,38,38,38,38,38,38,38,38,38,34,38,38,38,38,38,38,38,38,38,38,38,38,34,34,38,38,38,38,34,38,38,34,38,38,38,38,34,0,38,38,38,38,38,38,38,38,38,38,38,34,13,10,10,24,30,18,18,30,30,30,29,29,38,38,38,38,38,38,6,39,38,38,4,5,38,38,38,38,4,38,38,18,38,34,34,34,0,0,34,38,38,34,0,38,34,34,34,34,0,34,38,38,38,38,38,38,38,38,34,34,34,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,26,38,38,32,18,18,30,30,18,18,29,34,17,18,34,34,34,34,34,29,17,17,17,17,30,30,30,30,34,34,34,34,34,34,23,39,39,39,34,14,14,29,39,31,30,17,30,38,38,38,38,38,38,38,17,14,34,34,0,0,38,1,4,38,30,30,30,30,30,30,39,39,38,38,38,38,21,34,29,0,34,38,30,30,17,17,17,17,29,39,39,15,38,38,38,38,38,0,38,38,23,0,0,6,6,7,7,7,7,1,1,1,1,6,6,4,4,4,0,4,1,34,39,29,38,38,38,29,29,29,29,17,17,38,38,38,38,0,38,29,0,38,38,0,29,14,34,30,30,34,14,14,39,39,38,34,34,39,39,39,1,2,3,4,5,6,7,8,9,7,7,7,1,1,2,2,9,2,38,34,38,21,28,28,29,17,38,29,28,29,29,33,28,29,29,29,29,20,38,39,38,30,17,30,30,29,1,9,6,6,30,30,30,30,30,30,29,0,16,13,13,38,17,17,38,18,17,17,17,17,17,17,17,29,4,4,4,5,39,39,39,39,39,39,32,32,32,29,29,30,29,29,29,34,29,38,15,15,18,15,15,34,34,18,34,34,17,17,17,30,17,30,30,30,17,39,30,30,30,30,18,38,38,38,38,38,18,17,38,31,31,23,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,6,6,0,23,23,23,23,23,25,25,25,25,39,0,14,14,30,18,18,37,35,37,0,36,35,36,36,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,34,38,34,38,30,30,30,30,34,34,34,34,38,27,38,38,27,32,29,39,39,29,29,38,20,20,38,38,38,38,38,38,29,29,29,38,38,38,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,39,39,17,34,17,34,29,34,34,23,1,39,39,38,38,6,38,38,1,9,9,9,38,38,30,30,39,39,38,38,38,4,38,39,6,29,30,17,17,30,34,34,30,34,34,34,34,38,34,34,34,34,0,0,38,38,29,0,30,30,29,38,0,38,38,28,34,31,34,34,34,34,18,18,34,34,34,34,34,34,17,17,30,34,38,38,38,38,24,24,24,17,34,16,29,39,29,39,38,39,24,24,38,38,38,0,17,17,17,34,38,38,38,38,38,29,39,28,34,17,39,18,34,34,34,34,34,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,38,29,38,31,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,34,34,34,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,34,38,38,38,34,34,30,30,38,30,30,30,30,30,34,38,38,34,38,38,30,30,30,30,30,30,38,38,34,38,38,38,17,30,34,17,17,38,9,39,39,30,14,38,38,38,30,30,30,34,14,14,34,38,38,34,38,17,39,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,38,38,38,38,38,38,38,38,39,39,38,38,38,6,4,38,38,18,29,34,34,34,34,34,18,29,34,34,34,34,13,22,38,24,24,24,24,24,24,24,39,39,39,39,39,39,38,24,24,24,34,29,29,10,10,6,7,1,1,38,34,34,17,34,38,38,38,38,38,14,30,30,17,17,30,30,30,30,29,38,29,16,16,34,34,34,34,6,33,33,30,30,0,30,18,31,30,30,30,30,30,30,30,30,27,38,38,38,17,29,29,1,28,40,40,40,1,2,3,4,5,6,7,8,9,10,40,40,40,40,40,40,40,40,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,40,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,40,40,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,40,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,40,40,40,40,40,40,40,1,2,3,4,5,6,7,8,9,10,40,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,40,40,40,40,40,40,1,2,3,4,5,6,7,8,9,10,40,40,40,40,40,40,40,40,40,40,40,40,40,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,40,40,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,40,40,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,40,40,40,40,40,40,40,40,1,2,3,4,5,6,7,8,9,10,40,40,40,40,40,40,23,23,23,23,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,1,2,3,4,5,6,7,8,9,10,40,40,40,40,40,40,40,40,40,40,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,40,40,40,40,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,1,2,3,4,5,6,7,8,9,10,40,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,1,2,3,4,5,6,7,8,9,10,40,40,40,40,40,40,40,40,40,40,40],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],10],0,0,0,0,0,0,0,0,[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[7,7],11],[[8,8],11],[[9,9],11],[[10,10],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[7,7],11],[[8,8],11],[[9,9],11],[[10,10],11],[1,12],[2,12],[3,12],[4,12],[5,12],[6,12],[7,12],[8,12],[9,12],[10,12],0,[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[7,7],11],[[8,8],11],[[9,9],11],[[10,10],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],0,[[1,1],41],[[2,2],41],[[3,3],41],[[4,4],41],[[5,5],41],[[6,6],41],[[7,7],41],[[8,8],41],[[9,9],41],[[10,10],41],[[13,13],41],[[14,14],41],[[15,15],41],[[16,16],41],[[17,17],41],[[18,18],41],[[19,19],41],[[20,20],41],[[21,21],41],[[22,22],41],[[23,23],41],[[24,24],41],[[25,25],41],[[26,26],41],[[27,27],41],[[28,28],41],[[29,29],41],[[30,30],41],[[31,31],41],[[32,32],41],[[33,33],41],[[34,34],41],[[35,35],41],[[36,36],41],[[37,37],41],[[38,38],41],[[39,39],41],[[40,40],41],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[[1,1],42],[[2,2],42],[[3,3],42],[[4,4],42],[[5,5],42],[[6,6],42],[[7,7],42],[[8,8],42],[[9,9],42],[[10,10],42],0,0,0,0,0,0,0,[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],0,[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],10],[[1,1],42],[[2,2],42],[[3,3],42],[[4,4],42],[[5,5],42],[[6,6],42],[[7,7],42],[[8,8],42],[[9,9],42],[[10,10],42],[[13,13],42],[[14,14],42],[[15,15],42],[[16,16],42],[[17,17],42],[[18,18],42],[[19,19],42],[[20,20],42],[[21,21],42],[[22,22],42],[[23,23],42],[[24,24],42],[[25,25],42],[[26,26],42],[[27,27],42],[[28,28],42],[[29,29],42],[[30,30],42],[[31,31],42],[[32,32],42],[[33,33],42],[[34,34],42],[[35,35],42],[[36,36],42],[[37,37],42],[[38,38],42],[[39,39],42],[[40,40],42],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],0,0,0,0,0,0,[[1,-1],11,43],[[2,-1],11,43],[[3,-1],11,43],[[4,-1],11,43],[[5,-1],11,43],[[6,-1],11,43],[[7,-1],11,43],[[8,-1],11,43],[[9,-1],11,43],[[10,-1],11,43],0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,44],45],[[1,44],45],[[1,44],45],[[1,44],45],[[1,44],45],[[2,44],45],[[2,44],45],[[2,44],45],[[2,44],45],[[2,44],45],[[3,44],45],[[3,44],45],[[3,44],45],[[3,44],45],[[3,44],45],[[4,44],45],[[4,44],45],[[4,44],45],[[4,44],45],[[4,44],45],[[5,44],45],[[5,44],45],[[5,44],45],[[5,44],45],[[5,44],45],[[6,44],45],[[6,44],45],[[6,44],45],[[6,44],45],[[6,44],45],[[7,44],45],[[7,44],45],[[7,44],45],[[7,44],45],[[7,44],45],[[8,44],45],[[8,44],45],[[8,44],45],[[8,44],45],[[8,44],45],[[9,44],45],[[9,44],45],[[9,44],45],[[9,44],45],[[9,44],45],[[10,44],45],[[10,44],45],[[10,44],45],[[10,44],45],[[10,44],45],[[13,44],45],[[14,44],45],[[15,44],45],[[16,44],45],[[17,44],45],[[18,44],45],[[19,44],45],[[20,44],45],[[21,44],45],[[22,44],45],[[23,44],45],[[24,44],45],[[25,44],45],[[26,44],45],[[27,44],45],[[28,44],45],[[29,44],45],[[30,44],45],[[31,44],45],[[32,44],45],[[33,44],45],[[34,44],45],[[35,44],45],[[36,44],45],[[37,44],45],[[38,44],45],[[39,44],45],[[40,44],45],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[12,[[46,[1]]]],[12,[[46,[2]]]],[12,[[46,[3]]]],[12,[[46,[4]]]],[12,[[46,[5]]]],[12,[[46,[6]]]],[12,[[46,[7]]]],[12,[[46,[8]]]],[12,[[46,[9]]]],[12,[[46,[10]]]],[12,1],[12,2],[12,3],[12,4],[12,5],[12,6],[12,7],[12,8],[12,9],[12,10],[12,1],[12,2],[12,3],[12,4],[12,5],[12,6],[12,7],[12,8],[12,9],[12,10],[47,[[46,[13]]]],[47,[[46,[14]]]],[47,[[46,[15]]]],[47,[[46,[16]]]],[47,[[46,[17]]]],[47,[[46,[18]]]],[47,[[46,[19]]]],[47,[[46,[20]]]],[47,[[46,[21]]]],[47,[[46,[22]]]],[47,[[46,[23]]]],[47,[[46,[24]]]],[47,[[46,[25]]]],[47,[[46,[26]]]],[47,[[46,[27]]]],[47,[[46,[28]]]],[47,[[46,[29]]]],[47,[[46,[30]]]],[47,[[46,[31]]]],[47,[[46,[32]]]],[47,[[46,[33]]]],[47,[[46,[34]]]],[47,[[46,[35]]]],[47,[[46,[36]]]],[47,[[46,[37]]]],[47,[[46,[38]]]],[47,[[46,[39]]]],[47,[[46,[40]]]],[-1,1,43],[-1,2,43],[-1,3,43],[-1,4,43],[-1,5,43],[-1,6,43],[-1,7,43],[-1,8,43],[-1,9,43],[-1,10,43],[48,[[49,[13]]]],[48,[[49,[14]]]],[48,[[49,[15]]]],[48,[[49,[16]]]],[48,[[49,[17]]]],[48,[[49,[18]]]],[48,[[49,[19]]]],[48,[[49,[20]]]],[48,[[49,[21]]]],[48,[[49,[22]]]],[48,[[49,[23]]]],[48,[[49,[24]]]],[48,[[49,[25]]]],[48,[[49,[26]]]],[48,[[49,[27]]]],[48,[[49,[28]]]],[48,[[49,[29]]]],[48,[[49,[30]]]],[48,[[49,[31]]]],[48,[[49,[32]]]],[48,[[49,[33]]]],[48,[[49,[34]]]],[48,[[49,[35]]]],[48,[[49,[36]]]],[48,[[49,[37]]]],[50,[[46,[13]]]],[50,[[46,[14]]]],[50,[[46,[15]]]],[50,[[46,[16]]]],[50,[[46,[17]]]],[50,[[46,[18]]]],[50,[[46,[19]]]],[50,[[46,[20]]]],[50,[[46,[21]]]],[50,[[46,[22]]]],[50,[[46,[23]]]],[50,[[46,[24]]]],[50,[[46,[25]]]],[50,[[46,[26]]]],[50,[[46,[27]]]],[50,[[46,[28]]]],[50,[[46,[29]]]],[50,[[46,[30]]]],[50,[[46,[31]]]],[50,[[46,[32]]]],[50,[[46,[33]]]],[50,[[46,[34]]]],[50,[[46,[35]]]],[50,[[46,[36]]]],[50,[[46,[37]]]],[50,[[46,[38]]]],[50,[[46,[39]]]],[50,[[46,[40]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,-1],11,51],[[2,-1],11,51],[[3,-1],11,51],[[4,-1],11,51],[[5,-1],11,51],[[6,-1],11,51],[[7,-1],11,51],[[8,-1],11,51],[[9,-1],11,51],[[10,-1],11,51],[[13,-1],11,51],[[14,-1],11,51],[[15,-1],11,51],[[16,-1],11,51],[[17,-1],11,51],[[18,-1],11,51],[[19,-1],11,51],[[20,-1],11,51],[[21,-1],11,51],[[22,-1],11,51],[[23,-1],11,51],[[24,-1],11,51],[[25,-1],11,51],[[26,-1],11,51],[[27,-1],11,51],[[28,-1],11,51],[[29,-1],11,51],[[30,-1],11,51],[[31,-1],11,51],[[32,-1],11,51],[[33,-1],11,51],[[34,-1],11,51],[[35,-1],11,51],[[36,-1],11,51],[[37,-1],11,51],[[38,-1],11,51],[[39,-1],11,51],[[40,-1],11,51],0,0,[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[7,7],11],[[8,8],11],[[9,9],11],[[10,10],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[1,1],42],[[2,2],42],[[3,3],42],[[4,4],42],[[5,5],42],[[6,6],42],[[7,7],42],[[8,8],42],[[9,9],42],[[10,10],42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,42],[2,42],[3,42],[4,42],[5,42],[6,42],[7,42],[8,42],[9,42],[10,42],[1,42],[2,42],[3,42],[4,42],[5,42],[6,42],[7,42],[8,42],[9,42],[10,42],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[[1,1],[[46,[41]]]],[[2,2],[[46,[41]]]],[[3,3],[[46,[41]]]],[[4,4],[[46,[41]]]],[[5,5],[[46,[41]]]],[[6,6],[[46,[41]]]],[[7,7],[[46,[41]]]],[[8,8],[[46,[41]]]],[[9,9],[[46,[41]]]],[[10,10],[[46,[41]]]],[[13,13],[[46,[41]]]],[[14,14],[[46,[41]]]],[[15,15],[[46,[41]]]],[[16,16],[[46,[41]]]],[[17,17],[[46,[41]]]],[[18,18],[[46,[41]]]],[[19,19],[[46,[41]]]],[[20,20],[[46,[41]]]],[[21,21],[[46,[41]]]],[[22,22],[[46,[41]]]],[[23,23],[[46,[41]]]],[[24,24],[[46,[41]]]],[[25,25],[[46,[41]]]],[[26,26],[[46,[41]]]],[[27,27],[[46,[41]]]],[[28,28],[[46,[41]]]],[[29,29],[[46,[41]]]],[[30,30],[[46,[41]]]],[[31,31],[[46,[41]]]],[[32,32],[[46,[41]]]],[[33,33],[[46,[41]]]],[[34,34],[[46,[41]]]],[[35,35],[[46,[41]]]],[[36,36],[[46,[41]]]],[[37,37],[[46,[41]]]],[[38,38],[[46,[41]]]],[[39,39],[[46,[41]]]],[[40,40],[[46,[41]]]],0,0,0,0,0,0,0,0,[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[7,7],11],[[8,8],11],[[9,9],11],[[10,10],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1,42],11],[[2,2,42],11],[[3,3,42],11],[[4,4,42],11],[[5,5,42],11],[[6,6,42],11],[[7,7,42],11],[[8,8,42],11],[[9,9,42],11],[[10,10,42],11],0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[7,7],11],[[8,8],11],[[9,9],11],[[10,10],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[7,7],11],[[8,8],11],[[9,9],11],[[10,10],11],0,[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"ImageOperands",0],[3,"FPFastMathMode",0],[3,"SelectionControl",0],[3,"LoopControl",0],[3,"FunctionControl",0],[3,"MemorySemantics",0],[3,"MemoryAccess",0],[3,"KernelProfilingInfo",0],[3,"RayFlags",0],[3,"FragmentShadingRate",0],[15,"tuple"],[15,"u32"],[4,"SourceLanguage",0],[4,"ExecutionModel",0],[4,"AddressingModel",0],[4,"MemoryModel",0],[4,"ExecutionMode",0],[4,"StorageClass",0],[4,"Dim",0],[4,"SamplerAddressingMode",0],[4,"SamplerFilterMode",0],[4,"ImageFormat",0],[4,"ImageChannelOrder",0],[4,"ImageChannelDataType",0],[4,"FPRoundingMode",0],[4,"LinkageType",0],[4,"AccessQualifier",0],[4,"FunctionParameterAttribute",0],[4,"Decoration",0],[4,"BuiltIn",0],[4,"Scope",0],[4,"GroupOperation",0],[4,"KernelEnqueueFlags",0],[4,"Capability",0],[4,"RayQueryIntersection",0],[4,"RayQueryCommittedIntersectionType",0],[4,"RayQueryCandidateIntersectionType",0],[4,"Op",0],[4,"GLOp",0],[4,"CLOp",0],[4,"Ordering",2612],[15,"bool"],[8,"IntoIterator",2613],[3,"Formatter",2614],[6,"Result",2614],[4,"Option",2615],[15,"i64"],[15,"str"],[4,"Result",2616],[15,"u64"],[8,"Hasher",2617],[3,"TypeId",2618]]},\
"spirv_builder":{"doc":"<code>spirv-builder</code>","t":"NNNNNNNENDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSNSNNNNNNNNNNNNNNNENENNNNNNNNNNSNNNNNNNNNNNSNNNNNNNNSNNNNNSENNNNSNSNNNNDEENNNNNSNNSNNNNNNNNSNSSSNNNNNNNNNNNNNNNNNNSNSNSNNNNNNSSNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLMLMLMLLMLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMM","n":["Addresses","AtomicFloat32AddEXT","AtomicFloat64AddEXT","AtomicStorage","AtomicStorageOps","BlockingPipesINTEL","BuildFailed","Capability","ClipDistance","CompileResult","ComputeDerivativeGroupLinearNV","ComputeDerivativeGroupQuadsNV","CooperativeMatrixNV","CratePathDoesntExist","CullDistance","DebugPrintfThenExit","DemoteToHelperInvocationEXT","DenormFlushToZero","DenormPreserve","DependencyOnly","DerivativeControl","DeviceEnqueue","DeviceGroup","DrawParameters","FPGAKernelAttributesINTEL","FPGALoopControlsINTEL","FPGAMemoryAttributesINTEL","FPGARegINTEL","Float16","Float16Buffer","Float16ImageAMD","Float64","FragmentBarycentricNV","FragmentDensityEXT","FragmentFullyCoveredEXT","FragmentMaskAMD","FragmentShaderPixelInterlockEXT","FragmentShaderSampleInterlockEXT","FragmentShaderShadingRateInterlockEXT","FragmentShadingRateKHR","Full","Full","FunctionPointersINTEL","GenericPointer","Geometry","GeometryPointSize","GeometryShaderPassthroughNV","GeometryStreams","GroupNonUniform","GroupNonUniformArithmetic","GroupNonUniformBallot","GroupNonUniformClustered","GroupNonUniformPartitionedNV","GroupNonUniformQuad","GroupNonUniformShuffle","GroupNonUniformShuffleRelative","GroupNonUniformVote","Groups","Image1D","ImageBasic","ImageBuffer","ImageCubeArray","ImageFootprintNV","ImageGatherBiasLodAMD","ImageGatherExtended","ImageMSArray","ImageMipmap","ImageQuery","ImageReadWrite","ImageReadWriteLodAMD","ImageRect","IndirectReferencesINTEL","InputAttachment","InputAttachmentArrayDynamicIndexing","InputAttachmentArrayDynamicIndexingEXT","InputAttachmentArrayNonUniformIndexing","InputAttachmentArrayNonUniformIndexingEXT","Int16","Int64","Int64Atomics","Int64ImageEXT","Int8","IntegerFunctions2INTEL","InterpolationFunction","Kernel","KernelAttributesINTEL","Linkage","LiteralSampler","Matrix","MeshShadingNV","MetadataFileMalformed","MetadataFileMissing","MetadataPrintout","MinLod","ModuleResult","MultiModule","MultiModuleWithPrintMetadata","MultiView","MultiViewport","NameVariables","NamedBarrier","None","None","PerViewAttributesNV","PhysicalStorageBufferAddresses","PhysicalStorageBufferAddressesEXT","PipeStorage","Pipes","RayQueryKHR","RayQueryProvisionalKHR","RayTracingKHR","RayTracingNV","RayTracingProvisionalKHR","RayTraversalPrimitiveCullingKHR","RoundingModeRTE","RoundingModeRTZ","RuntimeDescriptorArray","RuntimeDescriptorArrayEXT","SampleMaskOverrideCoverageNV","SampleMaskPostDepthCoverage","SampleRateShading","Sampled1D","SampledBuffer","SampledCubeArray","SampledImageArrayDynamicIndexing","SampledImageArrayNonUniformIndexing","SampledImageArrayNonUniformIndexingEXT","SampledRect","Shader","ShaderClockKHR","ShaderLayer","ShaderNonUniform","ShaderNonUniformEXT","ShaderPanicStrategy","ShaderSMBuiltinsNV","ShaderStereoViewNV","ShaderViewportIndex","ShaderViewportIndexLayerEXT","ShaderViewportIndexLayerNV","ShaderViewportMaskNV","ShadingRateNV","SignedZeroInfNanPreserve","SilentExit","SingleModule","SparseResidency","SpirvBuilder","SpirvBuilderError","SpirvMetadata","StencilExportEXT","StorageBuffer16BitAccess","StorageBuffer8BitAccess","StorageBufferArrayDynamicIndexing","StorageBufferArrayNonUniformIndexing","StorageBufferArrayNonUniformIndexingEXT","StorageImageArrayDynamicIndexing","StorageImageArrayNonUniformIndexing","StorageImageArrayNonUniformIndexingEXT","StorageImageExtendedFormats","StorageImageMultisample","StorageImageReadWithoutFormat","StorageImageWriteWithoutFormat","StorageInputOutput16","StoragePushConstant16","StoragePushConstant8","StorageTexelBufferArrayDynamicIndexing","StorageTexelBufferArrayDynamicIndexingEXT","StorageTexelBufferArrayNonUniformIndexing","StorageTexelBufferArrayNonUniformIndexingEXT","StorageUniform16","StorageUniformBufferBlock16","SubgroupAvcMotionEstimationChromaINTEL","SubgroupAvcMotionEstimationINTEL","SubgroupAvcMotionEstimationIntraINTEL","SubgroupBallotKHR","SubgroupBufferBlockIOINTEL","SubgroupDispatch","SubgroupImageBlockIOINTEL","SubgroupImageMediaBlockIOINTEL","SubgroupShuffleINTEL","SubgroupVoteKHR","Tessellation","TessellationPointSize","TransformFeedback","UNSOUND_DO_NOT_USE_UndefinedBehaviorViaUnreachable","UniformAndStorageBuffer16BitAccess","UniformAndStorageBuffer8BitAccess","UniformBufferArrayDynamicIndexing","UniformBufferArrayNonUniformIndexing","UniformBufferArrayNonUniformIndexingEXT","UniformTexelBufferArrayDynamicIndexing","UniformTexelBufferArrayDynamicIndexingEXT","UniformTexelBufferArrayNonUniformIndexing","UniformTexelBufferArrayNonUniformIndexingEXT","UnstructuredLoopControlsINTEL","VariablePointers","VariablePointersStorageBuffer","Vector16","VulkanMemoryModel","VulkanMemoryModelDeviceScope","VulkanMemoryModelDeviceScopeKHR","VulkanMemoryModelKHR","WatchWithPrintMetadata","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","capability","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","codegen_entry_point_strings","deny_warnings","deserialize","deserialize","entry_points","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","extension","extra_arg","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_i64","from_str","from_u64","hash","into","into","into","into","into","into","into","into","module","multimodule","new","partial_cmp","preserve_bindings","preserve_bindings","print_metadata","relax_block_layout","relax_block_layout","relax_logical_pointer","relax_logical_pointer","relax_struct_store","relax_struct_store","release","scalar_block_layout","scalar_block_layout","serialize","serialize","shader_panic_strategy","shader_panic_strategy","skip_block_layout","skip_block_layout","spirv_metadata","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform_buffer_standard_layout","uniform_buffer_standard_layout","unwrap_multi","unwrap_single","print_backtrace","print_inputs"],"q":[[0,"spirv_builder"],[328,"spirv_builder::ShaderPanicStrategy"],[330,"core::result"],[331,"core::cmp"],[332,"alloc::string"],[333,"serde::de"],[334,"core::convert"],[335,"core::fmt"],[336,"core::fmt"],[337,"core::hash"],[338,"std::path"],[339,"core::convert"],[340,"core::any"],[341,"std::path"],[342,"alloc::collections::btree::map"]],"d":["","","","","","","","/// SPIR-V operand kind: Capability","","","","","","","","Like <code>SilentExit</code>, but also using <code>debugPrintf</code> to report the …","","","","Print only dependency information (eg for multiple …","","","","","","","","","","","","","","","","","","","","","Print all cargo metadata.","Include all OpNames for everything, and OpLines. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Only include OpNames for public interface variables …","","Print no cargo metadata.","Strip all names and other debug information from SPIR-V …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Strategy used to handle Rust <code>panic!</code>s in shaders compiled …","","","","","","","","","Return from shader entry-point with no side-effects …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<strong>Warning</strong>: this is <em><strong>unsound</strong></em> (i.e. adds Undefined Behavior to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds the module. If <code>print_metadata</code> is …","Adds a capability to the SPIR-V module. Checking if a …","","","","","","","","","","","","","","","","","","","","","","","Adds an extension to the SPIR-V module. Checking if an …","Set additional “codegen arg”. Note: the …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Splits the resulting SPIR-V file into one module per entry …","","","Preserve unused descriptor bindings. Useful for reflection.","","Whether to print build.rs cargo metadata (e.g. …","Enable <code>VK_KHR_relaxed_block_layout</code> when checking standard …","","Allow allocating an object of a pointer type and returning …","","Allow store from one struct type to a different type with …","","Build in release. Defaults to true.","Enable <code>VK_EXT_scalar_block_layout</code> when checking standard …","","","","Change the shader <code>panic!</code> handling strategy (see …","","Skip checking standard uniform/storage buffer layout. …","","Sets the level of metadata (primarily <code>OpName</code> and <code>OpLine</code>) …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable <code>VK_KHR_uniform_buffer_standard_layout</code> when checking …","","","","Whether to also print a “backtrace” (i.e. the chain of …","Whether to also print the entry-point inputs (excluding …"],"i":[5,5,5,5,5,5,3,0,5,0,5,5,5,3,5,8,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,0,5,0,13,3,5,5,7,5,6,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,8,13,5,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,13,2,1,3,6,7,8,5,13,2,1,3,6,7,8,5,1,1,6,7,8,5,6,7,8,5,5,2,1,13,2,2,6,7,8,5,6,7,8,5,1,1,13,2,3,3,6,7,8,5,13,2,1,3,6,7,8,5,5,5,5,5,13,2,1,3,6,7,8,5,2,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,13,2,1,1,1,1,1,6,7,8,5,3,13,2,1,3,6,7,8,5,13,2,1,3,6,7,8,5,13,2,1,3,6,7,8,5,1,1,13,13,31,31],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[4,[2,3]]]],[[1,5],1],[6,6],[7,7],[8,8],[5,5],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[5,5],10],[2,11],[[1,12],1],[-1,[[4,[13]]],14],[-1,[[4,[2]]],14],0,[[6,6],12],[[7,7],12],[[8,8],12],[[5,5],12],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[1,-1],1,[[15,[11]]]],[[1,-1],1,[[15,[11]]]],[[13,16],[[4,[9,17]]]],[[2,16],[[4,[9,17]]]],[[3,16],18],[[3,16],18],[[6,16],18],[[7,16],18],[[8,16],18],[[5,16],[[4,[9,17]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[19,[[20,[5]]]],[21,[[4,[5]]]],[22,[[20,[5]]]],[[5,-1],9,23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[1,12],1],[[-1,-2],1,[[25,[24]]],[[15,[11]]]],[[5,5],[[20,[10]]]],[[1,12],1],0,[[1,6],1],[[1,12],1],0,[[1,12],1],0,[[1,12],1],0,[[1,12],1],[[1,12],1],0,[[13,-1],4,26],[[2,-1],4,26],[[1,8],1],0,[[1,12],1],0,[[1,7],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,11,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[1,12],1],0,[13,[[30,[11,28,29]]]],[13,24],0,0],"c":[],"p":[[3,"SpirvBuilder",0],[3,"CompileResult",0],[4,"SpirvBuilderError",0],[4,"Result",330],[4,"Capability",0],[4,"MetadataPrintout",0],[4,"SpirvMetadata",0],[4,"ShaderPanicStrategy",0],[15,"tuple"],[4,"Ordering",331],[3,"String",332],[15,"bool"],[4,"ModuleResult",0],[8,"Deserializer",333],[8,"Into",334],[3,"Formatter",335],[3,"Error",335],[6,"Result",335],[15,"i64"],[4,"Option",336],[15,"str"],[15,"u64"],[8,"Hasher",337],[3,"Path",338],[8,"AsRef",334],[8,"Serializer",339],[3,"TypeId",340],[3,"PathBuf",338],[3,"Global",341],[3,"BTreeMap",342],[13,"DebugPrintfThenExit",328]]},\
"spirv_std":{"doc":"<code>spirv-std</code>","t":"CODDALLLLALLALLCALLALLBACAOAAXLLLLLLLAIFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFKKFFFFFFFFFFFFFDLLMLLLLLLLLLLISFFFFFFFFFFFFEENNGENNNIIIIDOGGGGGGGGGGGGGGGGGGIIEEIENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQIEDGGGGGGGGGNNNNNNNNNQQQNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLAKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSDIDDFLMLLLLLLLLLFLMLLLFLMFLMLLLLLLLLLISIISSSSSNNSNSSSSNSSSEDNSSSNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLINDSSSSEENSSNSDDSSSSNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIK","n":["ByteAddressableBuffer","Image","RuntimeArray","Sampler","arch","borrow","borrow","borrow_mut","borrow_mut","byte_addressable_buffer","clone","clone_into","float","from","from","glam","image","index","index_mut","integer","into","into","macros","memory","num_traits","number","ray_query","ray_tracing","scalar","spirv","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vector","IndexUnchecked","all","all_memory_barrier","all_memory_barrier_with_group_sync","any","atomic_and","atomic_compare_exchange","atomic_exchange","atomic_f_add","atomic_f_max","atomic_f_min","atomic_i_add","atomic_i_decrement","atomic_i_increment","atomic_i_sub","atomic_load","atomic_or","atomic_s_max","atomic_s_min","atomic_store","atomic_u_max","atomic_u_min","atomic_xor","control_barrier","ddx","ddx_coarse","ddx_coarse_vector","ddx_fine","ddx_fine_vector","ddx_vector","ddy","ddy_coarse","ddy_coarse_vector","ddy_fine","ddy_fine_vector","ddy_vector","demote_to_helper_invocation","device_memory_barrier","device_memory_barrier_with_group_sync","emit_stream_vertex","emit_vertex","end_primitive","end_stream_primitive","execute_callable","fwidth","fwidth_coarse","fwidth_coarse_vector","fwidth_fine","fwidth_fine_vector","fwidth_vector","ignore_intersection","index_unchecked","index_unchecked_mut","is_helper_invocation","kill","memory_barrier","report_intersection","signed_max","signed_min","terminate_ray","unsigned_max","unsigned_min","vector_extract_dynamic","vector_insert_dynamic","workgroup_memory_barrier","workgroup_memory_barrier_with_group_sync","ByteAddressableBuffer","borrow","borrow_mut","data","from","into","load","load_unchecked","new","store","store_unchecked","try_from","try_into","type_id","Float","WIDTH","f16_to_f32","f16x2_to_vec2","f32_to_f16","u16x2_to_vec2_snorm","u16x2_to_vec2_unorm","u8x4_to_vec4_snorm","u8x4_to_vec4_unorm","vec2_to_f16x2","vec2_to_u16x2_snorm","vec2_to_u16x2_unorm","vec4_to_u8x4_snorm","vec4_to_u8x4_unorm","AccessQualifier","Arrayed","Buffer","Cube","Cubemap","Dimensionality","False","False","False","HasGather","HasQueryLevels","HasQuerySize","HasQuerySizeLod","Image","Image","Image1d","Image1dArray","Image1dI","Image1dIArray","Image1dU","Image1dUArray","Image2d","Image2dArray","Image2dI","Image2dIArray","Image2dU","Image2dUArray","Image3d","Image3dArray","Image3dI","Image3dIArray","Image3dU","Image3dUArray","ImageCoordinate","ImageCoordinateSubpassData","ImageDepth","ImageFormat","ImageWithMethods","Multisampled","No","OneD","R11fG11fB10f","R16","R16Snorm","R16f","R16i","R16ui","R32f","R32i","R32ui","R64i","R64ui","R8","R8Snorm","R8i","R8ui","ReadOnly","ReadWrite","Rect","Rg16","Rg16Snorm","Rg16f","Rg16i","Rg16ui","Rg32f","Rg32i","Rg32ui","Rg8","Rg8Snorm","Rg8i","Rg8ui","Rgb10A2","Rgb10A2ui","Rgba16","Rgba16Snorm","Rgba16f","Rgba16i","Rgba16ui","Rgba32f","Rgba32i","Rgba32ui","Rgba8","Rgba8Snorm","Rgba8i","Rgba8ui","SampleResult","SampleType","Sampled","SampledImage","StorageImage1d","StorageImage1dI","StorageImage1dU","StorageImage2d","StorageImage2dI","StorageImage2dU","StorageImage3d","StorageImage3dI","StorageImage3dU","SubpassData","ThreeD","True","True","True","TwoD","Unknown","Unknown","Unknown","Vec2","Vec3","Vec4","WriteOnly","Yes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fetch","fetch_with","fetch_with","fetch_with","fetch_with","fetch_with","fetch_with","fetch_with","fetch_with","fetch_with","fetch_with","fetch_with","fetch_with","fetch_with","fetch_with","fetch_with","fetch_with","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gather","gather_with","gather_with","gather_with","gather_with","gather_with","gather_with","gather_with","gather_with","gather_with","gather_with","gather_with","gather_with","gather_with","gather_with","gather_with","gather_with","into","into","into","into","into","into","into","into","into","query_levels","query_lod","query_samples","query_size","query_size_lod","read","read","read_subpass","sample","sample","sample_bias","sample_by_gradient","sample_by_lod","sample_by_lod","sample_depth_reference","sample_depth_reference_by_gradient","sample_depth_reference_by_lod","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with","sample_depth_reference_with_project_coordinate","sample_depth_reference_with_project_coordinate_by_gradient","sample_depth_reference_with_project_coordinate_by_lod","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_depth_reference_with_project_coordinate_with","sample_with","sample_with","sample_with","sample_with","sample_with","sample_with","sample_with","sample_with","sample_with","sample_with","sample_with","sample_with","sample_with","sample_with","sample_with","sample_with","sample_with","sample_with_project_coordinate","sample_with_project_coordinate_by_gradient","sample_with_project_coordinate_by_lod","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","sample_with_project_coordinate_with","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","EXISTS","NoneTy","OptionTy","SampleParams","SomeTy","bias","bias","bias","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","grad","grad","grad","into","into","into","lod","lod","lod","sample_index","sample_index","sample_index","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Integer","SIGNED","SignedInteger","UnsignedInteger","WIDTH","ACQUIRE","ACQUIRE_RELEASE","ATOMIC_COUNTER_MEMORY","CROSS_WORKGROUP_MEMORY","CrossDevice","Device","IMAGE_MEMORY","Invocation","MAKE_AVAILABLE","MAKE_VISIBLE","NONE","OUTPUT_MEMORY","QueueFamily","RELEASE","SEQUENTIALLY_CONST","SUBGROUP_MEMORY","Scope","Semantics","Subgroup","UNIFORM_MEMORY","VOLATILE","WORKGROUP_MEMORY","Workgroup","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","difference","empty","eq","eq","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","is_all","is_empty","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","Number","AABB","AccelerationStructure","CULL_BACK_FACING_TRIANGLES","CULL_FRONT_FACING_TRIANGLES","CULL_NO_OPAQUE","CULL_OPAQUE","CandidateIntersection","CommittedIntersection","Generated","NONE","NO_OPAQUE","None","OPAQUE","RayFlags","RayQuery","SKIP_AABBS","SKIP_CLOSEST_HIT_SHADER","SKIP_TRIANGLES","TERMINATE_ON_FIRST_HIT","Triangle","Triangle","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","confirm_intersection","contains","difference","empty","eq","eq","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_u64","from_vec","get_candidate_intersection_barycentrics","get_candidate_intersection_front_face","get_candidate_intersection_geometry_index","get_candidate_intersection_instance_custom_index","get_candidate_intersection_instance_id","get_candidate_intersection_object_ray_direction","get_candidate_intersection_object_ray_origin","get_candidate_intersection_object_to_world","get_candidate_intersection_primitive_index","get_candidate_intersection_shader_binding_table_record_offset","get_candidate_intersection_t","get_candidate_intersection_type","get_committed_intersection_barycentrics","get_committed_intersection_front_face","get_committed_intersection_geometry_index","get_committed_intersection_instance_custom_index","get_committed_intersection_instance_id","get_committed_intersection_object_ray_direction","get_committed_intersection_object_ray_origin","get_committed_intersection_object_to_world","get_committed_intersection_primitive_index","get_committed_intersection_shader_binding_table_record_offset","get_committed_intersection_t","get_committed_intersection_type","get_intersection_candidate_aabb_opaque","get_ray_flags","get_ray_t_min","get_world_ray_direction","get_world_ray_origin","hash","hash","hash","initialize","insert","intersection","intersects","into","into","into","into","into","is_all","is_empty","not","partial_cmp","partial_cmp","partial_cmp","proceed","remove","set","sub","sub_assign","symmetric_difference","terminate","to_owned","to_owned","to_owned","to_owned","toggle","trace_ray","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","Scalar","Vector","VectorTruncateInto","truncate_into"],"q":[[0,"spirv_std"],[38,"spirv_std::arch"],[104,"spirv_std::byte_addressable_buffer"],[118,"spirv_std::float"],[132,"spirv_std::image"],[475,"spirv_std::image::sample_with"],[513,"spirv_std::integer"],[518,"spirv_std::memory"],[601,"spirv_std::number"],[602,"spirv_std::ray_tracing"],[756,"spirv_std::scalar"],[757,"spirv_std::vector"],[760,"core::result"],[761,"core::any"],[762,"core::clone"],[763,"core::option"],[764,"core::default"],[765,"core::cmp"],[766,"core::iter::traits::collect"],[767,"core::fmt"],[768,"core::fmt"]],"d":["","A macro for creating SPIR-V <code>OpTypeImage</code> types. Always …","Dynamically-sized arrays in Rust carry around their length …","An opaque reference to settings that describe how to …","SPIR-V Instrinics","","","","","Container for an untyped blob of data.","","","Traits and helper functions related to floats.","Returns the argument unchanged.","Returns the argument unchanged.","","Image types","Index the array. Unfortunately, because the length of the …","Index the array, returning a mutable reference to an …","Traits related to integers.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Public re-export of the <code>spirv-std-macros</code> crate.","Types for handling memory ordering constraints for …","","Traits and helper functions related to numbers.","Constructs an uninitialized ray query variable. Using the …","Ray-tracing data types","Traits related to scalars.","Replaces all (nested) occurrences of the <code>#[spirv(..)]</code> …","","","","","","","","Traits related to vectors.","Index into an array without bounds checking.","Result is true if all components of <code>vector</code> is true, …","Blocks execution of all threads in a group until all …","Blocks execution of all threads in a group until all …","Result is true if any component of <code>vector</code> is true, …","Perform the following steps atomically with respect to any …","Perform the following steps atomically with respect to any …","Perform the following steps atomically with respect to any …","Perform the following steps atomically with respect to any …","Perform the following steps atomically with respect to any …","Perform the following steps atomically with respect to any …","Perform the following steps atomically with respect to any …","Perform the following steps atomically with respect to any …","Perform the following steps atomically with respect to any …","Perform the following steps atomically with respect to any …","Atomically load through <code>ptr</code> using the given <code>SEMANTICS</code>. All …","Perform the following steps atomically with respect to any …","Perform the following steps atomically with respect to any …","Perform the following steps atomically with respect to any …","Atomically store through <code>ptr</code> using the given <code>SEMANTICS</code>. …","Perform the following steps atomically with respect to any …","Perform the following steps atomically with respect to any …","Perform the following steps atomically with respect to any …","Wait for other invocations of this module to reach the …","Returns the partial derivative of <code>component</code> with respect …","Returns the partial derivative of <code>component</code> with respect …","Returns the partial derivative of <code>component</code> with respect …","Returns the partial derivative of <code>component</code> with respect …","Returns the partial derivative of <code>component</code> with respect …","Returns the partial derivative of <code>component</code> with respect …","Returns the partial derivative of <code>component</code> with respect …","Returns the partial derivative of <code>component</code> with respect …","Returns the partial derivative of <code>component</code> with respect …","Returns the partial derivative of <code>component</code> with respect …","Returns the partial derivative of <code>component</code> with respect …","Returns the partial derivative of <code>component</code> with respect …","Demote fragment shader invocation to a helper invocation. …","Blocks execution of all threads in a group until all …","Blocks execution of all threads in a group until all …","Emits the current values of all output variables to the …","Emits the current values of all output variables to the …","Finish the current primitive and start a new one. No …","Finish the current primitive and start a new one. No …","Invoke a callable shader.","Returns the sum of the absolute values of <code>ddx</code> and <code>ddy</code> as a …","Returns the sum of the absolute values of <code>ddx_coarse</code> and …","Returns the sum of the absolute values of <code>ddx_coarse</code> and …","Returns the sum of the absolute values of <code>ddx_fine</code> and …","Returns the sum of the absolute values of <code>ddx_fine</code> and …","Returns the sum of the absolute values of <code>ddx</code> and <code>ddy</code> as a …","Ignores the current potential intersection, terminating …","Returns a reference to the element at <code>index</code>. The …","Returns a mutable reference to the element at <code>index</code>. The …","Returns <code>true</code> if the invocation is currently a helper …","Fragment-shader discard. Equivalvent to <code>discard()</code> from GLSL","Control the order that memory accesses are observed.","Reports an intersection back to the traversal …","Compute the maximum of two signed integers via a GLSL …","Compute the minimum of two signed integers via a GLSL …","Terminates the invocation that executes it, stops the ray …","Compute the maximum of two unsigned integers via a GLSL …","Compute the minimum of two unsigned integers via a GLSL …","Extract a single, dynamically selected, component of a …","Make a copy of a vector, with a single, variably selected, …","Blocks execution of all threads in a group until all group …","Blocks execution of all threads in a group until all group …","<code>ByteAddressableBuffer</code> is an untyped blob of data, allowing …","","","The underlying array of bytes, able to be directly …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Loads an arbitrary type from the buffer. <code>byte_index</code> must …","Loads an arbitrary type from the buffer. <code>byte_index</code> must …","Creates a <code>ByteAddressableBuffer</code> from the untyped blob of …","Stores an arbitrary type int the buffer. <code>byte_index</code> must …","Stores an arbitrary type int the buffer. <code>byte_index</code> must …","","","","Abstract trait representing a SPIR-V floating point type.","Width of the float, in bits.","Converts an f16 (half) into an f32 (float). The parameter …","Converts two f16 values (halfs) into two f32 values …","Converts an f32 (float) into an f16 (half). The result is …","Unpacks 2 16-bit signed integers into a vec2. See …","Unpacks 2 16-bit unsigned integers into a vec2. See …","Unpacks 4 8-bit signed integers into a vec4. See …","Unpacks 4 8-bit unsigned integers into a vec4. See …","Converts two f32 values (floats) into two f16 values …","Packs a vec2 into 2 16-bit signed integers. See …","Packs a vec2 into 2 16-bit unsigned integers. See …","Packs a vec4 into 4 8-bit signed integers. See PackSnorm4x8…","Packs a vec4 into 4 8-bit unsigned integers. See …","The access permissions for the image.","Whether the image uses arrayed content.","1D Buffer texture","2D Cubemap texture","A cubemap, i.e. a cube of 6 textures, sampled using a …","The dimension of the image.","The image uses not arrayed content.","Indicates that the image does not contain depth …","The image contains single-sampled content.","This is a marker trait to represent the constraints on …","This is a marker trait to represent the constraints on …","This is a marker trait to represent the constraints on …","This is a marker trait to represent the constraints on …","An opaque image type. Corresponds to <code>OpTypeImage</code>.","A macro for creating SPIR-V <code>OpTypeImage</code> types. Always …","A 1d image used with a sampler.","An array of 1d images, used with a sampler.","A 1d image used with a sampler, containing signed integer …","An array of 1d images, used with a sampler, each …","A 1d image used with a sampler, containing unsigned …","An array of 1d images, used with a sampler, each …","A 2d image used with a sampler. This is pretty typical and …","An array of 2d images, used with a sampler.","A 2d image used with a sampler, containing signed integer …","An array of 2d images, used with a sampler, each …","A 2d image used with a sampler, containing unsigned …","An array of 2d images, used with a sampler, each …","A 3d image used with a sampler.","An array of 3d images, used with a sampler.","A 3d image used with a sampler, containing signed integer …","An array of 3d images, used with a sampler, each …","A 3d image used with a sampler, containing unsigned …","An array of 3d images, used with a sampler, each …","Marker trait for arguments that accept a coordinate for an …","Marker trait for arguments that are valid for a …","Whether a given image contains depth information. <strong>Note</strong> …","The underlying internal representation of the image.","Helper trait that defines all <code>*_with</code> methods on an <code>Image</code> …","Whether the image uses arrayed content.","The image will not be used with a sampler.","1D","32 bits containing two 11 bit floating point numbers for …","Single red channel, 16 bit unsigned normalized integer.","Single red channel, 16 bit signed normalized integer.","Single red channel, 16 bit floating point.","Single red channel, 16 bit signed integer (not normalized).","Single red channel, 16 bit unsigned integer (not …","Single red channel, 32 bit floating point.","Single red channel, 32 bit signed integer (not normalized).","Single red channel, 32 bit unsigned integer (not …","Single red channel, 64 bit signed integer (not normalized).","Single red channel, 64 bit unsigned integer (not …","Single red channel, 8 bit unsigned normalized integer.","Single red channel, 8 bit signed normalized integer.","Single red channel, 8 bit signed integer (not normalized).","Single red channel, 8 bit unsigned integer (not …","A read only image.","A readable and writable image.","2D Rectangle texture","Red+Green channels, 16 bit unsigned normalized integer per …","Red+Green channels, 16 bit signed normalized integer per …","Red+Green channels, 16 bit floating point per channel.","Red+Green channels, 16 bit signed integer per channel (not …","Red+Green channels, 16 bit unsigned integer per channel …","Red+Green channels, 32 bit floating point per channel.","Red+Green channels, 32 bit signed integer per channel (not …","Red+Green channels, 32 bit unsigned integer per channel …","Red+Green channels, 8 bit unsigned normalized integer per …","Red+Green channels, 8 bit signed normalized integer per …","Red+Green channels, 8 bit signed integer per channel (not …","Red+Green channels, 8 bit unsigned integer per channel …","32 bits containing three 10 bit unsigned normalized …","32 bits containing three 10 bit unsigned integers for the …","RGBA channels, 16 bit unsigned normalized integer per …","RGBA channels, 16 bit signed normalized integer per …","RGBA channels, 16 bit floating point per channel.","RGBA channels, 16 bit signed integer per channel (not …","RGBA channels, 16 bit unsigned integer per channel (not …","RGBA channels, 32 bit floating point per channel.","RGBA channels, 32 bit signed integer per channel (not …","RGBA channels, 32 bit unsigned integer per channel (not …","RGBA channels, 8 bit unsigned normalized integer per …","RGBA channels, 8 bit signed normalized integer per channel.","RGBA channels, 8 bit signed integer per channel (not …","RGBA channels, 8 bit unsigned integer per channel (not …","The default vector/scalar of ths sample type","Marker trait for arguments that accept single scalar …","Whether or not the image will be accessed in combination …","An image combined with a sampler in a single value, …","A 1d storage image, directly accessed, without using a …","A 1d storage image, directly accessed without a sampler, …","A 1d storage image, directly accessed without a sampler, …","A 2d storage image, directly accessed, without using a …","A 2d storage image, directly accessed without a sampler, …","A 2d storage image, directly accessed without a sampler, …","A 3d storage image, directly accessed, without using a …","A 3d storage image, directly accessed without a sampler, …","A 3d storage image, directly accessed without a sampler, …","Vulkan subpass buffer","3D","The image uses arrayed content.","Indicates that the image contains depth information.","The image contains multisampled content.","2D","Indicates that is not known ahead of time whether the …","Indicates that it is not known ahead of time whether the …","Representation not known at compile time.","A 2-component vector of this sample type","A 3-component vector of this sample type","A 4-component vector of this sample type","A write only image.","The image will be used with a sampler.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fetch a single texel with a sampler set at compile time","Fetch a single texel with a sampler set at compile time","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Gathers the requested component from four texels.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Query the number of mipmap levels.","Query the mipmap level and the level of detail for a …","Query the number of samples available per texel fetch in a …","Query the dimensions of Image, with no level of detail.","Query the dimensions of Image, with no level of detail.","Read a texel from an image without a sampler.","Read a texel from an image without a sampler.","Read a texel from subpass input attachment. Note: Vulkan …","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the sampled image with an …","Sample texels at <code>coord</code> from the image using <code>sampler</code>, after …","Sample the image based on a gradient formed by (dx, dy). …","Fetch a single texel with a sampler set at compile time …","Sample texels at <code>coord</code> from the sampled image with an …","Sample the image’s depth reference","Sample the image’s depth reference based on a gradient …","Sample the image’s depth reference based on an explicit …","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Sample the image’s depth reference with the project …","Contains extra image operands","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample texels at <code>coord</code> from the image using <code>sampler</code>.","Sample the image with a project coordinate","Sample the image with a project coordinate based on a …","Sample the image with a project coordinate by a lod","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","Sample the image with a project coordinate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write a texel to an image without a sampler.","Write a texel to an image without a sampler.","Whether this is a <code>NoneTy</code> (when false) or a <code>SomeTy&lt;T&gt;</code> (when …","Helper struct that denotes that the type doesn’t exist, …","Helper trait to mimic <code>Option&lt;T&gt;</code>, but where the variant are …","Helper struct that allows building image operands. Start …","Helper struct that denotes that the type does exist and is …","Sets the ‘Bias’ image operand","Sets the ‘Bias’ image operand","‘Bias’ image operand","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Sets the ‘Grad’ image operand","Sets the ‘Lod’ image operand","‘Grad’ image operand","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sets the ‘Lod’ image operand","Sets the ‘Lod’ image operand","‘Lod’ image operand","Sets the ‘Sample’ image operand","Sets the ‘Sample’ image operand","‘Sample’ image operandy","","","","","","","","","","Abstract trait representing any SPIR-V integer type.","If the integer is signed: true means signed, false means …","A trait for being generic over signed integer types.","A trait for being generic over unsigned integer types.","Width of the integer, in bits.","On an atomic instruction, orders memory operations …","Has the properties of both <code>Self::ACQUIRE</code> and <code>Self::RELEASE</code> …","Apply the memory-ordering constraints to […","Apply the memory-ordering constraints to […","Crosses multiple devices.","The current device.","Apply the memory-ordering constraints to image contents …","The current invocation.","Perform an availability operation on all references in the …","Perform a visibility operation on all references in the …","No memory semantics.","Apply the memory-ordering constraints to the […","The current queue family.","On an atomic instruction, orders memory operations …","All observers see this memory access in the same order …","Apply the memory-ordering constraints to subgroup memory.","Specification for how large of a scope some instructions …","Memory semantics to determine how some operations should …","The current subgroup.","Apply the memory-ordering constraints to […","This access cannot be eliminated, duplicated, or combined …","Apply the memory-ordering constraints to […","The current workgroup.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Abstract trait representing a SPIR-V integer or …","A potential intersection with an axis-aligned bounding box …","An acceleration structure type which is an opaque …","Do not intersect with the back face of triangles.","Do not intersect with the front face of triangles.","Do not intersect with non-opaque geometry.","Do not intersect with opaque geometry.","Describes the type of the intersection which is currently …","Describes the type of the intersection currently committed …","A user-generated intersection has been committed.","No flags specified.","Force all intersections with the trace to be non-opaque.","No intersection is committed.","Force all intersections with the trace to be opaque.","Flags controlling the properties of an OpTraceRayKHR …","A ray query type which is an opaque object representing a …","Do not intersect with any AABB (Axis Aligned Bounding Box) …","Do not execute a closest hit shader.","Do not intersect with any triangle geometries.","Accept the first hit discovered.","A potential intersection with a triangle is being …","An intersection with a triangle has been committed.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Confirms a triangle intersection to be included in the …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Converts a 64-bit integer into an <code>AccelerationStructure</code>.","Converts a vector of two 32 bit integers into an …","Gets the second and third barycentric coordinates of the …","Returns whether the current intersection considered in a …","Gets the geometry index for the current intersection …","Gets the custom index of the instance for the current …","Gets the id of the instance for the current intersection …","Gets the object-space ray direction for the current …","Gets the object-space ray origin for the current …","Gets a matrix that transforms values to world-space from …","Gets the primitive index for the current intersection …","Gets the shader binding table record offset for the …","Gets the “T” value for the current or previous …","Returns the type of the current candidate intersection.","Gets the second and third barycentric coordinates of the …","Returns whether the current intersection considered in a …","Gets the geometry index for the current intersection …","Gets the custom index of the instance for the current …","Gets the id of the instance for the current intersection …","Gets the object-space ray direction for the current …","Gets the object-space ray origin for the current …","Gets a matrix that transforms values to world-space from …","Gets the primitive index for the current intersection …","Gets the shader binding table record offset for the …","Gets the “T” value for the current or previous …","Returns the type of the current candidate intersection.","Returns whether a candidate intersection considered in a …","Returns the “Ray Flags” value used by the ray query.","Returns the “Ray Tmin” value used by the ray query.","Gets the world-space direction for the ray traced in a ray …","Gets the world-space origin for the ray traced in a ray …","","","","Initialize a ray query object, defining parameters of …","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","","","","Allow traversal to proceed. Returns <code>true</code> if traversal is …","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Terminates further execution of a ray query; further calls …","","","","","Toggles the specified flags in-place.","Trace a ray into the acceleration structure.","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Abstract trait representing a SPIR-V scalar type.","Abstract trait representing a SPIR-V vector type.","Trait that implements slicing of a vector into a scalar or …","Slices the vector into a lower dimensional type by …"],"i":[0,0,0,0,0,3,1,3,1,0,1,1,0,3,1,0,0,3,3,0,3,1,0,0,0,0,0,0,0,0,1,3,1,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,0,0,21,23,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,22,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,20,20,22,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,28,0,0,0,0,0,0,0,0,0,0,0,0,22,22,21,23,24,22,23,25,30,28,28,28,20,25,20,21,22,23,24,25,30,26,29,20,21,22,23,24,25,30,26,29,20,21,22,23,24,25,26,29,20,21,22,23,24,25,26,29,20,21,22,23,24,25,30,20,21,22,23,24,25,30,26,56,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,20,21,21,22,23,23,23,24,24,25,25,25,30,26,29,26,56,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,20,21,22,23,24,25,30,26,29,26,26,26,26,26,26,26,26,26,29,26,26,26,29,26,26,26,56,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,56,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,56,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,56,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,20,21,22,23,24,25,26,29,20,21,22,23,24,25,30,26,29,20,21,22,23,24,25,30,26,29,20,21,22,23,24,25,30,26,29,26,26,39,0,0,0,0,0,34,34,32,33,34,32,33,34,32,33,34,0,34,34,32,33,34,0,34,34,0,34,34,32,33,34,32,33,34,32,33,34,0,9,0,0,9,40,40,40,40,42,42,40,42,40,40,40,40,42,40,40,40,0,0,42,40,40,40,42,40,40,40,40,40,40,40,40,42,40,42,40,40,40,40,40,40,40,40,42,40,42,40,40,42,40,40,40,40,40,42,40,40,40,40,40,40,40,40,40,42,40,40,40,40,40,40,40,40,40,40,40,40,42,40,42,40,42,40,40,0,49,0,47,47,47,47,0,0,50,47,47,50,47,0,0,47,47,47,47,49,50,47,47,47,47,47,47,47,47,48,47,49,50,51,48,47,49,50,51,48,47,49,50,48,47,49,50,47,49,50,47,51,47,47,47,47,49,50,47,49,50,47,47,47,47,47,47,48,47,49,50,51,47,47,47,47,48,48,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,47,49,50,51,47,47,47,48,47,49,50,51,47,47,47,47,49,50,51,47,47,47,47,47,51,48,47,49,50,47,48,48,47,49,50,51,48,47,49,50,51,48,47,49,50,51,47,0,0,0,57],"f":[0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,1],[[-1,-2],2,[],[]],0,[-1,-1,[]],[-1,-1,[]],0,0,[[[3,[-1]],4],-1,[]],[[[3,[-1]],4],-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],0,0,[-1,7,[[8,[7]]]],[[],2],[[],2],[-1,7,[[8,[7]]]],[[-1,-1],-1,9],[[-1,-1,-1],-1,9],[[-1,-1],-1,10],[[-1,-1],-1,11],[[-1,-1],-1,11],[[-1,-1],-1,11],[[-1,-1],-1,9],[-1,-1,9],[-1,-1,9],[[-1,-1],-1,9],[-1,-1,10],[[-1,-1],-1,9],[[-1,-1],-1,12],[[-1,-1],-1,12],[[-1,-1],2,10],[[-1,-1],-1,13],[[-1,-1],-1,13],[[-1,-1],-1,9],[[],2],[-1,-1,11],[-1,-1,11],[-2,-2,11,[[8,[-1]]]],[-1,-1,11],[-2,-2,11,[[8,[-1]]]],[-2,-2,11,[[8,[-1]]]],[-1,-1,11],[-1,-1,11],[-2,-2,11,[[8,[-1]]]],[-1,-1,11],[-2,-2,11,[[8,[-1]]]],[-2,-2,11,[[8,[-1]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[-1,2,[]],[-1,-1,11],[-1,-1,11],[-2,-2,11,[[8,[-1]]]],[-1,-1,11],[-2,-2,11,[[8,[-1]]]],[-2,-2,11,[[8,[-1]]]],[[],14],[[-1,4],-2,[],[]],[[-1,4],-2,[],[]],[[],7],[[],14],[[],2],[[15,16],7],[[-1,-1],-1,12],[[-1,-1],-1,12],[[],14],[[-1,-1],-1,13],[[-1,-1],-1,13],[[-2,4],-1,17,[[8,[-1]]]],[[-2,4,-1],-2,17,[[8,[-1]]]],[[],2],[[],2],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-2,[],[]],[[18,16],-1,[]],[[18,16],-1,[]],[[[19,[16]]],18],[[18,16,-1],2,[]],[[18,16,-1],2,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,[16,15],[16,-1,[[8,[15]]]],[15,16],[16,-1,[[8,[15]]]],[16,-1,[[8,[15]]]],[16,-1,[[8,[15]]]],[16,-1,[[8,[15]]]],[-1,16,[[8,[15]]]],[-1,16,[[8,[15]]]],[-1,16,[[8,[15]]]],[-1,16,[[8,[15]]]],[-1,16,[[8,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[[[26,[-1]]],[[26,[-1]]],[27,28]],[[[29,[-1]]],[[29,[-1]]],27],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[20,20],7],[[21,21],7],[[22,22],7],[[23,23],7],[[24,24],7],[[25,25],7],[[30,30],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[[26,[-1]],-3],[],28,9,[[31,[-2]]]],[[-1,-3,-4],[],[],9,[[31,[-2]]],[]],[[[26,[-1]],-3,[34,[32,[33,[-4]],[33,[[2,[-5,-5]]]],[33,[-6]]]]],[],28,9,[[31,[-2]]],[],[],[]],[[[26,[-1]],-3,[34,[[33,[-4]],32,[33,[[2,[-5,-5]]]],32]]],[],28,9,[[31,[-2]]],[],[]],[[[26,[-1]],-3,[34,[32,[33,[-4]],32,32]]],[],28,9,[[31,[-2]]],[]],[[[26,[-1]],-3,[34,[32,[33,[-4]],32,[33,[-5]]]]],[],28,9,[[31,[-2]]],[],[]],[[[26,[-1]],-3,[34,[[33,[-4]],[33,[-5]],32,32]]],[],28,9,[[31,[-2]]],[],[]],[[[26,[-1]],-3,[34,[32,32,32,[33,[-4]]]]],[],28,9,[[31,[-2]]],[]],[[[26,[-1]],-3,[34,[[33,[-4]],32,32,[33,[-5]]]]],[],28,9,[[31,[-2]]],[],[]],[[[26,[-1]],-3,[34,[32,32,[33,[[2,[-4,-4]]]],[33,[-5]]]]],[],28,9,[[31,[-2]]],[],[]],[[[26,[-1]],-3,[34,[[33,[-4]],32,[33,[[2,[-5,-5]]]],[33,[-6]]]]],[],28,9,[[31,[-2]]],[],[],[]],[[[26,[-1]],-3,[34,[[33,[-4]],[33,[-5]],[33,[[2,[-6,-6]]]],[33,[-7]]]]],[],28,9,[[31,[-2]]],[],[],[],[]],[[[26,[-1]],-3,[34,[32,32,[33,[[2,[-4,-4]]]],32]]],[],28,9,[[31,[-2]]],[]],[[[26,[-1]],-3,[34,[[33,[-4]],32,32,32]]],[],28,9,[[31,[-2]]],[]],[[[26,[-1]],-3,[34,[[33,[-4]],[33,[-5]],32,[33,[-6]]]]],[],28,9,[[31,[-2]]],[],[],[]],[[[26,[-1]],-3,[34,[32,[33,[-4]],[33,[[2,[-5,-5]]]],32]]],[],28,9,[[31,[-2]]],[],[]],[[[26,[-1]],-3,[34,[[33,[-4]],[33,[-5]],[33,[[2,[-6,-6]]]],32]]],[],28,9,[[31,[-2]]],[],[],[]],[-1,-1,[]],[-1,-1,[]],[7,21],[-1,-1,[]],[-1,-1,[]],[7,23],[[[35,[7]]],23],[7,24],[-1,-1,[]],[7,25],[[[35,[7]]],25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[26,[-1]],1,-3,16],[],28,11,[[31,[-2]]]],[[-1,1,-3,16,-4],[],36,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,16,[34,[[33,[-4]],32,[33,[[2,[-5,-5]]]],[33,[-6]]]]],[],28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,16,[34,[32,[33,[-4]],[33,[[2,[-5,-5]]]],32]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,16,[34,[[33,[-4]],[33,[-5]],[33,[[2,[-6,-6]]]],32]]],[],28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,16,[34,[32,[33,[-4]],32,[33,[-5]]]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,16,[34,[[33,[-4]],[33,[-5]],[33,[[2,[-6,-6]]]],[33,[-7]]]]],[],28,11,[[31,[-2]]],[],[],[],[]],[[[26,[-1]],1,-3,16,[34,[32,32,[33,[[2,[-4,-4]]]],[33,[-5]]]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,16,[34,[32,[33,[-4]],32,32]]],[],28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,16,[34,[[33,[-4]],32,32,[33,[-5]]]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,16,[34,[[33,[-4]],32,[33,[[2,[-5,-5]]]],32]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,16,[34,[32,32,[33,[[2,[-4,-4]]]],32]]],[],28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,16,[34,[[33,[-4]],[33,[-5]],32,[33,[-6]]]]],[],28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,16,[34,[[33,[-4]],[33,[-5]],32,32]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,16,[34,[[33,[-4]],32,32,32]]],[],28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,16,[34,[32,32,32,[33,[-4]]]]],[],28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,16,[34,[32,[33,[-4]],[33,[[2,[-5,-5]]]],[33,[-6]]]]],[],28,11,[[31,[-2]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[-1]]],16,28],[[[26,[-1]],1,-2],[],28,[[31,[15]]]],[[[26,[-1]]],16,28],[[[26,[-1]]],-2,28,[[31,[16]],37]],[[[26,[-1]],16],-2,28,[[31,[16]],37]],[[[26,[-1]],-3],[],28,9,[[31,[-2]]]],[[[26,[-1]],-3],[],28,9,[[31,[-2]]]],[[[26,[-1]],-3],[],28,9,[[38,[-2]]]],[[[26,[-1]],1,-3],[],28,11,[[31,[-2]]]],[[[29,[[26,[-1]]]],-3],[],28,11,[[31,[-2]]]],[[[26,[-1]],1,-3,15],[],28,11,[[31,[-2]]]],[[[26,[-1]],1,-3,-4,-5],[],28,11,[[31,[-2]]],[[31,[-2]]],[[31,[-2]]]],[[[26,[-1]],1,-3,15],[],28,11,[[31,[-2]]]],[[[29,[[26,[-1]]]],-3,15],[],28,11,[[31,[-2]]]],[[[26,[-1]],1,-3,15],-1,28,11,[[31,[-2]]]],[[[26,[-1]],1,-3,15,-4,-5],-1,28,11,[[31,[-2]]],[[31,[-2]]],[[31,[-2]]]],[[[26,[-1]],1,-3,15,15],-1,28,11,[[31,[-2]]]],[[-1,1,-3,15,-4],-5,[],11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,15,[34,[32,32,[33,[[2,[-4,-4]]]],[33,[-5]]]]],-1,28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,15,[34,[32,[33,[-4]],[33,[[2,[-5,-5]]]],[33,[-6]]]]],-1,28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,15,[34,[32,32,[33,[[2,[-4,-4]]]],32]]],-1,28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],32,[33,[[2,[-5,-5]]]],32]]],-1,28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,15,[34,[32,[33,[-4]],[33,[[2,[-5,-5]]]],32]]],-1,28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],32,[33,[[2,[-5,-5]]]],[33,[-6]]]]],-1,28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],[33,[-5]],[33,[[2,[-6,-6]]]],32]]],-1,28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],[33,[-5]],[33,[[2,[-6,-6]]]],[33,[-7]]]]],-1,28,11,[[31,[-2]]],[],[],[],[]],[[[26,[-1]],1,-3,15,[34,[32,[33,[-4]],32,32]]],-1,28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,15,[34,[32,[33,[-4]],32,[33,[-5]]]]],-1,28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],[33,[-5]],32,32]]],-1,28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,15,[34,[32,32,32,[33,[-4]]]]],-1,28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],[33,[-5]],32,[33,[-6]]]]],-1,28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],32,32,32]]],-1,28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],32,32,[33,[-5]]]]],-1,28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,15],-1,28,11,[[31,[-2]]]],[[[26,[-1]],1,-3,15,-4,-5],-1,28,11,[[31,[-2]]],[[31,[-2]]],[[31,[-2]]]],[[[26,[-1]],1,-3,15,15],-1,28,11,[[31,[-2]]]],[[-1,1,-3,15,-4],-5,[],11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,15,[34,[32,[33,[-4]],32,32]]],-1,28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,15,[34,[32,32,[33,[[2,[-4,-4]]]],[33,[-5]]]]],-1,28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],[33,[-5]],[33,[[2,[-6,-6]]]],[33,[-7]]]]],-1,28,11,[[31,[-2]]],[],[],[],[]],[[[26,[-1]],1,-3,15,[34,[32,32,32,[33,[-4]]]]],-1,28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,15,[34,[32,[33,[-4]],32,[33,[-5]]]]],-1,28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],32,32,[33,[-5]]]]],-1,28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],[33,[-5]],32,[33,[-6]]]]],-1,28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],[33,[-5]],32,32]]],-1,28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],[33,[-5]],[33,[[2,[-6,-6]]]],32]]],-1,28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,15,[34,[32,[33,[-4]],[33,[[2,[-5,-5]]]],[33,[-6]]]]],-1,28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],32,[33,[[2,[-5,-5]]]],32]]],-1,28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],32,32,32]]],-1,28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,15,[34,[[33,[-4]],32,[33,[[2,[-5,-5]]]],[33,[-6]]]]],-1,28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,15,[34,[32,32,[33,[[2,[-4,-4]]]],32]]],-1,28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,15,[34,[32,[33,[-4]],[33,[[2,[-5,-5]]]],32]]],-1,28,11,[[31,[-2]]],[],[]],0,[[-1,1,-3,-4],[],[],11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,[34,[32,32,[33,[[2,[-4,-4]]]],[33,[-5]]]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],[33,[-5]],[33,[[2,[-6,-6]]]],[33,[-7]]]]],[],28,11,[[31,[-2]]],[],[],[],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],32,[33,[[2,[-5,-5]]]],[33,[-6]]]]],[],28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,[34,[32,32,[33,[[2,[-4,-4]]]],32]]],[],28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],32,32,32]]],[],28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],[33,[-5]],32,[33,[-6]]]]],[],28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,[34,[32,[33,[-4]],[33,[[2,[-5,-5]]]],[33,[-6]]]]],[],28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,[34,[32,32,32,[33,[-4]]]]],[],28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],32,32,[33,[-5]]]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,[34,[32,[33,[-4]],32,32]]],[],28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,[34,[32,[33,[-4]],[33,[[2,[-5,-5]]]],32]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],[33,[-5]],[33,[[2,[-6,-6]]]],32]]],[],28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],32,[33,[[2,[-5,-5]]]],32]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,[34,[32,[33,[-4]],32,[33,[-5]]]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],[33,[-5]],32,32]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3],[],28,11,[[31,[-2]]]],[[[26,[-1]],1,-3,-4,-5],[],28,11,[[31,[-2]]],[[31,[-2]]],[[31,[-2]]]],[[[26,[-1]],1,-3,15],[],28,11,[[31,[-2]]]],[[-1,1,-3,-4],[],[],11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],[33,[-5]],[33,[[2,[-6,-6]]]],[33,[-7]]]]],[],28,11,[[31,[-2]]],[],[],[],[]],[[[26,[-1]],1,-3,[34,[32,32,[33,[[2,[-4,-4]]]],32]]],[],28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,[34,[32,32,32,[33,[-4]]]]],[],28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,[34,[32,[33,[-4]],32,32]]],[],28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],32,[33,[[2,[-5,-5]]]],32]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],32,[33,[[2,[-5,-5]]]],[33,[-6]]]]],[],28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,[34,[32,[33,[-4]],[33,[[2,[-5,-5]]]],32]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,[34,[32,[33,[-4]],32,[33,[-5]]]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],32,32,[33,[-5]]]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,[34,[32,32,[33,[[2,[-4,-4]]]],[33,[-5]]]]],[],28,11,[[31,[-2]]],[],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],32,32,32]]],[],28,11,[[31,[-2]]],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],[33,[-5]],[33,[[2,[-6,-6]]]],32]]],[],28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,[34,[32,[33,[-4]],[33,[[2,[-5,-5]]]],[33,[-6]]]]],[],28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],[33,[-5]],32,[33,[-6]]]]],[],28,11,[[31,[-2]]],[],[],[]],[[[26,[-1]],1,-3,[34,[[33,[-4]],[33,[-5]],32,32]]],[],28,11,[[31,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[[26,[-1]],-3,-4],2,28,9,[[31,[-2]]],[[8,[-1]]]],[[[26,[-1]],-3,-4],2,28,9,[[31,[-2]]],[[8,[-1]]]],0,0,0,0,0,[-1,[[34,[[33,[-1]],32,32,32]]],[]],[[[34,[32,-1,-2,-3]],-4],[[34,[[33,[-4]],-1,-2,-3]]],39,39,39,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],[[34,[32,32,[33,[[2,[-1,-1]]]],32]]],[]],[[[34,[-1,-2,32,-3]],-4,-4],[[34,[-1,-2,[33,[[2,[-4,-4]]]],-3]]],39,39,39,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[34,[32,[33,[-1]],32,32]]],[]],[[[34,[-1,32,-2,-3]],-4],[[34,[-1,[33,[-4]],-2,-3]]],39,39,39,[]],0,[-1,[[34,[32,32,32,[33,[-1]]]]],[]],[[[34,[-1,-2,-3,32]],-4],[[34,[-1,-2,-3,[33,[-4]]]]],39,39,39,[]],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],40],[[40,40],40],[[40,40],2],[[40,40],40],[[40,40],2],[40,16],[[40,40],40],[[40,40],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,40],[[-1,-2],2,[],[]],[[40,40],41],[40,40],[[40,40],7],[[40,40],40],[[],40],[[42,42],7],[[40,40],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[40,-1],2,43],[[42,44],45],[[40,44],45],[[40,44],45],[[40,44],45],[[40,44],45],[[40,44],45],[-1,-1,[]],[-1,-1,[]],[16,[[35,[40]]]],[16,40],[16,40],[-1,40,43],[[40,-1],2,46],[[40,40],2],[[40,40],40],[[40,40],7],[-1,-2,[],[]],[-1,-2,[],[]],[40,7],[40,7],[40,40],[[40,40],[[35,[41]]]],[[40,40],2],[[40,40,7],2],[[40,40],40],[[40,40],2],[[40,40],40],[-1,-2,[],[]],[[40,40],2],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[[40,40],40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],47],[[47,47],47],[[47,47],2],[[47,47],47],[[47,47],2],[47,16],[[47,47],47],[[47,47],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[47,47],[49,49],[50,50],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[47,47],41],[[49,49],41],[[50,50],41],[47,47],[51,2],[[47,47],7],[[47,47],47],[[],47],[[47,47],7],[[49,49],7],[[50,50],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[47,-1],2,43],[[47,44],45],[[47,44],45],[[47,44],45],[[47,44],45],[[47,44],45],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[16,[[35,[47]]]],[16,47],[16,47],[-1,47,43],[52,48],[-1,48,[[8,[16]]]],[51,-1,[[8,[15]]]],[51,7],[51,16],[51,16],[51,16],[51,-1,[[8,[15]]]],[51,-1,[[8,[15]]]],[51,[[53,[-1]]],[[8,[15]]]],[51,16],[51,16],[51,15],[51,49],[51,-1,[[8,[15]]]],[51,7],[51,16],[51,16],[51,16],[51,-1,[[8,[15]]]],[51,-1,[[8,[15]]]],[51,[[53,[-1]]],[[8,[15]]]],[51,16],[51,16],[51,15],[51,50],[51,7],[51,47],[51,15],[51,-1,[[8,[15]]]],[51,-1,[[8,[15]]]],[[47,-1],2,46],[[49,-1],2,46],[[50,-1],2,46],[[51,48,47,16,-1,15,-2,15],2,[[8,[15]]],[[8,[15]]]],[[47,47],2],[[47,47],47],[[47,47],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[47,7],[47,7],[47,47],[[47,47],[[35,[41]]]],[[49,49],[[35,[41]]]],[[50,50],[[35,[41]]]],[51,7],[[47,47],2],[[47,47,7],2],[[47,47],47],[[47,47],2],[[47,47],47],[51,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[47,47],2],[[48,47,54,54,54,54,-1,15,-2,15,-3],2,[[8,[15]]],[[8,[15]]],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[47,47],47],0,0,0,[-1,-2,[],[]]],"c":[],"p":[[3,"Sampler",0],[15,"tuple"],[3,"RuntimeArray",0],[15,"usize"],[4,"Result",760],[3,"TypeId",761],[15,"bool"],[8,"Vector",757],[8,"Integer",513],[8,"Number",601],[8,"Float",118],[8,"SignedInteger",513],[8,"UnsignedInteger",513],[15,"never"],[15,"f32"],[15,"u32"],[8,"Scalar",756],[3,"ByteAddressableBuffer",104],[15,"slice"],[4,"AccessQualifier",132],[4,"Arrayed",132],[4,"Dimensionality",132],[4,"ImageDepth",132],[4,"Multisampled",132],[4,"Sampled",132],[3,"Image",132],[8,"Clone",762],[8,"SampleType",132],[3,"SampledImage",132],[4,"ImageFormat",132],[8,"ImageCoordinate",132],[3,"NoneTy",475],[3,"SomeTy",475],[3,"SampleParams",475],[4,"Option",763],[8,"HasGather",132],[8,"Default",764],[8,"ImageCoordinateSubpassData",132],[8,"OptionTy",475],[3,"Semantics",518],[4,"Ordering",765],[4,"Scope",518],[8,"IntoIterator",766],[3,"Formatter",767],[6,"Result",767],[8,"Hasher",768],[3,"RayFlags",602],[3,"AccelerationStructure",602],[4,"CandidateIntersection",602],[4,"CommittedIntersection",602],[3,"RayQuery",602],[15,"u64"],[15,"array"],[15,"i32"],[8,"IndexUnchecked",38],[8,"ImageWithMethods",132],[8,"VectorTruncateInto",757]],"a":{"discard":[74,92],"opall":[39],"opany":[42],"opatomicand":[43],"opatomiccompareexchange":[44],"opatomicexchange":[45],"opatomicfaddext":[46],"opatomicfmaxext":[47],"opatomicfminext":[48],"opatomiciadd":[49],"opatomicidecrement":[50],"opatomiciincrement":[51],"opatomicisub":[52],"opatomicload":[53],"opatomicor":[54],"opatomicsmax":[55],"opatomicsmin":[56],"opatomicstore":[57],"opatomicumax":[58],"opatomicumin":[59],"opatomicxor":[60],"opcontrolbarrier":[61],"opconvertutoaccelerationstructurekhr":[678,679],"opdemotetohelperinvocationext":[74],"opemitstreamvertex":[77],"opemitvertex":[78],"opendprimitive":[79],"opendstreamprimitive":[80],"opexecutecallablekhr":[81],"opignoreintersectionkhr":[88],"opimagefetch":[292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308],"opimagegather":[324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340],"opimagequerylevels":[350],"opimagequerylod":[351],"opimagequerysamples":[352],"opimagequerysize":[353],"opimagequerysizelod":[354],"opimageread":[355,356,357],"opimagesampledrefexplicitlod":[365,366],"opimagesampledrefimplicitlod":[364,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382],"opimagesampleexplicitlod":[361,362],"opimagesampleprojdrefexplicitlod":[384,385],"opimagesampleprojdrefimplicitlod":[383,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401],"opimagesampleprojexplicitlod":[420,421],"opimagesampleprojimplicitlod":[419,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437],"opimagewrite":[473,474],"opishelperinvocationext":[91],"opkill":[92],"opmemorybarrier":[93],"oprayqueryconfirmintersectionkhr":[653],"oprayquerygetintersectionbarycentricskhr":[680,692],"oprayquerygetintersectioncandidateaabbopaquekhr":[704],"oprayquerygetintersectionfrontfacekhr":[681,693],"oprayquerygetintersectiongeometryindexkhr":[682,694],"oprayquerygetintersectioninstancecustomindexkhr":[683,695],"oprayquerygetintersectioninstanceidkhr":[684,696],"oprayquerygetintersectioninstanceshaderbindingtablerecordoffsetkhr":[689,701],"oprayquerygetintersectionobjectraydirectionkhr":[685,697],"oprayquerygetintersectionobjectrayoriginkhr":[686,698],"oprayquerygetintersectionobjecttoworldkhr":[687,699],"oprayquerygetintersectionprimitiveindexkhr":[688,700],"oprayquerygetintersectiontkhr":[690,702],"oprayquerygetintersectiontypekhr":[691,703],"oprayquerygetrayflagskhr":[705],"oprayquerygetraytminkhr":[706],"oprayquerygetworldraydirectionkhr":[707],"oprayquerygetworldrayoriginkhr":[708],"oprayqueryinitializekhr":[712],"oprayqueryproceedkhr":[727],"oprayqueryterminatekhr":[733],"opreportintersectionkhr":[94],"opterminateraykhr":[97],"optraceraykhr":[739],"opvectorextractdynamic":[100],"opvectorinsertdynamic":[101]}},\
"spirv_std_macros":{"doc":"<code>spirv-std-macros</code>","t":"OOOXX","n":["Image","debug_printf","debug_printfln","gpu_only","spirv"],"q":[[0,"spirv_std_macros"]],"d":["A macro for creating SPIR-V <code>OpTypeImage</code> types. Always …","Print a formatted string with a newline using the debug …","Similar to <code>debug_printf</code> but appends a newline to the …","Marks a function as runnable only on the GPU, and will …","Replaces all (nested) occurrences of the <code>#[spirv(..)]</code> …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[]},\
"spirv_std_types":{"doc":"<code>spirv-std-types</code>","t":"AEENNENNNEEENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["image_params","AccessQualifier","Arrayed","Buffer","Cube","Dimensionality","False","False","False","ImageDepth","ImageFormat","Multisampled","No","OneD","R11fG11fB10f","R16","R16Snorm","R16f","R16i","R16ui","R32f","R32i","R32ui","R64i","R64ui","R8","R8Snorm","R8i","R8ui","ReadOnly","ReadWrite","Rect","Rg16","Rg16Snorm","Rg16f","Rg16i","Rg16ui","Rg32f","Rg32i","Rg32ui","Rg8","Rg8Snorm","Rg8i","Rg8ui","Rgb10A2","Rgb10A2ui","Rgba16","Rgba16Snorm","Rgba16f","Rgba16i","Rgba16ui","Rgba32f","Rgba32i","Rgba32ui","Rgba8","Rgba8Snorm","Rgba8i","Rgba8ui","Sampled","SubpassData","ThreeD","True","True","True","TwoD","Unknown","Unknown","Unknown","WriteOnly","Yes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","eq","eq","eq","eq","eq","eq","eq","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"spirv_std_types"],[1,"spirv_std_types::image_params"],[138,"core::option"],[139,"core::result"],[140,"core::any"]],"d":["","The access permissions for the image.","Whether the image uses arrayed content.","1D Buffer texture","2D Cubemap texture","The dimension of the image.","The image uses not arrayed content.","Indicates that the image does not contain depth …","The image contains single-sampled content.","Whether a given image contains depth information. <strong>Note</strong> …","The underlying internal representation of the image.","Whether the image uses arrayed content.","The image will not be used with a sampler.","1D","32 bits containing two 11 bit floating point numbers for …","Single red channel, 16 bit unsigned normalized integer.","Single red channel, 16 bit signed normalized integer.","Single red channel, 16 bit floating point.","Single red channel, 16 bit signed integer (not normalized).","Single red channel, 16 bit unsigned integer (not …","Single red channel, 32 bit floating point.","Single red channel, 32 bit signed integer (not normalized).","Single red channel, 32 bit unsigned integer (not …","Single red channel, 64 bit signed integer (not normalized).","Single red channel, 64 bit unsigned integer (not …","Single red channel, 8 bit unsigned normalized integer.","Single red channel, 8 bit signed normalized integer.","Single red channel, 8 bit signed integer (not normalized).","Single red channel, 8 bit unsigned integer (not …","A read only image.","A readable and writable image.","2D Rectangle texture","Red+Green channels, 16 bit unsigned normalized integer per …","Red+Green channels, 16 bit signed normalized integer per …","Red+Green channels, 16 bit floating point per channel.","Red+Green channels, 16 bit signed integer per channel (not …","Red+Green channels, 16 bit unsigned integer per channel …","Red+Green channels, 32 bit floating point per channel.","Red+Green channels, 32 bit signed integer per channel (not …","Red+Green channels, 32 bit unsigned integer per channel …","Red+Green channels, 8 bit unsigned normalized integer per …","Red+Green channels, 8 bit signed normalized integer per …","Red+Green channels, 8 bit signed integer per channel (not …","Red+Green channels, 8 bit unsigned integer per channel …","32 bits containing three 10 bit unsigned normalized …","32 bits containing three 10 bit unsigned integers for the …","RGBA channels, 16 bit unsigned normalized integer per …","RGBA channels, 16 bit signed normalized integer per …","RGBA channels, 16 bit floating point per channel.","RGBA channels, 16 bit signed integer per channel (not …","RGBA channels, 16 bit unsigned integer per channel (not …","RGBA channels, 32 bit floating point per channel.","RGBA channels, 32 bit signed integer per channel (not …","RGBA channels, 32 bit unsigned integer per channel (not …","RGBA channels, 8 bit unsigned normalized integer per …","RGBA channels, 8 bit signed normalized integer per channel.","RGBA channels, 8 bit signed integer per channel (not …","RGBA channels, 8 bit unsigned integer per channel (not …","Whether or not the image will be accessed in combination …","Vulkan subpass buffer","3D","The image uses arrayed content.","Indicates that the image contains depth information.","The image contains multisampled content.","2D","Indicates that is not known ahead of time whether the …","Indicates that it is not known ahead of time whether the …","Representation not known at compile time.","A write only image.","The image will be used with a sampler.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,3,3,0,2,4,5,0,0,0,6,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,3,3,2,4,5,3,4,6,8,1,6,1,2,3,4,5,6,8,1,2,3,4,5,6,8,1,2,3,4,5,6,1,2,3,4,5,6,8,1,2,2,3,4,4,4,5,5,6,6,6,8,1,2,3,4,5,6,8,1,2,3,4,5,6,8,1,2,3,4,5,6,8,1,2,3,4,5,6,8],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[5,5],7],[[6,6],7],[[8,8],7],[-1,-1,[]],[7,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[9,[7]]],4],[7,4],[-1,-1,[]],[7,5],[[[9,[7]]],6],[-1,-1,[]],[7,6],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]]],"c":[],"p":[[4,"AccessQualifier",1],[4,"Arrayed",1],[4,"Dimensionality",1],[4,"ImageDepth",1],[4,"Multisampled",1],[4,"Sampled",1],[15,"bool"],[4,"ImageFormat",1],[4,"Option",138],[4,"Result",139],[3,"TypeId",140]]},\
"spirv_tools":{"doc":"","t":"NCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENENNNNNNNNNNNNNNAALLLLLLLLLLLALLLLLLLLLALLLLLLLLLLAIDDKLLLLLLLLMMFLLKLLMLLLLMMMMLLALLLLLLMKDLLLLLLLLLLLENNLLLLLLLLFLFLLLLNDNDNNNNNNNNNNNNNNNNNNDIENNNENNNNNLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLMMMLLLLMMMMMMMMKLMLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIDENNNNNNNNNNNNNNNNNNNLLLLLLLLFLLLLLLMKMMKKKKLLALLLLLLMKDLLLLLLLLLLLLLLNNNNNNNNNIEDMLLLLLLLLFLLLLLLMMMMMMLLALLLLLLMKKDLLLLLLLLLL","n":["EndOfStream","Error","FailedMatch","InternalError","InvalidBinary","InvalidCapability","InvalidCfg","InvalidData","InvalidDiagnostic","InvalidId","InvalidLayout","InvalidLookup","InvalidPointer","InvalidTable","InvalidText","InvalidValue","MissingExtension","OpenCLEmbedded_1_2","OpenCLEmbedded_2_0","OpenCLEmbedded_2_1","OpenCLEmbedded_2_2","OpenCL_1_2","OpenCL_2_0","OpenCL_2_1","OpenCL_2_2","OpenGL_4_0","OpenGL_4_1","OpenGL_4_2","OpenGL_4_3","OpenGL_4_5","OutOfMemory","RequestedTermination","SpirvResult","Success","TargetEnv","Universal_1_0","Universal_1_1","Universal_1_2","Universal_1_3","Universal_1_4","Universal_1_5","Unsupported","Vulkan_1_0","Vulkan_1_1","Vulkan_1_1_Spirv_1_4","Vulkan_1_2","Warning","WebGPU_0","WrongVersion","assembler","binary","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","eq","error","fmt","fmt","fmt","fmt","from","from","from_str","into","into","opt","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","val","Assembler","AssemblerOptions","DisassembleOptions","assemble","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color","comment","create","default","default","disassemble","from","from","indent","into","into","into","into","no_header","preserve_numeric_ids","print","show_byte_offset","to_owned","to_owned","tool","try_from","try_from","try_into","try_into","type_id","type_id","use_friendly_names","with_env","ToolAssembler","assemble","borrow","borrow_mut","default","disassemble","from","into","try_from","try_into","type_id","with_env","Binary","OwnedU32","OwnedU8","as_bytes","as_ref","as_ref","as_words","borrow","borrow_mut","fmt","from","from_binary","into","to_binary","try_from","try_from","try_into","type_id","Debug","Diagnostic","EndOfStream","Error","Error","FailedMatch","Fatal","Info","InternalError","InternalError","InvalidBinary","InvalidCapability","InvalidCfg","InvalidData","InvalidDiagnostic","InvalidId","InvalidLayout","InvalidLookup","InvalidPointer","InvalidTable","InvalidText","InvalidValue","Message","MessageCallback","MessageLevel","MissingExtension","OutOfMemory","RequestedTermination","SpirvResult","Success","Unsupported","Warning","Warning","WrongVersion","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","column","column","diagnostic","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","index","index","inner","into","into","into","into","is_text","level","line","line","message","message","notes","notes","on_message","source","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","AggressiveDCE","AmdExtToKhr","BlockMerge","CFGCleanup","CodeSinking","CombineAccessChains","CompactIds","ConditionalConstantPropagation","ConvertRelaxedToHalf","CopyPropagateArrays","DeadBranchElim","DeadInsertElim","DeadVariableElimination","DescriptorScalarReplacement","EliminateDeadConstant","EliminateDeadFunctions","EliminateDeadMembers","FixStorageClass","FlattenDecoration","FoldSpecConstantOpAndComposite","FreezeSpecConstantValue","GraphicsRobustAccess","IfConversion","InlineExhaustive","InlineOpaque","InsertExtractElim","InterpolateFixup","LocalAccessChainConvert","LocalMultiStoreElim","LocalRedundancyElimination","LocalSingleBlockLoadStoreElim","LocalSingleStoreElim","LoopInvariantCodeMotion","LoopPeeling","LoopUnswitch","MergeReturn","Null","Optimizer","Options","Passes","PrivateToLocal","PropagateLineInfo","ReduceLoadSize","RedundancyElimination","RedundantLineInfoElim","RelaxFloatOps","RemoveDuplicates","RemoveUnusedInterfaceVariables","ReplaceInvalidOpcode","SSARewrite","Simplification","StrengthReduction","StripDebugInfo","StripNonSemanticInfo","UnifyConstant","UpgradeMemoryModel","VectorDCE","Workaround1209","WrapOpKill","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create","default","fmt","from","from","into","into","max_id_bound","optimize","preserve_bindings","preserve_spec_constants","register_hlsl_legalization_passes","register_pass","register_performance_passes","register_size_passes","to_owned","to_owned","tool","try_from","try_from","try_into","try_into","type_id","type_id","validator_options","with_env","ToolOptimizer","borrow","borrow_mut","default","from","into","optimize","register_hlsl_legalization_passes","register_pass","register_performance_passes","register_size_passes","try_from","try_into","type_id","with_env","AccessChainIndexes","ControlFlowNestingDepth","FunctionArgs","GlobalVariables","IdBound","LocalVariables","StructDepth","StructMembers","SwitchBranches","Validator","ValidatorLimits","ValidatorOptions","before_legalization","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create","default","fmt","from","from","into","into","max_limits","relax_block_layout","relax_logical_pointer","relax_struct_store","scalar_block_layout","skip_block_layout","to_owned","to_owned","tool","try_from","try_from","try_into","try_into","type_id","type_id","uniform_buffer_standard_layout","validate","with_env","ToolValidator","borrow","borrow_mut","default","from","into","try_from","try_into","type_id","validate","with_env"],"q":[[0,"spirv_tools"],[84,"spirv_tools::assembler"],[124,"spirv_tools::assembler::tool"],[136,"spirv_tools::binary"],[154,"spirv_tools::error"],[251,"spirv_tools::opt"],[344,"spirv_tools::opt::tool"],[359,"spirv_tools::val"],[405,"spirv_tools::val::tool"],[416,"core::fmt"],[417,"core::fmt"],[418,"alloc::string"],[419,"core::any"],[420,"core::option"],[421,"core::convert"],[422,"core::fmt"],[423,"core::error"]],"d":["","","","","","","","Indicates data rules validation failure.","","","","","","","","","","OpenCL Embedded Profile 1.2 plus cl_khr_il_program, latest …","OpenCL Embedded Profile 2.0 plus cl_khr_il_program, latest …","OpenCL Embedded Profile 2.1 latest revision.","OpenCL Embedded Profile 2.2 latest revision.","OpenCL Full Profile 1.2 plus cl_khr_il_program, latest …","OpenCL Full Profile 2.0 plus cl_khr_il_program, latest …","OpenCL Full Profile 2.1 latest revision.","OpenCL Full Profile 2.2 latest revision.","OpenGL 4.0 plus GL_ARB_gl_spirv, latest revisions.","OpenGL 4.1 plus GL_ARB_gl_spirv, latest revisions.","OpenGL 4.2 plus GL_ARB_gl_spirv, latest revisions.","OpenGL 4.3 plus GL_ARB_gl_spirv, latest revisions.","OpenGL 4.5 plus GL_ARB_gl_spirv, latest revisions.","","Success, but signals early termination.","","","Certain target environments impose additional restrictions …","SPIR-V 1.0 latest revision, no other restrictions.","SPIR-V 1.1 latest revision, no other restrictions.","SPIR-V 1.2, latest revision, no other restrictions.","SPIR-V 1.3 latest revision, no other restrictions.","SPIR-V 1.4 latest revision, no other restrictions.","SPIR-V 1.5 latest revision, no other restrictions.","","Vulkan 1.0 latest revision.","Vulkan 1.1 latest revision.","Vulkan 1.1 with VK_KHR_spirv_1_4, i.e. SPIR-V 1.4 binary.","Vulkan 1.2 latest revision.","","Work in progress WebGPU 1.0.","Indicates wrong SPIR-V version","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Add color codes to output","Add some comments to the generated assembly","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Indent assembly","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Do not output the module header as leading comments in the …","Numeric IDs in the binary will have the same values as in …","Print to stdout.","","","","","","","","","","","Use friendly names where possible.  The heuristic may …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Gets a byte array for binary","","","Gets the words for the binary","","","","Returns the argument unchanged.","Transmutes a SPIRV binary, which are stored as 32 bit …","Calls <code>U::from(self)</code>.","Transmutes a regular byte array into a SPIRV binary of 32 …","","","","","Debug information.","","","","Normal error due to user input.","","Unrecoverable error due to environment. Will exit the …","General information.","Unrecoverable error due to SPIRV-Tools internals. Will …","","","","","Indicates data rules validation failure.","","","","","","","","","","","","","","Success, but signals early termination.","","","","Warning information.","","Indicates wrong SPIR-V version","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Some messages can include additional information, …","","","","","","","","","","","","","","","","","","","Create aggressive dead code elimination pass This pass …","Replaces the extensions …","Creates a block merge pass. This pass searches for blocks …","Creates a CFG cleanup pass. This pass removes cruft from …","Create a pass to do code sinking.  Code sinking is a …","Create a pass to combine chained access chains. This pass …","Creates a compact ids pass. The pass remaps result ids to …","Creates a conditional constant propagation (CCP) pass. …","Create pass to convert relaxed precision instructions to …","Create copy propagate arrays pass. This pass looks to copy …","Create dead branch elimination pass. For each entry point …","Creates a dead insert elimination pass. This pass …","Create dead variable elimination pass. This pass will …","Create descriptor scalar replacement pass. This pass …","Creates a eliminate-dead-constant pass. A …","Creates an eliminate-dead-functions pass. An …","Creates an eliminate-dead-members pass. An …","Create a pass to fix incorrect storage classes.  In order …","Creates a flatten-decoration pass. A flatten-decoration …","Creates a fold-spec-constant-op-and-composite pass. A …","Creates a freeze-spec-constant-value pass. A …","Creates a graphics robust access pass.","Creates a pass that converts if-then-else like assignments …","Creates an exhaustive inline pass. An exhaustive inline …","Creates an opaque inline pass. An opaque inline pass …","Creates an insert/extract elimination pass. This pass …","Replaces the internal version of GLSLstd450 InterpolateAt* …","Creates a local access chain conversion pass. A local …","Creates an SSA local variable load/store elimination pass. …","Create value numbering pass. This pass will look for …","Creates a single-block local variable load/store …","Creates a local single store elimination pass. For each …","Create LICM pass. This pass will look for invariant …","Creates a loop peeling pass. This pass will look for …","Creates a loop unswitch pass. This pass will look for loop …","create merge return pass. changes functions that have …","Creates a null pass. A null pass does nothing to the …","","Options for specifying the behavior of the optimizer","","Create a private to local pass. This pass looks for …","Create line propagation pass This pass propagates line …","Create a pass to reduce the size of loads. This pass looks …","Create global value numbering pass. This pass will look …","Create dead line elimination pass This pass eliminates …","Create relax float ops pass. This pass decorates all …","Creates a remove duplicate pass. This pass removes various …","Creates a remove-unused-interface-variables pass. Removes …","Creates a pass that will replace instructions that are not …","Create the SSA rewrite pass. This pass converts load/store …","Creates a pass that simplifies instructions using the …","Creates a strength-reduction pass. A strength-reduction …","Creates a strip-debug-info pass. A strip-debug-info pass …","Creates a strip-nonsemantic-info pass. A …","Creates a unify-constant pass. A unify-constant pass …","Create a pass to upgrade to the VulkanKHR memory model. …","Create a vector dce pass. This pass looks for components …","Creates a workaround driver bugs pass.  This pass attempts …","Create a pass to replace each OpKill instruction with a …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Records the maximum possible value for the id bound.","","Records whether all bindings within the module should be …","Records whether all specialization constants within the …","Registers passes that attempt to legalize the generated …","Register a single pass with the the optimizer.","Registers passes that attempt to improve performance of …","Registers passes that attempt to improve the size of …","","","","","","","","","","Records the validator options that should be passed to the …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Registers passes that attempt to legalize the generated …","Register a single pass with the the optimizer.","Registers passes that attempt to improve performance of …","Registers passes that attempt to improve the size of …","","","","","","","","","","","","","","","","","Records whether or not the validator should relax the …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Applies a maximum to one or more Universal limits","Records whether the validator should use “relaxed” …","Records whether or not the validator should relax the …","Record whether or not the validator should relax the rules …","Records whether the validator should use “scalar” …","Records whether or not the validator should skip …","","","","","","","","","","Records whether the validator should use standard block …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,2,0,1,1,1,1,1,1,2,1,1,1,1,2,1,2,0,0,1,2,1,2,1,2,1,2,1,1,2,0,1,1,2,2,1,2,1,1,2,0,1,2,1,2,1,2,1,2,1,2,0,0,0,0,16,11,14,11,14,11,14,11,14,14,14,0,11,14,16,11,14,14,11,11,14,14,14,11,14,14,11,14,0,11,14,11,14,11,14,14,16,0,20,20,20,20,20,20,20,20,20,20,20,0,12,12,12,12,12,12,12,12,12,12,0,12,0,12,12,12,12,24,0,2,0,24,2,24,24,24,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,0,2,2,24,2,2,24,13,25,26,24,13,25,26,24,25,24,25,25,26,13,24,13,25,25,24,13,13,25,26,24,13,25,25,25,26,25,26,13,24,13,25,26,25,26,25,26,25,26,25,26,31,13,26,24,25,13,24,13,25,26,24,13,25,26,24,13,25,26,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,28,29,28,29,28,29,0,29,28,28,29,28,29,29,30,29,29,30,30,30,30,28,29,0,28,29,28,29,28,29,29,30,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,34,34,34,34,34,34,34,34,0,0,0,33,33,34,33,34,33,34,33,34,0,33,34,33,34,33,34,33,33,33,33,33,33,33,34,0,33,34,33,34,33,34,33,35,35,0,36,36,36,36,36,36,36,36,36,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],1],[[1,1],4],[[2,2],4],0,[[1,5],[[7,[3,6]]]],[[1,5],[[7,[3,6]]]],[[2,5],[[7,[3,6]]]],[[2,5],[[7,[3,6]]]],[-1,-1,[]],[-1,-1,[]],[8,[[7,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[-1,9,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,0,0,0,[[-1,8,11],[[7,[12,13]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,11],[14,14],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,[[[15,[1]]],[[0,[16]]]],[[],11],[[],14],[[-1,-2,14],[[7,[[15,[9]],13]]],[],[[19,[[18,[17]]]]]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[11,17],[-1,-2,[],[]],[14,17],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,[1,-1,[]],0,[[20,8,11],[[7,[12,13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[],20],[[20,-1,14],[[7,[[15,[9]],13]]],[[19,[[18,[17]]]]]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,10,[]],[1,20],0,0,0,[12,[[18,[21]]]],[12,[[18,[17]]]],[12,[[18,[21]]]],[12,[[18,[17]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[12,5],22],[-1,-1,[]],[[[18,[17]]],[[18,[21]]]],[-1,-2,[],[]],[[[18,[21]]],[[7,[[18,[17]],13]]]],[[[23,[21]]],[[7,[12]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,10,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[25,25],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,0,[[24,24],4],[[13,13],4],[[25,25],4],[[-1,-2],4,[],[]],[[24,5],[[7,[3,6]]]],[[13,5],22],[[13,5],22],[[25,5],22],[[26,5],22],[-1,-1,[]],[-1,-1,[]],[9,25],[26,25],[-1,-1,[]],[-1,-1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[-1,26],3,[]],[13,[[15,[27]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[29,29],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[15,[1]]],[[0,[30]]]],[[],29],[[28,5],[[7,[3,6]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,-2,-3,[15,[29]]],[[7,[12,13]]],[],[[19,[[18,[17]]]]],31],0,0,[-1,-1,[]],[[-1,28],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,[1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],32],[-1,-1,[]],[-1,-2,[],[]],[[32,-1,-2,[15,[29]]],[[7,[12,13]]],[[19,[[18,[17]]]]],31],[32,32],[[32,28],32],[32,32],[32,32],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,10,[]],[1,32],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[34,34],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[15,[1]]],[[0,[35]]]],[[],33],[[34,5],[[7,[3,6]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,[[-1,-2,[15,[33]]],[[7,[3,13]]],[],[[19,[[18,[17]]]]]],[1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],36],[-1,-1,[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,10,[]],[[36,-1,[15,[33]]],[[7,[3,13]]],[[19,[[18,[17]]]]]],[1,36]],"c":[],"p":[[4,"TargetEnv",0],[4,"SpirvResult",0],[15,"tuple"],[15,"bool"],[3,"Formatter",416],[3,"Error",416],[4,"Result",417],[15,"str"],[3,"String",418],[3,"TypeId",419],[3,"AssemblerOptions",84],[4,"Binary",136],[3,"Error",154],[3,"DisassembleOptions",84],[4,"Option",420],[8,"Assembler",84],[15,"u32"],[15,"slice"],[8,"AsRef",421],[3,"ToolAssembler",124],[15,"u8"],[6,"Result",416],[3,"Vec",422],[4,"MessageLevel",154],[3,"Diagnostic",154],[3,"Message",154],[8,"Error",423],[4,"Passes",251],[3,"Options",251],[8,"Optimizer",251],[8,"MessageCallback",154],[3,"ToolOptimizer",344],[3,"ValidatorOptions",359],[4,"ValidatorLimits",359],[8,"Validator",359],[3,"ToolValidator",405]]},\
"spirv_tools_sys":{"doc":"","t":"AAAAAENNENNNNNNNNDFLLLLLLMFLLLLLLMFLLLLLLLLLNDNNNNGEDNLLLLLLLLMFLMLLLLMLLLMMMLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDDENNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLFFFFFFFFFFFFFFFFLLLLLLLLLLDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENEDNNNNNNNNNNNNNNFLLLLLLLLLLLLMFFLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLNNNNNNNNNEDLLLLLLLLLLLLLLLLLLFFFFFFFFFFFF","n":["assembler","diagnostics","opt","shared","val","BinaryOptions","Color","Comment","DisassembleOptions","FriendlyNames","Indent","NoHeader","None","None","PreserveNumberIds","Print","ShowByteOffset","Text","assemble","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","data","disassemble","from","from","from","into","into","into","length","text_destroy","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Debug","Diagnostic","Error","Fatal","Info","InternalError","MessageCallback","MessageLevel","Position","Warning","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","column","diagnostic_destroy","eq","error","fmt","from","from","from","index","into","into","into","is_text_source","line","position","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AggressiveDCE","AmdExtToKhr","BlockMerge","CFGCleanup","CodeSinking","CombineAccessChains","CompactIds","ConditionalConstantPropagation","ConvertRelaxedToHalf","CopyPropagateArrays","DeadBranchElim","DeadInsertElim","DeadVariableElimination","DescriptorScalarReplacement","EliminateDeadConstant","EliminateDeadFunctions","EliminateDeadMembers","FixStorageClass","FlattenDecoration","FoldSpecConstantOpAndComposite","FreezeSpecConstantValue","GraphicsRobustAccess","IfConversion","InlineExhaustive","InlineOpaque","InsertExtractElim","InterpolateFixup","LocalAccessChainConvert","LocalMultiStoreElim","LocalRedundancyElimination","LocalSingleBlockLoadStoreElim","LocalSingleStoreElim","LoopInvariantCodeMotion","LoopPeeling","LoopUnswitch","MergeReturn","Null","Optimizer","OptimizerOptions","Passes","PrivateToLocal","PropagateLineInfo","ReduceLoadSize","RedundancyElimination","RedundantLineInfoElim","RelaxFloatOps","RemoveDuplicates","RemoveUnusedInterfaceVariables","ReplaceInvalidOpcode","SSARewrite","Simplification","StrengthReduction","StripDebugInfo","StripNonSemanticInfo","UnifyConstant","UpgradeMemoryModel","VectorDCE","Workaround1209","WrapOpKill","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","from","into","into","into","optimizer_create","optimizer_destroy","optimizer_options_create","optimizer_options_destroy","optimizer_options_preserve_bindings","optimizer_options_preserve_spec_constants","optimizer_options_run_validator","optimizer_options_set_max_id_bound","optimizer_options_set_validator_options","optimizer_register_hlsl_legalization_passes","optimizer_register_pass","optimizer_register_performance_passes","optimizer_register_size_passes","optimizer_register_vulkan_to_webgpu_passes","optimizer_register_webgpu_to_vulkan_passes","optimizer_run","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Binary","EndOfStream","FailedMatch","InternalError","InvalidBinary","InvalidCapability","InvalidCfg","InvalidData","InvalidDiagnostic","InvalidId","InvalidLayout","InvalidLookup","InvalidPointer","InvalidTable","InvalidText","InvalidValue","MissingExtension","OpenCLEmbedded_1_2","OpenCLEmbedded_2_0","OpenCLEmbedded_2_1","OpenCLEmbedded_2_2","OpenCL_1_2","OpenCL_2_0","OpenCL_2_1","OpenCL_2_2","OpenGL_4_0","OpenGL_4_1","OpenGL_4_2","OpenGL_4_3","OpenGL_4_5","OutOfMemory","RequestedTermination","SpirvResult","Success","TargetEnv","ToolContext","Universal_1_0","Universal_1_1","Universal_1_2","Universal_1_3","Universal_1_4","Universal_1_5","Unsupported","Vulkan_1_0","Vulkan_1_1","Vulkan_1_1_Spirv_1_4","Vulkan_1_2","Warning","WebGPU_0","WrongVersion","binary_destroy","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","code","context_create","context_destroy","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_str","into","into","into","into","size","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","AccessChainIndexes","ControlFlowNestingDepth","FunctionArgs","GlobalVariables","IdBound","LocalVariables","StructDepth","StructMembers","SwitchBranches","ValidatorLimits","ValidatorOptions","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","validate","validate_with_options","validator_options_create","validator_options_destroy","validator_options_set_before_legalization","validator_options_set_limit","validator_options_set_relax_block_layout","validator_options_set_relax_logical_pointer","validator_options_set_relax_store_struct","validator_options_set_scalar_block_layout","validator_options_set_skip_block_layout","validator_options_set_uniform_buffer_standard_layout"],"q":[[0,"spirv_tools_sys"],[5,"spirv_tools_sys::assembler"],[44,"spirv_tools_sys::diagnostics"],[87,"spirv_tools_sys::opt"],[187,"spirv_tools_sys::shared"],[286,"spirv_tools_sys::val"],[327,"core::result"],[328,"core::any"],[329,"core::fmt"],[330,"core::fmt"]],"d":["","","","","","","Add color codes to output","Add some comments to the generated assembly","","Use friendly names where possible.  The heuristic may …","Indent assembly","Do not output the module header as leading comments in the …","","","","Print to stdout","","","Encodes the given SPIR-V assembly text to its binary …","","","","","","","","Decodes the given SPIR-V binary representation to its …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Frees an allocated text stream. This is a no-op if the …","","","","","","","","","","Debug information.","","Normal error due to user input.","Unrecoverable error due to environment. Will exit the …","General information.","Unrecoverable error due to SPIRV-Tools internals. Will …","","","","Warning information.","","","","","","","","","","Destroys a diagnostic object.  This is a no-op if …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Create aggressive dead code elimination pass This pass …","Replaces the extensions …","Creates a block merge pass. This pass searches for blocks …","Creates a CFG cleanup pass. This pass removes cruft from …","Create a pass to do code sinking.  Code sinking is a …","Create a pass to combine chained access chains. This pass …","Creates a compact ids pass. The pass remaps result ids to …","Creates a conditional constant propagation (CCP) pass. …","Create pass to convert relaxed precision instructions to …","Create copy propagate arrays pass. This pass looks to copy …","Create dead branch elimination pass. For each entry point …","Creates a dead insert elimination pass. This pass …","Create dead variable elimination pass. This pass will …","Create descriptor scalar replacement pass. This pass …","Creates a eliminate-dead-constant pass. A …","Creates an eliminate-dead-functions pass. An …","Creates an eliminate-dead-members pass. An …","Create a pass to fix incorrect storage classes.  In order …","Creates a flatten-decoration pass. A flatten-decoration …","Creates a fold-spec-constant-op-and-composite pass. A …","Creates a freeze-spec-constant-value pass. A …","Creates a graphics robust access pass.","Creates a pass that converts if-then-else like assignments …","Creates an exhaustive inline pass. An exhaustive inline …","Creates an opaque inline pass. An opaque inline pass …","Creates an insert/extract elimination pass. This pass …","Replaces the internal version of GLSLstd450 InterpolateAt* …","Creates a local access chain conversion pass. A local …","Creates an SSA local variable load/store elimination pass. …","Create value numbering pass. This pass will look for …","Creates a single-block local variable load/store …","Creates a local single store elimination pass. For each …","Create LICM pass. This pass will look for invariant …","Creates a loop peeling pass. This pass will look for …","Creates a loop unswitch pass. This pass will look for loop …","create merge return pass. changes functions that have …","Creates a null pass. A null pass does nothing to the …","","","","Create a private to local pass. This pass looks for …","Create line propagation pass This pass propagates line …","Create a pass to reduce the size of loads. This pass looks …","Create global value numbering pass. This pass will look …","Create dead line elimination pass This pass eliminates …","Create relax float ops pass. This pass decorates all …","Creates a remove duplicate pass. This pass removes various …","Creates a remove-unused-interface-variables pass. Removes …","Creates a pass that will replace instructions that are not …","Create the SSA rewrite pass. This pass converts load/store …","Creates a pass that simplifies instructions using the …","Creates a strength-reduction pass. A strength-reduction …","Creates a strip-debug-info pass. A strip-debug-info pass …","Creates a strip-nonsemantic-info pass. A …","Creates a unify-constant pass. A unify-constant pass …","Create a pass to upgrade to the VulkanKHR memory model. …","Create a vector dce pass. This pass looks for components …","Creates a workaround driver bugs pass.  This pass attempts …","Create a pass to replace each OpKill instruction with a …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates an optimizer options object with default options. …","Destroys the given optimizer options object.","Records whether all bindings within the module should be …","Records whether all specialization constants within the …","Records whether or not the optimizer should run the …","Records the maximum possible value for the id bound.","Records the validator options that should be passed to the …","Registers passes that attempt to legalize the generated …","","Registers passes that attempt to improve performance of …","Registers passes that attempt to improve the size of …","Registers passes that have been prescribed for converting …","Registers passes that have been prescribed for converting …","","","","","","","","","","","","","","","","","","","Indicates data rules validation failure.","","","","","","","","","","OpenCL Embedded Profile 1.2 plus cl_khr_il_program, latest …","OpenCL Embedded Profile 2.0 plus cl_khr_il_program, latest …","OpenCL Embedded Profile 2.1 latest revision.","OpenCL Embedded Profile 2.2 latest revision.","OpenCL Full Profile 1.2 plus cl_khr_il_program, latest …","OpenCL Full Profile 2.0 plus cl_khr_il_program, latest …","OpenCL Full Profile 2.1 latest revision.","OpenCL Full Profile 2.2 latest revision.","OpenGL 4.0 plus GL_ARB_gl_spirv, latest revisions.","OpenGL 4.1 plus GL_ARB_gl_spirv, latest revisions.","OpenGL 4.2 plus GL_ARB_gl_spirv, latest revisions.","OpenGL 4.3 plus GL_ARB_gl_spirv, latest revisions.","OpenGL 4.5 plus GL_ARB_gl_spirv, latest revisions.","","Success, but signals early termination.","","","Certain target environments impose additional restrictions …","","SPIR-V 1.0 latest revision, no other restrictions.","SPIR-V 1.1 latest revision, no other restrictions.","SPIR-V 1.2, latest revision, no other restrictions.","SPIR-V 1.3 latest revision, no other restrictions.","SPIR-V 1.4 latest revision, no other restrictions.","SPIR-V 1.5 latest revision, no other restrictions.","","Vulkan 1.0 latest revision.","Vulkan 1.1 latest revision.","Vulkan 1.1 with VK_KHR_spirv_1_4, i.e. SPIR-V 1.4 binary.","Vulkan 1.2 latest revision.","","Work in progress WebGPU 1.0.","Indicates wrong SPIR-V version","Frees a binary stream from memory. This is a no-op if …","","","","","","","","","","","","","","Creates a context object for most of the SPIRV-Tools API. …","Destroys the given context object.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Validates a SPIR-V binary for correctness. Any errors will …","Validates a SPIR-V binary for correctness. Uses the …","Creates a Validator options object with default options. …","Destroys the given Validator options object.","Records whether or not the validator should relax the …","Records the maximum Universal Limit that is considered …","Records whether the validator should use “relaxed” …","Records whether or not the validator should relax the …","Record whether or not the validator should relax the rules …","Records whether the validator should use “scalar” …","Records whether or not the validator should skip …","Records whether the validator should use standard block …"],"i":[0,0,0,0,0,0,14,14,0,14,14,14,15,14,15,14,14,0,0,15,16,14,15,16,14,16,0,15,16,14,15,16,14,16,0,15,16,14,15,16,14,15,16,14,3,0,3,3,3,3,0,0,0,3,17,18,3,17,18,3,3,3,17,0,3,18,3,17,18,3,17,17,18,3,18,17,18,3,17,18,3,17,18,3,17,18,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,19,20,8,19,20,8,8,8,8,19,20,8,19,20,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,19,20,8,19,20,8,19,20,8,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,0,10,0,0,9,9,9,9,9,9,10,9,9,9,9,10,9,10,0,21,22,9,10,21,22,9,10,9,10,9,10,21,0,0,9,9,10,9,9,10,10,21,22,9,10,9,21,22,9,10,21,9,10,9,10,21,22,9,10,21,22,9,10,21,22,9,10,13,13,13,13,13,13,13,13,13,0,0,23,13,23,13,13,13,13,23,13,23,13,13,23,13,23,13,23,13,0,0,0,0,0,0,0,0,0,0,0,0],"fc":[],"p":[[4,"Result",327],[3,"TypeId",328],[4,"MessageLevel",44],[15,"tuple"],[15,"bool"],[3,"Formatter",329],[6,"Result",329],[4,"Passes",87],[4,"TargetEnv",187],[4,"SpirvResult",187],[15,"str"],[3,"String",330],[4,"ValidatorLimits",286],[4,"DisassembleOptions",5],[4,"BinaryOptions",5],[3,"Text",5],[3,"Position",44],[3,"Diagnostic",44],[3,"Optimizer",87],[3,"OptimizerOptions",87],[3,"Binary",187],[3,"ToolContext",187],[3,"ValidatorOptions",286]]},\
"stable_deref_trait":{"doc":"This module defines an unsafe marker trait, StableDeref, …","t":"II","n":["CloneStableDeref","StableDeref"],"q":[[0,"stable_deref_trait"]],"d":["An unsafe marker trait for types where clones deref to the …","An unsafe marker trait for types that deref to a stable …"],"i":[0,0],"f":[0,0],"c":[],"p":[]},\
"syn":{"doc":"github crates-io docs-rs","t":"DNNNNDDNNNNNEDGNNDENDNNNNNNNDNNDNNNNNNNNNNNNNNNNNNDDNNNNEDDDNNDNNNNNNNDENDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNDNDDEDDDNNNENEDDDDNNEEEDNNNNNNCDDNNNDEDDDDNDNNNNNENDDDDDDDDDDDDDDDDDNNCCDNNNNDNCCENNNCCDCCDCCDCCDCCDCCDCCDDNNNDNNNNNNNNENNEENDDNNNDNNNNNNNNNENNNNNNNNNNNNDEDDDDDDDDDDDDDDDDNNNNNEDDDDNNDNNENDNNNNNNNNNNGNENNNNNDNNNNENENNNNNNONNNDEEDDDDNNNNNNNDENNNNNNNNNNNDDDDDDDDDEDDDDDDDNENNNNNNNNDDDDDEDDNNNNNNNNDDDEDENNNMMMMMMMMMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMOMMMMMMMOMAMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMLLMMMMMMMMMMOOMLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLMMMMMMMMMMMMMLLLLMMMMMMMMMMMMMMMMMMMMMAMMMMMMMMMMLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMLMMMMMMMMLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLMMMMMMMMMMMMLMMMMMLMMMLMMMMLMMMMMMMMMMMMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMOAFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLFLOLLLLOOFLLLLLLMMMMMMMMMLMMMMMMMMMMMMMMMMMAMMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALMMMMMMMMMLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLMMMMMMLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMAMMMLLLLMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKSKNDDDNQIDGIIGDLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKNDDDDEDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDIDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLLFLL","n":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Block","Bool","BoundLifetimes","Box","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Enum","Eq","Eq","Err","Error","Expr","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericMethodArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemMacro","ImplItemMethod","ImplItemType","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMacro2","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","Lit","Lit","Lit","LitBool","LitBool","LitBool","LitByte","LitByte","LitByte","LitByteStr","LitByteStr","LitByteStr","LitChar","LitChar","LitChar","LitFloat","LitFloat","LitFloat","LitInt","LitInt","LitInt","LitStr","LitStr","LitStr","Local","Local","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro2","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","Method","Method","MethodCall","MethodTurbofish","Mod","Mul","MulEq","Name","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Ok","Or","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatBox","PatIdent","PatLit","PatMacro","PatOr","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Raw","Receiver","Receiver","Reference","Reference","Reference","Rem","RemEq","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Semi","Shl","ShlEq","Shr","ShrEq","Signature","Slice","Slice","Static","Static","Stmt","Str","StrStyle","Struct","Struct","Struct","Struct","Sub","SubEq","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemMacro","TraitItemMethod","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","box_token","box_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","constness","content","continue_token","crate_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","discriminant","dot2_token","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","else_branch","enum_token","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","equivalent","equivalent","equivalent","equivalent","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","hi","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","left","len","len","len","let_token","let_token","lhs_ty","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","lo","loop_token","lt_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","macro_token","make_where_clause","match_token","member","member","member","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","qself","question_token","raw","receiver","receiver","reference","rename","rename","rest","return_token","rhs_ty","right","right","right","rules","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","visit_mut","where_clause","where_token","while_token","without_plus","without_plus","without_plus","without_plus","yield_token","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","equivalent","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Err","Error","Lookahead1","Nothing","Ok","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","VisitMut","visit_abi_mut","visit_abi_mut","visit_abi_mut","visit_angle_bracketed_generic_arguments_mut","visit_angle_bracketed_generic_arguments_mut","visit_angle_bracketed_generic_arguments_mut","visit_arm_mut","visit_arm_mut","visit_arm_mut","visit_attr_style_mut","visit_attr_style_mut","visit_attr_style_mut","visit_attribute_mut","visit_attribute_mut","visit_attribute_mut","visit_bare_fn_arg_mut","visit_bare_fn_arg_mut","visit_bare_fn_arg_mut","visit_bin_op_mut","visit_bin_op_mut","visit_bin_op_mut","visit_binding_mut","visit_binding_mut","visit_binding_mut","visit_block_mut","visit_block_mut","visit_block_mut","visit_bound_lifetimes_mut","visit_bound_lifetimes_mut","visit_bound_lifetimes_mut","visit_const_param_mut","visit_const_param_mut","visit_const_param_mut","visit_constraint_mut","visit_constraint_mut","visit_constraint_mut","visit_data_enum_mut","visit_data_enum_mut","visit_data_enum_mut","visit_data_mut","visit_data_mut","visit_data_mut","visit_data_struct_mut","visit_data_struct_mut","visit_data_struct_mut","visit_data_union_mut","visit_data_union_mut","visit_data_union_mut","visit_derive_input_mut","visit_derive_input_mut","visit_derive_input_mut","visit_expr_array_mut","visit_expr_array_mut","visit_expr_array_mut","visit_expr_assign_mut","visit_expr_assign_mut","visit_expr_assign_mut","visit_expr_assign_op_mut","visit_expr_assign_op_mut","visit_expr_assign_op_mut","visit_expr_async_mut","visit_expr_async_mut","visit_expr_async_mut","visit_expr_await_mut","visit_expr_await_mut","visit_expr_await_mut","visit_expr_binary_mut","visit_expr_binary_mut","visit_expr_binary_mut","visit_expr_block_mut","visit_expr_block_mut","visit_expr_block_mut","visit_expr_box_mut","visit_expr_box_mut","visit_expr_box_mut","visit_expr_break_mut","visit_expr_break_mut","visit_expr_break_mut","visit_expr_call_mut","visit_expr_call_mut","visit_expr_call_mut","visit_expr_cast_mut","visit_expr_cast_mut","visit_expr_cast_mut","visit_expr_closure_mut","visit_expr_closure_mut","visit_expr_closure_mut","visit_expr_continue_mut","visit_expr_continue_mut","visit_expr_continue_mut","visit_expr_field_mut","visit_expr_field_mut","visit_expr_field_mut","visit_expr_for_loop_mut","visit_expr_for_loop_mut","visit_expr_for_loop_mut","visit_expr_group_mut","visit_expr_group_mut","visit_expr_group_mut","visit_expr_if_mut","visit_expr_if_mut","visit_expr_if_mut","visit_expr_index_mut","visit_expr_index_mut","visit_expr_index_mut","visit_expr_let_mut","visit_expr_let_mut","visit_expr_let_mut","visit_expr_lit_mut","visit_expr_lit_mut","visit_expr_lit_mut","visit_expr_loop_mut","visit_expr_loop_mut","visit_expr_loop_mut","visit_expr_macro_mut","visit_expr_macro_mut","visit_expr_macro_mut","visit_expr_match_mut","visit_expr_match_mut","visit_expr_match_mut","visit_expr_method_call_mut","visit_expr_method_call_mut","visit_expr_method_call_mut","visit_expr_mut","visit_expr_mut","visit_expr_mut","visit_expr_paren_mut","visit_expr_paren_mut","visit_expr_paren_mut","visit_expr_path_mut","visit_expr_path_mut","visit_expr_path_mut","visit_expr_range_mut","visit_expr_range_mut","visit_expr_range_mut","visit_expr_reference_mut","visit_expr_reference_mut","visit_expr_reference_mut","visit_expr_repeat_mut","visit_expr_repeat_mut","visit_expr_repeat_mut","visit_expr_return_mut","visit_expr_return_mut","visit_expr_return_mut","visit_expr_struct_mut","visit_expr_struct_mut","visit_expr_struct_mut","visit_expr_try_block_mut","visit_expr_try_block_mut","visit_expr_try_block_mut","visit_expr_try_mut","visit_expr_try_mut","visit_expr_try_mut","visit_expr_tuple_mut","visit_expr_tuple_mut","visit_expr_tuple_mut","visit_expr_type_mut","visit_expr_type_mut","visit_expr_type_mut","visit_expr_unary_mut","visit_expr_unary_mut","visit_expr_unary_mut","visit_expr_unsafe_mut","visit_expr_unsafe_mut","visit_expr_unsafe_mut","visit_expr_while_mut","visit_expr_while_mut","visit_expr_while_mut","visit_expr_yield_mut","visit_expr_yield_mut","visit_expr_yield_mut","visit_field_mut","visit_field_mut","visit_field_mut","visit_field_pat_mut","visit_field_pat_mut","visit_field_pat_mut","visit_field_value_mut","visit_field_value_mut","visit_field_value_mut","visit_fields_mut","visit_fields_mut","visit_fields_mut","visit_fields_named_mut","visit_fields_named_mut","visit_fields_named_mut","visit_fields_unnamed_mut","visit_fields_unnamed_mut","visit_fields_unnamed_mut","visit_file_mut","visit_file_mut","visit_file_mut","visit_fn_arg_mut","visit_fn_arg_mut","visit_fn_arg_mut","visit_foreign_item_fn_mut","visit_foreign_item_fn_mut","visit_foreign_item_fn_mut","visit_foreign_item_macro_mut","visit_foreign_item_macro_mut","visit_foreign_item_macro_mut","visit_foreign_item_mut","visit_foreign_item_mut","visit_foreign_item_mut","visit_foreign_item_static_mut","visit_foreign_item_static_mut","visit_foreign_item_static_mut","visit_foreign_item_type_mut","visit_foreign_item_type_mut","visit_foreign_item_type_mut","visit_generic_argument_mut","visit_generic_argument_mut","visit_generic_argument_mut","visit_generic_method_argument_mut","visit_generic_method_argument_mut","visit_generic_method_argument_mut","visit_generic_param_mut","visit_generic_param_mut","visit_generic_param_mut","visit_generics_mut","visit_generics_mut","visit_generics_mut","visit_ident_mut","visit_ident_mut","visit_ident_mut","visit_impl_item_const_mut","visit_impl_item_const_mut","visit_impl_item_const_mut","visit_impl_item_macro_mut","visit_impl_item_macro_mut","visit_impl_item_macro_mut","visit_impl_item_method_mut","visit_impl_item_method_mut","visit_impl_item_method_mut","visit_impl_item_mut","visit_impl_item_mut","visit_impl_item_mut","visit_impl_item_type_mut","visit_impl_item_type_mut","visit_impl_item_type_mut","visit_index_mut","visit_index_mut","visit_index_mut","visit_item_const_mut","visit_item_const_mut","visit_item_const_mut","visit_item_enum_mut","visit_item_enum_mut","visit_item_enum_mut","visit_item_extern_crate_mut","visit_item_extern_crate_mut","visit_item_extern_crate_mut","visit_item_fn_mut","visit_item_fn_mut","visit_item_fn_mut","visit_item_foreign_mod_mut","visit_item_foreign_mod_mut","visit_item_foreign_mod_mut","visit_item_impl_mut","visit_item_impl_mut","visit_item_impl_mut","visit_item_macro2_mut","visit_item_macro2_mut","visit_item_macro2_mut","visit_item_macro_mut","visit_item_macro_mut","visit_item_macro_mut","visit_item_mod_mut","visit_item_mod_mut","visit_item_mod_mut","visit_item_mut","visit_item_mut","visit_item_mut","visit_item_static_mut","visit_item_static_mut","visit_item_static_mut","visit_item_struct_mut","visit_item_struct_mut","visit_item_struct_mut","visit_item_trait_alias_mut","visit_item_trait_alias_mut","visit_item_trait_alias_mut","visit_item_trait_mut","visit_item_trait_mut","visit_item_trait_mut","visit_item_type_mut","visit_item_type_mut","visit_item_type_mut","visit_item_union_mut","visit_item_union_mut","visit_item_union_mut","visit_item_use_mut","visit_item_use_mut","visit_item_use_mut","visit_label_mut","visit_label_mut","visit_label_mut","visit_lifetime_def_mut","visit_lifetime_def_mut","visit_lifetime_def_mut","visit_lifetime_mut","visit_lifetime_mut","visit_lifetime_mut","visit_lit_bool_mut","visit_lit_bool_mut","visit_lit_bool_mut","visit_lit_byte_mut","visit_lit_byte_mut","visit_lit_byte_mut","visit_lit_byte_str_mut","visit_lit_byte_str_mut","visit_lit_byte_str_mut","visit_lit_char_mut","visit_lit_char_mut","visit_lit_char_mut","visit_lit_float_mut","visit_lit_float_mut","visit_lit_float_mut","visit_lit_int_mut","visit_lit_int_mut","visit_lit_int_mut","visit_lit_mut","visit_lit_mut","visit_lit_mut","visit_lit_str_mut","visit_lit_str_mut","visit_lit_str_mut","visit_local_mut","visit_local_mut","visit_local_mut","visit_macro_delimiter_mut","visit_macro_delimiter_mut","visit_macro_delimiter_mut","visit_macro_mut","visit_macro_mut","visit_macro_mut","visit_member_mut","visit_member_mut","visit_member_mut","visit_meta_list_mut","visit_meta_list_mut","visit_meta_list_mut","visit_meta_mut","visit_meta_mut","visit_meta_mut","visit_meta_name_value_mut","visit_meta_name_value_mut","visit_meta_name_value_mut","visit_method_turbofish_mut","visit_method_turbofish_mut","visit_method_turbofish_mut","visit_nested_meta_mut","visit_nested_meta_mut","visit_nested_meta_mut","visit_parenthesized_generic_arguments_mut","visit_parenthesized_generic_arguments_mut","visit_parenthesized_generic_arguments_mut","visit_pat_box_mut","visit_pat_box_mut","visit_pat_box_mut","visit_pat_ident_mut","visit_pat_ident_mut","visit_pat_ident_mut","visit_pat_lit_mut","visit_pat_lit_mut","visit_pat_lit_mut","visit_pat_macro_mut","visit_pat_macro_mut","visit_pat_macro_mut","visit_pat_mut","visit_pat_mut","visit_pat_mut","visit_pat_or_mut","visit_pat_or_mut","visit_pat_or_mut","visit_pat_path_mut","visit_pat_path_mut","visit_pat_path_mut","visit_pat_range_mut","visit_pat_range_mut","visit_pat_range_mut","visit_pat_reference_mut","visit_pat_reference_mut","visit_pat_reference_mut","visit_pat_rest_mut","visit_pat_rest_mut","visit_pat_rest_mut","visit_pat_slice_mut","visit_pat_slice_mut","visit_pat_slice_mut","visit_pat_struct_mut","visit_pat_struct_mut","visit_pat_struct_mut","visit_pat_tuple_mut","visit_pat_tuple_mut","visit_pat_tuple_mut","visit_pat_tuple_struct_mut","visit_pat_tuple_struct_mut","visit_pat_tuple_struct_mut","visit_pat_type_mut","visit_pat_type_mut","visit_pat_type_mut","visit_pat_wild_mut","visit_pat_wild_mut","visit_pat_wild_mut","visit_path_arguments_mut","visit_path_arguments_mut","visit_path_arguments_mut","visit_path_mut","visit_path_mut","visit_path_mut","visit_path_segment_mut","visit_path_segment_mut","visit_path_segment_mut","visit_predicate_eq_mut","visit_predicate_eq_mut","visit_predicate_eq_mut","visit_predicate_lifetime_mut","visit_predicate_lifetime_mut","visit_predicate_lifetime_mut","visit_predicate_type_mut","visit_predicate_type_mut","visit_predicate_type_mut","visit_qself_mut","visit_qself_mut","visit_qself_mut","visit_range_limits_mut","visit_range_limits_mut","visit_range_limits_mut","visit_receiver_mut","visit_receiver_mut","visit_receiver_mut","visit_return_type_mut","visit_return_type_mut","visit_return_type_mut","visit_signature_mut","visit_signature_mut","visit_signature_mut","visit_span_mut","visit_span_mut","visit_span_mut","visit_stmt_mut","visit_stmt_mut","visit_stmt_mut","visit_trait_bound_modifier_mut","visit_trait_bound_modifier_mut","visit_trait_bound_modifier_mut","visit_trait_bound_mut","visit_trait_bound_mut","visit_trait_bound_mut","visit_trait_item_const_mut","visit_trait_item_const_mut","visit_trait_item_const_mut","visit_trait_item_macro_mut","visit_trait_item_macro_mut","visit_trait_item_macro_mut","visit_trait_item_method_mut","visit_trait_item_method_mut","visit_trait_item_method_mut","visit_trait_item_mut","visit_trait_item_mut","visit_trait_item_mut","visit_trait_item_type_mut","visit_trait_item_type_mut","visit_trait_item_type_mut","visit_type_array_mut","visit_type_array_mut","visit_type_array_mut","visit_type_bare_fn_mut","visit_type_bare_fn_mut","visit_type_bare_fn_mut","visit_type_group_mut","visit_type_group_mut","visit_type_group_mut","visit_type_impl_trait_mut","visit_type_impl_trait_mut","visit_type_impl_trait_mut","visit_type_infer_mut","visit_type_infer_mut","visit_type_infer_mut","visit_type_macro_mut","visit_type_macro_mut","visit_type_macro_mut","visit_type_mut","visit_type_mut","visit_type_mut","visit_type_never_mut","visit_type_never_mut","visit_type_never_mut","visit_type_param_bound_mut","visit_type_param_bound_mut","visit_type_param_bound_mut","visit_type_param_mut","visit_type_param_mut","visit_type_param_mut","visit_type_paren_mut","visit_type_paren_mut","visit_type_paren_mut","visit_type_path_mut","visit_type_path_mut","visit_type_path_mut","visit_type_ptr_mut","visit_type_ptr_mut","visit_type_ptr_mut","visit_type_reference_mut","visit_type_reference_mut","visit_type_reference_mut","visit_type_slice_mut","visit_type_slice_mut","visit_type_slice_mut","visit_type_trait_object_mut","visit_type_trait_object_mut","visit_type_trait_object_mut","visit_type_tuple_mut","visit_type_tuple_mut","visit_type_tuple_mut","visit_un_op_mut","visit_un_op_mut","visit_un_op_mut","visit_use_glob_mut","visit_use_glob_mut","visit_use_glob_mut","visit_use_group_mut","visit_use_group_mut","visit_use_group_mut","visit_use_name_mut","visit_use_name_mut","visit_use_name_mut","visit_use_path_mut","visit_use_path_mut","visit_use_path_mut","visit_use_rename_mut","visit_use_rename_mut","visit_use_rename_mut","visit_use_tree_mut","visit_use_tree_mut","visit_use_tree_mut","visit_variadic_mut","visit_variadic_mut","visit_variadic_mut","visit_variant_mut","visit_variant_mut","visit_variant_mut","visit_vis_crate_mut","visit_vis_crate_mut","visit_vis_crate_mut","visit_vis_public_mut","visit_vis_public_mut","visit_vis_public_mut","visit_vis_restricted_mut","visit_vis_restricted_mut","visit_vis_restricted_mut","visit_visibility_mut","visit_visibility_mut","visit_visibility_mut","visit_where_clause_mut","visit_where_clause_mut","visit_where_clause_mut","visit_where_predicate_mut","visit_where_predicate_mut","visit_where_predicate_mut"],"q":[[0,"syn"],[3725,"syn::buffer"],[3760,"syn::ext"],[3764,"syn::parse"],[3859,"syn::parse::discouraged"],[3861,"syn::punctuated"],[4020,"syn::spanned"],[4022,"syn::token"],[5707,"syn::visit_mut"],[6269,"core::str::traits"],[6270,"core::cmp"],[6271,"core::convert"],[6272,"core::marker"],[6273,"core::fmt"],[6274,"core::fmt"],[6275,"core::fmt"],[6276,"core::convert"],[6277,"core::hash"],[6278,"proc_macro2"],[6279,"proc_macro2"],[6280,"alloc::string"],[6281,"core::any"],[6282,"proc_macro2"],[6283,"proc_macro2"],[6284,"core::ops::function"],[6285,"core::clone"],[6286,"core::default"]],"d":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","One arm of a <code>match</code> expression: <code>0...10 =&gt; { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: the …","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","A box expression: <code>box f</code>.","A box pattern: <code>box v</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Contains the error value","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expr without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","An individual generic argument to a method, like <code>T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","","A word of Rust code, which may be a keyword or legal …","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","A macro invocation within an impl block.","A method within an impl block.","An associated type within an impl block.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A 2.0-style declarative macro introduced by the <code>macro</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A type alias: …","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","","","A Rust lifetime: <code>&#39;a</code>.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","","","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>&quot;new_name&quot;</code> in …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A literal pattern: <code>0</code>.","","","A boolean literal: <code>true</code> or <code>false</code>.","","","A byte literal: <code>b&#39;f&#39;</code>.","","","A byte string literal: <code>b&quot;foo&quot;</code>.","","","A character literal: <code>&#39;a&#39;</code>.","","","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","","","An integer literal: <code>1</code> or <code>1u16</code>.","","","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in the type position.","A macro in pattern position.","A 2.0-style declarative macro introduced by the <code>macro</code> …","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A trait method within the definition of a trait.","A method within an impl block.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>::&lt;&gt;</code> explicit type parameters passed to a method call: …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","Contains the success value","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A pattern in a local binding, function signature, match …","A box pattern: <code>box v</code>.","A pattern that binds a new variable: …","A literal pattern: <code>0</code>.","A macro in pattern position.","A pattern that matches any one of a set of cases.","A path pattern like <code>Color::Red</code>, optionally qualified with a","A range pattern: <code>1..=2</code>.","A reference pattern: <code>&amp;mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A path pattern like <code>Color::Red</code>, optionally qualified with a","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","A raw string like <code>r##&quot;data&quot;##</code>.","The <code>self</code> argument of an associated method, whether taken …","The <code>self</code> argument of an associated method, whether taken …","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A reference pattern: <code>&amp;mut var</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","Expression with trailing semicolon.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice type: <code>[T]</code>.","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A statement, usually ending in a semicolon.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","A macro invocation within the definition of a trait.","A trait method within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A type argument.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A particular type is returned.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted by …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content to …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Value of the field.","","","","","Extension traits to provide parsing methods on foreign …","","","","Content stored in the variant.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Generics required to complete the definition.","If this path consists of a single ident, returns the ident.","","","","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","Name of the struct or enum.","","","","","","","","","","","","","","","","<code>(A, B)</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","","","","","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeDef&gt; over the lifetime …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeDef&gt; over the …","","","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","Name or index of the field.","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the …","","","","","","","","","","","","Returns the identifier that begins this structured meta …","","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","A method’s <code>self</code> receiver, such as <code>&amp;self</code> or …","","","","","","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</codetrait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","","","","","","","","Trait this impl implementsype of the fieldeturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","Visibility of the field.","","","","","","","","","","","","","","","","","","","","Visibility of the struct or enum.","Syntax tree traversal to mutate an exclusive borrow of a …","","","","In some positions, types may not contain the <code>+</code> character, …","","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Contains the error value","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","Contains the success value","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","Returns the <code>Span</code> of the next token in the parse stream, or …","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeyntax tree traversal to mutate an exclusive borrow of a …i":[0,143,143,143,186,0,0,26,148,26,26,26,0,0,0,26,148,0,0,26,0,187,143,143,143,143,143,143,0,26,130,0,26,167,137,137,26,130,130,26,26,130,73,26,69,75,88,116,121,187,0,0,187,26,350,22,0,0,0,0,166,144,0,143,143,88,139,84,143,6,0,0,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,0,26,0,0,0,0,0,0,130,88,111,0,26,0,0,0,0,0,88,143,0,0,0,0,105,26,105,148,143,73,0,0,0,167,26,88,0,0,0,0,0,0,148,0,26,148,22,12,130,0,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,26,0,0,0,75,80,84,187,0,13,0,0,0,16,26,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,26,143,0,26,88,111,116,121,148,167,88,0,26,82,0,0,16,0,0,116,121,26,0,88,143,143,105,13,18,66,143,144,0,148,82,186,144,6,143,167,12,26,137,148,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,26,105,148,167,0,0,0,0,0,148,22,0,26,167,0,350,0,127,26,148,167,143,143,105,26,167,22,0,26,0,146,143,143,143,143,0,148,167,88,111,0,130,0,26,88,139,167,143,143,0,80,88,88,0,0,0,0,0,0,0,148,26,26,26,148,167,167,0,0,26,69,75,84,88,111,116,121,166,167,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,26,88,139,18,18,66,26,88,0,0,0,0,0,0,0,0,26,88,111,116,121,130,148,167,0,0,0,0,0,0,26,167,26,93,126,150,54,159,175,10,36,50,68,188,185,49,37,108,192,1,30,38,126,17,21,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,70,72,76,77,78,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,112,113,114,115,117,118,119,120,122,123,124,125,128,129,138,147,164,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,100,31,136,155,31,40,3,5,3,5,30,33,59,63,92,123,38,41,47,64,72,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,350,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,350,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,85,76,77,85,86,101,119,152,161,190,34,168,19,49,57,90,93,94,100,110,141,145,178,0,11,27,44,55,149,160,177,0,35,0,169,30,38,172,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,9,10,68,106,188,21,61,70,71,76,77,78,85,86,89,98,100,113,117,119,122,181,183,190,72,43,64,74,74,78,89,117,122,158,126,97,39,24,91,0,0,138,74,79,186,76,78,117,118,119,94,122,123,124,136,17,57,176,178,31,40,50,165,161,149,151,156,158,159,160,27,60,162,177,179,43,90,141,9,9,10,66,67,15,28,45,76,78,87,89,98,101,102,122,124,189,9,10,66,67,34,35,37,41,42,44,45,49,51,54,55,56,58,61,62,65,70,89,98,122,170,0,91,163,72,17,57,99,103,140,142,178,9,9,9,10,66,67,3,5,126,150,41,79,8,1,2,9,9,9,9,9,9,9,10,11,12,13,13,13,13,14,15,16,16,16,17,18,18,18,19,20,21,22,22,22,22,23,24,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,66,66,66,67,67,68,69,70,71,72,73,74,75,75,75,75,76,76,77,78,79,80,80,80,81,82,83,84,84,84,84,85,86,87,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,105,105,105,105,105,106,107,108,109,110,111,111,111,111,111,112,113,114,115,116,116,116,116,116,117,118,119,120,121,121,121,121,121,122,123,124,125,126,127,127,127,128,129,130,130,130,130,130,130,130,130,131,132,133,134,3,3,5,5,135,350,136,137,138,138,138,138,139,139,139,139,140,141,142,143,144,145,146,147,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,184,185,185,186,187,188,189,190,191,192,53,36,90,94,99,100,101,102,103,119,124,126,138,184,42,151,68,74,79,188,192,72,9,10,66,67,174,10,17,21,76,78,89,90,91,95,96,97,98,99,100,101,102,103,106,107,108,113,114,117,119,122,124,126,138,169,185,189,190,43,94,152,25,41,44,67,147,38,126,150,191,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,350,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,18,18,18,18,186,184,186,93,94,100,110,129,18,18,33,35,39,41,47,64,104,184,172,28,29,32,18,55,149,45,147,87,128,77,86,159,74,79,81,85,150,74,53,174,15,46,174,47,68,74,79,188,192,48,95,115,120,125,154,171,96,74,49,40,70,183,50,97,81,38,54,98,113,128,158,159,169,175,71,163,164,19,14,9,10,77,130,131,132,133,134,3,5,135,9,29,32,62,38,38,38,126,150,191,74,14,20,25,36,50,51,60,81,126,150,156,162,179,191,0,0,0,9,10,13,14,15,16,17,19,20,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,131,132,133,134,3,5,135,136,138,143,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,166,167,184,185,187,188,189,190,191,0,9,11,11,136,136,0,11,0,11,184,21,11,0,0,0,21,131,145,26,9,10,41,45,72,147,168,175,180,181,183,13,11,14,15,25,52,57,81,136,157,173,178,180,192,11,83,23,25,0,52,157,173,58,54,126,50,128,91,108,57,56,87,28,29,32,96,184,128,94,97,55,89,91,95,98,99,101,102,104,112,113,114,115,117,118,119,120,122,124,125,140,147,149,9,10,130,131,132,133,134,3,5,135,129,92,112,118,123,8,1,2,9,9,9,10,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,66,67,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,130,131,131,132,132,133,133,134,134,3,3,5,5,135,135,136,138,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,67,135,0,74,109,158,98,113,145,99,140,11,169,130,131,132,133,134,3,5,100,43,53,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,9,10,3,5,8,1,2,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,138,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,0,131,132,133,134,3,5,135,11,136,94,100,101,104,106,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,350,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,350,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,59,50,21,37,61,78,89,98,102,113,117,122,124,164,181,189,192,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,350,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,74,74,102,114,119,124,153,182,103,142,20,9,63,94,100,126,150,104,131,132,133,134,135,135,126,150,90,141,21,89,90,91,92,96,97,98,99,100,101,102,103,104,112,113,114,122,123,124,138,0,74,83,64,148,152,161,166,65,0,0,227,227,228,227,228,228,228,228,228,228,228,227,228,228,228,227,228,228,228,227,227,228,228,228,228,228,228,227,228,227,228,227,228,0,351,351,351,6,0,0,0,6,223,0,0,0,0,0,0,0,232,235,232,233,240,234,235,232,233,240,234,232,233,234,233,234,234,232,233,0,232,235,232,233,234,232,232,234,234,232,235,232,233,240,234,234,235,232,233,240,234,234,234,234,232,232,234,234,220,232,223,240,223,223,232,235,232,232,232,232,234,232,234,233,234,232,234,235,232,233,240,234,235,232,233,240,234,235,232,233,240,234,0,352,248,0,0,0,0,0,0,0,0,248,241,245,250,246,247,213,214,248,241,245,250,246,247,213,214,248,241,241,245,246,247,213,248,241,245,246,247,213,248,241,241,241,241,241,241,241,245,250,246,247,213,214,248,241,241,241,241,241,241,245,250,246,247,213,214,248,241,241,241,245,250,246,247,213,214,241,248,248,241,241,241,241,241,241,245,250,246,247,213,214,241,248,245,250,246,247,213,214,245,250,246,247,213,214,241,241,241,241,241,241,241,248,248,241,241,241,245,250,246,247,213,214,241,248,241,245,246,247,213,248,241,248,241,241,245,250,246,247,213,214,248,241,245,250,246,247,213,214,248,241,245,250,246,247,213,214,248,248,248,0,353,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,206,299,301,304,305,306,308,310,311,313,314,318,321,323,326,329,330,333,336,341,342,344,206,299,301,304,305,306,308,310,311,313,314,318,321,323,326,329,330,333,336,341,342,344,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,345,346,347,348,206,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,206,252,253,254,255,256,257,258,259,260,261,204,262,263,264,265,266,207,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,202,203,285,286,205,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,0,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349,0,349,349],"fc":[],"p":[[3,"TypeGenerics",0],[3,"Turbofish",0],[3,"LitInt",0],[15,"str"],[3,"LitFloat",0],[6,"Result",3764],[8,"FromStr",6269],[3,"ImplGenerics",0],[3,"Ident",0],[3,"Lifetime",0],[3,"Attribute",0],[4,"AttrStyle",0],[4,"Meta",0],[3,"MetaList",0],[3,"MetaNameValue",0],[4,"NestedMeta",0],[3,"Variant",0],[4,"Fields",0],[3,"FieldsNamed",0],[3,"FieldsUnnamed",0],[3,"Field",0],[4,"Visibility",0],[3,"VisPublic",0],[3,"VisCrate",0],[3,"VisRestricted",0],[4,"Expr",0],[3,"ExprArray",0],[3,"ExprAssign",0],[3,"ExprAssignOp",0],[3,"ExprAsync",0],[3,"ExprAwait",0],[3,"ExprBinary",0],[3,"ExprBlock",0],[3,"ExprBox",0],[3,"ExprBreak",0],[3,"ExprCall",0],[3,"ExprCast",0],[3,"ExprClosure",0],[3,"ExprContinue",0],[3,"ExprField",0],[3,"ExprForLoop",0],[3,"ExprGroup",0],[3,"ExprIf",0],[3,"ExprIndex",0],[3,"ExprLet",0],[3,"ExprLit",0],[3,"ExprLoop",0],[3,"ExprMacro",0],[3,"ExprMatch",0],[3,"ExprMethodCall",0],[3,"ExprParen",0],[3,"ExprPath",0],[3,"ExprRange",0],[3,"ExprReference",0],[3,"ExprRepeat",0],[3,"ExprReturn",0],[3,"ExprStruct",0],[3,"ExprTry",0],[3,"ExprTryBlock",0],[3,"ExprTuple",0],[3,"ExprType",0],[3,"ExprUnary",0],[3,"ExprUnsafe",0],[3,"ExprWhile",0],[3,"ExprYield",0],[4,"Member",0],[3,"Index",0],[3,"MethodTurbofish",0],[4,"GenericMethodArgument",0],[3,"FieldValue",0],[3,"Label",0],[3,"Arm",0],[4,"RangeLimits",0],[3,"Generics",0],[4,"GenericParam",0],[3,"TypeParam",0],[3,"LifetimeDef",0],[3,"ConstParam",0],[3,"BoundLifetimes",0],[4,"TypeParamBound",0],[3,"TraitBound",0],[4,"TraitBoundModifier",0],[3,"WhereClause",0],[4,"WherePredicate",0],[3,"PredicateType",0],[3,"PredicateLifetime",0],[3,"PredicateEq",0],[4,"Item",0],[3,"ItemConst",0],[3,"ItemEnum",0],[3,"ItemExternCrate",0],[3,"ItemFn",0],[3,"ItemForeignMod",0],[3,"ItemImpl",0],[3,"ItemMacro",0],[3,"ItemMacro2",0],[3,"ItemMod",0],[3,"ItemStatic",0],[3,"ItemStruct",0],[3,"ItemTrait",0],[3,"ItemTraitAlias",0],[3,"ItemType",0],[3,"ItemUnion",0],[3,"ItemUse",0],[4,"UseTree",0],[3,"UsePath",0],[3,"UseName",0],[3,"UseRename",0],[3,"UseGlob",0],[3,"UseGroup",0],[4,"ForeignItem",0],[3,"ForeignItemFn",0],[3,"ForeignItemStatic",0],[3,"ForeignItemType",0],[3,"ForeignItemMacro",0],[4,"TraitItem",0],[3,"TraitItemConst",0],[3,"TraitItemMethod",0],[3,"TraitItemType",0],[3,"TraitItemMacro",0],[4,"ImplItem",0],[3,"ImplItemConst",0],[3,"ImplItemMethod",0],[3,"ImplItemType",0],[3,"ImplItemMacro",0],[3,"Signature",0],[4,"FnArg",0],[3,"Receiver",0],[3,"File",0],[4,"Lit",0],[3,"LitStr",0],[3,"LitByteStr",0],[3,"LitByte",0],[3,"LitChar",0],[3,"LitBool",0],[3,"Macro",0],[4,"MacroDelimiter",0],[3,"DeriveInput",0],[4,"Data",0],[3,"DataStruct",0],[3,"DataEnum",0],[3,"DataUnion",0],[4,"BinOp",0],[4,"UnOp",0],[3,"Block",0],[4,"Stmt",0],[3,"Local",0],[4,"Type",0],[3,"TypeArray",0],[3,"TypeBareFn",0],[3,"TypeGroup",0],[3,"TypeImplTrait",0],[3,"TypeInfer",0],[3,"TypeMacro",0],[3,"TypeNever",0],[3,"TypeParen",0],[3,"TypePath",0],[3,"TypePtr",0],[3,"TypeReference",0],[3,"TypeSlice",0],[3,"TypeTraitObject",0],[3,"TypeTuple",0],[3,"Abi",0],[3,"BareFnArg",0],[3,"Variadic",0],[4,"ReturnType",0],[4,"Pat",0],[3,"PatBox",0],[3,"PatIdent",0],[3,"PatLit",0],[3,"PatMacro",0],[3,"PatOr",0],[3,"PatPath",0],[3,"PatRange",0],[3,"PatReference",0],[3,"PatRest",0],[3,"PatSlice",0],[3,"PatStruct",0],[3,"PatTuple",0],[3,"PatTupleStruct",0],[3,"PatType",0],[3,"PatWild",0],[3,"FieldPat",0],[3,"Path",0],[3,"PathSegment",0],[4,"PathArguments",0],[4,"GenericArgument",0],[3,"AngleBracketedGenericArguments",0],[3,"Binding",0],[3,"Constraint",0],[3,"ParenthesizedGenericArguments",0],[3,"QSelf",0],[15,"tuple"],[4,"Ordering",6270],[15,"bool"],[8,"AsRef",6271],[8,"Sized",6272],[3,"Formatter",6273],[3,"Error",6273],[4,"Result",6274],[6,"Result",6273],[3,"SelfType",4022],[3,"SelfValue",4022],[3,"Crate",4022],[3,"Super",4022],[3,"Underscore",4022],[3,"Extern",4022],[15,"usize"],[3,"Literal",6275],[8,"Into",6271],[4,"Option",6276],[8,"Hasher",6277],[3,"Iter",3861],[3,"IterMut",3861],[3,"Span",6275],[15,"u8"],[15,"slice"],[15,"char"],[3,"TokenStream",6278],[8,"Parse",3764],[6,"ParseStream",3764],[3,"TokenStream",6275],[8,"Parser",3764],[3,"Vec",6279],[3,"String",6280],[3,"TypeId",6281],[3,"TokenBuffer",3725],[3,"Cursor",3725],[4,"Delimiter",6275],[3,"Punct",6275],[4,"TokenTree",6275],[3,"ParseBuffer",3764],[3,"StepCursor",3764],[3,"Error",3764],[3,"Lookahead1",3764],[8,"Display",6273],[8,"IntoIterator",6282],[3,"LexError",6275],[8,"ToTokens",6283],[3,"Nothing",3764],[3,"Punctuated",3861],[8,"Peek",3764],[8,"FnOnce",6284],[8,"Clone",6285],[3,"Pairs",3861],[3,"IntoPairs",3861],[3,"IntoIter",3861],[4,"Pair",3861],[8,"Default",6286],[3,"PairsMut",3861],[8,"Token",4022],[3,"Abstract",4022],[3,"As",4022],[3,"Async",4022],[3,"Auto",4022],[3,"Await",4022],[3,"Become",4022],[3,"Box",4022],[3,"Break",4022],[3,"Const",4022],[3,"Continue",4022],[3,"Default",4022],[3,"Do",4022],[3,"Dyn",4022],[3,"Else",4022],[3,"Enum",4022],[3,"Final",4022],[3,"Fn",4022],[3,"For",4022],[3,"If",4022],[3,"Impl",4022],[3,"In",4022],[3,"Let",4022],[3,"Loop",4022],[3,"Macro",4022],[3,"Match",4022],[3,"Mod",4022],[3,"Move",4022],[3,"Mut",4022],[3,"Override",4022],[3,"Priv",4022],[3,"Pub",4022],[3,"Ref",4022],[3,"Return",4022],[3,"Static",4022],[3,"Struct",4022],[3,"Trait",4022],[3,"Try",4022],[3,"Type",4022],[3,"Typeof",4022],[3,"Union",4022],[3,"Unsafe",4022],[3,"Unsized",4022],[3,"Use",4022],[3,"Virtual",4022],[3,"Where",4022],[3,"While",4022],[3,"Yield",4022],[3,"Add",4022],[3,"AddEq",4022],[3,"And",4022],[3,"AndAnd",4022],[3,"AndEq",4022],[3,"At",4022],[3,"Bang",4022],[3,"Caret",4022],[3,"CaretEq",4022],[3,"Colon",4022],[3,"Colon2",4022],[3,"Comma",4022],[3,"Div",4022],[3,"DivEq",4022],[3,"Dollar",4022],[3,"Dot",4022],[3,"Dot2",4022],[3,"Dot3",4022],[3,"DotDotEq",4022],[3,"Eq",4022],[3,"EqEq",4022],[3,"Ge",4022],[3,"Gt",4022],[3,"Le",4022],[3,"Lt",4022],[3,"MulEq",4022],[3,"Ne",4022],[3,"Or",4022],[3,"OrEq",4022],[3,"OrOr",4022],[3,"Pound",4022],[3,"Question",4022],[3,"RArrow",4022],[3,"LArrow",4022],[3,"Rem",4022],[3,"RemEq",4022],[3,"FatArrow",4022],[3,"Semi",4022],[3,"Shl",4022],[3,"ShlEq",4022],[3,"Shr",4022],[3,"ShrEq",4022],[3,"Star",4022],[3,"Sub",4022],[3,"SubEq",4022],[3,"Tilde",4022],[3,"Brace",4022],[3,"Bracket",4022],[3,"Paren",4022],[3,"Group",4022],[8,"VisitMut",5707],[4,"StrStyle",0],[8,"IdentExt",3760],[8,"Speculative",3859],[8,"Spanned",4020]]},\
"tempfile":{"doc":"Temporary files and directories.","t":"DDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFLFLFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Builder","NamedTempFile","PathPersistError","PersistError","SpooledTempFile","TempDir","TempPath","append","as_fd","as_file","as_file_mut","as_raw_fd","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","close","close","close","default","deref","drop","drop","eq","equivalent","error","error","file","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_parts","from_path","into","into","into","into","into","into","into","into_file","into_inner","into_parts","into_path","into_temp_path","is_rolled","keep","keep","make","make_in","new","new","new","new","new_in","new_in","path","path","path","persist","persist","persist_noclobber","persist_noclobber","prefix","rand_bytes","read","read","read","read_exact","read_exact","read_exact","read_to_end","read_to_end","read_to_end","read_to_string","read_to_string","read_to_string","read_vectored","read_vectored","read_vectored","reopen","roll","seek","seek","seek","set_len","source","source","spooled_tempfile","suffix","tempdir","tempdir","tempdir_in","tempdir_in","tempfile","tempfile","tempfile_in","tempfile_in","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_prefix","with_prefix","with_prefix_in","with_prefix_in","write","write","write","write_all","write_all","write_fmt","write_fmt","write_vectored","write_vectored","write_vectored"],"q":[[0,"tempfile"],[170,"std::os::fd::owned"],[171,"std::os::fd::owned"],[172,"std::os::fd::raw"],[173,"std::ffi::os_str"],[174,"std::io::error"],[175,"std::fs"],[176,"std::io"],[177,"core::fmt"],[178,"core::fmt"],[179,"core::result"],[180,"core::ops::function"],[181,"core::convert"],[182,"std::io"],[183,"alloc::string"],[184,"std::io"],[185,"core::option"],[186,"core::any"],[187,"core::fmt"]],"d":["Create a new temporary file or directory with custom …","A named temporary file.","Error returned when persisting a temporary file path fails.","Error returned when persisting a temporary file fails.","An object that behaves like a regular temporary file, but …","A directory in the filesystem that is automatically …","A path to a named temporary file without an open file …","Set the file to be opened in append mode.","","Get a reference to the underlying file.","Get a mutable reference to the underlying file.","","","","","","","","","","","","","","","","","","","","","","Closes and removes the temporary directory, returning a …","Close and remove the temporary file.","Close and remove the temporary file.","","","","","","","The underlying IO error.","The underlying IO error.","The temporary file that couldn’t be persisted.","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>NamedTempFile</code> from its constituent parts.","Create a new TempPath from an existing path. This can be …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the temporary file into a <code>std::fs::File</code>.","Consumes and returns the inner <code>SpooledData</code> type.","Converts the named temporary file into its constituent …","Persist the temporary directory to disk, returning the …","Closes the file, leaving only the temporary file path.","Returns true if the file has been rolled over to disk.","Keep the temporary file from being deleted. This function …","Keep the temporary file from being deleted. This function …","Attempts to create a temporary file (or file-like object) …","This is the same as <code>Builder::make</code>, except <code>dir</code> is used as …","Attempts to make a temporary directory inside of …","Create a new named temporary file.","","Create a new <code>Builder</code>.","Attempts to make a temporary directory inside of <code>dir</code>. The …","Create a new named temporary file in the specified …","Accesses the <code>Path</code> to the temporary directory.","Get the temporary file’s path.","The temporary file path that couldn’t be persisted.","Persist the temporary file at the target path.","Persist the temporary file at the target path.","Persist the temporary file at the target path if and only …","Persist the temporary file at the target path if and only …","Set a custom filename prefix.","Set the number of random bytes.","","","","","","","","","","","","","","","","Securely reopen the temporary file.","Rolls over to a file on disk, regardless of current size. …","","","","","","","Create a new spooled temporary file.","Set a custom filename suffix.","Create a new temporary directory.","Attempts to make a temporary directory inside of …","Create a new temporary directory in a specific directory.","Attempts to make a temporary directory inside of <code>dir</code>. The …","Create a new temporary file.","Create the named temporary file.","Create a new temporary file in the specified directory.","Create the named temporary file in the specified directory.","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to make a temporary directory with the specified …","Create a new named temporary file with the specified …","Attempts to make a temporary directory with the specified …","Create a new named temporary file with the specified …","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,3,3,3,3,8,10,10,3,8,10,3,19,20,16,1,8,10,3,19,20,16,1,1,1,8,10,3,1,10,8,10,1,1,19,20,19,3,3,16,8,10,3,19,19,20,20,16,1,8,10,10,3,3,19,20,16,1,3,10,8,10,3,19,20,16,1,3,16,3,8,3,16,10,3,1,1,8,3,16,1,8,3,8,3,20,10,3,10,3,1,1,3,3,16,3,3,16,3,3,16,3,3,16,3,3,16,3,16,3,3,16,16,19,20,0,1,0,1,0,1,0,1,0,1,1,19,20,8,10,3,19,20,16,1,8,10,3,19,20,16,1,8,10,3,19,20,16,1,8,3,8,3,3,3,16,3,3,3,3,3,3,16],"f":[0,0,0,0,0,0,0,[[1,2],1],[[[3,[-1]]],4,5],[[[3,[-1]]],-1,[]],[[[3,[-1]]],-1,[]],[[[3,[-1]]],6,7],[8,9],[10,11],[10,9],[[[3,[-1]]],9,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],12,[],[]],[8,[[13,[12]]]],[10,[[13,[12]]]],[[[3,[-1]]],[[13,[12]]],[]],[[],1],[10,9],[8,12],[10,12],[[1,1],2],[[-1,-2],2,[],[]],0,0,0,[[[3,[14]]],[[13,[12]]]],[[[3,[-1]]],[[13,[12]]],15],[16,[[13,[12]]]],[[8,17],18],[[10,17],18],[[[3,[-1]],17],18,[]],[[[19,[-1]],17],18,[]],[[[19,[-1]],17],18,[]],[[20,17],18],[[20,17],18],[[16,17],18],[[1,17],18],[-1,-1,[]],[20,10],[-1,-1,[]],[[[19,[-1]]],[[3,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,10],[[3,[-1]]],[]],[-1,10,[[22,[21]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]]],-1,[]],0,[[[3,[-1]]],[[12,[-1,10]]],[]],[8,21],[[[3,[-1]]],10,[]],[16,2],[10,[[23,[21,20]]]],[[[3,[-1]]],[[23,[[12,[-1,21]],[19,[-1]]]]],[]],[[1,-1],[[13,[[3,[-2]]]]],24,[]],[[1,-1,-2],[[13,[[3,[-3]]]]],[[25,[9]]],24,[]],[[],[[13,[8]]]],[[],[[13,[3]]]],[26,16],[[],1],[-1,[[13,[8]]],[[25,[9]]]],[-1,[[13,[3]]],[[25,[9]]]],[8,9],[[[3,[-1]]],9,[]],0,[[10,-1],[[23,[12,20]]],[[25,[9]]]],[[[3,[-1]],-2],[[23,[-1,[19,[-1]]]]],[],[[25,[9]]]],[[10,-1],[[23,[12,20]]],[[25,[9]]]],[[[3,[-1]],-2],[[23,[-1,[19,[-1]]]]],[],[[25,[9]]]],[[1,-1],1,[[25,[11]],27]],[[1,26],1],[[[3,[14]],[29,[28]]],[[13,[26]]]],[[[3,[-1]],[29,[28]]],[[13,[26]]],30],[[16,[29,[28]]],[[13,[26]]]],[[[3,[-1]],[29,[28]]],[[13,[12]]],30],[[[3,[14]],[29,[28]]],[[13,[12]]]],[[16,[29,[28]]],[[13,[12]]]],[[[3,[-1]],[31,[28]]],[[13,[26]]],30],[[[3,[14]],[31,[28]]],[[13,[26]]]],[[16,[31,[28]]],[[13,[26]]]],[[[3,[14]],32],[[13,[26]]]],[[[3,[-1]],32],[[13,[26]]],30],[[16,32],[[13,[26]]]],[[[3,[-1]],[29,[33]]],[[13,[26]]],30],[[[3,[14]],[29,[33]]],[[13,[26]]]],[[16,[29,[33]]],[[13,[26]]]],[[[3,[14]]],[[13,[14]]]],[16,[[13,[12]]]],[[[3,[14]],34],[[13,[35]]]],[[[3,[-1]],34],[[13,[35]]],36],[[16,34],[[13,[35]]]],[[16,35],[[23,[12,37]]]],[[[19,[-1]]],[[39,[38]]],[]],[20,[[39,[38]]]],[26,16],[[1,-1],1,[[25,[11]],27]],[[],[[13,[8]]]],[1,[[13,[8]]]],[-1,[[13,[8]]],[[25,[9]]]],[[1,-1],[[13,[8]]],[[25,[9]]]],[[],[[13,[14]]]],[1,[[13,[3]]]],[-1,[[13,[14]]],[[25,[9]]]],[[1,-1],[[13,[3]]],[[25,[9]]]],[-1,-2,[],[]],[-1,32,[]],[-1,32,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,[[13,[8]]],[[25,[11]]]],[-1,[[13,[3]]],[[25,[11]]]],[[-1,-2],[[13,[8]]],[[25,[11]]],[[25,[9]]]],[[-1,-2],[[13,[3]]],[[25,[11]]],[[25,[9]]]],[[[3,[-1]],[29,[28]]],[[13,[26]]],15],[[[3,[14]],[29,[28]]],[[13,[26]]]],[[16,[29,[28]]],[[13,[26]]]],[[[3,[14]],[29,[28]]],[[13,[12]]]],[[[3,[-1]],[29,[28]]],[[13,[12]]],15],[[[3,[-1]],41],[[13,[12]]],15],[[[3,[14]],41],[[13,[12]]]],[[[3,[14]],[29,[42]]],[[13,[26]]]],[[[3,[-1]],[29,[42]]],[[13,[26]]],15],[[16,[29,[42]]],[[13,[26]]]]],"c":[],"p":[[3,"Builder",0],[15,"bool"],[3,"NamedTempFile",0],[3,"BorrowedFd",170],[8,"AsFd",170],[6,"RawFd",171],[8,"AsRawFd",171],[3,"TempDir",0],[3,"Path",172],[3,"TempPath",0],[3,"OsStr",173],[15,"tuple"],[6,"Result",174],[3,"File",175],[8,"Write",176],[3,"SpooledTempFile",0],[3,"Formatter",177],[6,"Result",177],[3,"PersistError",0],[3,"PathPersistError",0],[3,"PathBuf",172],[8,"Into",178],[4,"Result",179],[8,"FnMut",180],[8,"AsRef",178],[15,"usize"],[8,"Sized",181],[15,"u8"],[15,"slice"],[8,"Read",176],[3,"Vec",182],[3,"String",183],[3,"IoSliceMut",176],[4,"SeekFrom",176],[15,"u64"],[8,"Seek",176],[3,"Error",174],[8,"Error",184],[4,"Option",185],[3,"TypeId",186],[3,"Arguments",177],[3,"IoSlice",176]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FF","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[15,"char"],[15,"bool"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
