initSidebarItems({"externcrate":[["macros",""]],"macro":[["Image","A macro for creating SPIR-V `OpTypeImage` types. Always produces a `spirv_std::image::Image<...>` type."],["ray_query","Constructs an uninitialized ray query variable. Using the syntax `let (mut)? <name>`. Where `name` is the name of the ray query variable."]],"mod":[["arch","SPIR-V Instrinics"],["byte_addressable_buffer","Container for an untyped blob of data."],["float","Traits and helper functions related to floats."],["image","Image types"],["integer","Traits related to integers."],["memory","Types for handling memory ordering constraints for concurrent memory access."],["number","Traits and helper functions related to numbers."],["ray_tracing","Ray-tracing data types"],["scalar","Traits related to scalars."],["vector","Traits related to vectors."]],"struct":[["RuntimeArray","Dynamically-sized arrays in Rust carry around their length as the second half of a tuple. Unfortunately, sometimes SPIR-V provides an unsized array with no way of obtaining its length. Hence, this type represents something very similar to a slice, but with no way of knowing its length."],["Sampler","An opaque reference to settings that describe how to access, filter, or sample an image."]]});